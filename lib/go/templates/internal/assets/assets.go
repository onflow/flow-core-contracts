// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/idTable/change_initial_weight.cdc (832B)
// ../../../transactions/idTable/create_node.cdc (911B)
// ../../../transactions/idTable/get_current_table.cdc (229B)
// ../../../transactions/idTable/get_node_initial_weight.cdc (447B)
// ../../../transactions/idTable/get_node_networking_addr.cdc (463B)
// ../../../transactions/idTable/get_node_networking_key.cdc (455B)
// ../../../transactions/idTable/get_node_role.cdc (435B)
// ../../../transactions/idTable/get_node_staking_key.cdc (445B)
// ../../../transactions/idTable/get_previous_table.cdc (239B)
// ../../../transactions/idTable/get_proposed_table.cdc (243B)
// ../../../transactions/idTable/remove_node.cdc (597B)
// ../../../transactions/idTable/update_table.cdc (713B)
// ../../../transactions/inspect_field.cdc (122B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TransactionsIdtableChange_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x4e\x10\xc5\xef\xfa\x14\x8f\x1c\xfe\x38\x10\xac\xff\xa1\xf4\x60\xda\x06\xb7\x76\x41\x10\x7a\x88\x1d\x4a\x8f\xe3\xd5\x48\xda\xb2\x9e\x11\xab\x51\x94\x50\xf2\xdd\x8b\xb4\xb1\x1b\xa5\xe9\x9c\xc4\xcc\xdb\x37\xbf\x99\x91\x3f\xb6\x1a\x0d\x5f\x83\x0e\x45\xc9\x62\xde\x1e\xf7\x74\x08\x8c\x2a\xea\x11\xff\x3f\x14\x9b\xed\xb7\x7d\xb1\xff\xb1\x5f\x7f\xbe\xd9\xae\x37\x9b\xdb\xed\x6e\x97\x65\x79\x8e\x7d\xe3\x3b\x58\x24\xe9\xc8\x99\x57\x81\xa3\x10\x3a\x58\xc3\xa8\x7a\x49\x29\x6b\xc8\x40\x5d\xe7\x6b\x49\x95\x36\x6a\xab\x1d\x97\xf0\xcf\xbd\x60\x63\xb3\xd1\xcf\x74\x52\xb8\x3e\x46\x16\x4b\xf9\x2b\x90\x94\x33\x83\x59\xf9\xf4\xa6\x8d\x7c\xef\xb5\xef\xfe\x98\x15\x86\xc1\x87\x00\x95\xf0\x88\x03\x4f\x6c\x5c\x82\x6c\xd2\x1f\xb8\xf6\x22\x5e\x6a\x68\x05\x82\xf0\x00\x6e\xd5\x35\x59\xf6\x62\x9e\x85\x2f\x57\xd8\x59\xf4\x52\x5f\x8d\x92\xef\xec\xeb\xc6\x56\xb8\x2b\xc4\xde\xbf\xbb\xc4\xaf\x2c\x03\x80\x3c\xc7\x8d\x3a\x0a\xb8\xa7\xe8\xd3\xe2\x34\x82\x10\xb9\xe2\xc8\xe2\xce\x90\xc5\x06\x69\xb1\xeb\xf2\xe8\x05\x7a\xf8\xc9\xce\x26\x8b\xc0\x06\x1a\x93\xb7\x5c\xad\xf0\xdf\x5f\xa7\x58\x4e\x2f\x52\xbb\x36\x72\x4b\x91\x17\xe4\x9c\xad\xb0\xee\xad\x59\x3b\xa7\xbd\xd8\x08\x84\xe7\xc8\x73\x1c\x34\x46\x1d\xde\xe2\xa0\xd7\xed\xc7\xe8\x38\x54\xcb\x13\x03\x3e\x62\xb4\x5f\x26\x8f\x0f\xff\x02\xfa\xb4\x18\x7f\x91\x15\xf2\xce\x34\x52\xcd\x79\xf5\x5a\x37\xc9\x2e\xcf\x4d\xc6\xb8\xbe\x46\x4b\xe2\xdd\xe2\xe2\x8b\xf6\xa1\x84\xa8\x9d\x58\x67\xa4\xe7\x6d\x4d\x50\x17\xc9\xe4\x29\xed\x80\x1f\xd8\xf5\xc6\xf3\x81\xef\x3a\x7e\x31\xde\xcc\xab\x6f\x4b\xb2\x54\x1d\xa6\x23\xbe\x3d\xf6\x32\xe9\x0a\xf1\xe6\x29\xa4\x73\x2f\x7c\x39\x3b\xfe\xf9\xf3\x04\xf4\xf4\x3b\x00\x00\xff\xff\x57\x7b\x58\x01\x40\x03\x00\x00"

func TransactionsIdtableChange_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableChange_initial_weightCdc,
		"../../../transactions/idTable/change_initial_weight.cdc",
	)
}

func TransactionsIdtableChange_initial_weightCdc() (*asset, error) {
	bytes, err := TransactionsIdtableChange_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/change_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x98, 0x3c, 0xdd, 0x1f, 0xa2, 0x27, 0xec, 0x2f, 0xb2, 0x98, 0x8c, 0x11, 0xbf, 0x11, 0x3a, 0x2, 0xac, 0x95, 0x1, 0x76, 0x2c, 0x2e, 0xbc, 0x8d, 0xc4, 0x36, 0x2d, 0x81, 0x90, 0x39, 0x24}}
	return a, nil
}

var _TransactionsIdtableCreate_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xd1\x6a\xdb\x40\x10\x7c\xd7\x57\x0c\x79\x28\x36\x04\xab\x0f\xa5\x14\xd1\x34\xa8\xb5\x0b\xa2\x21\x94\x58\xa5\xf4\xf1\x7c\xb7\xb2\xaf\x95\xef\xc4\xde\xaa\x4a\x28\xf9\xf7\x72\x92\x15\xc7\x91\xb3\x0f\x42\xb7\xb7\x37\x3b\x33\x8c\xdd\x37\x9e\x05\x5f\x6b\xdf\x15\x86\x9c\x58\x79\x28\xd5\xa6\x26\x54\xec\xf7\x78\x7b\x5f\x2c\x57\xb7\x65\x51\xfe\x2a\xf3\xcf\x37\xab\x7c\xb9\xbc\x5b\xad\xd7\x49\x92\xa6\x28\x77\x36\x40\x58\xb9\xa0\xb4\x58\xef\xa0\x99\x94\x50\x80\x82\xa3\x0e\xce\x1b\x42\x10\x6e\xb5\xc0\x6f\x7e\x93\x96\xf8\x48\x39\x83\xb6\x31\xfd\x9c\xec\x08\x0d\xfb\xc6\x07\x32\x18\x77\xa3\x5f\x9e\x24\xcf\x80\x67\xd6\x64\x58\x0b\x5b\xb7\xbd\x04\xfb\x9a\x32\xfc\x28\x9c\x7c\xb8\x84\x23\xe9\x3c\xff\xb1\x6e\x9b\x1b\xc3\x14\xc2\x71\xee\x78\xf5\x8d\x1e\x8e\xed\x20\x6a\xd2\xb3\xce\x8a\x55\xf5\x4f\xb2\xdb\x9d\x0c\xd8\xef\xdf\xcd\xf1\x2f\x49\x00\x20\x4d\x71\xe3\xb5\xaa\xf1\x57\xb1\x1d\x8c\xf1\x0c\x05\xa6\x8a\x98\x9c\x26\x88\xef\xa5\x14\xcb\x81\x3b\x72\xb3\xb7\x6e\xd4\x1c\x21\x6a\x12\xa8\xd8\xbc\xa3\x2a\xc3\x9b\x89\xd5\x8b\xfe\xc5\xb0\xae\x61\x6a\x14\xd3\x4c\x69\x2d\x19\xf2\x56\x76\xb9\xd6\xbe\x75\x12\x09\xe1\x50\x69\x8a\x8d\x67\xf6\xdd\x39\x1e\xea\xe5\xfa\x58\x81\xea\x6a\x31\x72\xc0\x15\x22\xfc\x62\xc0\xf8\xf8\x1a\xa1\x4f\xb3\x18\x81\x0c\x69\x10\xcf\x6a\x4b\x69\xf5\x72\xae\x1f\x9b\x3f\x2d\x89\x75\x7d\x8d\x46\x39\xab\x67\x17\x5f\x7c\x5b\x1b\x38\x2f\x23\xd7\x13\xa6\x4f\x6e\xf5\xa4\x2e\x06\x90\xc7\xc1\x03\xba\x27\xdd\x0a\x3d\x13\x1c\x1d\x74\xd4\xdd\xc6\x4c\x5d\x4d\xb3\xba\x88\x17\x7d\x4c\xac\x19\x23\x12\xbf\x67\x13\x32\x69\x4d\xc2\x72\x72\x3c\xcd\xcc\xf1\x7f\x92\x9b\x93\xe3\x3c\x39\x6f\xfd\x42\x19\xf3\xfd\x90\xf9\x9e\xf4\x41\xd5\xa8\xff\xf1\x7f\x00\x00\x00\xff\xff\xbf\x30\xe8\xca\x8f\x03\x00\x00"

func TransactionsIdtableCreate_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableCreate_nodeCdc,
		"../../../transactions/idTable/create_node.cdc",
	)
}

func TransactionsIdtableCreate_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtableCreate_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/create_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x56, 0x70, 0xb4, 0x1d, 0xfe, 0xf7, 0x16, 0x79, 0x9, 0x45, 0xad, 0x7d, 0x46, 0x98, 0x44, 0xce, 0xae, 0xa1, 0xb4, 0xe0, 0xc8, 0x91, 0xbb, 0xb6, 0xe3, 0x3, 0xb, 0x23, 0x3d, 0x1e, 0xb0}}
	return a, nil
}

var _TransactionsIdtableGet_current_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3f\x4f\x86\x30\x10\xc7\xf1\xbd\xaf\xe2\x37\x3e\x2c\xe0\x6c\xe2\x80\x82\x49\x13\xc3\x20\x5d\x1c\xf9\x73\x40\x63\xb9\x92\xf6\x1a\x25\xc6\xf7\x6e\x02\xc4\xe5\xd9\xef\x3e\xbf\xaf\x5d\x37\x1f\x04\xaf\xce\x7f\xe9\x91\x58\xac\xec\xa6\xeb\x1d\x61\x0a\x7e\xc5\xc3\xb7\xae\xea\xc6\x68\xf3\x61\xca\xe7\xb7\xba\xac\xaa\xf7\xba\x6d\x95\x2a\x0a\x98\xc5\x46\xc4\x21\xd8\x4d\x10\x48\x52\xe0\x08\x59\x08\x43\x0a\x81\x58\x60\x2f\x0d\x72\x70\x8e\x78\x96\x45\xa9\x2d\xf5\x98\x12\x63\xed\x2c\xdf\xb2\x47\x68\x16\xfc\x28\x00\x70\x24\x60\x3f\x92\xe6\xc9\xe3\xe9\xbe\x28\x9f\x49\x4a\xe7\x5e\x4e\xbf\xb9\x2e\x6f\x99\x3a\xbe\xcf\x84\x7f\x20\xff\xa4\x3d\xe6\xd7\xe8\xef\x5f\x00\x00\x00\xff\xff\xd4\x94\xe6\xa5\xe5\x00\x00\x00"

func TransactionsIdtableGet_current_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_current_tableCdc,
		"../../../transactions/idTable/get_current_table.cdc",
	)
}

func TransactionsIdtableGet_current_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_current_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_current_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x1d, 0x51, 0x14, 0x14, 0x54, 0xb1, 0xec, 0x8d, 0xdf, 0x4f, 0x52, 0x45, 0xa6, 0x21, 0xbb, 0x14, 0xab, 0xff, 0xb4, 0x70, 0xe, 0xf1, 0xb8, 0x5a, 0xe2, 0x10, 0x5f, 0xf, 0x3b, 0x7b, 0x3d}}
	return a, nil
}

var _TransactionsIdtableGet_node_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xea\x40\x14\x86\xf7\xf9\x15\x2f\xae\x14\x44\xef\xe2\x72\x17\x82\x48\xae\x49\x31\x50\xac\x34\x29\x45\x4a\x21\x31\x39\x31\x07\x26\x33\x61\xe6\xa4\x5a\xc4\xff\x5e\x12\x43\x3f\xe8\xec\x86\xf3\x7e\xf1\x70\xdd\x18\x2b\xb8\x53\xe6\x14\x15\xa4\x85\xe5\x3d\xc9\x0e\x8a\x50\x5a\x53\xe3\xcf\x39\x0a\xc2\x6d\x12\x25\xfb\xc4\xff\x7f\x1f\xfa\x41\xf0\x18\xc6\xb1\xe7\xcd\xe7\x48\x2a\x76\x70\xb9\xe5\x46\x60\x49\x5a\xab\x1d\xa4\x22\xb0\x66\xe1\x4c\xe1\x44\x7c\xac\x04\xa6\x44\x06\x6d\x0a\xea\x3c\x7b\xd3\xa2\x6e\x9d\xa0\x64\xa5\xc0\x1a\xe9\x25\xdc\x3d\xac\x37\xbb\x8d\x1f\x87\xd7\x14\x27\x96\x0a\x9d\x30\x5d\xb7\xd6\x92\x96\x74\x8a\x74\x67\xe9\x8d\x4d\xeb\xd2\x29\x8c\xed\xbe\xa6\x31\x8e\x8a\x41\xdd\x55\xe6\xc6\x5a\xca\x05\x4d\x95\x39\xf2\xbc\xa6\x3d\xa0\x6c\x35\xea\x8c\xf5\xb8\xab\x8e\x82\x05\x62\xb1\xac\x8f\x93\x05\x9e\x22\x2d\xff\xfe\xe2\xe2\x01\x80\x22\xe9\xc7\x45\xba\x34\x58\xfe\xa6\x30\x3b\x92\xf8\x4a\x7d\x5f\xb9\x1d\xe4\xe3\x89\xf7\x23\x02\xcb\xcf\xa4\x97\x5b\xe9\x6b\x7f\xef\xde\x6a\x85\x26\xd3\x9c\x8f\x47\x9d\xfb\x6b\xb8\x6b\x28\xe7\x92\xa9\xb8\x59\x03\x14\x86\x1c\xb4\x11\xd0\x99\x9d\x8c\x86\x8a\x1b\xde\x5e\x33\x1b\xf0\x3e\xf7\x74\xbd\xeb\x47\x00\x00\x00\xff\xff\x57\x5f\x36\xd3\xbf\x01\x00\x00"

func TransactionsIdtableGet_node_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_initial_weightCdc,
		"../../../transactions/idTable/get_node_initial_weight.cdc",
	)
}

func TransactionsIdtableGet_node_initial_weightCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xfa, 0xff, 0xfd, 0x23, 0xe8, 0x91, 0x89, 0x79, 0xd8, 0x2, 0x50, 0x6d, 0xef, 0x87, 0x9e, 0xb9, 0x18, 0x14, 0x9c, 0x22, 0x27, 0x46, 0xc6, 0x6d, 0xe8, 0xf4, 0xf2, 0xd2, 0x4e, 0x80, 0x14}}
	return a, nil
}

var _TransactionsIdtableGet_node_networking_addrCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x6b\xe2\x50\x14\xdd\xe7\x57\x1c\x5c\x29\x88\xce\x7a\x40\x24\x63\x32\x18\x18\x1c\x69\xb2\x91\x52\x48\x4c\x6e\xcc\xa5\xc9\xbb\xe1\xbd\x9b\x6a\x11\xff\x7b\x49\xb4\xda\xd2\xb7\x3a\x8f\x7b\xbe\x38\xdc\xb4\x62\x15\x7f\x6b\x39\x46\x05\x19\x65\x7d\x4f\xb2\x7d\x4d\x28\xad\x34\xf8\x75\x8a\x82\x70\x93\x44\xc9\x2e\xf1\xff\xfc\x0b\xfd\x20\x78\x0a\xe3\xd8\xf3\xe6\x73\x24\x15\x3b\xb8\xdc\x72\xab\xb0\xa4\x9d\x35\x0e\x5a\x11\x0c\xe9\x51\xec\x2b\x9b\x03\xfc\xa2\xb0\xe4\x1c\xa4\x44\x06\x23\x05\xf5\xba\x9d\x74\x68\x3a\xa7\x28\xb9\xae\xc1\x06\xe9\x39\xdc\xfe\x5f\xad\xb7\x6b\x3f\x0e\x2f\x29\x8e\xac\x15\x7a\x62\xba\xea\xac\x25\xa3\xe9\x14\xe9\xd6\xd2\x1b\x4b\xe7\xd2\x29\xc4\xf6\x5f\x69\xc5\x51\x71\x63\xf7\xb1\xb9\x58\x4b\xb9\xa2\xad\x32\x47\x9e\xd7\x76\x7b\x94\x9d\x41\x93\xb1\x19\xf7\xd1\x51\xf0\x1b\xb1\x5a\x36\x87\xc9\x27\xc0\xd9\x03\x80\x9a\x74\x28\x17\x99\x52\xb0\xf8\xb9\xc4\xec\x40\xea\xd7\xf5\xd7\x96\x9b\x1b\x7d\x3c\xf1\xbe\x59\x60\x71\x77\x7a\xbe\x86\xbe\x0c\xf7\xfe\x2d\x97\x68\x33\xc3\xf9\x78\xd4\xab\x1f\xc5\x5d\x4b\x39\x97\x4c\xc5\x55\x1a\xa0\x10\x72\x30\xa2\xa0\x13\x3b\x1d\x4d\xee\x0e\x03\xb8\x4e\x3d\x70\x67\x8f\xa9\x6f\x4b\x7b\x97\x8f\x00\x00\x00\xff\xff\xe8\xa9\x60\xe3\xcf\x01\x00\x00"

func TransactionsIdtableGet_node_networking_addrCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_networking_addrCdc,
		"../../../transactions/idTable/get_node_networking_addr.cdc",
	)
}

func TransactionsIdtableGet_node_networking_addrCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_networking_addrCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_networking_addr.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x1, 0x91, 0x8c, 0xea, 0x8, 0xd8, 0x22, 0x66, 0x36, 0xe1, 0x78, 0x57, 0x1b, 0xcc, 0x5d, 0xb3, 0xa1, 0x11, 0xf1, 0x54, 0x8c, 0xee, 0xa6, 0x3, 0x49, 0xdf, 0xf9, 0x11, 0xf7, 0x7b, 0x12}}
	return a, nil
}

var _TransactionsIdtableGet_node_networking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\xab\xda\x40\x14\xdd\xe7\x57\x1c\x5c\x29\x88\x76\x5d\x10\x49\x4d\x8a\xa1\xc5\x4a\x93\x8d\x94\x42\x62\x72\x63\x2e\x26\x73\xc3\xcc\x4d\x55\xc4\xff\x5e\x12\x7d\xfa\x1e\x6f\x56\x67\xb8\xe7\x8b\xc3\x4d\x2b\x56\xf1\xbd\x96\x53\x54\x90\x51\xd6\x4b\x92\xed\x6b\x42\x69\xa5\xc1\x97\x73\x14\x84\x9b\x24\x4a\x76\x89\xff\xed\x67\xe8\x07\xc1\xef\x30\x8e\x3d\x6f\x3e\x47\x52\xb1\x83\xcb\x2d\xb7\x0a\x4b\xda\x59\xe3\xa0\x15\xc1\x90\x9e\xc4\x1e\xd9\x1c\x70\xa4\x0b\xa4\x44\x06\x23\x05\xf5\x9a\x9d\x74\x68\x3a\xa7\x28\xb9\xae\xc1\x06\xe9\x35\xdc\xfe\x5a\xad\xb7\x6b\x3f\x0e\x6f\x29\x4e\xac\x15\x7a\x62\xba\xea\xac\x25\xa3\xe9\x14\xe9\xd6\xd2\x3f\x96\xce\xa5\x53\x88\xed\xbf\xd2\x8a\xa3\xe2\xc1\xee\x23\x73\xb1\x96\x72\x45\x5b\x65\x8e\x3c\xaf\xed\xf6\x28\x3b\x83\x26\x63\x33\xee\xa3\xa3\xe0\x2b\x62\xb5\x6c\x0e\x93\x37\x80\xab\x07\x00\x35\xe9\x50\x2e\x32\xa5\x60\xf1\x79\x85\xd9\x81\xd4\xaf\xeb\xf7\x2d\x37\x0f\xfa\x78\xe2\x7d\xb0\xc0\xe2\xe9\xf4\xe7\x1e\xfa\x77\xb8\xf7\x6f\xb9\x44\x9b\x19\xce\xc7\xa3\x5e\xfd\x2a\xee\x5a\xca\xb9\x64\x2a\xee\xd2\x00\x85\x90\x83\x11\x05\x9d\xd9\xe9\x68\xf2\x74\x18\xc0\x7d\xe6\x81\x3b\x7b\xcd\xfc\x83\x2e\xde\xed\x7f\x00\x00\x00\xff\xff\xdc\x85\x1b\x08\xc7\x01\x00\x00"

func TransactionsIdtableGet_node_networking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_networking_keyCdc,
		"../../../transactions/idTable/get_node_networking_key.cdc",
	)
}

func TransactionsIdtableGet_node_networking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_networking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_networking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x5d, 0x68, 0xb, 0x42, 0xff, 0x8a, 0x71, 0x80, 0xf1, 0xe1, 0x6, 0x3b, 0x6c, 0x27, 0xba, 0xd2, 0x94, 0xf2, 0xa3, 0x84, 0xbf, 0x34, 0x6c, 0x87, 0x9a, 0xe, 0x65, 0xe2, 0xc5, 0x45, 0xd2}}
	return a, nil
}

var _TransactionsIdtableGet_node_roleCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x51\x6b\xe2\x40\x14\x85\xdf\xf3\x2b\x0e\x3e\x29\x88\xee\xe3\x22\x88\x64\x4d\x16\x03\x8b\x2b\x4d\xfa\x20\xa5\x90\x98\xdc\x98\x81\xc9\xdc\x30\x73\x53\x2d\xe2\x7f\x2f\x13\xc5\xb6\x74\x9e\x66\x98\xef\x9e\x73\xee\x51\x6d\xc7\x56\xf0\x57\xf3\x29\xa9\xc8\x88\x92\xf7\xac\x38\x68\x42\x6d\xb9\xc5\xaf\x73\x12\xc5\xdb\x2c\xc9\xf6\x59\xf8\xe7\x5f\x1c\x46\xd1\x53\x9c\xa6\x41\x30\x9f\x23\x6b\x94\x83\x2b\xad\xea\x04\x96\xa4\xb7\xc6\x41\x1a\x82\x65\x4d\xe0\x1a\x05\x0c\x57\xe4\xc9\x3d\xf7\x68\x7b\x27\xa8\x95\xd6\x50\x06\xf9\x25\xde\xfd\x5f\x6f\x76\x9b\x30\x8d\xaf\x39\x4e\x4a\x1a\x78\x30\x5f\xf7\xd6\x92\x91\x7c\x8a\x7c\x67\xe9\x4d\x71\xef\xf2\x29\xd8\xfa\x27\x77\xec\xa8\xba\xd3\xde\xa8\x64\x6b\xa9\x14\x74\x4d\xe1\x28\x08\xba\xfe\x80\xba\x37\x68\x0b\x65\xc6\xde\x3a\x89\x16\x48\xc5\x2a\x73\x9c\x2c\xf0\x9c\x18\xf9\x8d\x4b\x00\x00\x9a\x64\xc8\x96\x98\x9a\xb1\xfc\xb9\xfa\xec\x48\x12\x6a\xfd\x35\xe4\xf6\x8e\x8f\x27\xc1\x37\x09\x2c\x1f\x4a\x2f\x37\xcf\xd7\xe1\xdf\x9f\xd5\x0a\x5d\x61\x54\x39\x1e\xf9\xe9\xcf\xdc\xae\xa3\x52\xd5\x8a\xaa\xdb\x68\x84\x8a\xc9\xc1\xb0\x80\xce\xca\xc9\x68\xf2\x50\x18\x2e\xb7\x6e\x07\x76\xe6\xbb\x0d\xae\x1f\x01\x00\x00\xff\xff\x88\x06\x1d\x02\xb3\x01\x00\x00"

func TransactionsIdtableGet_node_roleCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_roleCdc,
		"../../../transactions/idTable/get_node_role.cdc",
	)
}

func TransactionsIdtableGet_node_roleCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_roleCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_role.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0xff, 0xac, 0xcb, 0x6f, 0xd7, 0xf0, 0xc5, 0x72, 0x6d, 0xbb, 0xbb, 0x8b, 0xda, 0xf0, 0x12, 0xa7, 0x3e, 0x86, 0x8e, 0x42, 0xe1, 0x95, 0x7e, 0xac, 0x5f, 0x5c, 0x55, 0x4e, 0x22, 0xef, 0xd2}}
	return a, nil
}

var _TransactionsIdtableGet_node_staking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x6b\xc2\x40\x10\xbd\xe7\x57\x3c\x3c\x29\x88\xf6\x5c\x10\x49\x4d\x8a\xc1\x62\xa5\xc9\x45\x4a\x21\x31\x99\x98\xa1\xc9\x6e\xd8\x9d\x54\x45\xfc\xef\x65\xa3\xfd\xa2\x7b\x58\x66\x98\xf7\xc5\xe3\xa6\xd5\x46\xf0\x58\xeb\x43\x54\x90\x12\x96\x53\x92\xed\x6a\x42\x69\x74\x83\xbb\x63\x14\x84\xeb\x24\x4a\xb6\x89\xff\xf0\x14\xfa\x41\xf0\x12\xc6\xb1\xe7\x4d\xa7\x48\x2a\xb6\xb0\xb9\xe1\x56\x60\x48\x3a\xa3\x2c\xa4\x22\x58\xc9\xde\x59\xed\xb1\xa2\x13\x74\x89\x0c\x4a\x17\xe4\x08\x5b\xdd\xa1\xe9\xac\xa0\xe4\xba\x06\x2b\xa4\xe7\x70\xf3\xbc\x58\x6e\x96\x7e\x1c\x5e\x52\x1c\x58\x2a\x38\x60\xba\xe8\x8c\x21\x25\xe9\x18\xe9\xc6\xd0\x07\xeb\xce\xa6\x63\x68\xe3\x56\xdd\x6a\x4b\xc5\x0d\xed\xfc\x72\x6d\x0c\xe5\x82\xb6\xca\x2c\x79\x5e\xdb\xed\x50\x76\x0a\x4d\xc6\x6a\xe8\xac\xa3\xe0\x1e\xb1\x18\x56\xfb\xd1\xd7\x80\xb3\x07\x00\x35\x49\x1f\x2e\x52\xa5\xc6\xec\x7f\x05\x93\x3d\x89\x5f\xd7\xbf\x53\xae\x6f\xf0\xe1\xc8\xfb\x23\x81\xd9\xb7\xd2\xeb\xd5\xf4\xad\xbf\xbb\x37\x9f\xa3\xcd\x14\xe7\xc3\x81\x63\xff\x04\xb7\x2d\xe5\x5c\x32\x15\x57\x6a\x80\x42\x93\x85\xd2\x02\x3a\xb2\x95\xc1\xa8\x57\xe8\xbf\x6b\xbf\x3d\x6e\x72\xeb\x77\x45\x27\xef\xf2\x19\x00\x00\xff\xff\xd4\x4f\xa4\x6f\xbd\x01\x00\x00"

func TransactionsIdtableGet_node_staking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_staking_keyCdc,
		"../../../transactions/idTable/get_node_staking_key.cdc",
	)
}

func TransactionsIdtableGet_node_staking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_staking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_staking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xa4, 0xc0, 0xfb, 0x73, 0x2e, 0x1d, 0x77, 0xd4, 0x32, 0xe3, 0xf9, 0xaa, 0xc4, 0x2b, 0x8c, 0xb, 0x91, 0xc8, 0x3b, 0x2e, 0xf4, 0x3f, 0xe9, 0xff, 0x18, 0x8, 0x7e, 0x53, 0x6c, 0xa9, 0x90}}
	return a, nil
}

var _TransactionsIdtableGet_previous_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\x4b\xc5\x30\x14\xc6\xf1\x3d\x9f\xe2\x19\xef\x5d\x7a\x9d\x05\x87\x4a\x2b\x04\xa4\x88\xcd\xe2\xd8\x97\xd3\x26\x98\x9e\x84\xe4\x44\x2d\xe2\x77\x17\xb5\xe8\xe0\x7a\x38\xcf\x8f\xbf\xdb\x62\x48\x82\x3b\x1f\x5e\xf5\x4c\x2c\x4e\x76\x33\x8c\x9e\xb0\xa4\xb0\xe1\xea\x4d\x37\x6d\x67\xb4\x79\x32\xf5\xed\x7d\x5b\x37\xcd\x63\xdb\xf7\x4a\x5d\x2e\x30\xd6\x65\xe4\x29\xb9\x28\x48\x24\x25\x71\x86\x58\x82\x3b\x14\xc8\x1f\xf3\x75\x8f\x89\x5e\x5c\x28\x19\x14\xc3\x64\x95\x8a\x65\xc4\x52\x18\xdb\xe0\xf8\x74\xbe\x86\x66\xc1\xbb\x02\x00\x4f\x02\x0e\x33\x69\x5e\x02\x6e\xfe\xa7\x55\x2b\x49\xed\xfd\xc3\x01\x76\xc7\xeb\xe9\xac\xbe\xe7\x3f\x31\xbf\x42\xf5\x4c\x7b\xae\x3c\xf1\x2a\x56\x7d\x7c\x06\x00\x00\xff\xff\xa5\x51\xa0\x0c\xef\x00\x00\x00"

func TransactionsIdtableGet_previous_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_previous_tableCdc,
		"../../../transactions/idTable/get_previous_table.cdc",
	)
}

func TransactionsIdtableGet_previous_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_previous_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_previous_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xef, 0x18, 0xbc, 0x49, 0x5c, 0x75, 0xb8, 0xd0, 0x5e, 0x1d, 0x37, 0xe7, 0x96, 0x77, 0x13, 0x88, 0xd3, 0xcc, 0x27, 0x2c, 0x50, 0xb5, 0x38, 0xd3, 0xa8, 0xc4, 0x75, 0xfa, 0x99, 0xc5, 0x95}}
	return a, nil
}

var _TransactionsIdtableGet_proposed_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6b\xc3\x30\x14\x84\x77\xfd\x8a\x1b\x93\xc5\xe9\x5c\xe8\xe0\x62\x17\x04\x25\x94\x46\x4b\xc7\x24\x7e\xb6\x44\xe5\xf7\x84\xf4\x4c\x6d\x4a\xff\x7b\xc1\x36\x5d\x3a\xdf\xdd\x77\x5f\x18\x93\x64\xc5\x4b\x94\x2f\xdb\x11\x6b\xd0\xc5\x5d\x6f\x91\xd0\x67\x19\xf1\x30\xdb\xa6\x3d\x3b\xeb\x3e\x5c\xfd\xfc\xda\xd6\x4d\xf3\xde\x5e\x2e\xc6\x9c\x4e\x70\x3e\x14\x94\x7b\x0e\x49\x91\x49\xa7\xcc\x05\xea\x09\x29\x4b\x92\x42\x1d\xc2\x8e\x83\x6e\x3c\xc9\x6b\xce\x34\x2b\x28\xc9\xdd\x1b\x93\xa6\x1b\xfa\x89\x31\x5e\x03\x1f\x8e\x8f\xb0\xac\xf8\x36\x00\x10\x49\xc1\xd2\x91\xe5\x5e\xf0\xf4\x5f\xaf\x1a\x48\xeb\x18\xdf\xf6\xb3\xf3\x5e\x3d\x1c\xcd\x3a\xdf\x84\xfe\x08\xd5\x27\x2d\xa5\x8a\xc4\x83\x7a\xf3\xf3\x1b\x00\x00\xff\xff\xe9\x54\x95\x3b\xf3\x00\x00\x00"

func TransactionsIdtableGet_proposed_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_proposed_tableCdc,
		"../../../transactions/idTable/get_proposed_table.cdc",
	)
}

func TransactionsIdtableGet_proposed_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_proposed_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_proposed_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x1d, 0xca, 0x90, 0xd1, 0x6, 0x1b, 0xa2, 0xdc, 0x79, 0x60, 0x5, 0x6f, 0xc, 0x9b, 0xe7, 0x18, 0xc9, 0x4e, 0x6d, 0x31, 0x8c, 0x67, 0xf9, 0xe2, 0x2b, 0x9d, 0x58, 0xe, 0x31, 0xc9, 0x61}}
	return a, nil
}

var _TransactionsIdtableRemove_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\xcb\xda\x40\x10\xc6\xef\xf9\x14\x0f\xef\xa1\xc4\x4b\xb6\xe7\xd0\x56\xd2\xc6\x42\x40\xa4\x68\x2e\x3d\xae\xbb\x13\xdd\x92\xec\x84\xcd\x44\x2d\xc5\xef\x5e\xf2\x47\x51\xdb\x77\x8e\xcb\xec\xef\xf9\xcd\x8c\x6b\x5a\x0e\x82\xef\x35\x9f\x0b\x4b\x5e\x9c\xfc\x2e\xf5\xbe\x26\x54\x81\x1b\x7c\xbc\x14\xf9\x6a\x53\x16\xe5\xcf\x32\xfb\xba\x5e\x65\x79\xbe\x5d\xed\x76\x51\xa4\x14\xca\xa3\xeb\x20\x41\xfb\x4e\x1b\x71\xec\x11\xa8\xe1\x13\x75\xd0\x1e\x74\x71\x9d\x38\x7f\x80\x67\x3b\x93\xe4\x48\x68\x03\xb7\xdc\x91\x85\x9b\x93\x20\x43\x54\x14\x3d\x60\x62\x67\x53\xec\x24\x38\x7f\x58\xe0\x4f\x14\x01\x80\x52\x58\xb3\xd1\x35\x4e\x3a\xb8\x49\x8e\x03\x34\x02\x55\x14\xc8\x1b\x82\xf0\x18\x50\xe4\x98\xe4\x33\xdb\x38\x0f\xde\xff\x22\x23\x23\xa2\x26\x81\x1e\x1e\xb7\x54\xa5\xf8\xf0\xcf\xb8\xc9\xf8\x63\x8a\x6b\x03\xb5\x3a\x50\xac\x8d\x91\x14\x59\x2f\xc7\xcc\x18\xee\xbd\x0c\x42\x98\x4b\x29\xec\x39\x04\x3e\xff\xcf\x43\xbf\xc6\x0f\xd5\x51\x5d\x25\x37\x07\x7c\xc6\x80\x4f\x26\xc6\xa7\xf7\x84\xbe\xc4\xc3\xf2\x52\xa8\x4e\x38\xe8\x03\xa9\xea\xb5\x6f\x6c\x5b\xdc\x43\x86\x5a\x2e\xd1\x6a\xef\x4c\xfc\xf6\x8d\xfb\xda\xc2\xb3\xdc\x5c\x9f\x4c\xef\xdb\x1a\xa5\xde\x26\xc8\x75\xda\x01\x5d\xc8\xf4\x42\x0f\x03\x3f\xe9\x27\xd3\xb1\x7f\xcc\x07\xdd\xb0\xa5\xd8\xd9\x1b\xe1\xfa\x37\x00\x00\xff\xff\xb6\x48\x84\x3e\x55\x02\x00\x00"

func TransactionsIdtableRemove_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableRemove_nodeCdc,
		"../../../transactions/idTable/remove_node.cdc",
	)
}

func TransactionsIdtableRemove_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtableRemove_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/remove_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x73, 0xd7, 0x8d, 0x1d, 0xfe, 0xae, 0x33, 0xc7, 0x3e, 0xff, 0x98, 0xcc, 0x6a, 0xe3, 0xce, 0x37, 0x3d, 0x88, 0x60, 0xf, 0x4, 0x79, 0x6f, 0xe0, 0x23, 0xee, 0xa4, 0x12, 0xd3, 0x5d, 0x27}}
	return a, nil
}

var _TransactionsIdtableUpdate_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xdd\x6a\xdb\x40\x10\x85\xef\xf5\x14\x87\x5c\x14\x05\x8a\xe5\x84\x86\x82\x69\x1b\x4c\x7f\xc0\x50\x7a\x51\xf2\x02\xa3\xd5\xac\xb5\x65\xbd\x23\x76\x47\x51\x42\xc9\xbb\x97\xd5\xc6\x6e\xe4\x36\x73\x39\x3b\x73\xce\x37\x47\x72\x87\x41\xa2\xe2\x9b\x97\x69\xd7\x71\x50\xa7\x8f\x77\xd4\x7a\x86\x8d\x72\xc0\xfa\x61\x7d\x65\xec\x9a\xaf\xed\xb5\x7d\x7f\x75\xf3\xee\x66\x5d\x55\x4d\x83\xbb\xde\x25\x68\xa4\x90\xc8\xa8\x93\x00\x43\xde\x27\x68\xcf\xb0\x63\x28\x2d\xed\x49\x41\x29\xb9\x7d\x28\x2f\x43\x94\x41\x12\x77\x70\xcf\x3e\xd0\x6c\x94\xf5\x54\xe6\x09\x33\xc6\xc8\x41\x4b\xff\x2d\x28\x74\x0b\x81\xc5\xf3\x71\x67\x88\x7c\xef\x64\x4c\x7f\xc5\x76\x8a\xc9\x79\x0f\x09\xfe\x11\x2d\xcf\x6c\xdc\x81\x74\x9e\x6f\x79\xef\x42\x70\x61\x0f\xb1\x20\x04\x9e\xc0\x83\x98\xbe\xaa\x5e\xdc\x53\x5f\xe2\x77\x55\x01\x40\xd3\xe0\xbb\x18\xf2\xb8\xa7\xe8\x4a\x2e\x12\x41\x88\x6c\x39\x72\x30\x27\x8e\xdd\x17\x94\xdc\xb6\xdd\xc1\x05\x48\xfb\x8b\x8d\xce\x12\x9e\x15\x94\x9b\x3f\xd9\x6e\xf0\xe6\x9f\xa4\x57\xf3\x46\xb1\x1b\x22\x0f\x14\xb9\x26\x63\x74\x83\xed\xa8\xfd\xd6\x18\x19\x83\x66\x20\x3c\x57\xd3\xa0\x95\x18\x65\xfa\x1f\x07\x9d\xdb\xe7\x4a\xec\xed\xea\xc8\x80\x8f\xc8\xf2\xab\xa2\xf1\xe1\x35\xa0\x4f\x75\xfe\x03\x36\x68\x92\x4a\xa4\x3d\x37\xf6\x7c\x6e\x1e\xbb\x3c\x99\xe4\xba\xbd\xc5\x40\xc1\x99\xfa\xe2\xb3\x8c\xbe\x43\x10\x3d\xb2\x2e\x48\x4f\x69\xcd\x50\x17\x45\xe4\xa9\x64\xc0\x0f\x6c\x46\xe5\x17\x07\x2f\xf0\x57\x49\x29\xea\x0f\x9e\xbe\xe6\xcf\x56\x1f\x57\x9f\xfe\x04\x00\x00\xff\xff\xa9\x9e\xf1\x5f\xc9\x02\x00\x00"

func TransactionsIdtableUpdate_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableUpdate_tableCdc,
		"../../../transactions/idTable/update_table.cdc",
	)
}

func TransactionsIdtableUpdate_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableUpdate_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/update_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x44, 0x96, 0x0, 0x41, 0x38, 0x2d, 0x87, 0x8e, 0x8, 0xbc, 0x90, 0x35, 0x13, 0xea, 0x4a, 0x59, 0x93, 0xb8, 0xe3, 0x2d, 0xf7, 0xe9, 0x88, 0x97, 0x4f, 0x7d, 0x12, 0xb1, 0xae, 0xf5, 0x7b}}
	return a, nil
}

var _TransactionsInspect_fieldCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x09\x42\x31\x0c\x06\xe0\x7b\xa7\xf8\x8f\x7a\x91\x22\x5a\x1f\xde\xbc\x74\x01\x71\x80\xbe\x9a\x42\xc0\x26\x8f\x98\xea\x03\x71\x77\x17\x70\x81\x8f\xfb\xa2\xe6\xc8\x0f\x7d\x5f\xc9\x5e\x5c\xe9\x52\xab\x0e\x71\x34\xd3\x8e\xb8\xb6\xe9\x9e\x28\x1e\xa7\x34\xc7\xb2\x8f\xf5\x14\xc2\x32\x66\xb4\x21\xe8\x85\x65\xb3\x3d\xe3\x96\x79\x4d\x07\x7c\x02\x00\x18\xf9\x30\xf9\xe3\xed\xdc\x8a\x3c\x4b\x75\x56\xc9\x44\xe1\xfb\x0b\x00\x00\xff\xff\x7c\xe1\x51\x3b\x7a\x00\x00\x00"

func TransactionsInspect_fieldCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsInspect_fieldCdc,
		"../../../transactions/inspect_field.cdc",
	)
}

func TransactionsInspect_fieldCdc() (*asset, error) {
	bytes, err := TransactionsInspect_fieldCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/inspect_field.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xeb, 0x82, 0x68, 0x87, 0xc8, 0xaf, 0x97, 0x60, 0xf6, 0x63, 0x18, 0x23, 0x85, 0x7b, 0xb6, 0xf6, 0xbb, 0x8c, 0x4d, 0x40, 0x9c, 0x25, 0xc, 0xc5, 0x56, 0xa, 0xdf, 0x63, 0xa8, 0x28, 0xea}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../transactions/idTable/change_initial_weight.cdc":    TransactionsIdtableChange_initial_weightCdc,
	"../../../transactions/idTable/create_node.cdc":              TransactionsIdtableCreate_nodeCdc,
	"../../../transactions/idTable/get_current_table.cdc":        TransactionsIdtableGet_current_tableCdc,
	"../../../transactions/idTable/get_node_initial_weight.cdc":  TransactionsIdtableGet_node_initial_weightCdc,
	"../../../transactions/idTable/get_node_networking_addr.cdc": TransactionsIdtableGet_node_networking_addrCdc,
	"../../../transactions/idTable/get_node_networking_key.cdc":  TransactionsIdtableGet_node_networking_keyCdc,
	"../../../transactions/idTable/get_node_role.cdc":            TransactionsIdtableGet_node_roleCdc,
	"../../../transactions/idTable/get_node_staking_key.cdc":     TransactionsIdtableGet_node_staking_keyCdc,
	"../../../transactions/idTable/get_previous_table.cdc":       TransactionsIdtableGet_previous_tableCdc,
	"../../../transactions/idTable/get_proposed_table.cdc":       TransactionsIdtableGet_proposed_tableCdc,
	"../../../transactions/idTable/remove_node.cdc":              TransactionsIdtableRemove_nodeCdc,
	"../../../transactions/idTable/update_table.cdc":             TransactionsIdtableUpdate_tableCdc,
	"../../../transactions/inspect_field.cdc":                    TransactionsInspect_fieldCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"transactions": &bintree{nil, map[string]*bintree{
					"idTable": &bintree{nil, map[string]*bintree{
						"change_initial_weight.cdc":    &bintree{TransactionsIdtableChange_initial_weightCdc, map[string]*bintree{}},
						"create_node.cdc":              &bintree{TransactionsIdtableCreate_nodeCdc, map[string]*bintree{}},
						"get_current_table.cdc":        &bintree{TransactionsIdtableGet_current_tableCdc, map[string]*bintree{}},
						"get_node_initial_weight.cdc":  &bintree{TransactionsIdtableGet_node_initial_weightCdc, map[string]*bintree{}},
						"get_node_networking_addr.cdc": &bintree{TransactionsIdtableGet_node_networking_addrCdc, map[string]*bintree{}},
						"get_node_networking_key.cdc":  &bintree{TransactionsIdtableGet_node_networking_keyCdc, map[string]*bintree{}},
						"get_node_role.cdc":            &bintree{TransactionsIdtableGet_node_roleCdc, map[string]*bintree{}},
						"get_node_staking_key.cdc":     &bintree{TransactionsIdtableGet_node_staking_keyCdc, map[string]*bintree{}},
						"get_previous_table.cdc":       &bintree{TransactionsIdtableGet_previous_tableCdc, map[string]*bintree{}},
						"get_proposed_table.cdc":       &bintree{TransactionsIdtableGet_proposed_tableCdc, map[string]*bintree{}},
						"remove_node.cdc":              &bintree{TransactionsIdtableRemove_nodeCdc, map[string]*bintree{}},
						"update_table.cdc":             &bintree{TransactionsIdtableUpdate_tableCdc, map[string]*bintree{}},
					}},
					"inspect_field.cdc": &bintree{TransactionsInspect_fieldCdc, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
