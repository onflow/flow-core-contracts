// Code generated by go-bindata. DO NOT EDIT.
// sources:
// FlowServiceAccount/add_account_creator.cdc (565B)
// FlowServiceAccount/deposit_fees.cdc (859B)
// FlowServiceAccount/remove_account_creator.cdc (567B)
// FlowServiceAccount/scripts/get_account_creators.cdc (141B)
// FlowServiceAccount/scripts/get_account_fee.cdc (136B)
// FlowServiceAccount/scripts/get_execution_effort_weights.cdc (155B)
// FlowServiceAccount/scripts/get_execution_memory_limit.cdc (143B)
// FlowServiceAccount/scripts/get_execution_memory_weights.cdc (155B)
// FlowServiceAccount/scripts/get_fees_balance.cdc (110B)
// FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc (145B)
// FlowServiceAccount/scripts/get_is_account_creator.cdc (157B)
// FlowServiceAccount/scripts/get_tx_fee_parameters.cdc (129B)
// FlowServiceAccount/set_execution_effort_weights.cdc (1.636kB)
// FlowServiceAccount/set_execution_memory_limit.cdc (260B)
// FlowServiceAccount/set_execution_memory_weights.cdc (288B)
// FlowServiceAccount/set_is_account_creation_restricted.cdc (586B)
// FlowServiceAccount/set_tx_fee_parameters.cdc (606B)
// FlowServiceAccount/set_tx_fee_surge_factor.cdc (465B)
// dkg/admin/force_stop_dkg.cdc (334B)
// dkg/admin/publish_participant.cdc (224B)
// dkg/admin/set_safe_threshold.cdc (425B)
// dkg/admin/start_dkg.cdc (366B)
// dkg/admin/stop_dkg.cdc (329B)
// dkg/create_participant.cdc (427B)
// dkg/scripts/get_consensus_nodes.cdc (111B)
// dkg/scripts/get_dkg_canonical_final_submission.cdc (106B)
// dkg/scripts/get_dkg_completed.cdc (107B)
// dkg/scripts/get_dkg_enabled.cdc (96B)
// dkg/scripts/get_final_submissions.cdc (114B)
// dkg/scripts/get_latest_whiteboard_messages.cdc (338B)
// dkg/scripts/get_node_final_submission.cdc (136B)
// dkg/scripts/get_node_has_submitted.cdc (124B)
// dkg/scripts/get_node_is_claimed.cdc (226B)
// dkg/scripts/get_node_is_registered.cdc (131B)
// dkg/scripts/get_thresholds.cdc (448B)
// dkg/scripts/get_whiteboard_messages.cdc (123B)
// dkg/send_final_submission.cdc (412B)
// dkg/send_whiteboard_message.cdc (395B)
// epoch/admin/advance_view.cdc (647B)
// epoch/admin/calculate_rewards.cdc (359B)
// epoch/admin/deploy_epoch.cdc (1.173kB)
// epoch/admin/deploy_qc_dkg.cdc (295B)
// epoch/admin/pay_rewards.cdc (477B)
// epoch/admin/reset_epoch.cdc (1.646kB)
// epoch/admin/set_automatic_rewards.cdc (356B)
// epoch/admin/set_bonus_tokens.cdc (597B)
// epoch/admin/update_clusters.cdc (338B)
// epoch/admin/update_dkg_phase_views.cdc (328B)
// epoch/admin/update_epoch_config.cdc (1.755kB)
// epoch/admin/update_epoch_views.cdc (329B)
// epoch/admin/update_reward.cdc (342B)
// epoch/admin/update_staking_views.cdc (331B)
// epoch/node/register_dkg_participant.cdc (529B)
// epoch/node/register_node.cdc (3kB)
// epoch/node/register_qc_voter.cdc (520B)
// epoch/scripts/get_bonus_tokens.cdc (110B)
// epoch/scripts/get_config_metadata.cdc (123B)
// epoch/scripts/get_create_clusters.cdc (205B)
// epoch/scripts/get_current_view.cdc (146B)
// epoch/scripts/get_epoch_counter.cdc (113B)
// epoch/scripts/get_epoch_metadata.cdc (162B)
// epoch/scripts/get_epoch_phase.cdc (119B)
// epoch/scripts/get_proposed_counter.cdc (116B)
// epoch/scripts/get_randomize.cdc (129B)
// flowToken/burn_tokens.cdc (1.104kB)
// flowToken/create_forwarder.cdc (1.805kB)
// flowToken/mint_tokens.cdc (1.012kB)
// flowToken/scripts/get_balance.cdc (447B)
// flowToken/scripts/get_supply.cdc (208B)
// flowToken/setup_account.cdc (1.137kB)
// flowToken/transfer_tokens.cdc (1.324kB)
// idTableStaking/admin/add_approved_and_limits.cdc (1.627kB)
// idTableStaking/admin/add_approved_nodes.cdc (1.055kB)
// idTableStaking/admin/capability_end_epoch.cdc (1.296kB)
// idTableStaking/admin/change_candidate_limits.cdc (727B)
// idTableStaking/admin/change_cut.cdc (665B)
// idTableStaking/admin/change_del_minimums.cdc (690B)
// idTableStaking/admin/change_minimums.cdc (818B)
// idTableStaking/admin/change_payout.cdc (625B)
// idTableStaking/admin/end_epoch.cdc (895B)
// idTableStaking/admin/end_epoch_change_payout.cdc (961B)
// idTableStaking/admin/end_staking.cdc (698B)
// idTableStaking/admin/move_tokens.cdc (580B)
// idTableStaking/admin/pay_rewards.cdc (650B)
// idTableStaking/admin/remove_approved_nodes.cdc (1.011kB)
// idTableStaking/admin/remove_invalid_nodes.cdc (675B)
// idTableStaking/admin/remove_node.cdc (629B)
// idTableStaking/admin/scale_rewards_test.cdc (713B)
// idTableStaking/admin/set_approved_nodes.cdc (628B)
// idTableStaking/admin/set_claimed.cdc (633B)
// idTableStaking/admin/set_node_weight.cdc (650B)
// idTableStaking/admin/set_non_operational.cdc (785B)
// idTableStaking/admin/set_slot_limits.cdc (1.335kB)
// idTableStaking/admin/start_staking.cdc (597B)
// idTableStaking/admin/transfer_admin.cdc (728B)
// idTableStaking/admin/transfer_fees_admin.cdc (403B)
// idTableStaking/admin/transfer_minter_deploy.cdc (1.34kB)
// idTableStaking/admin/upgrade_set_claimed.cdc (691B)
// idTableStaking/admin/upgrade_staking.cdc (159B)
// idTableStaking/delegation/del_request_unstaking.cdc (647B)
// idTableStaking/delegation/del_stake_new_tokens.cdc (1.021kB)
// idTableStaking/delegation/del_stake_rewarded.cdc (653B)
// idTableStaking/delegation/del_stake_unstaked.cdc (653B)
// idTableStaking/delegation/del_withdraw_reward_tokens.cdc (921B)
// idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc (921B)
// idTableStaking/delegation/delegator_add_capability.cdc (735B)
// idTableStaking/delegation/get_delegator_committed.cdc (321B)
// idTableStaking/delegation/get_delegator_info.cdc (299B)
// idTableStaking/delegation/get_delegator_info_from_address.cdc (517B)
// idTableStaking/delegation/get_delegator_request.cdc (330B)
// idTableStaking/delegation/get_delegator_rewarded.cdc (319B)
// idTableStaking/delegation/get_delegator_staked.cdc (315B)
// idTableStaking/delegation/get_delegator_unstaked.cdc (319B)
// idTableStaking/delegation/get_delegator_unstaking.cdc (321B)
// idTableStaking/delegation/get_delegator_unstaking_request.cdc (330B)
// idTableStaking/delegation/register_delegator.cdc (860B)
// idTableStaking/delegation/register_many_delegators.cdc (628B)
// idTableStaking/node/node_add_capability.cdc (740B)
// idTableStaking/node/register_many_nodes.cdc (1.148kB)
// idTableStaking/node/register_node.cdc (1.488kB)
// idTableStaking/node/request_unstake.cdc (623B)
// idTableStaking/node/stake_new_tokens.cdc (987B)
// idTableStaking/node/stake_rewarded_tokens.cdc (626B)
// idTableStaking/node/stake_unstaked_tokens.cdc (605B)
// idTableStaking/node/unstake_all.cdc (587B)
// idTableStaking/node/update_networking_address.cdc (628B)
// idTableStaking/node/withdraw_reward_tokens.cdc (893B)
// idTableStaking/node/withdraw_unstaked_tokens.cdc (893B)
// idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc (670B)
// idTableStaking/scripts/get_approved_nodes.cdc (289B)
// idTableStaking/scripts/get_candidate_limits.cdc (271B)
// idTableStaking/scripts/get_candidate_nodes.cdc (234B)
// idTableStaking/scripts/get_current_table.cdc (196B)
// idTableStaking/scripts/get_cut_percentage.cdc (205B)
// idTableStaking/scripts/get_del_stake_requirements.cdc (224B)
// idTableStaking/scripts/get_delegators_below_min.cdc (1.966kB)
// idTableStaking/scripts/get_node_committed_tokens.cdc (263B)
// idTableStaking/scripts/get_node_info.cdc (240B)
// idTableStaking/scripts/get_node_info_from_address.cdc (483B)
// idTableStaking/scripts/get_node_initial_weight.cdc (251B)
// idTableStaking/scripts/get_node_networking_addr.cdc (259B)
// idTableStaking/scripts/get_node_networking_key.cdc (251B)
// idTableStaking/scripts/get_node_rewarded_tokens.cdc (264B)
// idTableStaking/scripts/get_node_role.cdc (231B)
// idTableStaking/scripts/get_node_staked_tokens.cdc (260B)
// idTableStaking/scripts/get_node_staking_key.cdc (245B)
// idTableStaking/scripts/get_node_total_commitment.cdc (279B)
// idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc (282B)
// idTableStaking/scripts/get_node_type_ratio.cdc (241B)
// idTableStaking/scripts/get_node_unstaked_tokens.cdc (264B)
// idTableStaking/scripts/get_node_unstaking_request.cdc (275B)
// idTableStaking/scripts/get_node_unstaking_tokens.cdc (266B)
// idTableStaking/scripts/get_non_operational.cdc (211B)
// idTableStaking/scripts/get_proposed_table.cdc (198B)
// idTableStaking/scripts/get_role_counts.cdc (208B)
// idTableStaking/scripts/get_slot_limits.cdc (309B)
// idTableStaking/scripts/get_stake_requirements.cdc (247B)
// idTableStaking/scripts/get_table.cdc (190B)
// idTableStaking/scripts/get_total_staked.cdc (463B)
// idTableStaking/scripts/get_total_staked_by_type.cdc (256B)
// idTableStaking/scripts/get_weekly_payout.cdc (202B)
// inspect_field.cdc (122B)
// lockedTokens/admin/admin_create_shared_accounts.cdc (3.914kB)
// lockedTokens/admin/admin_deploy_contract.cdc (443B)
// lockedTokens/admin/admin_deposit_account_creator.cdc (815B)
// lockedTokens/admin/admin_remove_delegator.cdc (448B)
// lockedTokens/admin/check_main_registration.cdc (948B)
// lockedTokens/admin/check_shared_registration.cdc (616B)
// lockedTokens/admin/custody_create_account_with_lease_account.cdc (3.367kB)
// lockedTokens/admin/custody_create_only_lease_account.cdc (3.191kB)
// lockedTokens/admin/custody_create_only_shared_account.cdc (3.584kB)
// lockedTokens/admin/custody_create_shared_accounts.cdc (3.791kB)
// lockedTokens/admin/custody_setup_account_creator.cdc (602B)
// lockedTokens/admin/deposit_locked_tokens.cdc (1.673kB)
// lockedTokens/admin/get_unlocking_bad_accounts.cdc (480B)
// lockedTokens/admin/unlock_tokens.cdc (576B)
// lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc (2.748kB)
// lockedTokens/delegator/delegate_new_tokens.cdc (1.201kB)
// lockedTokens/delegator/delegate_rewarded_tokens.cdc (528B)
// lockedTokens/delegator/delegate_unstaked_tokens.cdc (520B)
// lockedTokens/delegator/get_delegator_id.cdc (410B)
// lockedTokens/delegator/get_delegator_info.cdc (1.438kB)
// lockedTokens/delegator/get_delegator_node_id.cdc (414B)
// lockedTokens/delegator/register_delegator.cdc (1.574kB)
// lockedTokens/delegator/request_unstaking.cdc (522B)
// lockedTokens/delegator/withdraw_rewarded_tokens.cdc (798B)
// lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc (528B)
// lockedTokens/delegator/withdraw_unstaked_tokens.cdc (528B)
// lockedTokens/staker/get_node_id.cdc (405B)
// lockedTokens/staker/get_staker_info.cdc (1.145kB)
// lockedTokens/staker/register_node.cdc (1.493kB)
// lockedTokens/staker/request_unstaking.cdc (522B)
// lockedTokens/staker/stake_new_tokens.cdc (1.253kB)
// lockedTokens/staker/stake_rewarded_tokens.cdc (525B)
// lockedTokens/staker/stake_unstaked_tokens.cdc (525B)
// lockedTokens/staker/unstake_all.cdc (488B)
// lockedTokens/staker/update_networking_address.cdc (482B)
// lockedTokens/staker/withdraw_rewarded_tokens.cdc (788B)
// lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc (528B)
// lockedTokens/staker/withdraw_unstaked_tokens.cdc (528B)
// lockedTokens/user/deposit_tokens.cdc (732B)
// lockedTokens/user/get_locked_account_address.cdc (419B)
// lockedTokens/user/get_locked_account_balance.cdc (418B)
// lockedTokens/user/get_multiple_unlock_limits.cdc (536B)
// lockedTokens/user/get_total_balance.cdc (2.795kB)
// lockedTokens/user/get_unlock_limit.cdc (409B)
// lockedTokens/user/withdraw_tokens.cdc (699B)
// nodeVersionBeacon/admin/change_version_freeze_period.cdc (787B)
// nodeVersionBeacon/admin/delete_version_boundary.cdc (812B)
// nodeVersionBeacon/admin/heartbeat.cdc (612B)
// nodeVersionBeacon/admin/set_version_boundary.cdc (1.4kB)
// nodeVersionBeacon/scripts/get_current_node_version.cdc (244B)
// nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc (271B)
// nodeVersionBeacon/scripts/get_next_version_boundary.cdc (275B)
// nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc (214B)
// nodeVersionBeacon/scripts/get_version_boundaries.cdc (301B)
// nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc (329B)
// quorumCertificate/admin/publish_voter.cdc (311B)
// quorumCertificate/admin/start_voting.cdc (1.495kB)
// quorumCertificate/admin/stop_voting.cdc (354B)
// quorumCertificate/create_voter.cdc (1.107kB)
// quorumCertificate/scripts/generate_quorum_certificate.cdc (329B)
// quorumCertificate/scripts/get_cluster.cdc (192B)
// quorumCertificate/scripts/get_cluster_complete.cdc (244B)
// quorumCertificate/scripts/get_cluster_node_weights.cdc (199B)
// quorumCertificate/scripts/get_cluster_vote_threshold.cdc (193B)
// quorumCertificate/scripts/get_cluster_votes.cdc (253B)
// quorumCertificate/scripts/get_cluster_weight.cdc (189B)
// quorumCertificate/scripts/get_clusters.cdc (273B)
// quorumCertificate/scripts/get_node_has_voted.cdc (488B)
// quorumCertificate/scripts/get_node_weight.cdc (323B)
// quorumCertificate/scripts/get_qc_enabled.cdc (109B)
// quorumCertificate/scripts/get_voter_is_registered.cdc (206B)
// quorumCertificate/scripts/get_voting_completed.cdc (195B)
// quorumCertificate/submit_vote.cdc (584B)
// stakingCollection/close_stake.cdc (758B)
// stakingCollection/create_machine_account.cdc (1.152kB)
// stakingCollection/create_new_tokenholder_acct.cdc (2.943kB)
// stakingCollection/deploy_collection_contract.cdc (297B)
// stakingCollection/register_delegator.cdc (675B)
// stakingCollection/register_multiple_delegators.cdc (767B)
// stakingCollection/register_multiple_nodes.cdc (1.584kB)
// stakingCollection/register_node.cdc (1.426kB)
// stakingCollection/request_unstaking.cdc (684B)
// stakingCollection/restake_all_stakers.cdc (1.305kB)
// stakingCollection/scripts/does_account_have_staking_collection.cdc (260B)
// stakingCollection/scripts/get_all_delegator_info.cdc (360B)
// stakingCollection/scripts/get_all_node_info.cdc (340B)
// stakingCollection/scripts/get_delegator_ids.cdc (289B)
// stakingCollection/scripts/get_does_stake_exist.cdc (418B)
// stakingCollection/scripts/get_locked_tokens_used.cdc (292B)
// stakingCollection/scripts/get_machine_account_address.cdc (443B)
// stakingCollection/scripts/get_machine_accounts.cdc (321B)
// stakingCollection/scripts/get_node_ids.cdc (251B)
// stakingCollection/scripts/get_unlocked_tokens_used.cdc (297B)
// stakingCollection/setup_staking_collection.cdc (2.99kB)
// stakingCollection/stake_new_tokens.cdc (808B)
// stakingCollection/stake_rewarded_tokens.cdc (701B)
// stakingCollection/stake_unstaked_tokens.cdc (701B)
// stakingCollection/test/deposit_tokens.cdc (856B)
// stakingCollection/test/get_tokens.cdc (670B)
// stakingCollection/transfer_delegator.cdc (1.994kB)
// stakingCollection/transfer_node.cdc (2.108kB)
// stakingCollection/unstake_all.cdc (610B)
// stakingCollection/update_networking_address.cdc (628B)
// stakingCollection/withdraw_from_machine_account.cdc (690B)
// stakingCollection/withdraw_rewarded_tokens.cdc (862B)
// stakingCollection/withdraw_unstaked_tokens.cdc (877B)
// stakingProxy/add_node_info.cdc (624B)
// stakingProxy/get_node_info.cdc (514B)
// stakingProxy/register_node.cdc (1.095kB)
// stakingProxy/remove_node_info.cdc (307B)
// stakingProxy/remove_staking_proxy.cdc (315B)
// stakingProxy/request_unstaking.cdc (477B)
// stakingProxy/setup_node_account.cdc (511B)
// stakingProxy/stake_new_tokens.cdc (475B)
// stakingProxy/stake_unstaked_tokens.cdc (480B)
// stakingProxy/unstake_all.cdc (441B)
// stakingProxy/withdraw_rewards.cdc (483B)
// stakingProxy/withdraw_unstaked.cdc (483B)
// storageFees/admin/set_parameters.cdc (831B)
// storageFees/scripts/get_account_available_balance.cdc (185B)
// storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc (324B)
// storageFees/scripts/get_storage_capacity.cdc (181B)
// storageFees/scripts/get_storage_fee_conversion.cdc (149B)
// storageFees/scripts/get_storage_fee_min.cdc (143B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flowserviceaccountAdd_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6a\xc3\x30\x10\x45\xd7\xd2\x57\x0c\x59\x14\x67\x63\x75\x1d\xda\x06\x37\x0f\x28\x14\x0a\x71\x1f\xeb\x89\x34\x4e\x04\x8e\x64\x46\x72\x13\x28\xf9\xf7\x62\xc5\x8b\xb8\x75\xe9\x7a\x46\xe7\x9e\xab\xb1\x87\xc6\x73\x84\x75\xed\x8f\x25\xf1\xa7\xd5\x54\x68\xed\x5b\x17\xa1\x62\x7f\x80\xdb\xd3\xfa\xf9\xe5\xa3\x5c\x6d\xde\x9f\x16\xab\x62\xb9\xdc\xac\xca\x52\x4a\xa5\xe0\x75\x6f\x03\x44\x46\x17\x50\x47\xeb\x1d\xa0\x31\x01\x10\x1c\x1d\x01\x7b\x82\x66\x62\x8c\x9e\xe5\xd5\x5e\xd6\x0f\x17\x4c\xdd\x68\x06\x85\x31\x4c\x21\x4c\xe1\x4b\x4a\x51\x53\x84\x30\xd0\x28\xcc\xc1\xba\x19\xdc\xfc\x16\xcc\xd3\xc8\x86\x78\xc9\x90\xa2\x61\x6a\x90\x29\x0b\x76\xe7\xa8\x23\xb7\x71\xdf\xef\x76\x74\x21\x94\x82\x47\xcf\xec\x8f\xc0\x54\x11\x93\xd3\x04\xd1\x8f\x75\x1f\xa0\x81\x29\xf8\x96\x35\xe5\x89\x21\x85\x08\x54\x57\xf9\x88\x27\xdc\xc3\x25\x3c\xdf\xa6\x9c\xbb\x7f\xb5\x1f\xb2\xee\x9b\x67\xa0\x42\xf4\x8c\x3b\x52\xd5\xd5\x83\x6e\x71\x2a\x85\x10\xf3\x39\x34\xe8\xac\xce\x26\x6f\x0e\xb7\x75\xb2\xde\x8e\x34\xc1\x51\xed\xc9\x54\x8a\xb3\x14\x74\x22\xdd\x46\x4a\x3f\xf1\x57\x81\x1c\x8d\x29\x06\x07\xfa\x71\xaf\x84\x3a\x7f\x07\x00\x00\xff\xff\x58\x7a\xb8\x95\x35\x02\x00\x00"

func flowserviceaccountAdd_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountAdd_account_creatorCdc,
		"FlowServiceAccount/add_account_creator.cdc",
	)
}

func flowserviceaccountAdd_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountAdd_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/add_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x2d, 0xa8, 0x63, 0x2c, 0xf1, 0x7e, 0xed, 0xbd, 0x9, 0xca, 0xc8, 0xdc, 0x63, 0x53, 0x29, 0x1e, 0xb5, 0x81, 0x4a, 0x50, 0x61, 0x83, 0xb4, 0x23, 0x25, 0xc0, 0x4b, 0xbf, 0x98, 0xe2, 0x54}}
	return a, nil
}

var _flowserviceaccountDeposit_feesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x8f\xd3\x30\x10\xc5\xcf\xcd\xa7\x78\xf4\x00\xcd\x61\x13\x0e\x88\x43\x55\x58\x2a\xda\x70\x41\x42\xda\x2e\xec\xd9\x4d\x26\x89\x45\x6a\x47\xf6\x84\x14\x55\xfb\xdd\x51\xec\x38\x60\x71\xd8\x53\x94\xf1\xbc\x37\xbf\xf9\x23\x2f\xbd\x36\x8c\x62\x50\x8d\x3c\x77\xf4\xa8\x7f\x92\x42\x6d\xf4\x05\xeb\x28\xb6\x4e\x42\x66\xa7\xc7\x28\x2b\xfc\x47\x19\x05\x91\xf5\x09\x6f\xaf\xc5\xd7\x6f\x4f\xc5\xf1\x78\xda\x1f\x0e\x0f\xc7\xd3\x29\x49\xf2\x1c\x07\xea\xb5\x95\x0c\x9e\x94\x16\xac\xc1\x2d\xfd\x55\xfe\x10\x43\xc7\x53\x9e\x56\xdd\x6f\xd4\xda\x80\xc9\xb2\x54\x4d\x92\xb0\x11\xca\x8a\x92\xa5\x56\x1b\x71\xd1\x83\xe2\x2d\xbe\x17\xf2\xfa\xfe\x5d\x8a\x5b\x92\x00\x40\x9e\xe3\xb1\x25\x6f\x02\x43\x56\x0f\xa6\x24\x70\x2b\x18\xad\xee\x2a\xeb\x6a\x85\xca\x53\x54\x18\xc2\x99\xa4\x6a\xe0\xdc\x6b\x32\x86\x2a\x67\xd5\x11\xc3\x92\x62\xe7\xb5\xc5\xa7\x5b\x34\x94\xcc\x85\x9f\x7d\xd5\xde\x50\x2f\x0c\x6d\xac\x6c\x14\x99\x2d\xf6\x03\xb7\xfb\xb2\x9c\x08\x17\xb2\x99\xee\x0b\x31\x04\x0c\xd5\x64\x48\x4d\x68\xbe\x7d\xaf\x7c\x63\x61\x59\x1b\xaa\xf0\xcb\x4d\x21\xe8\x26\x14\x17\x79\xa0\x1a\x1f\xe6\xe4\xec\xac\x8d\xd1\xe3\x4e\x0c\xdc\x6e\x62\xb6\x27\xc9\x6d\x65\xc4\x28\xce\x1d\xa5\x78\xbd\xec\xc9\x43\x7f\xdc\x4c\xdb\xd9\x22\x9f\x6a\x89\x86\xf2\x3a\xbc\xbb\xe7\x34\x59\xad\x56\xf7\xf7\xe8\x85\x92\xe5\x66\xfd\x59\x0f\x5d\x05\xa5\x19\xbe\xde\xff\xec\x7a\xf4\xe8\x4e\xfd\x6a\x9d\x46\xfd\x06\x94\x30\x74\x77\x18\x2f\x77\x6c\xa9\xab\xb3\x65\xfa\xd8\xdd\x2d\xfd\x67\xe3\xec\xb8\x9c\x80\xff\xa6\x4e\x3b\x2f\x84\xae\x54\x0e\x4c\xb8\xfd\x8b\xb2\x1c\x5e\x4b\x08\x26\x2a\x70\x49\x15\x9f\x61\x8c\x13\xc2\x59\xe5\x3d\xe6\x09\xee\xee\x62\xce\xc0\xf0\xfc\x27\x00\x00\xff\xff\xcd\x65\xce\xb4\x5b\x03\x00\x00"

func flowserviceaccountDeposit_feesCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountDeposit_feesCdc,
		"FlowServiceAccount/deposit_fees.cdc",
	)
}

func flowserviceaccountDeposit_feesCdc() (*asset, error) {
	bytes, err := flowserviceaccountDeposit_feesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/deposit_fees.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x9f, 0x9c, 0x7b, 0xcb, 0x4d, 0x5c, 0x3c, 0x92, 0xe1, 0x6f, 0xe0, 0xe8, 0x32, 0xb5, 0x35, 0x9e, 0x2d, 0xa5, 0x76, 0x47, 0xd2, 0x9a, 0x3, 0x9d, 0x7d, 0x12, 0x67, 0x94, 0x56, 0xe4, 0x19}}
	return a, nil
}

var _flowserviceaccountRemove_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6a\xeb\x30\x10\x86\xd7\xd2\x53\x0c\x59\x1c\x9c\x8d\x75\xd6\xa1\x6d\x70\x73\x81\x42\xa1\x10\xf7\xb2\x56\xe4\x71\x22\xb0\x35\x66\x24\x27\x81\x92\x77\x2f\x96\xbd\x88\x5b\x97\xae\x67\xf4\xcd\xf7\xeb\xb7\x75\x43\x1c\x60\x5b\xd1\x39\x47\x3e\x59\x83\x99\x31\xd4\xba\x00\x25\x53\x0d\xff\x2f\xdb\xe7\x97\x8f\x7c\xb3\x7b\x7f\x5a\x6d\xb2\xf5\x7a\xb7\xc9\x73\x29\x95\x82\xd7\xa3\xf5\x10\x58\x3b\xaf\x4d\xb0\xe4\x80\xb1\xa6\x13\x7a\xd0\x0e\xf4\x40\x30\x8c\x3a\x10\xcb\x9b\xb5\x64\x98\xad\xfa\xd1\x02\xb2\xa2\x60\xf4\x7e\x0e\x9f\x52\x8a\x0a\x03\xf8\x91\x45\x56\xd4\xd6\x2d\xe0\xdf\x4f\xbf\x34\x8e\xac\x0f\x1c\x6f\x48\xd1\x30\x36\x9a\x31\xf1\xf6\xe0\xb0\x23\xb7\xe1\x38\xec\x76\x74\x21\x94\x82\x47\x62\xa6\x33\x30\x96\xc8\xe8\x0c\x42\xa0\xa9\xe8\x23\x34\x30\x7a\x6a\xd9\x60\x1a\x19\x52\x08\x8f\x55\x99\x4e\x78\xc2\x3d\xf4\xc7\xd3\x7d\xbc\x73\xf7\xa7\xf6\x43\xd2\xfd\xf2\x02\x94\x0f\xc4\xfa\x80\xaa\xbc\x79\xd0\x2d\xce\xa5\x10\x62\xb9\x84\x46\x3b\x6b\x92\xd9\x9b\xd3\xfb\x2a\x5a\xef\x27\x92\xe8\x49\xed\xd9\x5c\x8a\xab\x14\x78\x41\xd3\x06\x8c\x3f\xf1\x5b\x80\xb4\x2f\x31\x1b\x75\xf4\xad\xb2\x48\xbb\x7e\x05\x00\x00\xff\xff\xb4\x28\x75\xda\x37\x02\x00\x00"

func flowserviceaccountRemove_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountRemove_account_creatorCdc,
		"FlowServiceAccount/remove_account_creator.cdc",
	)
}

func flowserviceaccountRemove_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountRemove_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/remove_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x93, 0x3, 0xb, 0x31, 0xee, 0xf4, 0x0, 0x1, 0xd1, 0x23, 0xca, 0x29, 0xed, 0xf8, 0x8b, 0xd1, 0xa6, 0x66, 0x57, 0xe8, 0xf9, 0xf3, 0xf3, 0xfe, 0x91, 0xbc, 0xbb, 0x2f, 0x35, 0x84, 0x3}}
	return a, nil
}

var _flowserviceaccountScriptsGet_account_creatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xbd\x0a\xc2\x30\x14\x06\xd0\x3d\x4f\xf1\x8d\xc9\x22\xce\x6e\xa1\x4d\x41\x10\x84\x06\x74\x10\x87\x90\xde\x4a\x20\x3f\x72\x93\xa8\x20\xbe\xbb\x8b\xa3\xdb\x99\x4e\x48\xf7\xc2\x0d\x53\x2c\x4f\x4b\xfc\x08\x9e\xb4\xf7\xa5\xe7\x86\x95\x4b\xc2\xf6\x35\x1d\x8e\x67\x6b\xe6\xd3\x7e\x30\x7a\x1c\x67\x63\xad\x10\xce\x7b\xaa\x55\xba\x18\x15\xd6\x9e\x91\x5c\xc8\x52\xed\x70\xd1\xcb\xc2\x54\xeb\x15\x6f\x01\x00\x4c\xad\x73\xfe\x93\x6f\x6e\xd4\x7e\x1c\x98\x5c\x2b\x5c\xa5\x12\x9f\x6f\x00\x00\x00\xff\xff\xac\xbe\xf0\x47\x8d\x00\x00\x00"

func flowserviceaccountScriptsGet_account_creatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_account_creatorsCdc,
		"FlowServiceAccount/scripts/get_account_creators.cdc",
	)
}

func flowserviceaccountScriptsGet_account_creatorsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_account_creatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_account_creators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x89, 0x94, 0x44, 0xe4, 0x7d, 0x37, 0xc8, 0x6f, 0xc5, 0x14, 0x10, 0x8, 0xe9, 0xea, 0x77, 0x26, 0x7a, 0x54, 0xa8, 0x63, 0x83, 0x49, 0x8c, 0x64, 0x3d, 0x7f, 0xd0, 0xd7, 0x71, 0x5a, 0x43}}
	return a, nil
}

var _flowserviceaccountScriptsGet_account_feeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x0f\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\x51\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf3\xf1\x0f\x0f\x76\x0d\x0a\xf3\x74\x76\x75\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\xc3\x62\xb2\x5e\x22\x84\x76\x2e\x4a\x4d\x2c\xc9\xcc\xcf\x73\x4b\x4d\xe5\xaa\x05\x04\x00\x00\xff\xff\x60\x7f\x8e\xd2\x88\x00\x00\x00"

func flowserviceaccountScriptsGet_account_feeCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_account_feeCdc,
		"FlowServiceAccount/scripts/get_account_fee.cdc",
	)
}

func flowserviceaccountScriptsGet_account_feeCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_account_feeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_account_fee.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xd7, 0x87, 0x82, 0xb, 0xc5, 0xd3, 0xf0, 0x7e, 0x40, 0x79, 0xba, 0x34, 0x9f, 0xff, 0xd, 0xa, 0x43, 0x60, 0xc9, 0xad, 0x77, 0xd0, 0xba, 0xc5, 0x6, 0xb6, 0xa9, 0x1e, 0x65, 0xae, 0xc}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_effort_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x8f\xed\x22\x0e\xe2\xd0\xad\xd8\x14\x0a\x82\xd0\xa0\x9d\x4b\xb8\xd4\x40\x9b\xc8\xe5\xa2\x85\xd2\x77\x77\x70\x75\xfa\xc6\xcf\x2f\xaf\xc8\x82\x76\x8e\x1f\x43\xfc\xf6\x96\x6a\x6b\x63\x0e\x02\xc7\x71\xc1\x71\x6d\xaf\xb7\xc1\xe8\xfe\xd1\x5d\x74\xdd\x34\xbd\x36\x46\xa9\xd1\x5a\x4a\xa9\x18\xe7\xb9\x84\xcb\x01\xcb\xe8\x43\x51\x56\xd8\xee\x5d\x90\xf3\xa9\xc2\xcf\x1d\x9b\x02\x00\x26\xc9\x1c\xfe\x1c\x87\x89\x44\xaf\x64\xb3\xf8\x18\xb4\x73\x91\x65\x20\x3f\x3d\x25\x15\xa5\xda\xbf\x01\x00\x00\xff\xff\x6c\xde\xc4\x2a\x9b\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_effort_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_effort_weightsCdc,
		"FlowServiceAccount/scripts/get_execution_effort_weights.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_effort_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_effort_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_effort_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xbd, 0x4a, 0xa4, 0x1a, 0x9, 0xd, 0xf4, 0xd3, 0xa7, 0x2e, 0xca, 0xde, 0x52, 0xaa, 0x56, 0xbb, 0xd6, 0xb4, 0xa4, 0xa3, 0x3, 0xfe, 0x81, 0xea, 0x8, 0x51, 0x92, 0x8a, 0x8, 0xba, 0x8c}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_memory_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\x00\xd0\x3d\x5f\x71\x63\xbb\x88\x83\x38\xb8\x15\x9b\x42\xa1\x22\x34\xa8\x73\x09\x57\x39\x48\xee\xe4\x7a\xd1\x8a\xf8\xef\xfe\x80\x3f\xf0\x28\x3f\x44\x0d\xba\x24\xaf\x80\xfa\xa4\x88\x4d\x8c\x52\xd8\x60\x56\xc9\xb0\x5d\xbb\xe1\x7c\x0b\x7e\xbc\xf6\x47\xdf\xb4\xed\xe8\x43\x70\x6e\x8a\x11\x97\xa5\x9a\x52\xaa\x61\x2e\x0c\x79\x22\xae\xea\x03\x5c\x7a\xb6\xfd\x0e\x3e\x0e\x00\x40\xd1\x8a\xf2\x1f\x79\x73\x47\xf3\x2b\xc6\x62\x24\x7c\xc2\x2c\xfa\x1e\x28\x93\x55\xb5\xfb\xfe\x02\x00\x00\xff\xff\x05\xa5\x88\xd1\x8f\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_memory_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_memory_limitCdc,
		"FlowServiceAccount/scripts/get_execution_memory_limit.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_memory_limitCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_memory_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_memory_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x88, 0x34, 0xd0, 0x22, 0xfe, 0x48, 0x54, 0xac, 0xd8, 0xd3, 0xae, 0xc7, 0x20, 0x32, 0x21, 0xad, 0xb3, 0x31, 0x41, 0x2, 0xdf, 0xae, 0xc, 0xaa, 0xc2, 0xa1, 0x4e, 0xce, 0x2b, 0x77, 0xaa}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_memory_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0b\x82\x40\x14\x07\xf0\xfd\x3e\xc5\x7f\xd4\x25\x1a\xa2\xc1\x4d\xf2\x04\xa1\x08\x3c\xca\x59\x8e\xa7\x1d\x78\x77\xf1\x7c\x57\x86\xf8\xdd\x1b\x5a\x9b\x7e\xe3\xcf\xf9\x67\x64\x41\x3d\xc5\xb7\x21\x7e\x39\x4b\xa5\xb5\x31\x05\xc1\xc0\xd1\x63\xbf\xd4\xe7\x6b\x67\x74\x7b\x6f\x4e\xba\xac\xaa\x56\x1b\xa3\x54\x6f\x2d\xcd\x73\xd6\x4f\x53\x8e\x21\x05\xf8\xde\x85\x2c\x2f\xb0\xde\x9a\x20\xc7\x43\x81\x9f\x1b\x56\x05\x00\x4c\x92\x38\xfc\x39\x76\x23\x89\x5e\xc8\x26\x71\x31\x5c\xc8\x47\xfe\x74\xe4\xc6\x87\xcc\x59\xae\xb6\x6f\x00\x00\x00\xff\xff\x10\x82\x47\xa5\x9b\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_memory_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_memory_weightsCdc,
		"FlowServiceAccount/scripts/get_execution_memory_weights.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_memory_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_memory_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_memory_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xcf, 0x4e, 0x4b, 0x9, 0xcc, 0xef, 0xbb, 0x14, 0x1b, 0xec, 0xa2, 0x2b, 0x99, 0x8d, 0xa4, 0x59, 0x33, 0xa5, 0x47, 0xf1, 0xa4, 0xc5, 0x1b, 0xd4, 0x1, 0xf6, 0x99, 0xe7, 0xb1, 0x83, 0x2}}
	return a, nil
}

var _flowserviceaccountScriptsGet_fees_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x4b\x4d\x2d\x56\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf3\xf1\x0f\x77\x73\x75\x0d\x76\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x1b\xa6\x97\x9e\x5a\xe2\x96\x9a\xea\x94\x98\x93\x98\x97\x9c\xaa\xa1\xc9\x55\x0b\x08\x00\x00\xff\xff\xcf\x3b\x2e\x2a\x6e\x00\x00\x00"

func flowserviceaccountScriptsGet_fees_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_fees_balanceCdc,
		"FlowServiceAccount/scripts/get_fees_balance.cdc",
	)
}

func flowserviceaccountScriptsGet_fees_balanceCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_fees_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_fees_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xb3, 0xe5, 0xbe, 0x7a, 0xbc, 0xe8, 0x99, 0x4f, 0x9f, 0x20, 0xf, 0x3d, 0x11, 0x31, 0x93, 0x3a, 0xbb, 0x1f, 0x61, 0x27, 0x23, 0x43, 0xe8, 0x3d, 0x41, 0x39, 0xd9, 0xa, 0x67, 0x54, 0xd2}}
	return a, nil
}

var _flowserviceaccountScriptsGet_is_account_creation_restrictedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\xca\xc2\x30\x10\x00\xe0\x3d\x4f\x71\x63\xbb\xfc\xfc\xb3\x5b\x6d\x53\x10\x04\x21\x01\x9d\xc3\x79\x85\x83\x24\x27\x97\x8b\x0a\xe2\xbb\xbb\x38\xba\x7d\xd3\xc7\xe5\x26\x6a\xb0\x66\x79\x44\xd2\x3b\x23\x4d\x88\xd2\xab\xc1\xa6\x52\xe0\xff\xb9\x1e\x4f\x97\xe8\xc3\xf9\x30\xfb\x69\x59\x82\x8f\xd1\xb9\x84\x48\xad\x0d\x29\xe7\x11\xb6\x5e\xa1\x24\xae\xc3\xb8\x83\xbd\x48\x86\x97\x03\x00\x50\xb2\xae\xf5\xc7\xfb\xc7\xed\xab\x59\x29\x19\x4b\x0d\xd4\x4c\x19\x8d\xae\xc3\xe8\xde\x9f\x00\x00\x00\xff\xff\x00\xd7\xce\x85\x91\x00\x00\x00"

func flowserviceaccountScriptsGet_is_account_creation_restrictedCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_is_account_creation_restrictedCdc,
		"FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc",
	)
}

func flowserviceaccountScriptsGet_is_account_creation_restrictedCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_is_account_creation_restrictedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0x10, 0xbe, 0xc5, 0x7d, 0xb7, 0x8a, 0x89, 0x8a, 0xa8, 0xea, 0x76, 0x11, 0xaa, 0xdd, 0x97, 0x83, 0xca, 0xc0, 0x60, 0x1f, 0xe0, 0xf9, 0x7, 0x5, 0x2, 0xdc, 0x4e, 0x8a, 0x89, 0x61, 0x59}}
	return a, nil
}

var _flowserviceaccountScriptsGet_is_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xb1\xaa\xc2\x30\x14\x87\xf1\x3d\x4f\xf1\x1f\xdb\xe5\x72\xe7\x6e\xb1\x4d\x41\x10\x84\x06\x74\x0e\xe9\x29\x04\x92\x1c\x39\x49\x54\x10\xdf\xdd\x41\xdd\xdc\x7e\xd3\xf7\x85\x74\x61\xa9\x98\x23\xdf\x2c\xc9\x35\x78\xd2\xde\x73\xcb\x15\x9b\x70\xc2\xff\x7d\x3e\x1c\xcf\xd6\x2c\xa7\xfd\x68\xf4\x34\x2d\xc6\x5a\xa5\x9c\xf7\x54\x4a\xe7\x62\xec\xb1\xb5\x8c\xe4\x42\xee\xdc\xba\x0a\x95\x32\x40\xbf\xd1\x0f\xd8\x31\x47\x3c\x14\x00\x08\xd5\x26\xf9\xc7\xe7\x2f\x94\x8f\x46\x21\x57\x59\xbe\xa1\x5e\x3d\x5f\x01\x00\x00\xff\xff\x52\x31\xc0\x1c\x9d\x00\x00\x00"

func flowserviceaccountScriptsGet_is_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_is_account_creatorCdc,
		"FlowServiceAccount/scripts/get_is_account_creator.cdc",
	)
}

func flowserviceaccountScriptsGet_is_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_is_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_is_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x8e, 0x8, 0x40, 0xf7, 0x6e, 0x2d, 0x2b, 0x73, 0xd5, 0xcf, 0x2d, 0x12, 0x1e, 0x4a, 0x5d, 0xfe, 0x93, 0xa7, 0xc8, 0xf, 0x2e, 0x2e, 0x1c, 0xd7, 0x1f, 0x7c, 0xfe, 0xb, 0xbc, 0x16, 0xb6}}
	return a, nil
}

var _flowserviceaccountScriptsGet_tx_fee_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x4b\x4d\x2d\x56\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf3\xf1\x0f\x77\x73\x75\x0d\x76\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x82\x6b\xd4\x73\x4b\x4d\x0d\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\xa8\x49\x4f\x2d\x41\x51\xa6\xa1\xc9\x55\x0b\x08\x00\x00\xff\xff\x09\x2c\xd3\xfc\x81\x00\x00\x00"

func flowserviceaccountScriptsGet_tx_fee_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_tx_fee_parametersCdc,
		"FlowServiceAccount/scripts/get_tx_fee_parameters.cdc",
	)
}

func flowserviceaccountScriptsGet_tx_fee_parametersCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_tx_fee_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_tx_fee_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0x1c, 0xec, 0x0, 0x38, 0xf6, 0x3d, 0x5a, 0x7e, 0x7a, 0x73, 0xd0, 0xe8, 0xa1, 0xf1, 0xd6, 0x81, 0x73, 0x5, 0x5e, 0x52, 0x4a, 0xe3, 0x75, 0x69, 0xbb, 0x77, 0xa7, 0x37, 0x63, 0xe4, 0x69}}
	return a, nil
}

var _flowserviceaccountSet_execution_effort_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x5d\x6b\xe3\x3a\x10\x86\xef\xf3\x2b\x06\x9f\x9b\x14\xd2\x38\x4e\x62\x27\x36\x87\x03\xa5\xe7\x14\xca\xe9\xc2\xc2\x7e\x5d\x94\x2e\x1d\xcb\xe3\x58\x5b\x4b\xf2\x4a\x72\xd2\x10\xf2\xdf\x17\x59\x71\x9b\x7e\xb0\xec\x2e\x7b\xb1\x86\x48\x62\xde\x99\x47\x6f\x34\x52\x18\xc2\xfb\x8a\x1b\xb0\x1a\xa5\x41\x66\xb9\x92\x06\x0c\x59\x03\x92\x36\x40\xf7\xc4\x5a\x17\x03\x2a\x4b\xa5\x2d\x6c\x88\xaf\x2a\x6b\x06\x5d\x19\x81\xc0\x7b\x2e\x5a\xf1\x32\xaf\xe6\x82\x5b\x28\x95\x7e\x0a\xe6\x06\xb0\xde\xe0\xd6\x40\xea\xbe\x71\xcf\xf1\x58\x90\x28\xc8\x84\xbc\x30\xc0\x50\x42\x4e\x60\x88\x24\x54\xa4\x29\x73\x99\xee\x77\x0a\xd7\xe7\x58\x90\x64\x04\xe7\x4a\x34\xad\x45\x47\xfe\x9f\xcb\xe2\x66\x58\x59\xdb\x98\x2c\x0c\x57\xdc\x56\x6d\x3e\x66\x4a\x84\x4a\x96\xb5\xda\x84\xcc\x97\x84\x79\xad\xf2\x30\x99\x2c\x62\x2a\xe7\x4b\xb6\x60\x53\x9c\x24\x51\x31\x5d\xd0\x2c\xc9\x27\x69\x8c\xb4\x20\x16\xd3\x74\x32\x8f\x19\x2e\x42\xdd\x4a\xcb\x05\x85\x4c\x09\xa1\xa4\x9b\xfa\xfd\xee\xb8\x2c\xc6\x2b\xf5\xd7\xd5\x6c\x72\x72\x70\x75\xf1\xf1\xcd\xcf\x38\x72\xc3\xe9\x4a\x79\x47\x51\x51\xce\x67\x05\x2d\x63\x16\xe7\x8b\x38\x89\x96\x71\x14\xe1\xb2\xa4\x34\xa5\x34\x4d\x97\x98\x4f\x69\xce\x8a\x38\x0d\xcb\xb5\x08\x05\x59\xd2\x7e\xec\x2c\xa4\xce\x81\x37\x61\x2b\x02\x2e\x2d\x69\x89\x35\x34\x9a\x18\x37\xae\x27\xaa\xec\x94\x17\x4d\xea\x18\xae\x27\xd3\xcf\x51\x32\x82\x4d\xc5\x59\x05\x82\x50\xfa\x88\x53\xe8\x6b\x8b\x35\x58\x05\x11\xa8\xd6\xf6\x24\xab\x2c\xd6\xbe\x85\x2f\xa9\xb8\x46\x5e\x63\x5e\xbb\x34\xc0\xe3\xfe\x8f\x0f\x46\x5d\xc7\x0b\x2a\xb1\xad\x1f\x2e\x14\xa0\xef\xb1\xff\x1f\xcf\xce\xf1\x4a\xa9\x26\x83\xe8\x55\xed\x9d\x45\x4b\x82\xa4\xcd\x20\x82\x57\x33\x2e\x5a\xd9\xed\x7e\x29\xd7\x8a\x75\x51\xcf\x72\xc9\x4a\x03\x97\xd0\xa0\x46\x7f\x16\xa5\xd2\xa2\xb7\x71\x7b\x7b\xfb\xc5\x28\xe9\x96\xd7\x6e\x00\xd8\xf9\x09\x20\xb0\xdb\x86\x82\x0c\x82\x7f\x79\x87\x46\xbd\x0d\x46\x0f\xe2\x1a\xeb\xd6\xa9\xd7\x7d\xe4\xa8\xb2\x4b\xb8\xa3\x6d\x90\xc1\xee\x11\xf3\xe1\x52\xda\x64\x1e\x8c\x1e\x6b\x83\x68\x32\x89\x02\xd8\x8f\x9e\x14\xf6\xea\xf7\x4b\x93\x38\x9e\x25\x01\xec\x1f\x4b\x8f\x31\xbf\x64\x65\xfa\xe7\x58\x99\xfd\x3e\x2b\xfd\xf2\xc6\x2f\x7a\xec\x11\xe7\x2d\xda\xea\x98\xb2\x83\xa0\x50\x02\xb9\x74\xa2\xb1\x4a\xe3\x8a\x9c\xce\x0b\x92\x96\x97\x9c\xb4\x13\x1e\x9e\xc4\x7f\xdd\x8b\xf8\xe4\xaf\x78\x00\x7b\xbf\xe5\xcd\xe1\x76\x0d\x8e\x9e\xc6\x50\xd2\xe6\x90\x97\xc1\xce\xdb\xcf\xc0\xcf\xfb\x13\xd8\x0d\x9c\xcf\x46\x53\x83\x9a\x86\x86\xaf\x24\xe9\x0c\xce\x5a\x5b\x9d\x31\xa6\x5a\x69\xfb\x14\xf7\x79\x79\x5c\x2b\x2c\xfe\x7e\x8e\xfa\x67\x58\x6a\x25\x32\x08\x0f\xe6\xc3\xd7\xbd\x9e\x3c\x87\x19\x5c\xd3\x91\xc7\x11\x58\xf5\x83\x90\xfd\x60\xff\x2d\x00\x00\xff\xff\xad\xdd\x1d\x36\x64\x06\x00\x00"

func flowserviceaccountSet_execution_effort_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_effort_weightsCdc,
		"FlowServiceAccount/set_execution_effort_weights.cdc",
	)
}

func flowserviceaccountSet_execution_effort_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_effort_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_effort_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x75, 0xac, 0x6, 0xec, 0xf7, 0x3e, 0xda, 0xc2, 0x1c, 0xbc, 0xdb, 0xd2, 0xf9, 0x50, 0x92, 0x2c, 0xd2, 0x95, 0x48, 0xef, 0xad, 0xf0, 0x6a, 0xbc, 0x92, 0x53, 0xa0, 0xa, 0xcf, 0x9d, 0x6a}}
	return a, nil
}

var _flowserviceaccountSet_execution_memory_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xc1\x8a\x83\x40\x10\x44\xef\x7e\x45\x1d\x15\x16\xe7\xb2\xec\x41\x96\x05\x8f\x0b\xc9\x2d\xf9\x80\x61\xd2\xd1\x01\x67\x46\xba\xdb\x98\x10\xfc\xf7\xa0\x12\x09\x39\xa5\x8f\xd5\xc5\xab\x67\x0c\x0e\xad\x17\x28\xdb\x28\xd6\xa9\x4f\x51\x20\xa4\x02\x8b\x48\x23\xe8\x4a\x6e\x98\x53\x04\x0a\x89\x6f\xe8\x7c\xf0\x5a\x66\x2f\xfd\x3c\xd2\xb8\x9b\xd3\x0a\xc7\xff\xa8\x3f\xdf\x05\xee\x19\x00\xf4\x4c\xbd\x65\xca\xc5\x37\x91\xb8\x42\x3d\x68\x5b\x3b\x97\x86\xa8\xcf\xca\x7c\xeb\xbb\xec\x92\x3d\xfd\xae\x80\xbf\xfc\xcc\x29\x54\x30\xa2\x89\x6d\x43\x66\xb3\xd8\x2f\x12\xcb\x5a\xf1\x0e\x10\x7b\xa1\xcd\xe5\x0b\x9a\x3e\x02\x4c\xd9\xf4\x08\x00\x00\xff\xff\x3e\xdc\x40\xf4\x04\x01\x00\x00"

func flowserviceaccountSet_execution_memory_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_memory_limitCdc,
		"FlowServiceAccount/set_execution_memory_limit.cdc",
	)
}

func flowserviceaccountSet_execution_memory_limitCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_memory_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_memory_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x26, 0x87, 0x5b, 0xdc, 0xb4, 0xba, 0xbb, 0x30, 0xf6, 0x69, 0x15, 0xcf, 0xe4, 0x23, 0xea, 0x24, 0x40, 0x9e, 0x5c, 0xe7, 0x38, 0xfe, 0x13, 0x11, 0x19, 0xb1, 0xde, 0xab, 0x20, 0xe4, 0xf1}}
	return a, nil
}

var _flowserviceaccountSet_execution_memory_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\x37\xb6\x20\xcd\x22\x0e\x41\x84\x8e\x0e\x6e\x8a\x73\x88\x67\x1b\xb0\x49\xc9\x5d\xad\x52\xfa\xdf\xa5\x56\xa5\x74\xf2\x96\x83\xf7\x1e\x1f\x9f\x52\x38\x56\x8e\x21\xd1\x78\x36\x56\x5c\xf0\x0c\x26\x61\x78\xea\x40\x0f\xb2\xed\x98\xa1\xa6\x3a\xc4\x27\x3a\x72\x65\x25\x9c\x27\xb3\x7d\xea\xa9\x3b\x4f\xb9\x46\x7f\xda\x7b\xd9\xac\x35\xa6\x3f\x64\xe8\x13\x00\x68\x22\x35\x26\x52\xca\xae\xf4\x14\x35\x8a\x56\xaa\xc2\xda\xd0\x7a\xf9\x4e\xc6\x9b\xea\xfc\x16\xcc\x65\xbb\x44\xed\xd2\x6b\x0c\xb5\x86\x62\x09\xd1\x94\xa4\x7e\x76\x87\xb7\xdc\xc7\x21\x5b\xc2\xd8\xdc\x69\xe6\xb8\x82\x84\x3f\x21\x43\x32\xbc\x02\x00\x00\xff\xff\x96\xe9\x2c\xf0\x20\x01\x00\x00"

func flowserviceaccountSet_execution_memory_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_memory_weightsCdc,
		"FlowServiceAccount/set_execution_memory_weights.cdc",
	)
}

func flowserviceaccountSet_execution_memory_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_memory_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_memory_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0x9e, 0xe1, 0x98, 0x6a, 0x53, 0x46, 0x75, 0xcd, 0x3e, 0x85, 0x4f, 0xc5, 0x75, 0x19, 0xd2, 0xa, 0x71, 0x20, 0xb2, 0xc3, 0xa8, 0x1c, 0x2a, 0xc6, 0x45, 0xd5, 0x39, 0x69, 0xee, 0xc9, 0x8c}}
	return a, nil
}

var _flowserviceaccountSet_is_account_creation_restrictedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6b\xf3\x30\x10\x84\xcf\xd2\xaf\x58\x72\x78\x71\x2e\xf6\x7b\x36\x6d\x83\xf3\x05\x81\x42\x21\xee\xc7\x35\x8a\xb2\x4e\x04\x8e\xd6\xac\xd6\x49\xa0\xe4\xbf\x17\xab\xa1\x4d\xa8\x4b\xaf\x5a\xed\xec\x33\x33\x6e\xdf\x10\x0b\xcc\x6b\x3a\x96\xc8\x07\x67\xb1\xb0\x96\x5a\x2f\x50\x31\xed\xe1\xff\x69\xfe\xf8\xf4\x56\xce\x96\xaf\x8b\xc9\xac\x98\x4e\x97\xb3\xb2\xd4\x3a\xcb\xe0\x79\xe7\x02\x08\x1b\x1f\x8c\x15\x47\x1e\xec\xce\xf8\x2d\x06\x58\xb9\x00\xe6\x22\x61\x91\x4d\x1c\x32\x06\x61\x67\x05\x37\x2b\x38\x98\xba\x45\x7d\xb5\x9a\x7c\x4f\x73\x18\x13\xd5\x43\x78\xd7\x5a\xd5\x28\x10\x6e\x90\x8a\xcd\xde\xf9\x1c\xfe\xfd\x84\x4d\xe3\xc8\x05\x61\x23\xc4\x5a\xab\x86\xb1\x31\x8c\x49\x70\x5b\x8f\x9c\x43\xd1\xca\xee\xf2\xb7\x53\x57\x2a\xcb\x60\x4c\xcc\x74\x04\xc6\x0a\x19\xbd\x45\x10\xea\xcb\xe1\x46\xba\x73\x42\x2d\x5b\x4c\xa3\x86\x56\x2a\x60\x5d\xa5\x3d\x9c\x70\x0f\x9f\xc7\xd3\x75\xbc\x73\xf7\x27\xf6\x43\xd2\x45\x9e\x43\x16\x84\xd8\x6c\x31\xab\xae\x16\xba\x8f\x43\xad\x94\x1a\x8d\xa0\x31\xde\xd9\x64\xf0\xe2\xcd\xba\x8e\xd4\xeb\x1e\x27\xa6\x17\x7b\x30\xd4\xea\xac\x15\x9e\xd0\xb6\x82\x31\x89\xdf\x0c\xa4\x01\x65\x11\x2e\x2f\x13\xc6\xd8\xe4\xf2\xab\xaa\xab\xd6\xa2\xe6\xf9\x23\x00\x00\xff\xff\xd6\x4c\xa3\x70\x4a\x02\x00\x00"

func flowserviceaccountSet_is_account_creation_restrictedCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_is_account_creation_restrictedCdc,
		"FlowServiceAccount/set_is_account_creation_restricted.cdc",
	)
}

func flowserviceaccountSet_is_account_creation_restrictedCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_is_account_creation_restrictedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_is_account_creation_restricted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0xe6, 0x5c, 0x96, 0xf7, 0xd5, 0xbe, 0x67, 0xcc, 0x62, 0x34, 0x2b, 0x4d, 0xd5, 0x3f, 0xb6, 0x29, 0xe7, 0xa8, 0xe7, 0x8c, 0x2b, 0xa, 0xd0, 0x7e, 0x8c, 0x5, 0xc5, 0xe7, 0x9f, 0x69, 0x7f}}
	return a, nil
}

var _flowserviceaccountSet_tx_fee_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6b\xe3\x40\x0c\x85\xcf\x33\xbf\x42\xe4\xb0\x38\xb0\xd8\x7b\x58\xf6\x60\xb6\x0d\xa6\xb1\x4f\x85\x96\xa6\xa1\xe7\xc9\x54\x4e\x06\xec\x91\x91\x64\x12\x28\xf9\xef\x25\x4e\x9a\xa4\xe0\xf4\x38\x6f\xf4\x3e\x3d\xf4\x42\xdb\x11\x2b\x54\x0d\x6d\x2b\x44\x81\x9a\xa9\x85\x3f\xbb\xea\xf1\xe9\xad\x2a\xcb\x45\x31\x9f\xbf\x94\x8b\x85\xb5\x59\x06\xaf\x9b\x20\xa0\xec\xa2\x38\xaf\x81\x22\x08\xaa\x80\x6e\xf0\xe2\xee\x1c\xbb\x16\x15\x59\xec\xd5\x60\x22\x3d\xaf\xb1\x72\x5e\x89\x73\x58\x56\x61\xf7\xef\xef\x6f\x08\xd1\x37\xbd\x04\x8a\x65\x5d\x13\xeb\x03\x89\x5e\x3e\x71\x87\xbe\xd7\xd1\xcf\x29\x7c\x58\xd3\xa0\x42\x7d\xda\x5a\x78\x4f\x7d\xd4\xe2\xbd\x0d\x31\x87\x5f\x5f\x61\xd2\x41\x08\xa2\xec\x94\xd8\x5a\xd3\x31\x76\x8e\x31\x91\xb0\x8e\xc8\x39\x14\xbd\x6e\x4e\xde\x81\x69\x04\x9b\x3a\x1d\xa3\xc2\x1d\x1c\x4d\xe9\x8a\x98\x69\xfb\xff\xc6\x92\xfb\xe4\x70\xbe\x1c\x32\x51\x62\xb7\xc6\xec\x0c\x3b\x4c\x4d\xad\x31\x66\x36\x83\xce\xc5\xe0\x93\xc9\x32\xba\x55\x83\xa0\x04\x47\x28\x30\xd6\xc8\x18\xfd\xa0\xb9\x6b\x2e\x30\x0a\xf5\xec\x71\x32\xb5\x66\x6f\xcd\xf1\x3a\xf8\x73\xe8\x54\x50\x2b\xc4\xe7\x73\x25\xdf\x6b\xb8\x7a\xdc\xe8\x62\x44\xbc\x51\xcc\x88\x38\x04\xdd\x7f\x06\x00\x00\xff\xff\xff\xaa\x15\x0d\x5e\x02\x00\x00"

func flowserviceaccountSet_tx_fee_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_tx_fee_parametersCdc,
		"FlowServiceAccount/set_tx_fee_parameters.cdc",
	)
}

func flowserviceaccountSet_tx_fee_parametersCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_tx_fee_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_tx_fee_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0xd9, 0xa, 0xe8, 0x29, 0x62, 0x98, 0x4f, 0xb0, 0x5b, 0x5b, 0x90, 0x2e, 0x2c, 0xa0, 0x36, 0x6b, 0x6b, 0x7d, 0x8f, 0xfc, 0xdd, 0x15, 0xf5, 0xa9, 0x70, 0x54, 0xe7, 0x8, 0x37, 0x39, 0x9b}}
	return a, nil
}

var _flowserviceaccountSet_tx_fee_surge_factorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x4a\xf3\x40\x14\x85\xd7\x33\x4f\x71\xe9\xe2\x27\xdd\x24\xff\x42\x5c\x04\xb5\x04\xda\x59\x09\x82\xb1\xb8\x9e\x8e\x27\xed\x40\x32\x13\xee\xdc\xd0\x82\xf4\xdd\xa5\x69\xb5\x11\xd4\xe5\x1c\xce\xf7\xcd\xe5\xf8\xae\x8f\x2c\x64\xda\xb8\x37\x40\xa2\x86\x63\x47\xff\x0f\xe6\xf1\xe9\xd5\xac\x56\x75\xb5\x5c\x3e\xaf\xea\x5a\xeb\xa2\xa0\x97\x9d\x4f\x24\x6c\x43\xb2\x4e\x7c\x0c\x94\x20\x89\x64\x87\x2b\xdd\x5b\xb6\x1d\x04\x9c\xf4\xa4\x98\xa5\x81\xb7\x30\xd6\x49\xe4\x92\xd6\xc6\x1f\x6e\x6f\xe6\xf4\xae\x55\x0b\xa1\xe6\xc2\x56\xce\xc5\x21\x48\xf5\xd6\xf9\x50\xd2\xbf\x4f\x65\x3e\x06\x3e\x09\x5b\x89\xac\xb5\xea\x19\xbd\x65\x64\xc9\x6f\x03\xb8\xa4\x6a\x90\xdd\x85\x1d\x9d\x2a\xa1\x6d\xf2\x9f\xac\x74\x4f\x67\x28\xdf\x44\xe6\xb8\xbf\xfb\xe5\x93\x87\xec\x34\x42\x49\x45\x92\xc8\x76\x8b\xe2\x4b\x76\x6a\xcd\xb5\x52\x6a\xb1\xa0\xde\x06\xef\xb2\xd9\x3a\xd8\x4d\x0b\x92\x48\x67\x29\x31\x1a\x30\x82\x1b\x33\x3b\xf5\x12\x23\xc5\x81\x1d\x66\x73\xad\x8e\x5a\xe1\x00\x37\x08\xfe\x3e\x3a\x4f\x10\x03\xd4\xd7\x05\xbf\xaf\x39\x79\x8c\xd6\xe3\x47\x00\x00\x00\xff\xff\x1e\x43\xfa\x9c\xd1\x01\x00\x00"

func flowserviceaccountSet_tx_fee_surge_factorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_tx_fee_surge_factorCdc,
		"FlowServiceAccount/set_tx_fee_surge_factor.cdc",
	)
}

func flowserviceaccountSet_tx_fee_surge_factorCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_tx_fee_surge_factorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_tx_fee_surge_factor.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x84, 0xea, 0x4e, 0xdf, 0x39, 0x64, 0x58, 0x5c, 0x35, 0xeb, 0xc3, 0x27, 0xcb, 0x39, 0xc9, 0xa5, 0xf, 0x7b, 0xbe, 0x52, 0x59, 0x3c, 0xbc, 0x9a, 0xc2, 0x15, 0x2f, 0x72, 0xc3, 0x0, 0xb2}}
	return a, nil
}

var _dkgAdminForce_stop_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4f\x83\x40\x10\x85\xef\xfc\x8a\x97\x1e\x0c\x5c\x88\x67\xa2\x36\x44\x2a\x07\x2e\x46\x7e\xc1\xba\x0c\x74\x23\xcc\x90\x61\x48\x9b\x98\xfe\x77\x83\x6b\x35\x3d\xf8\x2e\x9b\x9d\xbc\xf7\xcd\x9b\x30\xcd\xa2\x86\x97\x51\x4e\x55\x53\xa3\x57\x99\x70\x7f\xae\x9a\xba\xac\xaa\xb7\x43\xdb\x26\x89\xa9\xe3\xc5\x79\x0b\xc2\xf8\x4c\x12\x00\x18\xc9\xd0\x7d\x0c\x65\x37\x05\x2e\x70\xf7\x13\xce\xbf\xff\xd1\x31\x2b\xcd\x4e\x29\x5d\xc2\xc0\xa4\x05\xca\xd5\x8e\xa5\xf7\xb2\xb2\x65\x57\xca\xa6\x85\xc6\x3e\xbf\xa2\xf0\x88\xe8\xcf\xdf\x45\x55\x4e\x0f\xb7\xe4\xa7\x74\x6b\x57\xe0\x66\xd8\x9a\xa8\x1b\xe8\xd5\xd9\x31\xfb\xa5\x6e\xda\xef\x31\x3b\x0e\x3e\xdd\x3d\xcb\x3a\x76\x60\x31\x44\x2c\xb6\x43\xe3\x42\xa5\x9e\x94\xd8\xd3\x2e\x8b\x9d\x2e\xf1\xa1\x33\xf9\xd5\xe8\xdf\xa6\x79\x2f\xea\xe9\xc0\x5d\xd5\xd4\xe9\x5f\xf4\xf2\x15\x00\x00\xff\xff\x6b\xe4\xb6\xb3\x4e\x01\x00\x00"

func dkgAdminForce_stop_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminForce_stop_dkgCdc,
		"dkg/admin/force_stop_dkg.cdc",
	)
}

func dkgAdminForce_stop_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminForce_stop_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/force_stop_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x53, 0xf9, 0x8d, 0x95, 0x45, 0x15, 0x8e, 0x63, 0x8, 0xf2, 0x6b, 0x8e, 0xd9, 0x78, 0xd1, 0xb5, 0x25, 0x89, 0x30, 0xf7, 0x90, 0x6d, 0xe2, 0x60, 0xed, 0x4d, 0xb9, 0x5d, 0xdc, 0xd, 0x6c}}
	return a, nil
}

var _dkgAdminPublish_participantCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x4b\xc3\x40\x10\x05\xe0\xfb\xfc\x8a\xe7\x45\x5a\x90\xc6\x73\x11\x21\x10\xed\xa1\x17\x31\xfe\x81\x35\xdd\x6e\x86\x6e\x66\x96\xd9\x09\x2a\xd2\xff\x2e\x1a\x05\x3b\xc7\x79\x1f\x8f\xc7\x53\x51\x73\x3c\x66\x7d\xeb\xf6\x3b\x1c\x4d\x27\xdc\xbe\x77\xfb\x5d\xdb\x75\xcf\x0f\x7d\x4f\xd4\x34\x78\x19\xb9\xc2\x2d\x48\x0d\x83\xb3\x0a\xb8\x42\x25\x7f\xe0\xa8\x06\x8f\xd5\x59\xd2\x15\xd1\x7f\xf1\x49\x04\x00\xc5\x62\x09\x16\x57\x95\x93\x44\xdb\xa2\x9d\x7d\x6c\x87\x41\x67\xf1\xf5\x9f\xf9\xbe\x25\xdf\x64\x96\xd3\xdd\xf5\xef\x98\x4d\x7b\x98\x58\xee\x57\x4d\x99\x5f\x33\x0f\xcd\xe1\x94\x7e\x3e\x37\xf0\x60\x29\xfa\x16\x17\xb0\x77\xb5\x90\xe2\x53\xf0\x71\xbd\x14\x9f\x89\xce\x5f\x01\x00\x00\xff\xff\xd0\x9c\x76\xb8\xe0\x00\x00\x00"

func dkgAdminPublish_participantCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminPublish_participantCdc,
		"dkg/admin/publish_participant.cdc",
	)
}

func dkgAdminPublish_participantCdc() (*asset, error) {
	bytes, err := dkgAdminPublish_participantCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/publish_participant.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x55, 0xff, 0x37, 0xec, 0x8, 0x49, 0xe7, 0xe0, 0xd, 0xea, 0xad, 0x75, 0x78, 0xe, 0x7e, 0x3e, 0xc5, 0xc4, 0x78, 0x6f, 0xda, 0x66, 0x26, 0x76, 0x96, 0xa0, 0x81, 0xc, 0xc3, 0xe3, 0x1c}}
	return a, nil
}

var _dkgAdminSet_safe_thresholdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xb4\x40\x10\x84\xef\x3e\x45\xb3\x87\x1f\xbd\xc8\x7f\x08\x39\x48\x12\x91\x98\xdd\xc3\x5e\x96\x98\x3c\xc0\x64\x2c\x75\x88\xce\x48\x4f\x8b\x42\xd8\x77\x0f\x66\x12\xc3\x42\xb6\x2f\xc3\x14\xc5\x57\x45\x99\x61\x74\x2c\xb4\xef\xdd\x5c\x1e\x0f\xd4\xb0\x1b\xe8\xff\x52\x1e\x0f\x45\x59\x3e\x3f\x55\x55\x14\x09\x2b\xeb\x95\x16\xe3\x6c\x6c\x31\xbf\x74\x0c\xdf\xb9\xbe\x3e\x81\x35\xac\xa8\x16\x19\xbd\xee\xcd\x72\x7b\x93\x27\xf4\x11\x45\x44\x44\x3d\x84\xea\xf7\xb6\xa8\x07\x63\x33\xfa\xf7\x4d\x4f\xbf\xfe\xc1\x31\x32\x46\xc5\x88\xbd\x69\x2d\x38\xa3\x62\x92\xae\xd0\xda\x4d\x56\x36\xca\x7a\x1e\x7d\x93\xfe\xa0\xe8\x9e\x82\x3f\x7d\x73\xcc\x6e\xbe\xbb\x24\x3f\xc4\x6b\xfd\x8c\x2e\xc4\x4a\x1c\xab\x16\x27\x25\x5d\xb2\x51\xd7\xcb\x73\x1a\x95\x35\x3a\xde\x3d\xba\xa9\xaf\xc9\x3a\xa1\x80\xa5\x75\x89\x10\xc8\x68\xc0\xb0\x1a\xbb\x24\x74\x3a\x87\x07\x0b\xf4\x24\xb8\xda\x34\xf5\x90\x4a\x35\xa8\x26\xad\xe1\xfd\x36\xda\xd5\x05\xff\xd6\x7f\x43\xcf\x9f\x01\x00\x00\xff\xff\x08\xd4\x0e\xba\xa9\x01\x00\x00"

func dkgAdminSet_safe_thresholdCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminSet_safe_thresholdCdc,
		"dkg/admin/set_safe_threshold.cdc",
	)
}

func dkgAdminSet_safe_thresholdCdc() (*asset, error) {
	bytes, err := dkgAdminSet_safe_thresholdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/set_safe_threshold.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0xee, 0x21, 0xa5, 0x42, 0x7, 0x30, 0x80, 0x1b, 0x7f, 0x7f, 0x43, 0xfd, 0x0, 0x77, 0xfc, 0x63, 0xc5, 0x5d, 0x9c, 0x14, 0xe5, 0xe8, 0x5b, 0x96, 0x59, 0xd7, 0x95, 0xcc, 0x7a, 0x44, 0x85}}
	return a, nil
}

var _dkgAdminStart_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x8f\x1e\x24\xb9\x04\xcf\x41\x2d\xc1\xd5\x20\xb9\x88\x39\x8a\x87\x75\x33\x49\x17\x93\x9d\x30\x99\xd0\x82\xf4\xbf\x4b\xdc\xda\xd2\x83\xef\xb2\x3b\xc3\xe3\x9b\x37\xe3\xc7\x89\x45\xf1\x3c\xf0\xde\xd4\x15\x3a\xe1\x11\xb7\x07\x53\x57\xa5\x31\x6f\x4f\x4d\x93\x24\x2a\x36\xcc\xd6\xa9\xe7\x90\x06\x6e\xe9\xc5\xcc\x05\xde\x1b\x15\x1f\xfa\x8f\x0c\xdf\x49\x02\x00\x03\x29\xda\xaf\xbe\x6c\x47\x1f\x0a\xdc\x9c\x78\xf9\x6f\x1d\x1d\x93\xd0\x64\x85\xd2\xd9\xf7\x81\xa4\x40\xb9\xe8\xae\x74\x8e\x97\xa0\x67\xca\xaa\x99\x86\x2e\xff\x43\xe1\x1e\xd1\x9f\x7f\xb2\x08\xef\xef\xae\xc9\x0f\xe9\x1a\xb8\xc0\x55\xb3\x51\x16\xdb\xd3\xab\xd5\x5d\x76\xa6\xae\xda\x6e\x31\xd9\xe0\x5d\xba\x79\xe4\x65\x68\x11\x58\x11\xb1\x58\x77\x8f\x03\x85\x3a\x12\x0a\x8e\x36\x59\xcc\x74\x8c\x0f\x1d\xc8\x2d\x4a\xff\x26\xcd\x67\xb5\xa2\xa6\xae\x2e\x47\x3a\x7d\x2e\x9c\xe3\x4f\x00\x00\x00\xff\xff\x07\x1f\xfa\x84\x6e\x01\x00\x00"

func dkgAdminStart_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminStart_dkgCdc,
		"dkg/admin/start_dkg.cdc",
	)
}

func dkgAdminStart_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminStart_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/start_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x9c, 0x4f, 0xf1, 0xca, 0x18, 0x35, 0xe8, 0xbf, 0xb3, 0x93, 0x79, 0x1b, 0x85, 0xe7, 0xc5, 0x4b, 0x22, 0x3, 0xa, 0x8a, 0x91, 0x42, 0xf4, 0x2e, 0x24, 0x32, 0x55, 0xba, 0xc8, 0x15, 0x5c}}
	return a, nil
}

var _dkgAdminStop_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4f\x83\x40\x10\x85\xef\xfc\x8a\x97\x1e\x0c\x5c\x88\x67\xa2\x36\x44\x94\x03\x17\x23\xbf\x60\x5d\x06\xba\x11\x66\xc8\x30\xa4\x4d\x4c\xff\xbb\xc1\xb5\x9a\x1e\xfa\x2e\x9b\x9d\xbc\xf7\xcd\x9b\x30\xcd\xa2\x86\xd7\x51\x8e\x55\x53\xa3\x57\x99\x70\x7f\xaa\x9a\xba\xac\xaa\xf7\x97\xb6\x4d\x12\x53\xc7\x8b\xf3\x16\x84\xf1\x95\x24\x00\x30\x92\xa1\xfb\x1c\xca\x6e\x0a\x5c\xe0\xee\x37\x9c\xff\xfc\xa3\x63\x56\x9a\x9d\x52\xba\x84\x81\x49\x0b\x94\xab\x1d\x4a\xef\x65\x65\xcb\x2e\x94\x4d\x0b\x8d\x7d\x7e\x41\xe1\x11\xd1\x9f\x7f\x88\xaa\x1c\x1f\xae\xc9\x4f\xe9\xd6\xae\xc0\xd5\xb0\x35\x51\x37\xd0\x9b\xb3\x43\xf6\x47\xdd\xb4\xdf\x63\x76\x1c\x7c\xba\x7b\x96\x75\xec\xc0\x62\x88\x58\x6c\x87\xc6\x85\x4a\x3d\x29\xb1\xa7\x5d\x16\x3b\x9d\xe3\x43\x27\xf2\xab\xd1\xcd\xa6\x39\x71\x57\x35\x75\xfa\x9f\x3a\x7f\x07\x00\x00\xff\xff\x74\x8c\xee\x80\x49\x01\x00\x00"

func dkgAdminStop_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminStop_dkgCdc,
		"dkg/admin/stop_dkg.cdc",
	)
}

func dkgAdminStop_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminStop_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/stop_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xe4, 0x2, 0xa5, 0xa0, 0x9b, 0xd5, 0xc3, 0xdb, 0x5d, 0x5a, 0xfa, 0xe6, 0x41, 0x85, 0x32, 0x8e, 0xae, 0x4e, 0xd8, 0x6f, 0x1a, 0x37, 0x77, 0x7, 0xb2, 0xce, 0x6, 0x29, 0x48, 0x43, 0x84}}
	return a, nil
}

var _dkgCreate_participantCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x50\x4d\x6e\xf2\x30\x10\xdd\xfb\x14\x23\x16\x9f\x1c\x09\xc2\xb7\x8e\x68\x51\x44\x5a\x54\xb1\x41\xcd\x09\x06\x7b\x30\x16\xc1\xb6\x26\x93\xd2\xaa\xe2\xee\x15\x75\xa8\x60\x36\xb6\xfc\xe6\xfd\xf8\xf9\x53\x8a\x2c\xf0\xda\xc5\x73\xb3\x59\xc3\x9e\xe3\x09\xfe\x7f\x36\x9b\x75\xdd\x34\xef\x2f\x6d\xab\x94\x30\x86\x1e\x8d\xf8\x18\x34\x5a\xcb\xd4\xf7\x15\xd4\xf9\x32\x85\x10\x2d\xbd\x35\x15\xb4\xc2\x3e\xb8\x02\xbe\x95\x02\x00\x48\x4c\x09\x99\x74\xef\x5d\x20\xae\xa0\x1e\xe4\x50\x1b\x13\x87\x20\xd7\x1d\x18\xa7\x23\x01\xb4\x27\x1f\xe0\x09\x1c\xc9\xb8\x71\xb3\x29\x4a\x47\xb2\xc2\x84\x3b\xdf\x79\xf9\x5a\xfc\x1b\x53\x96\xf5\x95\xf2\xac\xe7\x69\xd8\x75\xde\xcc\xed\xd1\xfd\xbe\x14\x7f\xba\xd7\x29\x77\x91\x39\x9e\x75\x01\xcb\x25\x24\x0c\xde\xe8\xc9\x2a\x0e\x9d\x85\x10\x05\x32\x38\x9a\x33\xed\x89\x29\x18\x9a\x14\xea\x21\x9b\x3d\xba\x2d\xb2\x78\xe3\x13\x06\x81\xc5\x2c\x13\x4a\xc3\x84\x42\x77\x90\xbe\xf5\x90\xcf\x3b\x99\xdc\x40\xd9\xe3\x07\xe9\xc5\xec\x51\x70\x0a\x12\xab\x5b\xf7\xe5\x1d\xd0\x4a\x64\x74\xb4\x45\x39\xe4\x4f\x5d\x94\xba\xfc\x04\x00\x00\xff\xff\xb5\xd4\x8a\x93\xab\x01\x00\x00"

func dkgCreate_participantCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgCreate_participantCdc,
		"dkg/create_participant.cdc",
	)
}

func dkgCreate_participantCdc() (*asset, error) {
	bytes, err := dkgCreate_participantCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/create_participant.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0xdf, 0xc8, 0x88, 0x15, 0x2e, 0xc9, 0xee, 0xa3, 0xd2, 0xcc, 0x4b, 0xb5, 0xf2, 0x5, 0x2d, 0x92, 0x4f, 0x6e, 0xbd, 0x4b, 0x7c, 0x84, 0x40, 0x4a, 0x9b, 0x5e, 0x9f, 0x15, 0x5, 0x74, 0xb2}}
	return a, nil
}

var _dkgScriptsGet_consensus_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x8f\xcd\x22\xce\x6e\x62\xb4\x48\xc1\xc1\x8c\xe2\x10\xea\xb5\x04\x92\x3b\xb9\x4b\x50\x10\xdf\xdd\xc9\x17\xf8\x72\x7d\x8a\x36\x9c\x8a\xbc\xc2\x34\x62\x51\xa9\xd8\xbe\xc3\x34\xee\x43\xb8\x1e\x63\x74\x2e\xcd\x33\x99\x0d\xa9\x14\x8f\xa5\x33\x6a\xca\x3c\xf8\x1d\x6e\xb1\x69\xe6\xf5\x8e\x8f\x03\x00\xa5\xd6\x95\xff\xd0\x66\xa5\x76\x10\x36\x62\xeb\x76\x91\x07\x9d\x83\x0d\xde\x7d\x7f\x01\x00\x00\xff\xff\x60\x8c\xcb\x25\x6f\x00\x00\x00"

func dkgScriptsGet_consensus_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_consensus_nodesCdc,
		"dkg/scripts/get_consensus_nodes.cdc",
	)
}

func dkgScriptsGet_consensus_nodesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_consensus_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_consensus_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xc3, 0x8d, 0x18, 0xc3, 0x4e, 0xd0, 0x79, 0xb8, 0x29, 0xa, 0xcd, 0x95, 0x6e, 0xf5, 0xf0, 0x2, 0x58, 0x8e, 0xc5, 0x88, 0x6f, 0x4a, 0x29, 0xdc, 0x2e, 0x1d, 0xcf, 0x87, 0x29, 0x1d, 0xc5}}
	return a, nil
}

var _dkgScriptsGet_dkg_canonical_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\xf1\x76\x57\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf1\x76\x77\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x0e\x2e\x29\xca\xcc\x4b\xb7\x8f\xb5\x57\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x19\xa5\x97\x92\x9d\xee\x9c\x9f\x5b\x90\x93\x5a\x92\x9a\xa2\xa1\xc9\x55\x0b\x08\x00\x00\xff\xff\xce\x4e\x4f\xd2\x6a\x00\x00\x00"

func dkgScriptsGet_dkg_canonical_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_canonical_final_submissionCdc,
		"dkg/scripts/get_dkg_canonical_final_submission.cdc",
	)
}

func dkgScriptsGet_dkg_canonical_final_submissionCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_canonical_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_canonical_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xea, 0xf4, 0xe4, 0x20, 0x5d, 0x4c, 0xb7, 0x19, 0x78, 0x89, 0xd1, 0x97, 0x27, 0x7a, 0x7a, 0x1b, 0xd7, 0x38, 0xed, 0x37, 0xd9, 0x50, 0x38, 0xf, 0x4c, 0x16, 0x2a, 0x5b, 0xf2, 0x51, 0xe3}}
	return a, nil
}

var _dkgScriptsGet_dkg_completedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\xf1\x76\x57\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf1\x76\x77\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x19\xa2\x97\x92\x9d\xee\x9c\x9f\x5b\x90\x93\x5a\x92\x9a\xa2\xa1\xa9\xa0\x68\xab\x90\x97\x99\xc3\x55\x0b\x08\x00\x00\xff\xff\xfe\x3a\x11\x65\x6b\x00\x00\x00"

func dkgScriptsGet_dkg_completedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_completedCdc,
		"dkg/scripts/get_dkg_completed.cdc",
	)
}

func dkgScriptsGet_dkg_completedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_completedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_completed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x4d, 0x2e, 0xb8, 0x6c, 0x19, 0xdc, 0xb0, 0x4d, 0x3c, 0x2f, 0xad, 0x19, 0x41, 0x24, 0x1f, 0xc0, 0x24, 0x26, 0x16, 0x8a, 0x0, 0x54, 0x17, 0x73, 0x47, 0x36, 0xd3, 0x9f, 0x14, 0x87, 0x33}}
	return a, nil
}

var _dkgScriptsGet_dkg_enabledCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\xf1\x76\x57\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf1\x76\x77\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x19\xa2\x97\x92\x9d\xee\x9a\x97\x98\x94\x93\x9a\xc2\x55\x0b\x08\x00\x00\xff\xff\x31\x60\x50\x0e\x60\x00\x00\x00"

func dkgScriptsGet_dkg_enabledCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_enabledCdc,
		"dkg/scripts/get_dkg_enabled.cdc",
	)
}

func dkgScriptsGet_dkg_enabledCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_enabledCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_enabled.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x6b, 0xcd, 0xb3, 0x66, 0x51, 0xc, 0x1, 0xc6, 0xf9, 0x15, 0xcc, 0xe2, 0x38, 0x3e, 0x60, 0xa0, 0x94, 0x9e, 0x94, 0x8e, 0xe, 0x90, 0xb6, 0x9d, 0x80, 0xf4, 0xec, 0x8d, 0x3a, 0x6c, 0xc7}}
	return a, nil
}

var _dkgScriptsGet_final_submissionsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x8f\xc9\x22\xce\x2e\x22\xc4\x76\xe8\x66\xc6\xd2\x21\x96\xb4\x1c\x24\x17\xb9\x4b\x50\x10\xdf\xdd\xa9\x2f\xf0\x51\x79\x55\x69\x18\x72\x7d\xfb\x69\xc4\x26\xb5\xe0\xfc\xf1\xd3\x78\xf3\xfe\x71\x0f\xc1\x98\xb8\xae\x49\xd5\xc6\x9c\x1d\xb6\xce\x28\x91\xd8\xba\x0b\xe6\x39\x34\x21\xde\xaf\xcb\x82\xaf\x01\x00\x49\xad\x0b\x1f\xd6\x69\x4f\x6d\x20\x8e\x39\xf4\x67\x21\x55\xaa\xac\xd6\x99\xdf\x3f\x00\x00\xff\xff\x33\x68\x74\xa3\x72\x00\x00\x00"

func dkgScriptsGet_final_submissionsCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_final_submissionsCdc,
		"dkg/scripts/get_final_submissions.cdc",
	)
}

func dkgScriptsGet_final_submissionsCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_final_submissionsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_final_submissions.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x60, 0x32, 0x7f, 0x64, 0xf7, 0xb2, 0x57, 0xd6, 0x91, 0xaf, 0x11, 0x29, 0xf8, 0x18, 0x9c, 0x9a, 0x3f, 0x5d, 0x9, 0x66, 0x4c, 0xcb, 0x77, 0x73, 0xb5, 0x90, 0xad, 0xa0, 0xd9, 0x1, 0x71}}
	return a, nil
}

var _dkgScriptsGet_latest_whiteboard_messagesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x6b\xc3\x30\x10\x85\x77\xff\x8a\x37\xda\x14\x4c\xbb\x86\x7a\x68\x71\x1b\x42\xe8\xd2\x0c\x1d\x8c\x87\x23\xbe\xd8\x07\xb2\x64\xa4\x4b\x13\x28\xf9\xef\xc5\xaa\x2d\x68\xe9\xa2\xe1\xe9\xbb\xf7\x3d\x19\x27\xe7\x15\xaf\xc6\x5d\xea\xfd\x16\x27\xef\x46\xdc\x5f\xeb\xfd\xf6\xa9\xae\xdf\x5f\x0e\x87\x2c\xa3\xe3\x91\x43\xc8\xc9\x98\x02\xa7\xb3\xc5\x48\x62\xf3\x99\xdb\xd9\x8e\xaf\x1b\xec\xac\x16\x1b\x34\x4b\x43\xf9\xc6\x21\x50\xcf\x2d\xbe\x32\x00\x30\xac\x18\x7f\xa2\x80\x6a\xf5\x94\x3d\xeb\xc7\x20\xca\xcf\x8e\x7c\xb7\x9c\x84\xbc\x88\x27\x9f\xe4\x61\x48\x39\xe8\xfa\xf1\x5f\x7d\x85\xa6\x4d\xb8\xa0\x42\x9a\x14\xd3\xcb\x20\x86\x21\x78\x4c\xf6\xd2\xb0\xed\x75\x58\x76\xc5\x6d\xbf\x24\x25\x4d\x13\xdb\x2e\x5f\xf9\x46\xda\x22\xa1\xb3\x40\x70\x87\x87\x98\xdc\xe2\xeb\x59\xcf\xde\xfe\x69\xc9\x6e\xdf\x01\x00\x00\xff\xff\x64\xd3\xce\xa2\x52\x01\x00\x00"

func dkgScriptsGet_latest_whiteboard_messagesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_latest_whiteboard_messagesCdc,
		"dkg/scripts/get_latest_whiteboard_messages.cdc",
	)
}

func dkgScriptsGet_latest_whiteboard_messagesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_latest_whiteboard_messagesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_latest_whiteboard_messages.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xcd, 0xe3, 0xda, 0x2f, 0x97, 0x67, 0x40, 0xfc, 0xfb, 0x2f, 0xb9, 0x94, 0x2a, 0x31, 0x7f, 0xbe, 0x64, 0x98, 0xc6, 0x50, 0xb8, 0xca, 0x45, 0xe8, 0xcf, 0xd6, 0x12, 0xa9, 0xe0, 0x7, 0x11}}
	return a, nil
}

var _dkgScriptsGet_node_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xbd\x0a\xc2\x30\x14\x06\xd0\x3d\x4f\xf1\xb9\x35\x8b\x38\x77\x11\x21\xb6\x48\xc1\xc1\x8c\xe2\x10\xdb\xb4\x5c\x48\xee\x95\xfc\xa0\x20\xbe\xbb\x43\xe9\x76\xa6\x43\xf1\x25\xa9\xa0\x0b\xf2\x36\x43\x8f\x39\x49\xc4\xe1\x63\x86\xfe\x64\xcc\xed\x6c\xad\x52\x6e\x1c\x7d\xce\x8d\x0b\x41\x63\xae\x8c\xe8\x88\x1b\x96\xc9\x5f\x4c\x0b\x5b\x12\xf1\xa2\x5b\xdc\x57\x1d\x1f\xf8\x2a\x00\x48\xbe\xd4\xc4\xdb\xbb\x5f\x7c\xb9\xca\xe4\x3b\x62\x17\x6c\x7d\x46\xca\x99\x64\x6b\xf4\x4e\xfd\xfe\x01\x00\x00\xff\xff\x0f\xf0\x73\xe4\x88\x00\x00\x00"

func dkgScriptsGet_node_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_final_submissionCdc,
		"dkg/scripts/get_node_final_submission.cdc",
	)
}

func dkgScriptsGet_node_final_submissionCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xa3, 0xd, 0x76, 0xe5, 0x82, 0x16, 0xf2, 0x5e, 0xed, 0x5f, 0xef, 0x1f, 0x6b, 0xd9, 0xa9, 0x3, 0x80, 0x1e, 0x47, 0xcb, 0x8f, 0xf0, 0x15, 0xc5, 0x8d, 0x97, 0xb4, 0x3f, 0x5e, 0x2e, 0xab}}
	return a, nil
}

var _dkgScriptsGet_node_has_submittedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x0a\xc2\x30\x10\x87\xf1\x3d\x4f\xf1\x1f\xdb\x45\x9c\xbb\x29\xa7\x55\xba\x99\x27\x88\x6d\x2a\x81\xe4\x4e\x2e\x17\x14\xc4\x77\x17\x41\xf7\xef\xfb\xa5\x72\x17\x35\x1c\xb3\x3c\x68\x1a\xb1\xaa\x14\x6c\x9f\x34\x8d\x3b\xa2\xcb\xc1\x7b\xe7\xc2\x3c\xc7\x5a\xbb\x90\x73\x8f\xb5\x31\x4a\x48\xdc\xb1\x2c\xf1\x4c\x03\xbc\x69\xe2\x5b\x3f\x60\x2f\x92\xf1\x72\x00\xa0\xd1\x9a\xf2\x9f\xdc\x7c\xd3\x53\xa8\xbe\x5d\x4b\x32\x8b\xcb\xef\xed\xdd\xfb\x13\x00\x00\xff\xff\x4a\x97\x2c\xe5\x7c\x00\x00\x00"

func dkgScriptsGet_node_has_submittedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_has_submittedCdc,
		"dkg/scripts/get_node_has_submitted.cdc",
	)
}

func dkgScriptsGet_node_has_submittedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_has_submittedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_has_submitted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x7c, 0x5e, 0x2e, 0x7c, 0xb9, 0x27, 0x61, 0x3f, 0xe6, 0x38, 0xb0, 0x9d, 0x50, 0xc6, 0x78, 0x8b, 0x3f, 0xc9, 0x5b, 0xae, 0x58, 0xe2, 0x44, 0xec, 0x20, 0x4b, 0x7a, 0xba, 0xef, 0x25, 0x55}}
	return a, nil
}

var _dkgScriptsGet_node_is_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xbd\x0a\xc2\x30\x14\xc5\xf1\x3d\x4f\x71\xba\xb5\x8b\x38\x17\x1c\xd4\x68\x29\xdd\xec\x13\x84\x36\x91\x0b\x37\x37\x25\x49\x51\x90\xbe\xbb\xf8\xd1\xc9\xc5\x33\x9f\xdf\x9f\xfc\x14\x62\xc6\x99\xc3\x4d\x77\x0d\x5c\x0c\x1e\xdb\xbb\xee\x9a\xbd\xd6\x97\x53\xdf\x2b\x65\x86\xc1\xa6\x54\x1a\xe6\x0a\x6e\x16\x78\x43\x52\x4a\x18\x6d\xab\x6b\xf4\x39\x92\x5c\xab\x1a\x87\x10\x18\x0f\x05\x00\xe4\xd6\xdc\x66\x32\x31\xd3\x40\x93\x91\xdc\xa6\x23\x1b\xf2\x76\xfc\xda\x0a\xc5\x0e\x42\x2b\x7a\x2d\xda\x3c\x47\xf9\x0b\x17\x6f\xb4\xc0\x72\xb2\xbf\x05\x67\x38\xd9\xcf\x43\x2d\xcf\x00\x00\x00\xff\xff\x75\x78\xfb\xf8\xe2\x00\x00\x00"

func dkgScriptsGet_node_is_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_is_claimedCdc,
		"dkg/scripts/get_node_is_claimed.cdc",
	)
}

func dkgScriptsGet_node_is_claimedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_is_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_is_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x2d, 0x0, 0x7a, 0x87, 0xc2, 0x5e, 0x9f, 0xd7, 0x7b, 0x61, 0x16, 0x93, 0x0, 0xe0, 0xff, 0x3, 0x4, 0xe8, 0xee, 0x25, 0x1b, 0x2a, 0x77, 0x82, 0xec, 0x6c, 0x3a, 0x61, 0xd3, 0x76, 0x4}}
	return a, nil
}

var _dkgScriptsGet_node_is_registeredCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x31\xaa\x83\x40\x10\x06\xe0\x7e\x4f\xf1\x97\xda\x3c\x5e\x6d\x97\xb0\x89\x88\x9d\x9e\x60\xd1\x51\x06\xd6\x99\x65\x76\x24\x81\x90\xbb\xa7\x49\x2e\xf0\xf1\x51\xd4\x1c\xf7\xac\x8f\x38\xf6\xd8\x4c\x0f\xfc\x3f\xe3\xd8\x5f\x62\x9c\x6e\xf3\x1c\x42\x5a\x16\xaa\xb5\x49\x39\xb7\xd8\x4e\xc1\x91\x58\x1a\xd1\x95\x86\xd8\x61\x76\x63\xd9\xdb\x0e\x57\xd5\x8c\x57\x00\x00\x23\x3f\x4d\x7e\xe4\x5f\x49\xe6\xbc\x70\x49\xe2\x43\x9d\x68\xe7\xea\x64\xb4\x7e\x89\x36\xbc\x3f\x01\x00\x00\xff\xff\xb5\x2b\x42\x1d\x83\x00\x00\x00"

func dkgScriptsGet_node_is_registeredCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_is_registeredCdc,
		"dkg/scripts/get_node_is_registered.cdc",
	)
}

func dkgScriptsGet_node_is_registeredCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_is_registeredCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_is_registered.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x11, 0x49, 0x45, 0xb2, 0x99, 0x20, 0x4e, 0xca, 0x7, 0x6c, 0x5b, 0x22, 0xc1, 0xb7, 0x1c, 0x6f, 0x14, 0x98, 0x87, 0xec, 0x63, 0x77, 0xb9, 0x3f, 0x2d, 0x62, 0xd0, 0x3c, 0xb0, 0xf6, 0xa4}}
	return a, nil
}

var _dkgScriptsGet_thresholdsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4a\x03\x31\x10\x86\xef\x79\x8a\xff\x98\x5c\x96\x3d\x94\x1e\x0a\x52\x84\xb5\x45\x0a\x22\xae\x3e\x40\x58\x27\x6d\x20\x9b\x48\x32\xd1\x82\xec\xbb\xcb\x46\x6d\xbb\xac\x60\x73\x1c\xbe\x6f\xfe\xc9\x6f\xfb\xb7\x10\x19\x1b\x17\x3e\x9a\xdd\x16\x26\x86\x1e\xf5\xb1\xd9\x6d\x6f\x9b\xe6\xe9\xae\x6d\x85\xd0\x5d\x47\x29\x49\xed\x9c\x42\xe2\x98\x3b\xc6\xf3\x21\x52\x3a\x04\xf7\x9a\xf0\x29\x00\xe0\x92\x71\xc4\xf0\x9a\xed\x3b\xad\xf0\x72\xef\x79\xb9\xf8\x13\x49\xda\xfc\x0f\x3c\x52\xec\xc8\xb3\xde\x8f\xe8\xc6\x1e\x97\x0b\x51\x58\xeb\x2d\x4b\xf5\x13\x3e\xbe\x44\xce\x54\xdf\xa9\xb8\xf9\xfd\x4d\xb5\x27\x7e\x28\xb3\x36\x97\xe5\xa7\xbb\xa5\x9a\x9a\x63\xd6\xd4\x6b\xb5\xb9\xca\x3a\x5f\x38\xf7\x4f\xe2\x19\x92\x0a\xeb\x35\xea\xaa\x2e\x9b\x06\x31\x4c\xfb\x35\xd9\xa3\xd7\xd6\x4b\xb5\x9a\x97\x1c\x89\x73\xf4\x17\x73\xa9\xc4\xf0\x15\x00\x00\xff\xff\x4c\xbf\xd4\x66\xc0\x01\x00\x00"

func dkgScriptsGet_thresholdsCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_thresholdsCdc,
		"dkg/scripts/get_thresholds.cdc",
	)
}

func dkgScriptsGet_thresholdsCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_thresholdsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_thresholds.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x27, 0x9c, 0x2e, 0x14, 0xaf, 0x10, 0x7d, 0xb6, 0x68, 0xda, 0xe8, 0xbc, 0x60, 0x39, 0x64, 0x39, 0xbb, 0xf4, 0xd2, 0x8a, 0x9f, 0x20, 0x6f, 0xcd, 0x16, 0x7, 0x2d, 0x16, 0x7e, 0x9e, 0x37}}
	return a, nil
}

var _dkgScriptsGet_whiteboard_messagesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\xf1\x76\x57\x48\x2b\xca\xcf\x55\x30\xa8\x70\xf1\x76\x77\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x86\xea\xd1\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x8d\x55\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x99\xa8\x97\x9e\x5a\x12\x9e\x91\x59\x92\xea\x94\x9f\x58\x94\x02\x55\x5a\xac\xa1\xa9\xc0\x55\x0b\x08\x00\x00\xff\xff\x20\x79\xf1\x15\x7b\x00\x00\x00"

func dkgScriptsGet_whiteboard_messagesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_whiteboard_messagesCdc,
		"dkg/scripts/get_whiteboard_messages.cdc",
	)
}

func dkgScriptsGet_whiteboard_messagesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_whiteboard_messagesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_whiteboard_messages.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x4a, 0x1, 0x6b, 0xb, 0xd, 0x6a, 0x3b, 0x80, 0x95, 0x62, 0xac, 0x6d, 0x92, 0xec, 0x52, 0x86, 0xb5, 0x56, 0xf9, 0xc9, 0x1f, 0x93, 0x7f, 0x14, 0xc1, 0xaa, 0x92, 0x12, 0x7e, 0x8e, 0x91}}
	return a, nil
}

var _dkgSend_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x6a\xf3\x40\x10\x84\x7b\x3d\xc5\xe2\xe2\x47\x6a\xc4\x5f\x8b\x24\x42\x44\xb1\x0b\x37\x26\x2a\x43\x8a\xf3\x79\x25\x2f\x91\x76\x8f\xbd\x15\x36\x04\xbf\x7b\x10\xb2\x8d\x02\xce\x94\x77\x37\xdf\xdc\x0c\x0d\x41\xd4\x60\xdd\xcb\xa9\xde\x6e\xa0\x55\x19\xe0\xff\xb9\xde\x6e\xaa\xba\x7e\x7f\x6b\x9a\x24\x31\x75\x1c\x9d\x37\x12\x4e\xe3\xb8\x1f\x28\x46\x12\x2e\xe0\xa3\x31\x25\xee\xca\xcf\x0c\xbe\x93\x04\x00\xa0\x47\x83\xc3\x57\xb7\x73\x6a\xe4\x29\x38\xb6\x02\xfe\x5d\xc9\xf9\xe2\x74\x7e\x1d\x14\x83\x53\x4c\x23\x75\x8c\x5a\x40\x35\xda\xb1\xf2\x5e\x46\xb6\x89\x08\x57\x45\xec\xdb\xfc\x37\x15\x9e\x61\x36\xe5\x7b\x51\x95\xd3\xd3\xa3\x90\x97\x74\xea\x52\xc0\x83\xab\xc6\x44\x5d\x87\x3b\x67\xc7\xec\x9e\x33\xa9\x2c\x21\x38\x26\x9f\xae\x5e\x1d\xb3\x18\xcc\xfc\xa9\x14\x84\x45\xbe\x62\x8b\x8a\xec\x71\x35\xfb\x2f\x73\x23\x3c\xa3\x1f\x0d\x6f\x73\xfc\xf1\xfb\x3c\x22\x1f\xd6\xc4\xae\x6f\xee\x6b\x2e\x86\xcd\x92\x1b\xf2\xf2\x13\x00\x00\xff\xff\x38\x14\x9d\x91\x9c\x01\x00\x00"

func dkgSend_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgSend_final_submissionCdc,
		"dkg/send_final_submission.cdc",
	)
}

func dkgSend_final_submissionCdc() (*asset, error) {
	bytes, err := dkgSend_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/send_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xa1, 0xeb, 0xb8, 0x94, 0x6e, 0xb, 0x8d, 0x4f, 0xbe, 0xf4, 0xe4, 0x73, 0x98, 0xc9, 0x5b, 0x27, 0x91, 0x33, 0xac, 0x1a, 0xe, 0x48, 0xe7, 0x33, 0x1, 0x1f, 0xb, 0xa6, 0xac, 0x6a, 0x93}}
	return a, nil
}

var _dkgSend_whiteboard_messageCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x43\x0f\x92\x5c\x82\xe7\xa0\x96\x60\xb4\x87\x22\x14\xf3\x0b\xc6\x75\x92\x2e\xa6\x33\xcb\xec\x84\x16\xa4\xff\x5d\x96\x6d\xa4\x42\x9d\xe3\xee\xbc\xef\xcd\x7b\xfe\x10\x44\x0d\x5e\x27\x39\x76\xdb\x0d\x0c\x2a\x07\xb8\x3f\x75\xdb\x4d\xdb\x75\xef\x2f\x7d\x5f\x14\xa6\xc8\x11\x9d\x79\xe1\xd2\x09\x1b\xb1\x35\xd0\x9b\x7a\x1e\x2b\xf8\x2e\x0a\x00\x80\x89\x0c\x3e\xbf\xc6\x1d\xaa\x79\xe7\x03\xa6\x95\xbb\x0b\xb3\xbe\x7a\xcd\xdb\x41\x29\xa0\x52\x19\xfd\xc8\xa4\x0d\xb4\xb3\xed\x5b\xe7\x64\x66\x4b\x44\xb8\x4c\xa4\x69\xa8\xff\x52\xe1\x11\xb2\xa8\xfe\x10\x55\x39\x3e\xdc\x32\x79\x2a\x53\x8a\x06\x6e\x7c\xf5\x26\x8a\x23\xed\xd0\xf6\xd5\xaf\x4f\x9a\xf5\x1a\x02\xb2\x77\xe5\xea\x19\x99\xc5\x20\xf3\x53\x28\x08\x57\xfe\x4a\x03\x29\xb1\xa3\x55\xd6\x9f\x73\x22\x3a\x91\x9b\x8d\x96\x3a\xfe\xb9\xbe\x0e\x12\xed\x8d\x62\xc4\x91\x96\x2a\xab\x62\xe1\x9c\x7f\x02\x00\x00\xff\xff\x42\x47\xff\x78\x8b\x01\x00\x00"

func dkgSend_whiteboard_messageCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgSend_whiteboard_messageCdc,
		"dkg/send_whiteboard_message.cdc",
	)
}

func dkgSend_whiteboard_messageCdc() (*asset, error) {
	bytes, err := dkgSend_whiteboard_messageCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/send_whiteboard_message.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xbf, 0x30, 0x7e, 0x1e, 0xed, 0x99, 0xc1, 0x3d, 0xa0, 0x20, 0x22, 0x66, 0xaf, 0x3b, 0x43, 0x3f, 0x26, 0xca, 0xd8, 0xff, 0x25, 0x83, 0xbc, 0x7e, 0x33, 0x4a, 0x7b, 0xb0, 0x5d, 0xaf, 0x21}}
	return a, nil
}

var _epochAdminAdvance_viewCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x6e\x82\x40\x10\xc6\xef\x3c\xc5\x84\x43\x83\x17\xd2\xb3\xa9\x35\x08\x34\x9a\xd6\x6a\x8a\x7d\x80\x11\x47\xd8\x08\x3b\x9b\x65\xa8\x4d\x1a\xdf\xbd\x01\x2a\x92\xb4\xd6\x39\x70\xe1\xdb\xdf\xf7\x47\x95\x86\xad\xc0\x53\xc1\xc7\xd8\x70\x9a\xc3\xde\x72\x09\xf7\x9f\xf1\x7a\x15\xce\x83\x28\x7a\x8b\x93\xc4\x19\x88\x16\xd1\x06\xb7\x05\x25\x82\x07\xa5\xb3\x4e\xed\xfe\xfe\xe1\x3a\x8e\x58\xd4\x15\xa6\xa2\x58\x7b\x26\xc7\x8a\xc6\x90\x88\x55\x3a\x1b\xc1\x97\x03\x00\x60\x2c\x19\xb4\xe4\x55\x2a\xd3\x64\xc7\x10\xd4\x92\x07\x69\xca\xb5\x96\xb3\xa4\xb9\x82\x04\x72\x42\x2b\x5b\x42\x81\x09\x74\x72\x7f\xcb\xd6\xf2\xf1\xe1\xae\x4f\xee\xcf\xcf\xa2\x47\xaf\x89\x35\xbe\x94\xf2\xfb\xf7\x89\xb0\xc5\x8c\xd6\x28\xf9\xa8\x77\x68\x6e\x3a\x05\x83\x5a\xa5\x9e\x1b\x72\x5d\xec\x40\xb3\x40\x67\x31\x30\x6f\xdb\x56\x1d\x02\x0c\x4a\xee\x8e\x9c\x9e\xa2\xf6\xd0\xd6\x84\xc9\x04\xdc\x76\xbe\x24\xde\xbc\xaf\xdd\x41\x95\xe6\x7a\x9a\x4f\x7a\xf7\xb3\x56\x50\x77\x33\x5d\x22\x9d\x80\x8a\x8a\xfe\x60\x86\xab\xe5\x72\xb1\xb9\x0e\xad\x04\xad\xb4\xa5\x43\x2e\x4b\x25\xb7\x98\xaf\x51\x8b\xfd\x37\x65\x8b\xbb\x01\x9a\xbd\xac\xc2\xe7\xeb\x14\xdc\x7d\xa0\x4e\x69\x56\x70\x7a\x18\x92\x9c\xee\x7b\xfa\x0e\x00\x00\xff\xff\xa2\x8c\x51\x63\x87\x02\x00\x00"

func epochAdminAdvance_viewCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminAdvance_viewCdc,
		"epoch/admin/advance_view.cdc",
	)
}

func epochAdminAdvance_viewCdc() (*asset, error) {
	bytes, err := epochAdminAdvance_viewCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/advance_view.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xe5, 0x21, 0xf2, 0xbc, 0x76, 0xa, 0x9b, 0xf1, 0x41, 0xa1, 0x27, 0xe4, 0x3f, 0x61, 0xc9, 0xf8, 0x24, 0x6c, 0x75, 0xe8, 0x9b, 0x1d, 0xf0, 0xd7, 0x78, 0x9e, 0xa4, 0xeb, 0xc9, 0xad, 0x10}}
	return a, nil
}

var _epochAdminCalculate_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\xeb\x30\x10\x45\xf7\xfa\x8a\xc1\x8b\x87\xbd\x31\x6f\x1d\xda\x06\x13\xbb\xa4\xab\x86\xb8\x3f\x30\x96\xa7\xb6\xa9\xa2\x11\xe3\x31\x2e\x94\xfc\x7b\x71\x45\xd4\x40\x67\xab\xa3\x7b\xee\x9d\x2e\x81\x45\xe1\xd9\xf1\xda\x04\xb6\x23\xbc\x0b\x5f\xe0\xff\x67\x73\x7a\x3d\x1c\xab\xba\x3e\x37\x6d\x6b\xee\xa0\x97\xfa\x0d\x3b\x47\xad\xe2\xc7\xe4\x87\x48\x67\x7f\x1f\x32\x63\x54\xd0\xcf\x68\x75\x62\x9f\x17\xf0\x65\x00\x00\x82\x50\x40\xa1\x7c\x9e\x06\x4f\xb2\x83\x6a\xd1\xb1\xb2\x96\x17\xaf\x37\x64\x3b\x47\x0a\x23\xa1\x68\x47\xa8\xf0\x08\x11\x2f\x3b\x16\xe1\xf5\xe1\x5f\x2a\x5b\x1e\x6f\xd0\x53\xbe\x35\xd9\xfd\xee\x28\xd3\xff\x56\x59\x70\xa0\x13\xea\x58\x24\xc3\x76\xfb\x3d\x04\xf4\x93\xcd\xb3\x03\x2f\xae\x07\xcf\x0a\x51\x71\x27\xff\x19\x38\xc7\x08\x08\xa8\x63\x56\x98\x94\x92\xb0\xd2\xa2\xb3\x8b\x43\xa5\xca\xf7\x2d\xe9\x99\x56\x94\x7e\xce\xa3\xf0\x6a\xae\xdf\x01\x00\x00\xff\xff\x66\x0a\x0f\x4f\x67\x01\x00\x00"

func epochAdminCalculate_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminCalculate_rewardsCdc,
		"epoch/admin/calculate_rewards.cdc",
	)
}

func epochAdminCalculate_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminCalculate_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/calculate_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x22, 0xae, 0xbc, 0xaa, 0x23, 0xd3, 0xe3, 0x4a, 0xea, 0x79, 0x41, 0xe9, 0xc2, 0x3, 0xae, 0x7b, 0x62, 0x2c, 0xc, 0xee, 0xe, 0x9c, 0x9e, 0xc5, 0xd0, 0x7f, 0xa2, 0xd3, 0x48, 0xa6, 0x85}}
	return a, nil
}

var _epochAdminDeploy_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6b\xea\x40\x10\xc6\xef\xf9\x2b\xe6\xe8\x03\x91\xf7\xe0\x21\x0f\x6f\x21\xea\x43\x2c\x54\x1b\xda\x1e\xc4\xc3\x76\x33\x8d\xc1\x64\x36\xcc\xee\xa2\x52\xfc\xdf\xcb\x9a\x48\x4d\x8c\x89\x6d\x0e\x4b\x32\xdf\xf7\x6d\x86\x99\x5f\x92\xe5\x8a\x0d\x4c\x53\xb5\x0b\x52\xab\x0d\xf2\x32\x80\x77\x56\x19\xfc\xde\x2f\x03\x7f\x3c\x7e\x9a\x84\xa1\xe7\x19\x16\xa4\x85\x34\x89\xa2\x1e\x89\x0c\x47\x10\x1a\x4e\x28\xee\x83\x07\x17\x8f\x54\x11\x8e\x60\xf5\x3c\x23\xf3\x6f\xdd\xaf\x4a\x96\x19\xc9\x4c\x72\x25\x37\x81\xb2\x64\x90\x47\xe0\x8c\xc3\xbf\x55\x23\xd9\xec\x25\xc1\x9d\x9e\xd1\xc9\xdb\x65\x0a\x8d\xd8\x26\x14\xfb\xf6\xd4\x5c\x97\x7b\x3c\xff\xbf\xd8\x08\x8d\x37\x7d\x81\x4a\x53\x94\x46\x71\x39\x0d\x5d\x38\xff\x0c\xab\xce\xe9\xc3\xe3\xab\xb6\x79\x9e\x1e\x66\x24\x19\x85\xc6\x05\xb2\x44\x32\x22\x76\x77\x4f\x93\x7d\xfd\x6e\x16\x14\xa9\x2c\x54\x96\xe5\xd7\xf4\x6a\xc3\xbb\xfa\xf5\xaa\xb2\x97\x41\xf9\x56\x9f\xec\x59\xbf\x19\x58\x06\xb5\x48\xb4\x8d\x17\xf6\x6d\x8e\x07\x17\x29\x7a\x59\xff\x82\x0f\xcf\x03\xc8\x19\x73\xc1\xd8\xd3\x49\x4c\x6e\x45\xbe\x35\x1b\x5f\x4a\xb7\xb1\xd2\x01\x50\x68\x03\xa9\xc8\xb0\x90\x46\x0f\x44\x14\x95\x58\xb8\xb3\x11\x0a\x77\xde\x41\x44\x43\xb1\x03\x8f\x5a\xe1\x5e\x4e\x6e\x29\xb5\xe6\x9b\xd0\xb9\xae\x5d\x87\x1a\x38\x6a\xaa\x7e\x87\xaa\x36\xb5\x8d\xb5\xcb\xaf\x6e\xe2\xd6\x20\xf4\x0f\xb8\x6b\x89\xb5\xd3\x57\x04\xcf\x0c\x7a\x00\x47\xef\xf8\x19\x00\x00\xff\xff\x77\xe6\xf2\x61\x95\x04\x00\x00"

func epochAdminDeploy_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminDeploy_epochCdc,
		"epoch/admin/deploy_epoch.cdc",
	)
}

func epochAdminDeploy_epochCdc() (*asset, error) {
	bytes, err := epochAdminDeploy_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/deploy_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0x7a, 0xe, 0xfd, 0xd8, 0x13, 0x8f, 0x9b, 0x36, 0x65, 0x11, 0x9d, 0x7, 0x4f, 0x62, 0xb9, 0x4e, 0x62, 0xe3, 0x15, 0xb8, 0x23, 0xf6, 0x95, 0xa4, 0xd3, 0xde, 0xd3, 0x54, 0x5c, 0xff, 0x57}}
	return a, nil
}

var _epochAdminDeploy_qc_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\x31\x4b\xc4\x40\x10\x05\xe0\x7e\x7e\xc5\x2b\x13\x08\x77\xad\xa4\x3b\xb4\xb1\xb1\x11\x2b\xb1\x18\x66\x97\x75\x39\x9d\x49\x76\x27\x88\x48\xfe\xbb\x90\x8d\x62\x2a\xcb\x61\xde\x7b\x7c\xe7\x33\xee\xe2\xf4\x66\x9f\x15\xfe\x61\x10\x53\x2f\x2c\x5e\xe1\x06\x56\xb0\x88\x2d\xea\xc8\x0a\xd3\x08\x2f\xac\x95\xc5\xb3\x29\x81\xfe\x5c\xdd\x2c\x0f\xfc\x1e\x47\x3c\x7a\xc9\x9a\x06\xcc\x72\x6b\x21\x8e\x78\x7e\xba\x57\xbf\x79\x19\x10\xae\xe9\x98\x08\xd7\x74\x88\xf4\xf8\x22\x02\xa6\x12\x27\x2e\xb1\xab\x39\x69\x2c\x23\x2e\x8b\xbf\x5e\x9a\x62\x4f\x00\xed\x77\xfa\xc5\x9e\x38\x84\x4e\xb7\xf5\xe6\x18\x20\xdb\x74\x53\xf4\xff\xb6\x76\xdc\x4f\x6d\xa7\xf5\x04\xac\x44\x2b\x81\xbe\x03\x00\x00\xff\xff\x63\x1d\x09\x1c\x27\x01\x00\x00"

func epochAdminDeploy_qc_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminDeploy_qc_dkgCdc,
		"epoch/admin/deploy_qc_dkg.cdc",
	)
}

func epochAdminDeploy_qc_dkgCdc() (*asset, error) {
	bytes, err := epochAdminDeploy_qc_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/deploy_qc_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xe5, 0xe6, 0x5e, 0xb3, 0x8d, 0x7c, 0x34, 0x5, 0xbf, 0xe9, 0x71, 0x45, 0x48, 0x7, 0xa7, 0xaa, 0x67, 0xd5, 0x1e, 0x45, 0x4b, 0x78, 0xc9, 0x66, 0x5b, 0x35, 0x61, 0x8f, 0x22, 0xd8, 0x7d}}
	return a, nil
}

var _epochAdminPay_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6e\xa3\x40\x0c\x87\xef\xf3\x14\x16\x87\x15\x91\x56\x64\xcf\xd1\xb6\x51\x94\x3f\x4a\x4e\x45\xa1\x2f\x60\xc0\xc9\x8c\x4a\xc6\x23\x63\x42\x51\x95\x77\xaf\x80\x94\xa6\xaa\x6f\xa3\xf9\xec\xcf\xfe\xb9\x4b\x60\x51\xd8\x55\xdc\x6e\x03\x17\x16\x4e\xc2\x17\xf8\xf7\xbe\x4d\x5f\xd6\xfb\xd5\x66\x73\xdc\x66\x99\x79\x80\x0e\x9b\x57\xcc\x2b\xca\x14\xdf\x9c\x3f\x8f\x74\xf4\xfb\x23\x32\x66\x3e\x9f\x43\x8a\x5d\x0d\x6a\x09\x84\x5a\x94\xb2\x86\x13\xcb\xf0\x0e\x42\x57\xc7\x4d\x0d\xd4\x4b\x07\xf6\x70\xfa\x41\x5a\xbc\x12\x60\x25\x84\x65\x07\x39\x91\x87\x80\xae\xfc\x3b\x76\x63\x77\x21\xaf\xd0\xba\xaa\x02\xcf\x0a\x16\x43\x20\x6f\x8c\x0a\xfa\x1a\x0b\x75\xec\xe1\xc3\x00\x40\x2f\x0a\x28\x14\xd7\xee\xec\x49\x16\xb0\x6a\xd4\xae\x8a\x82\x1b\xaf\xb3\x3b\xd2\x57\x45\x0a\x96\x50\x34\x27\x54\x78\x82\x11\x4f\x72\x16\xe1\xf6\xff\x9f\x29\x9e\x64\xff\x05\x3d\xc7\xfd\xed\x8b\xef\xe4\x92\xa9\x3f\x53\x16\x3c\x53\x8a\x6a\x67\x93\xa1\xaf\xe5\x12\x02\x7a\x57\xc4\xd1\x9a\x9b\xaa\x1c\x56\x1f\x15\x0f\xf2\x21\xd2\x7a\x1c\x01\x01\xd5\x46\x33\x33\x4d\x99\xb0\x24\x60\x77\x1c\xa3\xda\xb1\xa4\xf7\x38\x87\x45\xe2\x51\x7a\x33\xb7\xcf\x00\x00\x00\xff\xff\x39\x92\xd8\x62\xdd\x01\x00\x00"

func epochAdminPay_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminPay_rewardsCdc,
		"epoch/admin/pay_rewards.cdc",
	)
}

func epochAdminPay_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminPay_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/pay_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x5d, 0xa8, 0x54, 0xe9, 0x46, 0x13, 0x3c, 0xb8, 0x58, 0x6c, 0xfe, 0x8e, 0x56, 0x39, 0xcf, 0x3c, 0x7b, 0xfe, 0xe6, 0x11, 0x69, 0xcb, 0x5a, 0x3d, 0x9a, 0x9c, 0x72, 0xa7, 0xc8, 0x4, 0xa7}}
	return a, nil
}

var _epochAdminReset_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\x7c\xd8\xb5\x11\xc7\xde\x00\x8b\x3d\x18\xdb\x06\x86\xed\xa2\x41\x0f\x4d\xeb\xb4\x97\xa2\x87\x91\x34\x96\x08\x4b\x1c\x81\x33\x8a\x63\x14\xf9\xef\x05\xc9\xf8\x43\xad\x9a\x44\x27\x91\x7c\xf3\xf8\xe6\xbd\xa1\xa9\x1b\x76\x0a\xef\x2a\xde\xad\x1a\xce\x4a\xd8\x38\xae\xe1\x9f\x87\xd5\xed\xc7\xc5\xfb\xf9\x72\xf9\x79\xb5\x5e\x27\x67\xa0\x9b\xe5\x1d\xa6\x15\xad\x15\xb7\xc6\x16\x11\x3d\xf8\xfd\x60\x90\x24\xd3\x29\xdc\x95\x04\x8e\x84\x34\x52\xab\x43\x2b\x98\xa9\x61\x0b\x64\x73\x01\x2d\x09\xb2\xd6\x39\xb2\x0a\x14\x20\xc6\x86\xcd\x93\x1c\xa9\xd1\x29\x64\x6c\xd5\x61\xa6\x9e\x14\x6d\x0e\x29\x15\xc6\x0a\x20\x58\xda\x3d\x55\xee\x8c\x96\xa1\xb6\x30\xf7\x64\x7d\xc5\xc6\x14\xad\x43\x7f\xdb\x24\x28\x39\x61\xb1\xda\xe1\x5e\xa0\x44\xf1\x84\x41\x05\xb7\x56\xc9\x1d\xd4\x84\xbb\x17\x71\xef\xe2\x2a\x96\x9f\xab\x17\xb2\x39\x39\xa8\x5b\x51\x68\x1c\xdf\x9b\x9c\x02\x8d\xa7\xeb\xa1\x80\x61\x4a\x1b\x76\x11\x13\x0c\x01\xc5\x2d\x09\x34\x15\x66\x34\x02\xf4\xad\x08\x6e\x48\xf7\x50\x53\x56\xa2\x35\x52\x4f\x92\xe9\xd4\xf3\x2d\x5b\xe7\x9d\xb6\xa4\x3b\x76\x5b\x90\x86\xdd\x56\xc6\x81\x2a\x65\x56\x51\x87\x4d\x43\xb9\xd7\xa1\x9c\x71\x05\xa2\xa8\x04\x46\xbc\x99\xd1\xa1\x68\xe5\xb0\xb7\xb9\xd1\xf8\x60\xea\x59\x52\x46\xa0\x15\xca\x41\x19\xbc\x9a\x22\x2a\x8f\xe6\x1d\xac\x7a\x45\x54\x61\x3a\xfa\xfc\x50\xee\x55\x03\x17\x70\x35\x1a\x83\x30\x68\x89\x0a\x46\xff\x16\xcf\x27\x46\xd4\x8f\x48\x88\xf8\x90\xd8\x33\xbd\x4f\xe2\xec\x19\xe9\x66\x56\x72\x5b\xe5\xc0\xb6\xda\x43\x4a\xb1\xbf\xe3\xd0\x70\xab\x4d\xab\xc0\x9b\x2e\x37\xb4\x6a\x2a\xa3\xfb\x99\x67\x84\xb0\x7a\x72\x21\x98\x75\xa9\x0f\x97\xe8\x0a\x49\x92\xb3\x8b\xfa\x1a\x9b\xc1\x97\x1b\xab\xff\xfd\x3b\x4e\xe0\xec\x73\x68\x73\xae\xd7\xdc\xba\x8c\x66\xb0\x56\x9f\x73\x17\x21\x8a\x4e\xbf\x1a\xda\xf5\x13\x48\x7c\x6c\x2b\x9b\xff\x19\x43\xdd\xc3\x11\xfc\x48\xc2\x79\xe3\xa8\x41\x47\x43\x31\x85\xf5\x02\xe7\xad\x96\xf3\x2c\x84\xeb\x31\x87\xf2\x8a\x9e\x9e\xe6\x3c\xaf\x8d\x85\x37\x10\xf1\x93\x94\x9d\xe3\xdd\xff\x7f\x1d\xe3\x9f\x04\xc0\xdb\xa1\xcf\x7c\x76\x9a\x8a\x09\xfa\xed\xb5\xb2\xc3\x82\x6e\x51\xcb\x51\x47\xdd\xf5\x35\x34\x68\x4d\x36\x1c\x2c\x42\x3a\x96\x15\x22\x35\x94\x84\x4e\x53\x42\x8d\x63\x24\x91\x02\x1a\xd4\x72\x30\x4a\x8e\x2c\x27\x71\x93\xd3\x00\xf7\x67\xd0\xb3\xd9\xf5\xea\xd7\xaf\x1b\xd0\xf9\xea\xf9\xba\xf3\xdc\x8e\xbf\x2f\x97\x74\xb2\xec\xae\x5f\x28\x3e\x86\x4c\xaf\x82\x67\x5c\x55\x94\x29\xbb\x45\xd5\x8a\x92\x93\x19\x7c\xfb\xfe\x52\x4d\x84\x7e\x5a\xbc\x06\x9c\x6f\x8b\xdb\x36\xfd\x40\xfb\x00\x8e\x91\x3f\x26\x8f\xc9\xcf\x00\x00\x00\xff\xff\xa1\xae\x0d\x2c\x6e\x06\x00\x00"

func epochAdminReset_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminReset_epochCdc,
		"epoch/admin/reset_epoch.cdc",
	)
}

func epochAdminReset_epochCdc() (*asset, error) {
	bytes, err := epochAdminReset_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/reset_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x9, 0xe8, 0x26, 0xed, 0xb5, 0xeb, 0xef, 0xce, 0x12, 0xee, 0xc1, 0xb6, 0x9e, 0xc1, 0x22, 0x82, 0xe1, 0x6e, 0x76, 0x7e, 0xa7, 0x67, 0xcb, 0x52, 0xaf, 0x29, 0xa1, 0x2f, 0xe5, 0x25, 0x14}}
	return a, nil
}

var _epochAdminSet_automatic_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x25\x87\xe2\x5c\x4c\xcf\xa6\x6d\x50\x13\x97\xde\x1a\xe2\x2f\xd8\x48\x6a\x2c\x90\xb5\x62\xbd\xc2\x85\x92\x7f\x2f\x8a\xa8\x73\x69\xe7\x28\x66\x46\x6f\xd6\x4f\x89\x58\xe0\x2d\xd0\xd2\x27\x32\x23\x7c\x32\x4d\xf0\xf8\xd5\x1f\x3f\xf6\xef\xfa\x70\x38\xf5\xc3\xa0\x94\x30\xc6\x19\x8d\x78\x8a\x0d\x66\xa1\x09\xc5\x9b\x93\x5b\x90\xed\xdc\x47\x3c\x07\x67\x3b\x78\x25\x0a\x5b\xf8\x56\x00\x00\x89\x5d\x42\x76\xcd\xec\x2f\xd1\x71\x07\x3a\xcb\xa8\x8d\xa1\x1c\xe5\xd7\x52\x14\x9c\x80\x2b\xdf\x6a\x3b\xf9\x08\xcf\x50\xfd\xed\x99\x98\x69\x79\x7a\x58\xb1\xda\x9b\xe1\xa5\x29\x74\xdd\x9d\xb6\xc5\xf2\x3c\x08\x31\x5e\xdc\x11\x65\xdc\xae\xd5\x45\xbb\x1d\x24\x8c\xde\x34\x9b\x3d\xe5\x60\x21\x92\x40\xad\x86\x5b\xb0\x8e\x9d\x6b\x1c\x12\xca\xb8\xd9\xaa\xb5\xe1\x0e\xd6\xe6\x64\x51\x9c\xfe\x7b\xf9\x7f\x17\xa9\x2c\x57\x75\xfd\x09\x00\x00\xff\xff\xac\x8e\x3a\x7a\x64\x01\x00\x00"

func epochAdminSet_automatic_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminSet_automatic_rewardsCdc,
		"epoch/admin/set_automatic_rewards.cdc",
	)
}

func epochAdminSet_automatic_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminSet_automatic_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/set_automatic_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0x79, 0x9, 0x8e, 0xe5, 0x32, 0xcb, 0x3e, 0x61, 0xd5, 0x8a, 0x3c, 0xd2, 0xdb, 0x86, 0x84, 0x19, 0x2c, 0xb6, 0x67, 0x7b, 0xac, 0x61, 0x5f, 0x6, 0x64, 0xc2, 0xd, 0x5a, 0x24, 0x94, 0x6b}}
	return a, nil
}

var _epochAdminSet_bonus_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x8a\xdb\x30\x10\x87\xef\x7e\x8a\xdf\x31\x81\x50\x5f\x4a\x0f\xa1\x14\x52\x68\x4e\x85\x1e\x9a\xd2\xf3\x58\x9e\xc4\xa6\x8a\xc6\x8c\x46\x76\xbd\x4b\xde\x7d\x91\x12\x2f\xd9\xec\x65\x75\xd0\x41\xf3\xcd\x37\x7f\x54\xd5\x75\x8d\xdf\x34\x72\x04\x05\xd0\x59\x52\x30\x98\x20\x9a\x28\x9d\x18\xd6\x91\x41\x79\x50\x8e\x9c\x23\x1d\xdf\xa0\x92\x28\x47\x34\x12\x52\x84\xc9\x3f\x0e\xf1\x4a\x77\x34\x32\x66\x2e\x9a\x86\xd1\x24\x0d\xdc\x16\xfc\xd0\xf5\x71\xa9\xd1\x47\xc4\xd4\x98\x92\x33\x6e\x71\x54\x39\x17\xb9\x89\x91\x47\x4c\xc3\xe0\xe7\xac\xdf\xff\xfc\xf5\xb7\xe4\x4e\x1d\x07\x1e\x59\x41\x08\x3c\xdd\x38\xe5\x89\xb4\xbd\x77\x3a\xf2\x2e\x79\xca\xce\x4c\xcf\xe0\x41\x5c\x57\x0c\x0d\x3b\x4a\x31\x8f\xc4\x33\x48\x19\x41\x0c\x67\xa6\xb0\x74\x4a\x18\x48\x2d\x57\x7d\xec\xa4\xe4\x97\xeb\xc7\xc8\xc1\x12\x79\x3f\x6f\x40\xde\xbf\x1d\x7f\xea\xf3\xcb\x32\x32\x28\xb4\x77\x0b\x7b\x8d\x3e\xb1\x4a\x55\x99\x52\x88\xe4\xac\x97\xb0\x2a\x92\x43\x76\xec\x0a\xba\xc5\x9f\x7d\xff\xff\xcb\xe7\x35\x9e\x2b\x00\x18\x94\x07\x52\x5e\xc5\xfe\x14\x58\xb7\xd8\x25\xeb\x76\xce\x65\x74\x41\xf2\xb9\x86\x3f\x79\xa1\xf6\xeb\x55\xf0\x6d\x95\x17\xbb\x45\x7d\xfb\xce\x7a\xef\x65\xfa\xfe\x50\x6d\xfd\x28\x88\x34\xf2\xbb\x9e\x36\x30\xf9\x90\xe8\x52\x5d\x5e\x02\x00\x00\xff\xff\x15\x31\xd0\x69\x55\x02\x00\x00"

func epochAdminSet_bonus_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminSet_bonus_tokensCdc,
		"epoch/admin/set_bonus_tokens.cdc",
	)
}

func epochAdminSet_bonus_tokensCdc() (*asset, error) {
	bytes, err := epochAdminSet_bonus_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/set_bonus_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x8f, 0x73, 0xe4, 0xb3, 0x15, 0xd3, 0xb1, 0x4a, 0x58, 0xdb, 0xc7, 0xc6, 0x1a, 0xca, 0x74, 0x57, 0xfc, 0xb2, 0x4c, 0x2d, 0x98, 0xfb, 0x8c, 0xc1, 0x95, 0xfe, 0xf4, 0xf6, 0xd8, 0x29, 0xc4}}
	return a, nil
}

var _epochAdminUpdate_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x61\x0f\xd2\x5e\x8a\x5e\x3c\x14\x75\x29\xdd\x8a\x5e\x74\xb1\xf8\x00\x31\x1d\xb7\x81\x34\x13\x26\x13\x2a\xc8\xbe\xbb\xa4\xc1\x2d\xec\x1c\xc3\xf7\xe7\xf7\xc5\xcc\x9e\x58\xe0\xd9\xd2\xd2\x7b\xd2\x13\x7c\x33\xcd\x70\xfb\xd3\x1f\xdf\xbb\x97\xf6\x70\xf8\xe8\x87\xa1\x28\x84\x95\x0b\x4a\x8b\x21\x57\x3a\x5c\xde\xe2\xdc\xd9\x18\x04\x39\x34\xf0\xf9\xea\xe4\xee\xbe\x82\xdf\x02\x00\xc0\x33\x7a\xc5\x58\x06\x73\x72\xc8\x0d\xb4\x51\xa6\x56\x6b\x8a\x4e\x92\x64\xd5\xa4\xb3\x28\x80\xa9\xb0\x1d\x67\xe3\xe0\x11\xb2\xa1\xfe\x22\x66\x5a\x1e\x6e\x2e\x40\xf5\x2a\x78\x2a\x13\x57\xb3\x71\xd6\x2a\x3d\x0f\x42\xac\x4e\x78\x54\x32\x55\x97\xe8\x74\xfb\x3d\x78\xe5\x8c\x2e\x77\x1d\x45\x3b\x82\x23\x81\x1c\x0d\xab\x31\xcf\x0c\xd9\x0e\x5e\xc9\xb4\xab\x36\xb8\x0d\xac\x8e\x7e\x54\x82\x69\x30\x59\x8b\x5a\x88\xff\x97\x5f\x7d\x44\xee\x3f\x17\xe7\xbf\x00\x00\x00\xff\xff\x03\xa4\x2c\x1e\x52\x01\x00\x00"

func epochAdminUpdate_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_clustersCdc,
		"epoch/admin/update_clusters.cdc",
	)
}

func epochAdminUpdate_clustersCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x82, 0xa2, 0x21, 0x78, 0x90, 0x2d, 0xd5, 0x9d, 0xdb, 0x39, 0x32, 0x8a, 0x6b, 0x70, 0xe, 0xed, 0xcc, 0x2a, 0xd2, 0xba, 0x87, 0xd4, 0xdb, 0x78, 0xa5, 0x5a, 0x3a, 0xb7, 0xf5, 0xe9, 0x5a}}
	return a, nil
}

var _epochAdminUpdate_dkg_phase_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x4b\xc4\x30\x10\x86\xef\xfd\x15\xc3\x1e\xa4\xbd\x14\x0f\xe2\xa1\xa8\x4b\xd9\xd6\x0f\x3c\x58\x2c\x7a\x1f\xd3\x71\x13\x68\x33\x21\x99\x52\x41\xf6\xbf\x4b\x36\xd8\xb2\x73\x1c\xde\x8f\xe7\x35\x93\x63\x2f\xf0\x38\xf2\xd2\x3a\x56\x1a\xbe\x3d\x4f\x70\xfd\xd3\x76\x6f\x87\xe7\xba\x69\xde\xdb\xbe\xcf\x32\xf1\x68\x03\x2a\x31\x6c\x73\x4b\x4b\xa7\x31\xd0\xa7\xa1\x25\x54\xf0\xf1\x62\xe5\xf6\xa6\x80\xdf\x0c\x00\xc0\x79\x72\xe8\x29\x0f\xe6\x68\xc9\x57\x50\xcf\xa2\x6b\xa5\x78\xb6\xf2\x2f\x89\x37\x92\x00\xc5\xba\x7a\x98\x8c\x85\x7b\x48\xfa\xf2\x8b\xbd\xe7\xe5\xee\x6a\xc5\x29\xcf\x82\x87\x3c\x52\x55\x1b\x65\x89\xf1\xdd\x0b\x7b\x3c\x52\x87\xa2\x8b\x35\x3a\xde\x7e\x0f\x0e\xad\x51\xf9\xee\xc0\xf3\x38\x80\x65\x81\x14\x0d\x67\x63\x1a\x19\x92\x1d\x1c\x8a\xde\x15\xd9\x9a\xb0\x81\x95\xb3\x1b\x50\xa8\x79\x7d\xda\x16\x5f\xee\x4f\xbd\xa7\xec\xf4\x17\x00\x00\xff\xff\xe0\xf6\x16\x5e\x48\x01\x00\x00"

func epochAdminUpdate_dkg_phase_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_dkg_phase_viewsCdc,
		"epoch/admin/update_dkg_phase_views.cdc",
	)
}

func epochAdminUpdate_dkg_phase_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_dkg_phase_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_dkg_phase_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x12, 0x5a, 0x44, 0xb8, 0xd5, 0xb8, 0x5, 0x2a, 0xd0, 0x45, 0x97, 0xa7, 0x29, 0x2a, 0x1a, 0x76, 0xdd, 0x50, 0x3e, 0x12, 0x2a, 0xfc, 0xbe, 0x96, 0x57, 0xce, 0x5, 0x83, 0xbd, 0xfa, 0x43}}
	return a, nil
}

var _epochAdminUpdate_epoch_configCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x41\x6f\xdb\x38\x10\x85\xef\xfe\x15\x6f\x73\x58\xd8\x80\x57\xd9\xc3\x62\x0f\x46\x9b\xc0\x88\xdd\x24\x48\x9b\x04\x75\x9a\x9e\xc7\xd2\x48\x22\x22\x91\x02\x39\x8a\x0a\x14\xf9\xef\x05\x49\xdb\x92\x8c\xa2\x41\x50\x54\x07\x1f\x68\xce\x7b\x6f\x3e\x92\xa3\xea\xc6\x58\xc1\x87\xca\x74\xeb\xc6\xa4\x25\x72\x6b\x6a\xfc\xfb\x6d\x7d\x7f\x77\x71\xb5\x5c\xad\x3e\xaf\x37\x9b\xc9\x44\x2c\x69\x47\xa9\x28\xa3\xa7\xd9\x53\x71\x5f\x92\xe3\x8f\xac\x17\xf8\x72\xad\xe5\xff\xff\xe6\x70\x42\x4f\x4a\x17\xa3\x35\xf6\x7a\x83\x95\x19\xbe\x4f\x00\xa0\xb1\xdc\x90\xe5\xa9\x53\x85\x66\xbb\xc0\xb2\x95\x72\x99\xa6\xa6\xd5\xb2\xdf\xe2\xbf\x8a\x25\x4a\x2c\xb3\x5a\x69\xbc\x47\xdc\x9f\x6c\x8d\xb5\xa6\x7b\xf7\xf7\x21\x72\x12\x36\x9c\x4d\x7d\xf2\x45\xdf\x49\x42\x7e\x79\x23\xc6\x52\xc1\xf7\x24\xe5\xec\x20\xed\xbf\xf3\x73\x34\xa4\x55\x3a\x3d\xb9\x30\x6d\x95\x41\x1b\x41\x94\x46\x28\x8c\x20\x5c\x2c\x47\x43\x52\x9e\xcc\x26\x07\x05\x95\xe3\xaf\xde\x49\xb9\x47\xaa\x54\x16\xb0\x5c\x18\x9d\xab\xa2\xb5\x14\x60\xf5\x5c\xe6\x18\x80\xeb\xe1\x0c\x3b\x0e\x70\x62\xa6\x5b\xee\x10\xcf\xe3\x51\x71\xe7\x50\xb7\x4e\xb0\x65\x14\x96\x49\xd8\x42\x4a\xd2\x90\x92\xe1\xda\x1a\x26\xdf\xf3\x07\xe9\x0c\xab\x9b\x4b\x04\x23\x3c\xfb\xda\x93\xbe\xef\x97\xbe\x81\xd3\xd3\x53\xac\x5a\x86\x98\x20\x93\x53\x2a\x5e\x74\x87\xfc\xf7\x5d\x47\x46\x1d\x47\xa9\xb6\xc9\x48\x38\x28\x44\x9b\x34\xc0\x82\x8a\xaa\xa9\xb1\x96\x53\x81\xb1\x19\xdb\x04\x0f\xa5\x72\x78\xf6\x60\x03\x4b\x28\x87\xcc\x68\x86\xd1\x60\x4a\xcb\x91\xc4\xc8\x2e\xda\x24\xb8\x32\x5d\xd0\xd5\x6d\xbd\x65\xeb\x03\x87\x68\x7b\xbb\x58\xaf\x1c\xb6\xec\x9b\x88\x55\x19\x32\x16\xb6\xb5\xd2\xec\xc2\xae\x10\x66\x24\xaf\x34\xba\x52\xa5\xa5\xd7\x0d\x9c\xae\x75\x38\xaa\xf9\x60\x61\x13\xc9\x2c\xdb\xf0\x66\xe6\x81\x50\xff\xef\xea\xe6\x32\xa2\xd2\xcc\x99\x3f\x82\x2d\x1f\xec\x5d\x9b\x96\xf1\x24\xbc\xfb\xa0\xfd\x86\x9c\x63\x97\x8c\xa2\xfc\x03\xa5\x53\xcb\xe4\x7c\x03\x47\x71\x16\x7b\xdc\x47\xeb\xd8\x72\x6e\x2c\xbf\x39\xec\x91\x71\xc6\x6f\x30\x1e\x3b\x04\x83\x9f\xe1\x78\x25\xd9\x28\xc1\xed\xdd\xc3\x7a\x81\xaf\x0c\x72\xae\xad\x19\x25\x5b\xee\xb9\xf9\xdb\xd8\x04\xcd\x8a\x75\x21\xe1\x98\x6b\x4f\xd6\xd5\x54\x55\xa3\xab\xbc\xbb\xc3\xbb\x7d\xb9\xb1\xa0\xaa\x42\x63\x84\xb5\x28\xaa\x76\x17\x6c\xf7\xa0\x07\xfc\x55\x7e\x78\xc4\x38\x1b\x8c\x9d\x82\x25\xce\x80\x4f\x2c\x94\x91\xd0\x74\x96\x1c\x1f\xc1\xd1\xa3\xef\xc7\x5c\x12\xd1\x85\x5d\xa1\x62\x7a\x18\x14\xbf\xae\xd8\x21\x8a\x35\xfd\xd4\x79\xa5\x6a\x4f\x3e\x96\x0d\x06\xd4\x60\x66\x80\x2b\xc7\xaf\x05\xfe\x63\xf6\x6f\xc7\xf3\x32\x89\xbf\x2f\x3f\x02\x00\x00\xff\xff\xb6\x8b\x7d\x6b\xdb\x06\x00\x00"

func epochAdminUpdate_epoch_configCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_epoch_configCdc,
		"epoch/admin/update_epoch_config.cdc",
	)
}

func epochAdminUpdate_epoch_configCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_epoch_configCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_epoch_config.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xab, 0xdb, 0xbd, 0xb, 0x46, 0x8f, 0x2, 0x4c, 0xe4, 0x61, 0xc1, 0x47, 0xe7, 0x37, 0x1d, 0xa2, 0xcd, 0x8e, 0xe1, 0xd7, 0x53, 0x84, 0x58, 0x17, 0x53, 0x94, 0xc1, 0xd8, 0xb1, 0x40, 0x40}}
	return a, nil
}

var _epochAdminUpdate_epoch_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xcf\x4a\xf4\x30\x14\xc5\xf7\x79\x8a\xc3\x2c\x3e\xda\x4d\xf9\x16\xe2\xa2\xa8\x43\x98\xa9\xe8\xca\xc1\xa2\xfb\x98\xc6\x69\xa0\xcd\x0d\xe9\x0d\x15\x64\xde\x5d\x92\x60\x07\xbc\xab\x10\xce\x9f\xdf\xb1\xb3\xa7\xc0\x78\x9c\x68\xed\x3c\xe9\x11\x9f\x81\x66\xfc\xff\xea\x4e\x2f\x87\x27\x79\x3c\xbe\x76\x7d\x2f\x04\x07\xe5\x16\xa5\xd9\x92\xab\x9c\x59\x65\xcc\xcf\x77\x6b\xd6\xa5\xc5\xdb\xb3\xe3\xdb\x9b\x1a\xdf\x02\x00\x7c\x30\x5e\x05\x53\x2d\xf6\xec\x4c\x68\x21\x23\x8f\x52\x6b\x8a\x8e\x7f\x25\xe9\x26\xc3\x30\xa9\x50\x0e\xb3\x75\xb8\x47\xd1\x37\x1f\x14\x02\xad\x77\xff\x36\xa0\x26\x0b\x1e\xaa\xc4\xd5\x5e\x39\x1b\x95\xbe\x7b\xa6\xa0\xce\xe6\xa4\x78\xac\xb7\xe8\x74\xfb\x3d\xbc\x72\x56\x57\xbb\x03\xc5\x69\x80\x23\x46\x89\x46\x36\x96\x99\x4b\xb1\xc3\x2b\x1e\x77\xb5\xd8\x12\xae\x60\x4d\xf4\x83\x62\x93\x2b\xf3\xdc\xbf\xf3\x4b\xed\x45\x5c\x7e\x02\x00\x00\xff\xff\x31\x03\xa1\x69\x49\x01\x00\x00"

func epochAdminUpdate_epoch_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_epoch_viewsCdc,
		"epoch/admin/update_epoch_views.cdc",
	)
}

func epochAdminUpdate_epoch_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_epoch_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_epoch_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xb9, 0x7, 0xd8, 0xff, 0x10, 0xc6, 0x15, 0x25, 0x69, 0x5, 0x27, 0x32, 0x30, 0xf3, 0x4e, 0x2f, 0x72, 0x33, 0xda, 0xfa, 0x1f, 0x2a, 0xd7, 0x5a, 0x14, 0xb2, 0x90, 0xd4, 0x9f, 0x25, 0x7b}}
	return a, nil
}

var _epochAdminUpdate_rewardCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6b\xbc\x40\x0c\xc5\xef\x7e\x8a\xb0\x87\x3f\x7a\x91\xff\xa1\xf4\x20\x6d\x17\xd9\x55\x5a\x28\xac\xac\x94\xd2\x63\x3a\xa6\x3a\xa0\x93\x21\x46\xdc\x52\xf6\xbb\x97\x51\x58\xe9\x3b\x86\xf7\x5e\x7e\x89\x1d\x3c\x8b\x42\xd9\xf3\x5c\x78\x36\x1d\x7c\x09\x0f\xf0\xff\x52\x54\xa7\xc3\x73\x7e\x3c\x9e\x8b\xba\x8e\x22\x15\x74\x23\x1a\xb5\xec\x62\x47\xf3\x99\x66\x94\x26\xaf\x3e\x32\x78\x2b\xed\xe5\xfe\x2e\x81\x9f\x08\x00\xc0\x0b\x79\x14\x8a\x47\xdb\x3a\x92\x0c\xf2\x49\xbb\xdc\x18\x9e\x9c\x06\xcb\xe2\x09\xea\x49\x81\xc2\xba\xbc\x19\xac\x83\x47\x58\x03\xe9\x27\x8b\xf0\xfc\xf0\xef\x86\x93\x2e\x86\xa7\x38\x50\x65\x1b\x65\x8a\x61\x5c\x2b\x0b\xb6\x54\xa1\x76\xc9\xad\x3a\x68\xbf\x07\x8f\xce\x9a\x78\x77\xe0\xa9\x6f\xc0\xb1\xc2\x5a\x0d\x4b\x70\x3d\x72\x5c\xe3\xe0\x51\xbb\x5d\xb2\xc1\x6d\x60\xe9\xe4\x1b\x54\x2a\x5f\x4f\xef\xf5\xe4\x7d\xff\xfd\xe2\x8c\x10\x8e\x54\x91\x18\x72\x8a\x2d\xfd\x79\xc7\x4a\x71\x8d\xae\xbf\x01\x00\x00\xff\xff\x9e\x26\x8d\xcb\x56\x01\x00\x00"

func epochAdminUpdate_rewardCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_rewardCdc,
		"epoch/admin/update_reward.cdc",
	)
}

func epochAdminUpdate_rewardCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_rewardCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_reward.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x9b, 0x4a, 0x66, 0xb5, 0x60, 0xad, 0x5b, 0x16, 0x20, 0x4a, 0x74, 0x57, 0x86, 0x99, 0x3e, 0xa4, 0x6c, 0x68, 0xd7, 0x49, 0x3f, 0xef, 0xe2, 0x6, 0x7, 0xcc, 0x78, 0xf3, 0xe6, 0xfa, 0xd9}}
	return a, nil
}

var _epochAdminUpdate_staking_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x61\x0f\xd2\x5e\x8a\x07\xf1\x50\xd4\x25\xec\x56\xf4\xe4\x62\xd1\xfb\x98\xc6\x36\xd8\xce\x84\x74\x42\x05\xd9\x77\x97\x34\xd8\x05\xe7\x18\xbe\x3f\xbf\x2f\x6e\xf2\x1c\x04\x1e\x47\x5e\x1a\xcf\x66\x80\xcf\xc0\x13\x5c\x7f\x37\xa7\x97\xc3\x93\x3e\x1e\x5f\x9b\xb6\x55\x4a\x02\xd2\x8c\x46\x1c\x53\x41\x76\x69\x05\xbf\x1c\xf5\xef\xce\x2e\x73\x0d\x6f\xcf\x24\xb7\x37\x25\xfc\x28\x00\x00\x1f\xac\xc7\x60\x8b\xd9\xf5\x64\x43\x0d\x3a\xca\xa0\x8d\xe1\x48\xf2\x27\x49\x37\x5a\x01\x9b\x0a\x75\x37\x39\x82\x7b\xc8\xfa\xea\x83\x43\xe0\xe5\xee\x6a\x03\xaa\x56\xc1\x43\x91\xb8\xea\x0b\x67\x85\xe9\xb9\x15\x0e\xd8\xdb\x13\xca\x50\x6e\xd1\xe9\xf6\x7b\xf0\x48\xce\x14\xbb\x03\xc7\xb1\x03\x62\x81\x1c\x0d\xab\x31\xcf\x9c\xb3\x1d\x3c\xca\xb0\x2b\xd5\x96\x70\x01\xab\xa2\xef\x50\xac\x8e\xeb\xf6\x75\xf0\xff\x0f\xc8\xc5\x67\x75\xfe\x0d\x00\x00\xff\xff\x9e\x01\x4d\x3d\x4b\x01\x00\x00"

func epochAdminUpdate_staking_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_staking_viewsCdc,
		"epoch/admin/update_staking_views.cdc",
	)
}

func epochAdminUpdate_staking_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_staking_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_staking_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x2e, 0xa2, 0x66, 0x2c, 0x29, 0xe2, 0xbf, 0xdd, 0x5e, 0x40, 0xcb, 0xb9, 0xb5, 0x61, 0x12, 0x2c, 0x66, 0x4a, 0x87, 0x97, 0xc8, 0xa6, 0x8f, 0x8c, 0x46, 0x9a, 0x63, 0x86, 0xf0, 0x79, 0x95}}
	return a, nil
}

var _epochNodeRegister_dkg_participantCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xc2\x40\x10\x85\xef\xf9\x15\x43\x0e\x25\x42\x0d\x3d\x07\x5b\x11\x63\x6d\x11\x5a\x31\xfd\x03\xe3\x66\x4c\x16\xe3\xce\x32\x19\x6b\xa1\xf8\xdf\x8b\xa6\xb1\x2b\x76\x4e\x81\xf7\xf2\xcd\x7b\x3b\x76\xe7\x59\x14\x9e\x1b\x3e\xcc\x3c\x9b\x1a\x36\xc2\x3b\x78\xf8\x9a\x2d\xdf\xa7\x2f\x93\x3c\x5f\xcd\x8a\x22\x0a\x4c\xaf\xf9\x07\xae\x1b\x2a\x14\xb7\xd6\x55\x9d\x3b\xbe\x15\xe2\xf0\x9f\x7c\x31\xef\xb1\xf9\x62\xde\x43\x23\x15\x74\x2d\x1a\xb5\xec\x92\x01\x7c\x47\x11\x00\x80\x17\xf2\x28\x94\xb4\xb6\x72\x24\x19\x4c\xf6\x5a\x4f\x8c\xe1\xbd\xd3\x8b\xe7\x34\x0d\x29\x38\x2e\x69\x45\x1b\x78\x84\xce\x9d\xae\x59\x84\x0f\xa3\xbb\xdb\x3c\xe9\x1b\x97\xe7\x6f\x92\xa7\xe4\x94\x25\xfb\xa7\x4d\x60\x2a\x94\x05\x2b\x5a\xa2\xd6\x83\xcb\xce\xd3\x8c\xc7\xe0\xd1\x59\x93\xc4\x53\xde\x37\x25\x38\x56\xe8\xd6\x9e\xe3\x80\xd0\x86\x84\x9c\xa1\xae\x71\xdb\x71\xc0\xa3\xd6\xf1\xe0\x3a\x7e\xb9\xad\x96\x28\x6a\x8d\xf5\xe8\x14\x46\xc3\xbf\x2b\xa4\x15\x69\xbe\x98\x07\x72\xe2\x2e\xd9\xb2\xbe\x78\xc0\xfb\x7d\x80\x16\x3f\x29\x19\x0d\xaf\xc9\xf7\xa0\x9c\xf5\x87\x48\x03\xe1\xaa\xe4\x19\x75\x8c\x8e\x3f\x01\x00\x00\xff\xff\x37\x9e\x3e\xaf\x11\x02\x00\x00"

func epochNodeRegister_dkg_participantCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_dkg_participantCdc,
		"epoch/node/register_dkg_participant.cdc",
	)
}

func epochNodeRegister_dkg_participantCdc() (*asset, error) {
	bytes, err := epochNodeRegister_dkg_participantCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_dkg_participant.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0x74, 0x9d, 0xf4, 0xe2, 0xd2, 0xad, 0x9b, 0xe9, 0x5e, 0xf2, 0x93, 0x32, 0xfb, 0xb1, 0x2e, 0xf2, 0xb8, 0x5d, 0x57, 0xe7, 0xa9, 0xcd, 0xb7, 0x45, 0x8e, 0x99, 0x0, 0xe, 0x7f, 0xa6, 0xe7}}
	return a, nil
}

var _epochNodeRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x5f\x6f\xe3\x36\x0c\x7f\xcf\xa7\x20\xf2\x50\x38\x40\xea\x6c\xc3\x30\x0c\x46\x72\x87\x20\x69\xbb\x22\x87\x5d\xdb\xf4\xee\x1e\x86\x3d\x28\x32\x6d\x6b\x71\x24\x4f\xa2\x97\x0b\x8a\x7c\xf7\x41\x52\xfc\xaf\xce\x75\xed\xb0\xb7\xf5\xa1\x91\x44\xf2\x27\x8a\xfc\x91\xb4\xd8\x15\x4a\x13\x2c\xf4\xa1\x20\x35\x38\xed\xae\x73\xb5\xbf\x5d\x3e\xb2\x4d\x8e\x6b\x62\x5b\x21\x53\x48\xb4\xda\xc1\xb0\x2f\x18\xb6\x6d\x1e\xd5\x16\x65\x4b\xd5\xed\x3b\x1a\x8b\xbc\x34\x84\xfa\x7e\xe1\xb5\xbe\xfb\x7a\xbf\x98\x2f\x97\x0f\x57\xeb\x75\x5b\x6b\xb9\xba\xa9\xe4\xcb\xd5\xcd\x19\x85\xab\x42\xf1\xac\x52\xb9\xba\xfb\xb8\xf8\xe5\xb9\x52\x29\x53\xb1\xc9\xb1\xe3\x51\xfb\x6c\x38\x18\x4c\x26\xf0\x98\x09\x03\xa4\x99\x34\x8c\x93\x50\x12\xb8\x46\x46\x68\x80\x81\xc4\x3d\x48\x15\x23\x18\xd2\x25\x27\x50\x9b\x3f\x90\x93\x37\x42\x39\x06\x91\x00\x65\xe8\x55\x84\x35\xe0\x2a\xcf\x91\x93\xd2\xee\x6c\xfc\x0c\x8a\x71\xae\x4a\x49\xc0\x64\x0c\x2c\x8e\xed\xf1\xfd\xe2\x04\x0a\xa4\x40\x38\xe8\xdb\x3e\xa8\x34\x28\x4d\x69\x4e\xa0\x82\xfe\x19\xd7\x46\xaf\x03\x3c\x68\xbd\x30\x18\x00\x00\x88\x38\x82\x35\x69\x21\xd3\xb1\xdb\x6b\x95\x63\x04\x9f\x6e\x25\xfd\xec\x0f\x24\xd2\x5e\x69\x9b\xe0\x79\x1c\x6b\x34\xa6\xab\xdf\x88\x57\x78\xe8\x8a\x8c\xe7\x45\xef\x9c\xed\xac\x9f\x11\x7c\xba\x16\x5f\x7f\xfa\xd1\x9f\x15\xe5\x26\x17\x7c\x85\x07\x13\xc1\x6f\x9e\x82\xe1\x0a\x0f\x1f\x84\xa1\x2b\x49\xfa\xf0\xfb\x60\x04\x4f\x03\xa7\x9a\x23\x41\x52\x51\xea\x01\x93\x08\x58\x49\x59\xd0\xc9\x69\xf8\x45\x50\x16\x6b\xb6\xb7\xfc\x1c\xc1\x45\x4d\xc1\xf0\x33\x2b\x73\xf2\x40\x85\xc6\x82\x69\x0c\x18\xe7\x14\xc1\xbc\xa4\x6c\xee\x43\x58\x5f\xe5\x5e\x81\x79\x12\xb6\xef\x83\x99\x0d\x35\x85\x1b\xa5\xb5\xda\x4f\xdf\x7c\xf9\xbb\xc0\x92\x30\x82\x89\x21\xa5\x59\x8a\x93\x1a\xdc\x89\x47\xf5\xcd\xf6\xef\xfd\x7b\x28\x98\x14\x3c\x18\x2e\x54\x99\xc7\x20\x15\x81\xbf\x18\x34\x26\xa8\x51\x72\xb4\xb9\xbd\xfe\xf0\xf1\x0b\x38\xfb\xe1\xa8\xf1\x7d\x32\x81\x07\x4c\x85\xad\x33\xf8\x55\xc5\x58\x0b\x44\xd2\x79\xc3\x45\xbf\x9a\x43\xab\x6f\xd7\xa8\x2b\x87\x5f\x54\x5a\xfb\xc7\xdc\x31\xca\x46\x30\x9b\x81\x14\x79\x3b\x8a\x55\xe2\x64\x6d\x00\xd3\xcb\x73\x88\x2c\x8e\x2d\xe8\x03\x72\xa5\xe3\xa0\x63\x5f\xd1\x55\xc4\xe3\xde\xb9\xa7\xad\xfd\xdf\x97\x9d\x61\x70\xef\xe8\x25\x2b\x47\xe0\xce\xb6\xaf\xdd\xe6\x7a\xb3\xee\xeb\x91\xcd\xb3\x59\xa8\xdd\x4e\x10\x61\x1c\xc1\xf4\xb2\x47\xb0\x70\x7f\xe2\x4f\x50\x55\x8a\xff\xed\x32\x63\xd4\x0d\xae\x4b\xa7\x61\x7f\x61\x30\xbd\x6c\x82\x3c\x06\x52\x6f\x48\xdc\x19\xc8\x5c\xc8\xed\xf4\xe2\xe9\x45\x88\x3b\x57\xbc\xc7\x77\xfd\x74\xbd\xc2\xcc\x5e\x7c\x26\x4e\x4c\xa7\x48\xaf\x77\xfd\x59\x68\xaa\xd5\xb1\x79\x51\xc5\xbe\x7e\x05\xff\xc7\xec\x7f\x6d\xfd\xba\xd6\xde\x14\xb1\x9b\x4c\xa7\x96\x00\x05\xa3\xac\x5d\xc8\x95\xf3\xb7\x32\x51\x30\xfb\x96\x2f\x56\x1a\x38\xb5\x65\x54\xbd\x35\x14\x71\xb7\x21\x9c\x19\x2c\xd5\xb4\x52\xba\x37\x65\xfc\x88\x01\x06\x06\xb9\x92\x31\xd3\x87\x7a\xce\x24\x4a\x5b\x24\xa1\xc1\x14\xc8\x45\x22\xf8\x69\xd6\x98\x76\x9b\xa9\xbc\x0e\x6d\x6d\xda\xc6\xf0\x3d\x30\xe3\xe7\xcb\xb9\xfe\xb0\x63\x3c\x13\x12\xe7\x9c\x13\xcc\xda\x3d\x39\x28\xd8\x01\x75\xe4\x12\xd7\x0d\xb1\xf5\x63\x8b\x07\x10\xb2\x35\x45\xe0\xa9\x47\xa9\x16\x74\xb8\xc5\x83\xb1\xad\x26\xa8\x2d\x22\x8b\x11\xd6\xdb\x31\x64\xcc\x64\xf3\x3c\x55\x5a\x50\xb6\xf3\xd2\xce\xd1\x18\xf6\x28\xd2\x8c\xbc\xc8\xaf\xbb\x8e\x1d\xfb\xcf\xfb\x93\x7f\x56\xd4\xf4\x3e\xf7\xf1\x12\xa6\x48\xf5\xc7\x90\x13\x07\x4d\x01\xd7\x79\x7c\x56\x9b\xed\xc7\x9c\xaa\xfe\x84\xdd\x94\x7c\x0d\x1a\x3a\xc1\xf9\x42\x3f\x02\xe6\x06\xcf\x66\xea\x87\xff\x73\xa6\xe2\x6d\x7a\xc7\x34\x09\x2e\x0a\x26\xa9\x97\xb0\xe5\xea\xa6\x25\xfe\x77\x09\xeb\x5e\xd1\xe4\x6d\xb9\xba\x09\x5b\x82\x6f\xe4\xcd\x2f\x8f\x83\xe3\xdf\x01\x00\x00\xff\xff\x3b\x35\x2e\x11\xb8\x0b\x00\x00"

func epochNodeRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_nodeCdc,
		"epoch/node/register_node.cdc",
	)
}

func epochNodeRegister_nodeCdc() (*asset, error) {
	bytes, err := epochNodeRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x53, 0x24, 0x17, 0x3f, 0x5e, 0xfe, 0x62, 0x45, 0xf7, 0x8b, 0x84, 0x9d, 0x9b, 0xbc, 0xf1, 0x2e, 0x56, 0x3d, 0xe4, 0x75, 0x59, 0xf4, 0x6, 0x87, 0x12, 0xfa, 0xc0, 0xa2, 0xde, 0xda, 0xb2}}
	return a, nil
}

var _epochNodeRegister_qc_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\x83\x40\x10\xc5\xef\x7c\x8a\x09\x07\xb3\x4d\x2c\xf1\x4c\xaa\x4d\x43\x6b\xf4\xa2\x6d\x31\xde\xb7\xcb\xf0\x27\xd2\x9d\x75\x18\xac\x89\xe9\x77\x37\x40\x41\x48\x9d\x13\xc9\x7b\xfc\xe6\xbd\xd9\xe2\xe8\x88\x05\x1e\x4b\x3a\x6d\x1c\x99\x1c\x52\xa6\x23\xdc\x7d\x6f\xb6\xaf\xd1\xd3\x6a\xbd\xde\x6f\xe2\xd8\x1b\x99\x9e\xd7\x6f\xfa\x50\x62\x2c\xfa\xa3\xb0\x59\xe7\xf6\xaf\x05\x7f\xfc\x4f\x54\xd6\x95\x20\xef\xa2\x1e\xbe\x8b\x7a\xb2\x27\xac\x6d\xa5\x8d\x14\x64\xd5\x0c\x7e\x3c\x0f\x00\xc0\x31\x3a\xcd\xa8\xaa\x22\xb3\xc8\x21\xac\x6a\xc9\x57\xc6\x50\x6d\x65\xf0\x34\x53\xa2\x80\xa5\x04\xf7\x98\xc2\x3d\x74\xee\xe0\x40\xcc\x74\x5a\xdc\x5c\x87\x0a\x5e\x28\x69\xbf\x91\x1f\x54\x13\x25\xfc\xa7\xd2\xc8\x14\x0b\xb1\xce\x70\xab\x25\x9f\x0d\x3b\x9b\x59\x2e\xc1\x69\x5b\x18\xe5\x47\x54\x97\x09\x58\x12\xe8\xd6\xb6\x71\x80\x31\x45\x46\x6b\xb0\x2b\x5c\x75\x1c\x70\x5a\x72\x7f\x36\x8d\xff\x69\xde\x49\x90\x61\x31\xff\x7b\x83\x20\x43\x19\x6e\xd6\xca\xca\x0e\xa1\xc2\xbe\xf1\x08\x74\x69\x5e\xe9\x2f\x54\x8b\xf9\x05\x79\x0b\x42\xe1\xf4\xfe\x41\x2b\x4c\x6a\xb5\x8c\xb3\x77\xfe\x0d\x00\x00\xff\xff\xdc\xf7\x40\xd8\x08\x02\x00\x00"

func epochNodeRegister_qc_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_qc_voterCdc,
		"epoch/node/register_qc_voter.cdc",
	)
}

func epochNodeRegister_qc_voterCdc() (*asset, error) {
	bytes, err := epochNodeRegister_qc_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_qc_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x3b, 0xbc, 0xc5, 0xee, 0xf7, 0xc, 0xd1, 0xea, 0x15, 0x2a, 0xf9, 0x22, 0xea, 0x2d, 0xdf, 0x85, 0xcf, 0xf0, 0x5d, 0x9d, 0x42, 0x54, 0x7f, 0xe0, 0x14, 0x33, 0x12, 0x6d, 0xdc, 0xbf, 0x11}}
	return a, nil
}

var _epochScriptsGet_bonus_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x18\xa5\x97\x9e\x5a\xe2\x94\x9f\x57\x5a\x1c\x92\x9f\x9d\x9a\x57\xac\xa1\xc9\x55\x0b\x08\x00\x00\xff\xff\x6f\x69\x0b\x19\x6e\x00\x00\x00"

func epochScriptsGet_bonus_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_bonus_tokensCdc,
		"epoch/scripts/get_bonus_tokens.cdc",
	)
}

func epochScriptsGet_bonus_tokensCdc() (*asset, error) {
	bytes, err := epochScriptsGet_bonus_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_bonus_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x70, 0x28, 0x3f, 0x6f, 0xb3, 0x4e, 0xf4, 0x98, 0x64, 0xe9, 0xe0, 0x53, 0x18, 0xb1, 0x39, 0xe1, 0xc1, 0x9a, 0x82, 0xc9, 0x94, 0xba, 0xf3, 0x77, 0xaf, 0x95, 0x6c, 0x40, 0xcc, 0x75, 0xec}}
	return a, nil
}

var _epochScriptsGet_config_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x42\x68\xd3\x73\xce\xcf\x4b\xcb\x4c\x57\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x92\x4d\x4f\x2d\x81\x28\xf0\x4d\x2d\x49\x4c\x49\x2c\x49\xd4\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\xe1\x1e\x99\xa0\x7b\x00\x00\x00"

func epochScriptsGet_config_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_config_metadataCdc,
		"epoch/scripts/get_config_metadata.cdc",
	)
}

func epochScriptsGet_config_metadataCdc() (*asset, error) {
	bytes, err := epochScriptsGet_config_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_config_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xe3, 0x3, 0x47, 0x3c, 0xc3, 0xd5, 0xff, 0x69, 0x19, 0x2d, 0x1b, 0xe3, 0x64, 0x53, 0xff, 0x84, 0xa9, 0x4d, 0x26, 0x1c, 0x83, 0x46, 0x6a, 0x36, 0x13, 0x1b, 0x9a, 0x43, 0x17, 0x99, 0xa0}}
	return a, nil
}

var _epochScriptsGet_create_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\xef\x82\x30\x14\x04\xf0\xbd\x9f\xe2\x46\x58\xc8\x7f\x66\xfb\xa7\x60\x74\x52\x64\x24\x0c\x4d\x7d\x28\x49\xe9\x23\xaf\x6d\xd4\x18\xbf\xbb\x89\x81\xa8\xdb\x0d\xbf\xdc\xdd\x38\xcd\x2c\x11\x1b\xc7\xd7\x7a\x66\x7b\xc1\x20\x3c\xe1\xef\x56\x1f\xf6\x7a\xfb\x5f\x55\xc7\xba\x6d\xd5\x17\xd2\x2e\x85\x48\xd2\xe8\x15\x36\x7a\x55\xca\x58\x4b\x21\x64\xc6\xb9\x1c\x43\xf2\x98\xcc\xe8\x33\x23\x62\xee\x25\xba\x36\xca\xe8\xcf\x7d\x5e\xa2\xfb\xe9\x29\x96\xd4\xe3\xa1\x14\x00\x08\xc5\x24\xfe\xf3\xa8\xb0\x42\x26\x92\x66\xe7\xc8\x46\x96\xc5\x87\xcc\xf3\x89\x76\x55\x28\xf1\x9e\xc8\x95\x7a\xbe\x02\x00\x00\xff\xff\x6a\x47\x31\x9f\xcd\x00\x00\x00"

func epochScriptsGet_create_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_create_clustersCdc,
		"epoch/scripts/get_create_clusters.cdc",
	)
}

func epochScriptsGet_create_clustersCdc() (*asset, error) {
	bytes, err := epochScriptsGet_create_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_create_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0xee, 0x3a, 0x6f, 0x39, 0x84, 0x3d, 0xce, 0x1b, 0x51, 0x57, 0xf7, 0xc5, 0x85, 0x2, 0xc1, 0x83, 0x4, 0xc6, 0x7, 0x7c, 0xfb, 0xdd, 0x68, 0xd6, 0x55, 0x3c, 0xab, 0xf7, 0xdb, 0x72, 0x32}}
	return a, nil
}

var _epochScriptsGet_current_viewCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x55\x28\xcb\x4c\x2d\x57\xc8\x4f\x03\xb3\x93\x4b\x8b\x8a\x52\xf3\x4a\x14\x92\x72\xf2\x93\xb3\xb9\xb8\x12\x93\x93\x53\x8b\x8b\x35\x12\x73\x72\x34\x15\xd2\x4a\xf3\x14\x72\x13\x33\xf3\x34\x34\xad\x14\x42\x3d\xf3\x4a\xcc\x4c\x14\xaa\xb9\x14\x14\x14\x14\x72\x52\x4b\x60\xfa\x9c\x40\xda\x14\x6c\x15\xd2\x53\x4b\x9c\x91\x44\x34\x34\xc1\x0a\x8b\xc0\x96\xa2\xa8\xd5\x03\x59\xce\x55\x0b\x08\x00\x00\xff\xff\xb1\xb8\xc6\xc1\x92\x00\x00\x00"

func epochScriptsGet_current_viewCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_current_viewCdc,
		"epoch/scripts/get_current_view.cdc",
	)
}

func epochScriptsGet_current_viewCdc() (*asset, error) {
	bytes, err := epochScriptsGet_current_viewCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_current_view.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x17, 0xec, 0xb1, 0xd3, 0xf8, 0x2f, 0x5c, 0x5b, 0x67, 0xcc, 0x11, 0x39, 0x80, 0xf5, 0x21, 0x5c, 0x68, 0x72, 0x88, 0x8e, 0x3f, 0x62, 0xe2, 0x79, 0xb8, 0xfc, 0x3e, 0x23, 0x1f, 0x78, 0x73}}
	return a, nil
}

var _epochScriptsGet_epoch_counterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\x31\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x18\xa5\x97\x5c\x5a\x54\x94\x9a\x57\x02\xe6\x38\xe7\x97\xe6\x95\xa4\x16\x71\xd5\x02\x02\x00\x00\xff\xff\x59\x5e\x04\x35\x71\x00\x00\x00"

func epochScriptsGet_epoch_counterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_counterCdc,
		"epoch/scripts/get_epoch_counter.cdc",
	)
}

func epochScriptsGet_epoch_counterCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_counterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_counter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0xd5, 0xfd, 0x2, 0x55, 0x15, 0x31, 0x3, 0xcb, 0x7e, 0x88, 0xf1, 0xce, 0x48, 0x45, 0xee, 0xca, 0x5b, 0xab, 0x94, 0xfc, 0xd5, 0x59, 0xec, 0x85, 0x7b, 0x74, 0xbf, 0x2d, 0x4a, 0xc4, 0xd8}}
	return a, nil
}

var _epochScriptsGet_epoch_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x05\xa9\x77\xce\x2f\xcd\x2b\x49\x2d\xb2\x52\x08\xf5\xcc\x2b\x31\x33\xd1\xb4\x42\x18\xa5\x07\x26\x7d\x53\x4b\x12\x53\x12\x4b\x12\x15\xaa\xb9\x14\x14\x14\x14\x8a\x52\x4b\x4a\x8b\xf2\x90\x14\xa5\xa7\x96\xa0\xa8\x43\x31\x56\x53\x91\xab\x16\x10\x00\x00\xff\xff\x7f\x11\xb3\x7c\xa2\x00\x00\x00"

func epochScriptsGet_epoch_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_metadataCdc,
		"epoch/scripts/get_epoch_metadata.cdc",
	)
}

func epochScriptsGet_epoch_metadataCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x5e, 0xb9, 0xfa, 0xa9, 0xac, 0x39, 0x1, 0x5f, 0x6a, 0x16, 0xe8, 0xc4, 0x93, 0x4e, 0x82, 0x1a, 0x49, 0x3c, 0x14, 0xc5, 0xfe, 0xac, 0xbb, 0x70, 0x44, 0xf6, 0xc3, 0x49, 0x18, 0x89, 0xa5}}
	return a, nil
}

var _epochScriptsGet_epoch_phaseCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\xb1\x50\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x98\xa4\x97\x5c\x5a\x54\x94\x9a\x57\x02\xe6\x04\x64\x24\x16\xa7\xea\x15\x25\x96\x87\x25\xe6\x94\xa6\x72\xd5\x02\x02\x00\x00\xff\xff\x47\xc3\xf6\x42\x77\x00\x00\x00"

func epochScriptsGet_epoch_phaseCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_phaseCdc,
		"epoch/scripts/get_epoch_phase.cdc",
	)
}

func epochScriptsGet_epoch_phaseCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_phaseCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_phase.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x78, 0xa1, 0xb5, 0x83, 0x19, 0xc, 0xba, 0x63, 0xac, 0x58, 0x17, 0x11, 0x24, 0x41, 0x57, 0xa0, 0xd4, 0x2a, 0xc, 0x71, 0x62, 0x96, 0x5e, 0xe9, 0xa6, 0x18, 0xb4, 0xfd, 0x5f, 0x23, 0x11}}
	return a, nil
}

var _epochScriptsGet_proposed_counterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\x31\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x18\xa5\x57\x50\x94\x5f\x90\x5f\x9c\x9a\x02\xe6\x39\xe7\x97\xe6\x95\xa4\x16\x69\x68\x72\xd5\x02\x02\x00\x00\xff\xff\x55\xb5\xd8\x03\x74\x00\x00\x00"

func epochScriptsGet_proposed_counterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_proposed_counterCdc,
		"epoch/scripts/get_proposed_counter.cdc",
	)
}

func epochScriptsGet_proposed_counterCdc() (*asset, error) {
	bytes, err := epochScriptsGet_proposed_counterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_proposed_counter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xa1, 0x50, 0xe6, 0x27, 0x2, 0x37, 0xc0, 0x59, 0x7f, 0xc6, 0xed, 0xc7, 0xee, 0x56, 0x4e, 0xea, 0x60, 0x8d, 0xac, 0xfb, 0xe9, 0xfe, 0x8a, 0x5c, 0x5e, 0x29, 0x8d, 0x40, 0x30, 0xa8, 0x67}}
	return a, nil
}

var _epochScriptsGet_randomizeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\x48\x2b\xca\xcf\x55\x30\xa8\x70\x0d\xf0\x77\xf6\x70\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x2c\x2a\x4a\xac\xb4\x52\x88\x0e\x2e\x29\xca\xcc\x4b\x8f\xd5\x44\x30\x15\xaa\xb9\xb8\x14\x14\x14\x14\x8a\x52\x4b\x4a\x8b\xf2\x10\x86\xeb\x15\x25\xe6\xa5\xe4\xe7\x66\x56\xa5\x42\x34\x6b\x72\x71\xd5\x02\x02\x00\x00\xff\xff\x0c\xed\x0e\x98\x81\x00\x00\x00"

func epochScriptsGet_randomizeCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_randomizeCdc,
		"epoch/scripts/get_randomize.cdc",
	)
}

func epochScriptsGet_randomizeCdc() (*asset, error) {
	bytes, err := epochScriptsGet_randomizeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_randomize.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0xae, 0x3, 0x7, 0x26, 0x62, 0x14, 0x34, 0xf9, 0xcb, 0x9a, 0x86, 0x3c, 0x61, 0xe8, 0xf9, 0x11, 0xf6, 0xbe, 0xa0, 0xbb, 0xca, 0x1c, 0xa0, 0xec, 0xca, 0xc7, 0xc3, 0xa0, 0x96, 0x45, 0xa5}}
	return a, nil
}

var _flowtokenBurn_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\x9c\x30\x10\xbd\xf3\x2b\x5e\xf7\x50\xb1\x87\xc0\xa5\xea\x61\xb5\x6d\xba\x8d\x94\x63\x4f\x69\x7b\x36\x30\x2c\x56\xc1\x46\xe3\xa1\x24\x8a\xf2\xdf\x2b\xdb\xe0\x40\xa5\xdd\xc3\x02\xf6\xcc\xfb\x98\x37\x65\x89\xa7\x4e\x3b\x08\x2b\xe3\x54\x2d\xda\x1a\x68\x07\x05\xa1\x61\xec\x95\x10\x5a\xcb\xfe\x73\x73\x2f\x9d\x92\xac\x2c\x51\xdb\xa9\x6f\x50\x11\x26\x47\x0d\xaa\x17\x48\x47\x50\xcd\xa0\x0d\x54\x5d\xdb\xc9\x08\xc4\xa2\x9a\xd8\x40\xec\x1f\x32\xce\x37\xb5\x6c\x07\x5f\xa8\x19\x4e\x2c\x53\x83\x5f\x6a\xea\x3d\x5e\x16\xb4\x50\x68\xd0\xe6\x0a\x35\x04\x88\x79\x65\x51\x18\x15\xab\x81\x84\xd8\xe3\x7a\xb2\x8d\xaa\x2c\xd3\xc3\x68\x59\xf0\x38\x99\xab\xae\x7a\x7a\xf2\x94\x91\xee\xb0\x3b\x3b\xa4\xca\xde\xce\xbb\xaa\xf5\xfb\x90\x65\x1b\xe4\x3c\x0a\x39\xe1\xe7\xa3\x7e\xfe\xfc\xe9\x88\xd7\x2c\x03\x80\xb2\x8c\xd2\xc1\xe4\xec\xc4\x35\x85\xc1\xa0\xb3\x7d\xe3\xa2\xba\x60\x3a\x9e\x2a\x26\x54\xe4\x6d\x79\x7b\xd4\x04\x84\x9e\x04\x7f\x3d\xc4\x09\xdf\x76\x12\x8b\x38\x93\x54\x14\x86\x7a\xc2\xc7\xa4\xb0\xb8\xf8\x13\xed\x84\x95\x58\x8e\x85\x23\xd3\xa8\x98\x72\xa7\xaf\x86\xf8\x84\xcb\x24\xdd\x25\xe6\x90\x34\x2f\xba\x7f\x6b\xe9\x1a\x56\xf3\x2a\x71\x0d\x65\x49\x2f\x68\x82\x36\x21\x21\x75\xa5\xd4\xea\xa8\x6f\x8b\x78\x7b\xbe\x43\x24\x2a\x2a\xcb\x6c\xe7\xb3\x9a\xa4\xcb\xf7\x2e\x56\x1a\x55\xf5\x74\xdc\xaa\x0f\xf6\xbe\xe6\x9e\xf6\x84\x72\x61\x29\xdb\xf5\x3e\x5c\x1f\x3f\x24\x5a\xff\x2b\xe6\x05\x2c\xc5\x11\x9f\xc7\x9d\xb1\x07\x26\xbf\xb3\x0a\x4c\x2d\x31\x19\x1f\x8a\xdd\xee\x65\xf8\x4f\x81\xdd\xb2\x18\xcb\xbe\xfc\xe7\xf0\xd6\xf8\x6f\x1b\x09\x65\xc7\x9d\x8f\xfb\x7b\x8c\xca\xe8\x3a\x3f\x3c\x84\xc5\x36\x56\x10\xf1\x6f\xab\x5e\xf5\x1e\x22\xd4\x5b\xb4\x4c\xcf\x54\x4f\x42\x78\x4d\xf8\x7e\x55\xc2\x7a\x71\x88\x27\x39\x29\xea\x30\x96\x1f\x34\x7f\x0f\xb7\xf9\xbb\xa4\xf4\x12\xfb\x0a\xff\x08\xd2\xdd\x62\xea\x7c\xf7\x1e\xfa\x66\xd6\x0d\x39\x61\xfb\xb2\xb4\x2d\xb2\xde\x32\xfc\x0b\x00\x00\xff\xff\x9c\x62\xd7\x92\x50\x04\x00\x00"

func flowtokenBurn_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenBurn_tokensCdc,
		"flowToken/burn_tokens.cdc",
	)
}

func flowtokenBurn_tokensCdc() (*asset, error) {
	bytes, err := flowtokenBurn_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/burn_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xd4, 0xdc, 0x56, 0xc, 0x62, 0xe6, 0xe3, 0x2b, 0x88, 0xc3, 0x53, 0xcd, 0xa0, 0x87, 0x3b, 0xde, 0x7f, 0x50, 0x8b, 0xb2, 0xb7, 0xf3, 0x71, 0x47, 0x8d, 0x70, 0x69, 0xa4, 0x57, 0xeb, 0x7}}
	return a, nil
}

var _flowtokenCreate_forwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xe3\x36\x10\xbd\xf3\x57\x0c\xf6\xd0\x7a\x03\x47\xee\xe7\xc5\x48\x0b\x18\x9b\xa6\xd8\xcb\x16\x70\x82\xf6\xd8\x1d\x93\x23\x93\x0d\x4d\x0a\xe4\xc8\xaa\x11\xf8\xbf\x17\x24\x65\x5a\x0a\x50\xfb\x64\x8a\x6f\xde\xbc\x37\xf3\xa4\xd5\xdd\x9d\x10\x2f\xda\x44\xe0\x80\x2e\xa2\x64\xe3\x1d\x98\x08\x08\x4c\x87\xce\x22\x13\xb4\x3e\xa4\xe3\xe4\x9e\x35\x32\x48\xdf\x5b\x05\x3b\x82\x3e\x92\x12\xec\x21\x12\x43\xdf\x01\x3a\x40\x29\x7d\xef\x18\xd8\xa7\xe2\x01\x83\x02\x45\x9d\x8f\x86\x49\x01\xfb\x57\x72\x31\xdd\xa1\xf3\xac\x29\x40\x20\x49\xe6\x48\xa1\x11\xe2\x73\x0b\xe8\x4e\xde\x11\x44\x72\x2a\x4e\xc1\xa9\x4f\xf8\x36\xc2\x53\x61\xa4\x00\xdb\xb1\x6e\x29\x58\x53\x3d\xc1\x60\xac\x85\x7f\xfa\xc8\xb5\x39\x6b\x1f\x69\xc2\x95\xe0\x7f\x62\x6f\xb9\x38\xd1\x18\x61\x47\xe4\x44\x72\x80\x31\x5f\x07\x92\xa6\x33\xe4\x18\xd0\x29\xa0\x83\x49\x7f\x80\x8e\xe9\x49\x2e\x32\x4e\x19\x89\x4c\x51\x0c\xda\x48\x9d\xd5\x5d\x1a\x26\x97\xfa\xd2\xb0\x19\x07\x3c\xe0\x69\x09\x26\xf9\x03\xdf\xb6\xf7\x52\xa3\x71\x10\x29\x1c\x8d\x24\x18\xd0\x71\x96\x76\xf0\xce\xb0\x0f\x30\x68\x9f\xd6\x30\x12\x1a\xb7\x17\x57\xf9\x86\x97\x60\x18\x24\x3a\x18\x90\xa5\x2e\xb2\xf2\x55\x24\x82\x41\x53\xa0\x89\x00\x90\x78\x20\x68\x83\x3f\x34\x42\x3c\x33\x75\x23\xb2\x6c\xab\xac\x2a\xc2\x60\x58\x97\x82\xea\x22\xac\x85\xf8\xbe\x81\x17\x4d\xf0\xd4\xbb\xbd\xd9\x59\x82\x97\x8c\x90\xde\x71\x40\x99\xa6\xc0\x14\x5a\x94\x04\x51\xe7\x3c\xa0\x0d\x84\xea\x94\x72\xa1\xa8\xb3\xfe\x44\x0a\xa2\x3f\x50\x16\x25\x7e\x28\x6c\xd8\x75\xd6\x48\x4c\x7c\x3c\xe7\x1b\x59\x26\xd5\x8d\xf8\xb1\x14\x4d\x36\x32\xc6\x6b\x04\x6b\x3c\x12\xe0\xb8\xd0\x14\x56\xce\x79\x2e\xc4\x81\x90\x49\x09\x00\xc8\x8b\x8c\xec\x03\x29\x30\x0e\x0c\xc7\x7c\xc2\x3d\x15\xef\x08\x5d\xbf\xb3\x26\x6a\x52\x35\x4b\xe2\xa7\x06\x1e\xb3\x90\x3c\xcf\xaf\xd9\xfd\x53\xdd\x49\x23\x95\xfc\x7a\x15\x9f\x53\xaa\x4c\xdb\x52\x98\xc8\x14\x3f\x37\x29\xb3\x80\xe0\x68\x80\x4d\x79\xb8\x86\x4f\x59\x59\xa6\xbd\xf8\x71\x3e\x1c\xd0\xda\xd3\x32\xcb\x65\x4d\x0e\x42\xef\x4a\xe7\x62\xe4\xef\xba\x9a\xd2\x7a\xf2\x52\x96\xa2\x3d\x31\x1b\xb7\x87\xd9\x0b\x91\x56\x3f\x6b\x54\x02\xfc\x2e\xe8\x8d\xb8\x5b\x09\x61\x0e\x9d\x0f\x5c\xf7\x5d\xd6\x9d\x09\x3e\xcc\x9e\x7d\xa8\x48\xeb\x87\x19\xea\x72\xae\x88\x77\x43\x2b\xb8\xef\xfe\x7d\xfa\x63\xfb\xd7\x66\xfb\xf8\xf9\xcb\xef\x9b\xc7\xc7\xed\x6f\xcf\xcf\x42\x4c\xec\x2c\x2e\x1f\x85\x35\x6c\x94\x0a\x14\xe3\x47\x78\x13\xd9\x63\x17\xa8\xc3\x40\x0b\x94\x92\xd7\xb0\xe9\x59\x8f\x43\x4d\x08\x18\x7f\x96\x78\x92\x98\x5f\xd2\x60\x46\x54\x65\xfe\x58\xc1\xe9\xd7\xec\x89\x3f\x61\x87\x3b\x63\x0d\x9f\x1e\xbe\x79\x9b\xd9\x6d\x2e\xc3\x3c\xff\xba\x58\xe5\x9c\xc8\x55\x7b\x71\xba\xad\x84\xb3\xf6\xc7\x1c\xc8\x87\xfb\xf7\x03\x68\xca\x2e\xbf\xd0\x50\x3f\x65\x8b\x2a\x75\x7d\x55\x7d\xd5\x97\x9c\x36\x11\x8f\xb4\x78\xb8\xcf\xac\x4b\x60\xbf\x86\xd5\x98\xdf\xab\x92\x4a\x38\x91\x92\x3e\x39\xa9\x7e\xe6\xef\x86\x89\x46\x6a\x92\xaf\xb7\x06\x30\x9d\x73\x95\xd7\x3b\x6b\xdc\xeb\xad\xe1\x5c\xe0\xe7\xb9\xaf\x54\x76\xab\xdb\xac\xd5\xff\xd2\x2f\x67\x30\xc6\xb0\x27\xbe\x39\xa1\x8a\x2f\xc2\xce\xe2\x2c\xfe\x0b\x00\x00\xff\xff\x84\xe0\xd4\x8e\x0d\x07\x00\x00"

func flowtokenCreate_forwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenCreate_forwarderCdc,
		"flowToken/create_forwarder.cdc",
	)
}

func flowtokenCreate_forwarderCdc() (*asset, error) {
	bytes, err := flowtokenCreate_forwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/create_forwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x62, 0x9a, 0x56, 0x99, 0xaf, 0x95, 0xe9, 0xb7, 0xa1, 0x62, 0xc8, 0xe2, 0xe2, 0x4, 0xda, 0x6, 0x2c, 0x61, 0xe8, 0x9d, 0x89, 0x85, 0xf0, 0x6f, 0x3a, 0xd7, 0x36, 0xc4, 0xb5, 0x4d, 0xb1}}
	return a, nil
}

var _flowtokenMint_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x46\x1c\x22\x90\xde\xc0\xe5\x55\x0f\x68\x93\x08\x55\xca\xad\x3d\xb4\x49\xef\xc6\xcc\xb2\xa3\x1a\x1b\x8d\x87\x6c\xa2\x55\xfe\x7b\x65\x0c\xec\x92\x66\xeb\xcb\x6a\xcd\x33\xcf\xd7\x98\xfa\xc1\xb1\xc0\xe3\x68\x3b\x6a\x0c\x3e\xb9\xdf\x68\x61\xcf\xae\x87\x74\x73\x97\x26\x0b\xd2\xb8\xe3\x06\xb5\xfc\x4f\x93\xa4\x2c\x4b\x78\x3a\x90\x07\x61\x65\xbd\xd2\x42\xce\x42\x4f\x56\x3c\x48\x80\x78\x18\x3d\xd9\x0e\xe4\x80\xa0\xb4\x76\xa3\x15\x90\x83\x12\xf0\xe2\x18\xfd\x74\x1f\xf8\x20\x0a\xd4\x6d\x4f\x16\x18\xbd\x1b\x59\xe3\x99\x9d\x22\xd2\x23\xbf\x90\x5e\x99\x92\xe4\x42\x35\x63\xd4\x34\x10\x5a\xa9\xa0\x6e\x5b\x46\xef\xff\x03\xd5\x07\x5c\x05\xcf\x8f\xf4\xfa\xe5\xff\x1c\x4e\x49\x02\x00\x60\x50\xa2\xbd\x49\xaf\x82\x9b\x35\x52\x31\xdd\x90\x17\x56\xe2\x78\x0b\xfe\x81\x1a\xe9\x05\xb9\x82\x9b\xd3\xa6\xa9\x62\xf9\xf2\x1e\xe9\x07\xc6\x41\x31\x66\x9e\x3a\x1b\xe0\xf5\x28\x87\x3a\x5a\x5e\x2d\x84\xe3\xd1\xec\x8b\xb3\x0f\xb8\x83\x38\xb1\x02\xc2\x29\x1a\xc7\xec\x8e\xbb\x6b\x1e\xef\xb3\xb0\x95\x0a\xca\xd0\xa8\xea\xb0\xdc\x2f\xb8\x09\x96\x6f\xc8\x1e\x1e\x60\x50\x96\x74\x96\xfe\x9c\x94\x42\xb1\xd6\xc9\x54\xee\x64\x04\x54\x18\x4a\xf3\xcf\x4c\x2e\x29\xe1\x0e\x3a\x94\x39\xd0\xb9\xf6\xad\x52\xd1\xa1\x7c\x55\x83\x6a\xc8\x90\xbc\x65\xe5\x30\x36\x86\xf4\xd9\xdc\x42\x96\x7f\x1e\xf6\x5a\xc1\xf7\xd9\xb5\x40\xcf\x56\x35\x26\xa4\x80\xc8\x01\xbc\xd8\x65\xdc\x23\xa3\xd5\x98\xc6\xd9\x79\x4b\xf8\x8a\x7a\x14\x84\xd3\x4a\x18\x36\x1d\xde\x2e\x32\xec\x6e\x3f\x6e\xa7\xd0\x8c\x4a\xf0\x3b\x1e\xbf\x4d\x90\x4c\x19\xe3\x8e\xd8\xd6\xf3\x13\x8b\x4f\x2d\xff\x9b\xac\xfd\xa5\x46\x23\x81\x31\x72\x17\xe1\x67\x8a\xe5\x33\xf5\x61\xf8\x1f\xad\x17\x2d\x0e\xce\x93\xcc\xeb\xde\xdd\x5e\x90\x5f\x0c\xb6\xe8\x85\xdd\xdb\xac\x35\xe7\x7d\xff\x13\x00\x00\xff\xff\xbd\x70\xe8\x8d\xf4\x03\x00\x00"

func flowtokenMint_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenMint_tokensCdc,
		"flowToken/mint_tokens.cdc",
	)
}

func flowtokenMint_tokensCdc() (*asset, error) {
	bytes, err := flowtokenMint_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/mint_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xb4, 0xab, 0xe0, 0x1f, 0xf7, 0x4b, 0x2f, 0xa2, 0xc4, 0xbe, 0x81, 0x22, 0x80, 0x5e, 0xb2, 0x17, 0x19, 0xee, 0xb7, 0x86, 0x19, 0x1b, 0xfa, 0x12, 0x20, 0x9d, 0xe7, 0x0, 0x31, 0xed, 0xf8}}
	return a, nil
}

var _flowtokenScriptsGet_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x51\x0e\x90\x5c\x92\x0b\xe2\x50\x01\x55\xa9\xd4\x07\x40\x85\xfb\xc6\x59\xb7\x16\xae\x1d\xd9\x6b\x0a\xaa\xfa\xee\xa8\xcd\x0f\xd4\x27\xff\xcc\x37\xbb\xb3\x6e\x1a\x6c\xf7\x36\x21\xe9\x68\x7b\x41\x64\xea\x12\x64\xcf\x68\xc9\x91\xd7\x0c\x63\xd9\x75\x08\x06\xe4\x41\x5a\x87\xec\xe5\x3e\x61\xe3\xc2\x71\x1b\x3e\xd9\xe3\x75\xd0\x29\x65\x0f\x7d\x88\x82\x4d\xf6\x3b\xdb\x3a\x1e\x5e\x4d\x0c\x07\x14\x37\x77\xc5\xac\x9c\x3d\x46\xd5\x74\x2e\x94\x22\xad\x39\xa5\x92\x9c\xab\x60\xb2\xc7\x81\xac\x2f\xc7\xf2\x0b\xac\xba\x2e\x72\x4a\xd5\x02\xef\x1b\xfb\xfd\xf8\x80\x93\x52\x00\xe0\x58\xf0\x45\xd9\xc9\x1b\x1b\x3c\x63\xc7\xb2\x1a\x90\x09\xad\xae\xb2\xcb\xaa\x77\x2c\x6b\xea\xa9\xb5\xce\xca\x4f\xd9\xf4\xb9\x75\x56\x37\x66\xea\x61\x8c\xf5\x0f\x68\x43\x8c\xe1\xf8\x74\x37\xb7\x59\x7f\x5c\x4a\x9d\x6e\xc2\xd5\x23\x77\x7e\x29\xff\xd0\xe5\x12\x3d\x79\xab\xcb\x62\x1d\xb2\xeb\xe0\x83\x60\x70\x9b\xa6\x87\xc8\x86\x23\x5f\x76\x12\xae\xe3\xbf\x7a\x17\xd5\x90\x2b\xb2\xe4\xe8\xe7\x68\xf5\xf8\x37\xea\xac\x7e\x03\x00\x00\xff\xff\x56\x32\x0c\x91\xbf\x01\x00\x00"

func flowtokenScriptsGet_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenScriptsGet_balanceCdc,
		"flowToken/scripts/get_balance.cdc",
	)
}

func flowtokenScriptsGet_balanceCdc() (*asset, error) {
	bytes, err := flowtokenScriptsGet_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/scripts/get_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xb8, 0x2d, 0x30, 0x53, 0xb2, 0x1c, 0x7, 0xe3, 0xeb, 0x6b, 0xc6, 0xad, 0x52, 0x28, 0xaa, 0x96, 0xb2, 0xce, 0x9f, 0x1e, 0x1b, 0x24, 0x80, 0x9f, 0xe9, 0x39, 0xe7, 0x1d, 0xc2, 0x44, 0x69}}
	return a, nil
}

var _flowtokenScriptsGet_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x3d\x8a\xc3\x30\x14\x84\xfb\x77\x8a\xc1\x95\xdd\xac\x9a\x65\x8b\x85\xb4\xbe\x40\x9c\x03\x08\x59\xc2\x22\xfa\xe3\xbd\x67\x92\x10\x72\xf7\x80\xf3\x5b\xce\xcc\xc7\xcc\x18\x83\x69\x89\x02\x71\x1c\x9b\x82\xbd\x9d\x05\xba\x78\x68\x55\x9b\x20\x6b\x6b\xe9\x82\x10\x7d\x9a\xc9\x18\xd4\xb0\x85\x63\xaa\xa7\xa9\x1e\x7d\x81\x64\xcb\x0a\x57\x8b\xb2\x75\x4a\x14\x73\xab\xac\x5f\x40\xe0\x9a\xd1\xbd\x75\x47\x64\x9d\xf3\x22\xbd\x4d\x69\x40\x58\x0b\xb2\x8d\xa5\x1f\xfe\x71\x18\xe3\xf9\xef\x17\x57\x22\x00\x48\x5e\x5f\xeb\xbb\x4f\xdd\xcf\x76\x6b\xbf\xf9\x0f\x8e\xbd\xae\x5c\x9e\x28\xdd\xee\x01\x00\x00\xff\xff\x93\xe0\xcd\xc5\xd0\x00\x00\x00"

func flowtokenScriptsGet_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenScriptsGet_supplyCdc,
		"flowToken/scripts/get_supply.cdc",
	)
}

func flowtokenScriptsGet_supplyCdc() (*asset, error) {
	bytes, err := flowtokenScriptsGet_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/scripts/get_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x7c, 0x11, 0x45, 0x40, 0xad, 0x8d, 0x3d, 0x20, 0x6, 0x5b, 0x4d, 0x33, 0xbd, 0x92, 0x38, 0xcd, 0x91, 0x1f, 0x33, 0x5d, 0xa2, 0x8c, 0xf9, 0x8e, 0xd7, 0xdf, 0x52, 0x6d, 0xc0, 0x4e, 0x90}}
	return a, nil
}

var _flowtokenSetup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xdd\x6a\xdc\x3c\x14\xbc\xd7\x53\x0c\x7b\xf1\xe1\x85\x7c\xeb\xfb\x90\x04\xd2\xd2\x3e\x40\x09\xbd\x3f\x96\x8f\x6d\x11\xad\x24\xa4\xa3\x6c\x97\x65\xdf\xbd\xc8\x3f\xbb\x75\xd3\x85\x42\xa8\x2e\x8c\x75\x66\x34\x9e\x19\x59\xd5\x35\x5e\x06\x93\x20\x91\x5c\x22\x2d\xc6\x3b\x98\x04\x82\xf0\x3e\x58\x12\x46\xe7\x63\xd9\x5e\xf1\x72\x46\x3c\xa8\x6d\x41\xf8\x4e\xd9\x0a\x22\x27\x9f\xa3\xe6\x32\x97\x81\x4d\x04\x69\xed\xb3\x93\xc2\x4d\x65\x46\x52\x80\x23\x34\x39\xe4\xc4\x65\x83\xce\xfa\xc3\x8b\x7f\x65\xa7\x94\xd9\x07\x1f\x05\x5f\xb3\xeb\x4d\x63\x79\x9c\xa2\x8b\x7e\x8f\xcd\x6a\xb6\xb9\x30\x97\xb3\x0b\x6b\xd9\x6f\x94\xfa\x35\xcb\x49\x29\x00\x08\x91\x03\x45\xae\x92\xe9\x1d\xc7\x7b\x3c\x67\x19\x9e\x27\x8b\xdb\x85\x53\x96\xe9\x30\x51\x76\x8d\x8f\xd1\x1f\x1e\xfe\xbb\x08\xef\xc6\xa8\x4f\x55\xf9\xde\x3d\xea\x24\x3e\x52\xcf\xf5\x25\xc4\x08\x6f\xf1\xf8\x08\x67\x2c\x4e\x17\xc9\xb2\xea\x1a\x9f\x23\x97\x36\x09\x8e\x0f\xd7\xe4\x73\x7f\xe4\x5a\x84\x2c\x30\x02\xe3\x30\x4b\xaf\x14\x66\x57\x89\xde\xb8\x7a\xf8\xff\x6a\x4a\x8f\xb2\x5f\xf6\x41\x8e\xa3\x54\xb5\xbd\x83\xf8\xdb\xfe\xd4\x4d\x5f\x21\x37\xd6\x68\x68\x0a\xd4\x18\x6b\xe4\x38\x5f\xe6\x6c\x71\xbc\x42\xef\xec\x11\xfc\x23\xf8\xc4\xe9\x77\xa1\x42\x6d\x39\xf8\x64\x04\x5d\x76\x53\xfd\x32\x44\x9f\xfb\x61\x04\xbf\xb1\x66\xf3\xc6\x11\xc6\x09\xc7\x8e\xf4\x1f\x13\x5a\xe3\x5e\xdf\xb5\x7e\x5a\xfd\x04\xbb\x45\xe9\xfc\x54\xad\x24\x46\x27\x53\x8e\x6b\xee\x85\x7c\xf7\x8e\x2a\x14\x7b\x96\x9b\x5d\xad\xf8\xff\xb8\xb8\x86\x2c\x39\xcd\xe8\x0c\xdb\x76\xd5\xda\xa7\x19\xf9\x70\x69\xb3\xd0\x5f\x75\x36\x73\x3f\x5a\xd9\xf2\x76\x56\xd3\xf3\xac\xf0\x33\x00\x00\xff\xff\x47\x64\xa2\x4a\x71\x04\x00\x00"

func flowtokenSetup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenSetup_accountCdc,
		"flowToken/setup_account.cdc",
	)
}

func flowtokenSetup_accountCdc() (*asset, error) {
	bytes, err := flowtokenSetup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x3c, 0xd0, 0xd0, 0x1e, 0x5, 0x7e, 0xb1, 0xd5, 0xf1, 0x86, 0x97, 0x83, 0xbf, 0xc, 0xb0, 0xb1, 0x71, 0x7, 0x71, 0x34, 0x7a, 0x1c, 0xa6, 0x75, 0xdd, 0xef, 0x71, 0x2f, 0xb2, 0x18, 0xe9}}
	return a, nil
}

var _flowtokenTransfer_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x4f\xdc\x3c\x10\x3d\x93\x5f\x31\xdf\x1e\x20\x2b\x7d\x24\x97\xaa\x87\x15\x85\x22\x2a\x7a\x47\xb4\x3d\x3b\xc9\xcb\xc6\x6a\xd6\x8e\xc6\x13\x02\x42\xfc\xf7\xca\x76\x1c\x36\x20\x95\xee\x65\x95\xf1\x9b\x37\x6f\xde\xb3\xcb\x92\xee\x3b\xed\x48\x58\x19\xa7\x6a\xd1\xd6\x90\x76\xa4\x48\x70\x18\x7a\x25\xa0\xd6\xb2\xff\x3c\x3a\x97\x4e\x49\x56\x96\x54\xdb\xb1\x6f\xa8\x02\x8d\x0e\x0d\x55\x4f\xa4\xcc\x93\x35\x20\xb1\xe4\x60\x1a\x12\xfb\x1b\xc6\xf9\x4f\x65\xac\x74\x60\x52\x75\x6d\x47\x13\x9a\x3d\x09\x75\xca\x51\x05\x18\x72\x10\x1a\x07\x0f\x65\xd4\xd0\x0f\x98\x9b\x8b\xac\x2c\xb3\xa0\x11\x34\x69\xe9\x1a\x56\x13\xa9\x83\x27\x21\xe5\x47\x74\x48\xa4\xd4\xb2\x3d\xd0\x1e\x72\xfd\x3a\x64\x4a\x0a\x3d\x6e\x50\xac\x0e\x10\x70\x90\xe4\x2b\x47\x4b\x65\x99\x3e\x0c\x96\x85\x6e\x47\xb3\xd7\x55\x8f\x7b\x3f\x3f\x72\x6e\x56\xb5\xcd\x82\xec\xed\xb4\x42\xa5\xef\x4d\x96\x1d\x31\xe7\x51\xee\x8e\x7e\xdc\xea\xc7\xcf\x9f\xfe\x27\xb1\x3b\xba\x6e\x1a\x86\x73\x5b\x7a\xce\x32\x22\xa2\x79\xc5\x9f\x6a\xec\x85\x18\xce\x8e\x5c\x63\xf6\xc8\xf6\x8d\x8b\x72\x67\x3f\x7d\x55\x31\xa8\x82\x36\xfb\xb8\x44\x0b\x66\x34\x81\xaa\x87\x78\xfb\x25\x70\xed\xe8\xeb\x4a\x7c\x11\xaa\x71\xe6\xc0\x18\x14\x23\x77\x7a\x6f\xc0\x3b\xba\x1e\xa5\x9b\xbd\x5b\x74\xcd\xda\xbe\x43\x48\x11\xa3\x05\xc3\xd4\x48\xfe\xc5\xce\x33\x47\x4e\x2c\xa3\xa1\x87\x40\x9e\xfa\xbc\x90\x50\xb9\x43\x4b\x5f\x66\x70\x51\x59\x66\x3b\x5d\xa8\x51\xba\x7c\x2d\xed\xd7\x9c\xaf\xaa\x7a\x6c\xe9\x74\xb1\x33\x6a\xbe\xcc\xbd\xcb\x3b\x2a\xfd\x2c\xb5\x47\xd9\xa6\xf3\x70\xbc\xcd\x4e\x4e\x4e\xae\xae\x68\x50\x46\xd7\xf9\xe6\x26\x04\x6f\xac\x50\x9c\xf7\x5e\xbb\x9d\xa2\xf4\xd0\xfd\xdf\x66\xbb\xda\x37\x49\x49\x96\x87\x80\x3f\xde\xd8\xa1\x6f\x8b\xc5\x7b\xba\x38\x5f\xf6\x2f\xd2\xe5\x5d\x6e\x43\xfc\xdf\x86\xde\x97\x38\x1c\x8f\xa8\x47\xc1\xbf\x79\xcf\xa8\xf5\xa0\x61\xe4\xcc\xd1\x5d\x7c\x33\xbc\xb2\x7e\x7e\x48\x1c\xdd\x3f\x7a\x18\xb9\xd8\xed\x82\xf4\xbf\x62\x0f\xb9\x51\x83\xaa\x74\xaf\xe5\x29\x2f\x87\xb1\xea\x75\xfd\x6a\x70\xa2\x7f\xd3\x35\x27\x79\xfa\xbc\x8e\x31\xa1\x5f\x2e\xf3\x8f\x43\x89\xd0\xbf\x6f\x17\xcc\x7c\x13\xd0\x37\x0c\xd6\x69\x09\xd8\x64\xad\x49\x69\x69\xf3\x8e\x83\xdf\x3a\x74\xe4\x4e\xd1\x44\xb2\xf9\x82\x5d\x9c\xaf\x63\x4c\x11\xbd\x64\x7f\x02\x00\x00\xff\xff\x86\x4e\x2d\xbe\x2c\x05\x00\x00"

func flowtokenTransfer_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenTransfer_tokensCdc,
		"flowToken/transfer_tokens.cdc",
	)
}

func flowtokenTransfer_tokensCdc() (*asset, error) {
	bytes, err := flowtokenTransfer_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/transfer_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x56, 0x9b, 0xf5, 0xbf, 0x19, 0xb0, 0x44, 0x9, 0x5e, 0x7b, 0x5e, 0xb4, 0x63, 0x53, 0x5c, 0x76, 0xae, 0x4b, 0x4c, 0x2a, 0x7f, 0xd0, 0x16, 0xab, 0xf, 0x16, 0xc5, 0x7a, 0x1e, 0xd9, 0xde}}
	return a, nil
}

var _idtablestakingAdminAdd_approved_and_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x8b\xe3\x46\x10\x3d\x4b\xbf\xa2\xd6\x87\x8d\x4c\x82\xcc\x5e\x4d\x9c\x65\x12\x13\x10\x0c\x4b\x58\x2f\xb9\x0c\x73\x68\x77\x97\xac\x4e\xda\x5d\xa2\xbb\x34\x9a\x61\xf0\x7f\x0f\xd5\x92\xfc\x31\xa3\x21\x7d\x11\xa8\x5f\xbd\x7a\x7a\xf5\x4a\xf6\xd8\x52\x60\xf8\xd3\x51\x5f\x6d\x7f\xa8\xbd\xc3\x1d\xab\x7f\xad\x3f\x40\x1d\xe8\x08\x8b\xf7\x17\x8b\x3c\x5f\xad\x56\xf0\xa3\xb1\x11\x38\x28\x1f\x95\x66\x4b\x1e\x94\x31\x11\x3c\x19\x84\x6a\x1b\x81\x09\xb8\x41\x70\x36\x32\x50\x0d\xaa\x6d\x03\x3d\xa1\x49\x80\x08\xd6\x27\x0e\x41\x54\x5b\x60\x61\x2f\x21\xbd\xaa\x18\x94\x8b\x04\xd6\xeb\x80\x2a\x62\x84\xe8\x88\xc1\xd9\xa3\xe5\x98\x10\xfb\x97\x54\xe7\xbb\xe3\x1e\x83\x70\x0f\x94\x7d\x43\xa0\x02\x8a\x0c\x34\x02\x1c\xe8\x6a\x50\xfe\x45\x50\x52\x23\x1a\xac\x39\xab\x50\x2e\xa0\x32\x2f\x80\xcf\xa2\xd2\xfa\x1b\x3d\xbf\x00\x37\x76\xe8\x78\xfd\x95\xbd\x75\x0e\x3c\x31\x04\x7c\xc2\xc0\x50\x58\x83\xc7\x96\x18\x3d\x2f\xf3\xfc\x0a\x59\x78\xec\xef\xc6\xaf\xae\xb6\x71\x0d\x0f\x3b\x0e\xd6\x1f\x1e\x97\xf0\x9a\xe7\x00\x00\xab\x15\xdc\x93\x56\x0e\x9e\x54\xb0\xd2\x12\x6a\x0a\xa0\x20\x60\x8d\x01\xbd\xc6\xc9\xc4\x6a\x0b\x69\x00\x70\x67\x8e\xd6\x03\xed\xff\x41\xcd\x89\xc2\x21\x83\x92\x97\xdf\xb1\x5e\xc3\xe7\xf7\xc3\x2a\x53\xc9\xd0\xaf\x0d\xd8\xaa\x80\x85\xd2\x9a\xd7\xa0\x3a\x6e\x8a\xdf\x29\x04\xea\xff\x56\xae\xc3\x25\x7c\xbe\xd3\x9a\x3a\xcf\x22\x10\xc6\x23\x7e\x27\xcc\x9c\x2e\xf5\x56\x8e\x9c\x88\xae\x2e\x27\x4d\xb0\x01\xe9\x56\x46\xa6\xa0\x0e\x58\x0e\x5c\xbf\x7e\x28\xf4\xb7\x42\x52\xb7\x9e\x89\x63\x39\x3e\x13\x6c\x37\xd0\xfd\xa5\xb8\x59\x9e\x1b\xcb\xf9\xfa\x15\x5a\xe5\xad\x2e\x16\x7f\x50\xe7\x4c\x1a\xd4\xa8\xff\x46\x7d\x1c\x33\x9e\x74\x2e\x06\x8e\xd3\xe0\x12\x3e\xa3\xee\x18\xe1\x35\xcf\x32\xb1\x37\x85\x43\x1a\x5f\x66\x09\x9b\x39\x81\x07\xe4\x09\x73\x6f\x23\x17\xcb\x3c\xcb\xb2\x39\x41\x8e\x94\xb9\x2c\x84\x6c\xc8\x62\x99\x8f\xdd\x24\xec\xf7\x29\xeb\x1f\x36\xf9\x4e\x0e\x77\x67\x58\x91\x4a\x57\x2b\xc9\x7d\x8a\xba\xc7\x7e\xda\x42\xe8\x1b\xab\x1b\x30\x84\xd1\xff\xc4\xf3\x71\x1f\x75\x24\x19\x23\x91\x37\xe7\xed\x4b\x10\xad\xbc\xb1\x46\x31\x0e\xbc\xc3\x2a\x26\xd8\xd5\x6a\xca\x5a\x7e\x19\x08\x24\xc5\xa8\x74\x03\x9a\x42\xc0\xd8\x92\x37\xe2\x75\x2a\x1e\xb6\x33\xcb\x04\xe3\xb1\xff\x46\x06\xab\xad\x68\xb9\xdd\x96\xe4\x7e\x66\xeb\x39\xf7\x1f\xce\x75\x8f\xf0\x69\x03\xde\xba\x31\xaf\x59\x96\x69\xf2\x6c\x7d\x87\x52\x7d\x12\x63\x92\xa9\xd2\xb9\xf2\x35\xcd\x5b\xfa\x6d\xbc\x2d\xce\xbc\xc9\xd2\xec\x32\x8a\x87\x89\xa0\x0c\xe4\xf0\x11\x36\xf0\xe1\xdd\x27\xf8\x19\xbe\xa4\xf2\xff\x51\xbe\x01\x0e\x49\xe7\x69\x9c\x5f\x44\xbe\x1e\xc8\x10\x8c\x69\xd3\x3a\x2f\xff\x1e\xba\xf8\x91\xec\xbf\x1a\x75\x9c\xdf\xbf\x32\xbe\x09\xe5\x8c\xaa\x29\x40\x3b\x71\x0a\xfb\x9b\xff\x6d\x96\xbd\xa3\xbb\x8a\xde\xc5\x85\xf5\x95\x23\xd3\x36\x9d\xfe\x0b\x00\x00\xff\xff\x32\x34\xbe\xa2\x5b\x06\x00\x00"

func idtablestakingAdminAdd_approved_and_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminAdd_approved_and_limitsCdc,
		"idTableStaking/admin/add_approved_and_limits.cdc",
	)
}

func idtablestakingAdminAdd_approved_and_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminAdd_approved_and_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/add_approved_and_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x9b, 0x7, 0xd2, 0x23, 0xf5, 0x4d, 0xf8, 0xe3, 0x52, 0xc4, 0xdc, 0x9, 0x87, 0x86, 0xbb, 0x4f, 0x41, 0x4d, 0x75, 0x63, 0xb1, 0xd1, 0x2f, 0x2b, 0x13, 0xa0, 0x8e, 0x65, 0x52, 0x18, 0xa4}}
	return a, nil
}

var _idtablestakingAdminAdd_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x51\x6b\xdb\x30\x14\x85\x9f\xed\x5f\x71\xc8\x43\xe7\xc0\xb0\xdf\xc3\xba\x92\x2d\x0c\x02\x65\x8c\xa5\xec\xa5\xf4\x41\xb1\xae\x63\x6d\x8e\x64\xa4\xeb\xb8\xa5\xe4\xbf\x8f\x2b\xdb\x21\x69\x33\xa6\x17\x83\x75\xef\xb9\x47\x47\x9f\xcc\xbe\x75\x9e\xf1\xad\x71\xfd\x7a\xf5\xa0\xb6\x0d\x6d\x58\xfd\x31\x76\x87\xca\xbb\x3d\x66\xef\x37\x66\x69\x5a\x14\x78\xa8\x4d\x00\x7b\x65\x83\x2a\xd9\x38\x0b\xa5\x75\x80\x75\x9a\xb0\x5e\x05\xb0\x03\xd7\x84\xc6\x04\x86\xab\xa0\xda\xd6\xbb\x03\xe9\x58\x10\x60\xac\x48\x48\xc1\x7a\x05\x16\xed\x1c\xf2\x67\x5d\x41\xd9\x17\x69\x90\x3d\x69\x31\xfa\xd4\xa4\x1a\x4f\x4a\xbf\x80\x9e\x45\xd4\xd8\x8b\xfe\x8f\xe0\xda\x84\xa8\x7a\xe6\xa9\x37\x4d\x03\xeb\x18\x9e\x0e\xe4\x19\x99\xd1\xb4\x6f\x1d\x93\xe5\x79\x9a\x9e\x55\x66\x46\x87\x05\x1e\x37\xec\x8d\xdd\x3d\xcd\xf1\x9a\xa6\x00\x50\x14\xb8\x77\xa5\x6a\x70\x50\xde\xc8\x18\x54\xce\x43\xc1\x53\x45\x9e\x6c\x49\xd3\x39\xd7\x2b\xc4\x88\xb0\xd4\x7b\x63\xe1\xb6\xbf\xa9\xe4\x28\xd1\x10\x43\xc9\xcf\x9f\x54\x2d\x70\xf3\x3e\xce\x3c\xb6\x0c\xf3\x5a\x4f\xad\xf2\x94\xa9\xb2\xe4\x05\x54\xc7\x75\xf6\xc5\x79\xef\xfa\x5f\xaa\xe9\x68\x8e\x9b\x65\x59\xba\xce\xb2\x18\xc4\xb8\x8a\x02\xdb\x58\x73\xcd\x97\x7a\x6b\x47\x56\xa0\xa6\xca\x27\x4f\xb8\x85\x4c\xcb\x03\x3b\xaf\x76\x94\x0f\x5a\x9f\xfe\x69\xf4\x73\x26\x5c\x2c\xae\x00\x93\x8f\xdf\x58\xb6\x19\xe4\x7e\x28\xae\xe7\xa7\xc1\xb2\xee\xee\xd0\x2a\x6b\xca\x6c\xf6\xd5\x75\x8d\x8e\xb7\x33\xfa\xbf\x70\x1f\x46\x0a\xa3\xcf\xd9\xa0\x71\x1c\x52\xa2\x67\x2a\x3b\x26\xbc\xa6\x49\x22\xf1\x0a\x1e\xc2\xdc\xed\x35\x53\x3b\xe2\xe5\x08\xdf\xbd\x09\x9c\xfd\xdf\x8d\x50\x36\x01\x3b\x00\x1c\x5f\xc2\x18\xd0\x6c\x9e\xa6\x49\x52\x14\xc2\x7b\x84\xd5\x52\x3f\x61\x8f\xbe\x36\x65\x0d\xed\x28\xd8\x0f\x7c\x09\x6c\x9a\x24\xc2\x8e\xa5\xfe\x7b\xb4\x2b\x00\x1b\x1d\xe2\x21\x92\xf1\x04\x8f\xa7\xdd\x27\xdc\x82\x7d\x47\x69\x92\x1c\xc7\x79\x81\x78\xb8\xd2\xe9\x29\x45\x6b\xe3\x3d\x77\x56\x70\x77\xd5\x30\x2b\xe6\x66\xf5\xb9\xb5\x70\xfd\xf6\xf3\xf0\x26\x9e\xd1\xc9\x94\xf7\xf1\x6f\x00\x00\x00\xff\xff\xba\x60\xb0\x0b\x1f\x04\x00\x00"

func idtablestakingAdminAdd_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminAdd_approved_nodesCdc,
		"idTableStaking/admin/add_approved_nodes.cdc",
	)
}

func idtablestakingAdminAdd_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminAdd_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/add_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0x2e, 0x15, 0x46, 0x80, 0xde, 0x18, 0xca, 0x68, 0xd8, 0xcb, 0xd0, 0xd8, 0xb5, 0x9c, 0x1c, 0x8d, 0x79, 0x2a, 0xfc, 0xfd, 0x40, 0x7c, 0xeb, 0xd1, 0x65, 0x4f, 0xc8, 0x1, 0xa7, 0x95, 0x8}}
	return a, nil
}

var _idtablestakingAdminCapability_end_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x41\x4f\xdc\x4c\x0c\xbd\xe7\x57\x58\x7b\x40\x41\x42\xc9\xe5\xd3\x77\x58\x51\x10\x85\x22\x21\x71\x40\x2c\x3d\x23\x67\xe2\x6c\xa6\x24\xe3\x68\xc6\x21\xac\xd0\xfe\xf7\x6a\x66\x92\xb0\x29\x6c\x3b\x97\x48\xb1\xdf\xf3\xb3\xfd\xac\xdb\x8e\xad\xc0\x6d\xc3\xc3\xdd\xcd\x13\x16\x0d\x6d\x04\x5f\xb4\xd9\x42\x65\xb9\x85\xd5\xe7\xc0\x2a\x49\xf2\x1c\x9e\x6a\xed\x40\x2c\x1a\x87\x4a\x34\x1b\xe8\x1d\x39\x40\x70\x23\x1a\xcb\x56\x1b\x50\xd8\x61\xa1\x1b\x2d\x3b\x8f\x11\x86\x0e\x77\x60\x69\x40\x5b\xba\x33\x20\x53\x82\xd4\xf4\x81\xe9\x03\xd5\x19\xa0\x29\xe7\x20\x75\xac\xea\x2c\xc9\x73\xcf\x70\x27\xa0\xb8\x2d\xb4\x21\x17\x82\x1d\xee\x9e\x0f\xe9\x9e\x67\x2a\x53\x42\xcb\xaf\xf4\x2c\xfc\x42\x66\xa1\xd4\x79\xa2\xa1\xd6\xaa\xf6\x08\xf7\xb5\x82\x18\xb7\x54\xf5\x3e\xc5\x70\x49\x0e\x06\x2d\x35\x68\xe3\xfa\xaa\xd2\x4a\x93\x91\x00\x23\x4f\x37\x95\x73\x30\xd6\x2b\x48\x06\x22\x03\x45\xaf\x5e\x48\xdc\xa8\x1d\x1b\xc7\xe0\x48\xfc\xa0\x0c\x0d\x31\xd9\x37\xc1\xbd\x40\xc5\x36\x68\x31\xf4\x26\xb1\xeb\x24\x39\x90\x9d\xea\xd2\xad\xe1\x7d\x23\x56\x9b\xed\x1a\xbe\x33\x37\xfb\x33\xcf\xf2\x10\xe0\x6b\xf8\x79\xab\xdf\xfe\xff\xef\x14\xde\x93\x04\x00\x20\xcf\xe1\x9e\x15\x36\xf0\x8a\x56\xfb\xf5\x85\x02\xe8\x7b\x22\x4b\x46\x91\x5f\x87\xaf\x77\x77\x03\x61\xbd\x70\x15\x56\xc6\xc5\x2f\x52\x12\x28\x1a\x92\xb8\xc7\x47\xaa\xd6\x70\xf2\xd9\x0a\x59\x80\xc4\x7a\x9d\xa5\x0e\x2d\xa5\xa8\x94\xac\xe1\xe4\x4a\x29\xee\x8d\x78\x39\x30\xbe\x99\xee\x7a\x76\x05\x7c\x03\x9f\x9f\x29\xee\x76\xe7\x1f\xbf\x2f\x52\x6f\xbe\xf5\x17\xae\xcc\xc6\x6f\x28\xbc\x11\xb6\xb8\xa5\x07\x94\xfa\x74\xae\xe2\xdf\xe5\x25\x74\x68\xb4\x4a\x57\xd7\xdc\x37\x25\x18\x16\xd8\x92\x1c\xd8\x31\xba\x1b\xa3\x48\x70\x91\x68\x75\x9a\xcc\x34\x79\x0e\x05\x5b\xcb\xc3\x57\x23\xc3\x3f\x27\xe5\x9f\xa3\xa6\xca\xa6\x71\xf9\xc6\x96\xad\x66\x91\xee\xfc\xe8\x18\x2f\xd2\x7f\x37\x31\x4a\x5a\x08\x5a\x5c\xdc\x2a\x72\xec\x63\x23\xf4\x46\xaa\x17\x9a\x2c\x31\x2d\x61\xbc\x98\x4d\xdf\xb6\x68\xfd\x0e\x16\xd2\x33\x85\x8d\xea\x1b\x14\x7a\x8c\x79\x07\xba\x96\x89\x1d\xee\xa6\x94\x25\xe5\xc1\x1c\x97\x08\x47\xf2\xc3\x3b\xfb\xc9\x1b\x3f\x1a\x37\x9d\x2d\xfc\x37\xd4\x55\xd7\x59\x7e\xa5\xf2\x5e\x3b\xf1\x97\x70\x34\x97\x4c\x39\x59\x24\xde\x72\x7a\x34\xd5\x1f\x6c\x10\x32\x75\xb8\x4f\xf6\xc9\xef\x00\x00\x00\xff\xff\x86\x01\x99\xb2\x10\x05\x00\x00"

func idtablestakingAdminCapability_end_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminCapability_end_epochCdc,
		"idTableStaking/admin/capability_end_epoch.cdc",
	)
}

func idtablestakingAdminCapability_end_epochCdc() (*asset, error) {
	bytes, err := idtablestakingAdminCapability_end_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/capability_end_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xa, 0xf0, 0x5d, 0x80, 0x66, 0x3d, 0x8, 0x41, 0xe0, 0x30, 0xf7, 0xe, 0x56, 0xd2, 0x35, 0xa8, 0x41, 0xd6, 0x55, 0x14, 0xd4, 0x40, 0x72, 0xc9, 0x2f, 0x7, 0xe3, 0x3c, 0x36, 0x54, 0xd3}}
	return a, nil
}

var _idtablestakingAdminChange_candidate_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x8f\x3d\x04\x2f\x14\xfb\x52\x4a\x59\xda\x86\x34\xa1\xb0\x10\x4a\x69\xd2\xde\xc7\xf2\x78\xad\x56\xd6\x18\x69\xdc\x0d\x94\xfc\xf7\x22\xd9\x2e\xd9\xee\x76\x0e\x36\x48\x9a\xf7\x3e\xcd\x93\x1d\x46\x09\x8a\x4f\x4e\x8e\xfb\xbb\x47\x6a\x1c\x3f\x28\xfd\xb4\xfe\x80\x2e\xc8\x80\xcd\xf9\xc6\xa6\x28\xea\xba\xc6\x63\x6f\x23\x34\x90\x8f\x64\xd4\x8a\x87\xe9\xc9\x1f\x38\x42\x7b\x86\xb3\x83\x55\x48\x07\xcf\x47\x78\x69\xf3\x32\x29\x0c\x79\x34\x9c\x7e\xad\x6d\x49\x39\x66\xa9\x4e\x42\xee\xf2\xfc\xa4\xe0\x51\x4c\x5f\xbc\x10\x2e\x83\x38\xde\xe1\xdb\xde\xeb\xdb\x57\x49\xf0\x76\xed\xfe\x2c\x2d\xdf\x27\xa7\x79\xf7\xcd\xeb\x2d\x7e\x17\x05\x00\x24\xd5\x7b\x31\xe4\xf0\x8b\x82\x4d\xf0\xd9\x84\x10\xb8\xe3\xc0\xde\x30\x54\xb2\xe7\xfe\x0e\xf9\x72\xb8\x69\x07\xeb\x21\xcd\x0f\x36\x9a\x35\x1c\x2b\x28\x2d\x7e\xe5\x6e\x87\xab\xf3\x41\x54\xb9\x65\x36\x1c\x03\x8f\x14\xb8\x24\x63\x74\x07\x9a\xb4\x2f\x3f\x4a\x08\x72\xfc\x4e\x6e\xe2\x2d\xae\x6e\x8c\x91\xc9\x6b\x22\xc4\x52\x75\x8d\x26\x9f\xb9\xc4\x45\xff\xe2\xa4\x8a\xec\xba\x6a\x65\xc2\x7b\x24\xb7\x2a\xaa\x04\x3a\x70\x35\x6b\xbd\xfb\x2f\xe8\x87\x32\x25\xba\xbb\x10\x75\xb5\xfc\xf3\xb1\x87\x59\xee\x0b\x69\xbf\xfd\x6b\x9c\xea\xfa\x1a\x23\x79\x6b\xca\xcd\xad\x4c\xae\x85\x17\x5d\xf9\x4f\xe8\xe3\xf2\x7e\x32\xe7\x66\xd6\x78\x9e\xa7\xc4\x4f\x6c\x26\xe5\x17\x33\x38\xb9\x51\x15\x59\xcf\xc3\x5d\xf2\x4f\xdf\x1c\xff\x92\xf8\xc5\x87\xb0\xba\x3d\xff\x09\x00\x00\xff\xff\xa3\x37\xb2\x3b\xd7\x02\x00\x00"

func idtablestakingAdminChange_candidate_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_candidate_limitsCdc,
		"idTableStaking/admin/change_candidate_limits.cdc",
	)
}

func idtablestakingAdminChange_candidate_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_candidate_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_candidate_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x8b, 0x69, 0x1, 0xa6, 0x30, 0xfc, 0xb9, 0x20, 0x3, 0xb0, 0x87, 0xff, 0x80, 0xf, 0xa7, 0x89, 0xa7, 0x8, 0xf4, 0x47, 0xfe, 0xa0, 0xd6, 0x59, 0xa2, 0xaa, 0xa4, 0x16, 0x8e, 0xad, 0x7f}}
	return a, nil
}

var _idtablestakingAdminChange_cutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x0f\x1f\x82\x7c\x91\x2e\xa5\x07\xd3\x36\xa4\x09\x81\x40\x0f\xa1\x49\x7b\x1f\xaf\x46\xd2\xd6\xeb\x1d\x31\x3b\xaa\x02\x25\xff\xbd\xac\x64\x97\xb8\x76\xe6\x22\xd0\xce\xbe\xf7\xcd\xbc\xf5\xfb\x41\xd4\x70\x1f\x64\x7a\xb8\x7b\xa6\x6d\xe0\x27\xa3\x9d\x8f\x1d\x5a\x95\x3d\x56\xe7\x07\xab\xa2\xa8\x6b\x3c\xf7\x3e\xc1\x94\x62\x22\x67\x5e\x22\x5c\x4f\xb1\xe3\x04\xeb\x19\x6d\x90\x09\x26\x3b\x8e\x50\x9e\x48\x1b\xb8\xd1\x60\x3d\x19\xa2\x34\xb9\x89\x76\xbc\x18\x34\x1c\xb8\x23\x13\x4d\x45\xf1\x46\xae\x8c\x3c\xdd\x8e\xf6\xc8\xea\x38\x1a\x75\xbc\xc1\x8f\x7b\xff\xf2\xf1\xc3\x1a\x7f\x8a\x02\x00\xea\x1a\xdf\xc4\x51\xc0\x6f\x52\x9f\xf1\xd0\x8a\x82\xa0\xdc\xb2\x72\x74\x0c\x93\x19\xe6\xe1\x0e\x33\x3e\x6e\x9a\xbd\x8f\x90\xed\x2f\x76\x36\x4b\x04\x36\x50\xfe\xf9\x9d\xdb\x0d\xae\xce\x47\xad\xe6\x2b\x8b\xdf\xa0\x3c\x90\x72\x49\xce\xd9\x06\x34\x5a\x5f\x7e\x15\x55\x99\x7e\x52\x18\x79\x8d\xab\x1b\xe7\x64\x8c\x96\x01\x71\xa8\xba\xc6\x76\xee\xb9\xc4\x45\xff\xe3\xe4\x4a\x1c\xda\xea\xc8\x84\xcf\xc8\x6e\x55\x32\x51\xea\xb8\x5a\xb4\x3e\xbd\x0b\xfa\xa5\xcc\x2b\xdd\x5c\x08\xb3\x3a\x7c\xe7\xb6\xa7\x45\xee\x91\xac\x5f\xff\x33\xce\x75\x7d\x8d\x81\xa2\x77\xe5\xea\x56\xc6\xd0\x20\x8a\x1d\xf9\x4f\xe8\xd3\xe1\x85\xcc\x9c\xab\x45\xe3\x75\xd9\x12\xbf\xb0\x1b\x8d\xdf\xec\xe0\x64\xa2\x2a\xb1\x9d\xc4\x7a\x96\xf3\x51\xed\xf5\x6f\x00\x00\x00\xff\xff\xab\xef\x4a\xd9\x99\x02\x00\x00"

func idtablestakingAdminChange_cutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_cutCdc,
		"idTableStaking/admin/change_cut.cdc",
	)
}

func idtablestakingAdminChange_cutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_cutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_cut.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x7a, 0x5d, 0xf4, 0xb4, 0x22, 0xad, 0xa1, 0x2e, 0x57, 0x29, 0x66, 0x47, 0x5f, 0xca, 0x24, 0x3b, 0xd2, 0x71, 0x49, 0xa8, 0xb4, 0x2c, 0x34, 0xd3, 0xf, 0x36, 0xa0, 0x2a, 0x5f, 0x58, 0x1a}}
	return a, nil
}

var _idtablestakingAdminChange_del_minimumsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdc\x40\x0c\xc5\xef\xfe\x14\x8f\x3d\x04\xef\xc5\xbe\x94\x1e\x96\xb6\x21\xed\x12\x08\xb4\x50\x92\xb4\x77\xed\x58\x5e\x4f\x77\x3c\xda\xca\x9a\x3a\x50\xf2\xdd\xcb\xd8\xeb\x92\x3f\x1b\x5d\x06\x46\x9a\xf7\x7e\x92\xc6\xf7\x47\x51\xc3\x75\x90\xf1\x66\x7b\x4f\xbb\xc0\x77\x46\x07\x1f\xf7\x68\x55\x7a\xac\x5e\x27\x56\x45\x51\xd7\xb8\xef\xfc\x00\x53\x8a\x03\x39\xf3\x12\xe1\x3a\x8a\x7b\x1e\x60\x1d\xa3\x0d\x32\xc2\xe4\xc0\x11\xca\x23\x69\x03\x97\x0c\xd6\x91\x21\x4a\x93\x8b\xe8\xc0\xb3\x41\xc3\x81\xf7\x64\xa2\x43\x51\x3c\x91\x2b\x23\x8f\xdb\x25\xf5\xcd\x47\xdf\xa7\x7e\x83\x1f\xd7\xfe\xe1\xfd\xbb\x35\xfe\x16\x05\x00\xd4\x35\xbe\x8a\xa3\x80\x3f\xa4\x3e\x13\xa2\x15\x05\x41\xb9\x65\xe5\xe8\x18\x26\x13\xcf\xcd\x16\x53\x07\xb8\x6a\x7a\x1f\x21\xbb\x5f\xec\x6c\x92\x08\x6c\xa0\x7c\x79\xcb\xed\x06\x17\xaf\xbb\xad\xa6\x27\xb3\xdf\x51\xf9\x48\xca\x25\x39\x67\x1b\x50\xb2\xae\xfc\x2c\xaa\x32\xfe\xa4\x90\x78\x8d\x8b\x2b\xe7\x24\x45\xcb\x80\x38\x45\x5d\x63\x37\xd5\x9c\xe3\xa2\x97\x38\x39\x06\x0e\x6d\xb5\x30\xe1\x23\xb2\x5b\x35\x98\x28\xed\xb9\x9a\xb5\x3e\xbc\x09\xfa\xa9\xcc\x53\xdd\x9c\xd9\x67\x75\x3a\xa7\xb2\xbb\x59\xee\x3b\x59\xb7\xfe\x6f\x9c\xe3\xf2\x12\x47\x8a\xde\x95\xab\x2f\x92\x42\x83\x28\xb6\xf0\x3f\xa3\x1f\x4e\x9f\x64\xe2\x5c\xcd\x1a\x8f\xf3\x94\xf8\x81\x5d\x32\x7e\x32\x83\x67\x1d\x55\x03\xdb\xcb\xcd\x66\x34\xbe\xe5\xdf\xc9\x2b\xf7\x1c\xed\xdc\xf6\x17\x8f\xc7\x7f\x01\x00\x00\xff\xff\xa7\xa0\xc3\xae\xb2\x02\x00\x00"

func idtablestakingAdminChange_del_minimumsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_del_minimumsCdc,
		"idTableStaking/admin/change_del_minimums.cdc",
	)
}

func idtablestakingAdminChange_del_minimumsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_del_minimumsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_del_minimums.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xc8, 0x3f, 0x11, 0x11, 0x9f, 0xf0, 0xb8, 0x71, 0xbf, 0x48, 0xf0, 0x40, 0xd5, 0x29, 0xf3, 0x4e, 0xeb, 0xa2, 0x2c, 0xea, 0xa8, 0xad, 0x9e, 0x76, 0x65, 0x5f, 0xb6, 0xaf, 0x82, 0x71, 0x6}}
	return a, nil
}

var _idtablestakingAdminChange_minimumsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x4c\x41\x22\x50\x4a\x11\x55\x43\xda\x10\x30\xb4\x50\xf2\xa7\x97\x90\xc3\x78\x3d\xb2\xb6\x95\x76\xd5\xdd\x51\x1c\x30\xfe\xee\x65\x57\x92\xab\xd4\xc9\x5c\x84\xb4\xb3\xef\xfd\x66\x9e\x74\xdb\x59\x27\xb8\x6e\xec\x6e\x75\x75\x47\xeb\x86\x6f\x85\x7e\x6b\xb3\x45\xe5\x6c\x8b\xc5\xe9\xc1\x22\x49\xf2\x1c\x77\xb5\xf6\x10\x47\xc6\x93\x12\x6d\x0d\x54\x4d\x66\xcb\x1e\x52\x33\xfc\x28\xd1\x6a\xd3\xb7\x7d\xeb\x51\x59\x07\x63\x37\x0c\xdb\xb1\x23\xb1\xce\x27\xc9\xec\x72\x6a\x78\xf7\x5d\x1b\x1d\x7a\x0b\x3c\xdc\x5f\xeb\xe7\x0f\xef\x1f\x97\xd8\x27\x09\x00\xe4\x39\xbe\x59\x45\x0d\x9e\xc8\xe9\x40\x12\xf5\x08\x8e\x2b\x76\x6c\x14\x43\x6c\xf4\x5d\x5d\x21\x92\xe2\x72\xd3\x6a\x03\xbb\xfe\xc5\x4a\xa2\x44\xc3\x02\x0a\x1f\x6f\xb8\x2a\x70\x76\x3a\x55\x16\xaf\x0c\x7e\x9d\xe3\x8e\x1c\xa7\xa4\x94\x14\xa0\x5e\xea\xf4\x8b\x75\xce\xee\x7e\x52\xd3\xf3\x12\x67\x97\x4a\xd9\xde\x48\x00\xc4\x58\x79\x8e\x75\xec\x79\x8d\x8b\xfe\xc7\x09\xe5\xb9\xa9\xb2\x89\x09\x25\x82\x5b\xe6\xc5\x3a\xda\x72\x36\x68\x7d\x7a\x13\xf4\x73\x1a\xe2\x29\x5e\xc9\x2d\x1b\x9f\xb1\xed\x76\x90\xfb\x41\x52\x2f\x8f\xc6\xa1\x2e\x2e\xd0\x91\xd1\x2a\x5d\x7c\xb5\x7d\xb3\x81\xb1\x32\xf1\xbf\xa0\x9f\x92\x8c\x9c\x8b\x41\xe3\x30\x6c\x89\x9f\x59\xf5\xc2\xb3\x1d\x84\x25\xb7\xc7\x18\xf7\xf7\x2b\x23\x1f\x0b\x0c\x69\x1e\x50\x62\x7f\x38\xb6\x3e\x91\x83\x2e\x10\x5b\x50\xe2\xfc\x78\x10\x92\x0d\xcb\xd2\x06\xb3\x9f\x62\x66\x12\x6a\x32\x79\xd0\x8f\x28\xc3\xdb\x8b\x53\x8d\x12\x1a\xef\x06\xf1\xf4\xfc\xdf\xe0\x23\xf8\xc9\xf2\x33\xcf\x32\x3a\x85\xe5\xf1\x0d\xff\xe9\xb5\xe3\x96\x8d\xf8\x74\xf2\x9a\x66\x3f\xfc\x0d\x00\x00\xff\xff\x0c\xd9\xc0\xe7\x32\x03\x00\x00"

func idtablestakingAdminChange_minimumsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_minimumsCdc,
		"idTableStaking/admin/change_minimums.cdc",
	)
}

func idtablestakingAdminChange_minimumsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_minimumsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_minimums.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0xc4, 0xf5, 0xcf, 0xc4, 0x9, 0xda, 0xde, 0x4, 0x25, 0x88, 0xdb, 0xca, 0x1a, 0x54, 0x9, 0x1f, 0x68, 0x91, 0x8, 0x74, 0xa8, 0x6, 0x87, 0x54, 0x36, 0x2, 0x68, 0x3f, 0x5, 0x4f, 0x3d}}
	return a, nil
}

var _idtablestakingAdminChange_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x8f\xd3\x40\x0c\x85\xef\xf9\x15\x4f\x39\xac\xd2\x4b\x72\x41\x1c\x22\x60\xb5\xb0\xac\xb4\x12\x87\x8a\x16\xee\xee\xd4\x69\x86\x4e\xc7\xd1\xc4\x21\xad\x50\xff\x3b\x9a\x49\x0b\x2d\x2d\xbe\x44\x9a\xd8\xef\x7d\xf6\xb3\xbb\x4e\x82\xe2\xc5\xc9\xf8\xfa\xbc\xa4\x95\xe3\x85\xd2\xd6\xfa\x0d\x9a\x20\x3b\xe4\xb7\x3f\xf2\x2c\xab\x2a\x2c\x5b\xdb\x43\x03\xf9\x9e\x8c\x5a\xf1\x30\x2d\xf9\x0d\xf7\xd0\x96\xd1\x38\x19\xa1\xb2\x65\x8f\x91\x79\xeb\x0e\xe8\xe8\x20\x83\x66\xd9\xc5\x44\xe1\x79\x9c\xa7\xe7\x1a\xdf\x5e\xec\xfe\xed\x9b\x19\x7e\x65\x19\x00\x54\x15\xbe\x88\x21\x87\x9f\x14\x6c\xb4\x46\x23\x01\x84\xc0\x0d\x07\xf6\x86\xa1\x92\x8c\x5e\x9f\x91\xd0\xf0\xb4\xde\x59\x0f\x59\xfd\x60\xa3\x49\xc2\xb1\x82\xe2\xe3\x57\x6e\x6a\x3c\xdc\xae\x51\xa6\x91\xc9\xaf\x0b\xdc\x51\xe0\x82\x8c\xd1\x1a\x34\x68\x5b\x7c\x94\x10\x64\xfc\x4e\x6e\xe0\x19\x1e\x9e\x8c\x91\xc1\x6b\x04\xc4\xa9\xaa\x0a\xab\xd4\x73\x8f\x8b\xfe\xc5\x89\xd5\xb3\x6b\xca\x33\x13\xde\x23\xba\x95\xbd\x4a\xa0\x0d\x97\x93\xd6\xbb\xff\x82\x7e\x28\x62\x1e\xf5\x9d\xa0\xca\xd3\x37\xb5\x2d\x26\xb9\x39\x69\x3b\xfb\x63\x1c\xeb\xf1\x11\x1d\x79\x6b\x8a\xfc\x93\x0c\x6e\x0d\x2f\x7a\xe6\xbf\xa2\xef\x4f\xe9\x27\xce\x7c\xd2\x38\x4e\x57\xe2\x3d\x9b\x41\xf9\xe2\x06\x57\x1b\x95\x3d\xeb\xe7\x4e\x4c\xbb\x8c\xc1\x4f\xc9\xfe\xcd\xf8\xac\x74\xfc\x1d\x00\x00\xff\xff\xbc\x8e\x06\xa6\x71\x02\x00\x00"

func idtablestakingAdminChange_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_payoutCdc,
		"idTableStaking/admin/change_payout.cdc",
	)
}

func idtablestakingAdminChange_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x15, 0x65, 0x64, 0x1, 0xa4, 0xaa, 0xc1, 0x1e, 0x57, 0x8c, 0x4f, 0xa7, 0xc2, 0xec, 0xde, 0xbc, 0x6d, 0xad, 0x7a, 0xa, 0xf2, 0x6a, 0x7e, 0xb5, 0x8a, 0x77, 0x9a, 0x2e, 0x9e, 0x83, 0xe}}
	return a, nil
}

var _idtablestakingAdminEnd_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x0c\x45\xba\x9b\xb6\xc1\x69\x28\x18\x72\x28\xb5\xe9\x35\xac\x56\x23\x6b\x6b\x79\x46\xec\x8e\xac\x96\xe0\xef\x5e\x56\x7f\x9c\xb8\x89\xf7\x62\xf0\xce\x7b\xef\xa7\xd9\xe7\x8e\xad\x78\xc5\xf7\x46\xfa\xcd\xe3\xce\x14\x0d\x6d\xd5\x1c\x1c\xef\x51\x79\x39\x62\xf1\xfe\x62\x91\x24\x79\x8e\x5d\xed\x02\xd4\x1b\x0e\xc6\xaa\x13\x06\x55\x15\x59\x75\x27\x6a\xfe\x82\xb8\x0c\xd0\x9a\x40\xad\xd8\x1a\x86\x4b\x04\x35\x5e\x03\x0c\x98\x7a\x08\x53\x96\xe4\x79\xf4\xd9\x28\xac\x1c\x0b\xc7\x34\x29\xb8\x7c\x0e\x13\x41\xd4\x1d\xe5\x44\xcf\x2a\x07\xe2\xab\xb8\x10\xb5\x7d\xed\x6c\xfd\x1a\x76\x91\x75\xc3\xc8\xa7\xe9\xde\x53\xd5\xc5\x11\x96\x92\x02\x7a\xa7\x35\x1c\x87\xae\xaa\x9c\x75\xc4\x3a\xc8\x28\xda\xcd\x71\x01\x53\x5e\x41\xda\x13\x31\x8a\xce\x1e\x48\x43\x92\xbc\x01\x48\x5d\x19\x56\x78\xd9\xaa\x77\xbc\x5f\xe1\x41\xa4\x39\x2f\xf1\x92\x24\x00\x90\xe7\x78\x12\x6b\x1a\x9c\x8c\x77\x71\x75\xa8\xc4\xc3\x44\x14\xf2\xc4\x96\xa0\x32\x20\x6f\x1e\x31\xac\x16\xeb\xf2\xe8\x18\x52\xfc\x26\xab\x83\x45\x43\x0a\x13\xff\xfc\x49\xd5\x0a\x77\xef\x9f\x21\x1b\x24\x63\x5e\xeb\xa9\x35\x9e\x52\x63\xad\xae\x60\x3a\xad\xd3\x07\xf1\x5e\xfa\x5f\xa6\xe9\x68\x89\xbb\xb5\xb5\xd2\xb1\x46\x40\x4c\x27\xcf\x51\x0c\x33\x1f\x71\x99\xff\x71\xe2\x09\xd4\x54\xd9\xcc\x84\x2f\x88\x69\x59\x50\xf1\x66\x4f\xd9\xe8\xf5\xf9\x26\xe8\xd7\x34\xf6\x69\xf5\x41\xd1\xb2\xe9\x77\x18\xdb\x8e\x76\x3f\x8c\xd6\xcb\x4b\x70\x3c\xf7\xf7\x68\x0d\x3b\x9b\x2e\xbe\x49\xd7\x94\x60\xd1\x99\xff\x8a\xfe\x52\x82\xe8\xb6\x18\x3d\xce\xe3\x96\xe8\x0f\xd9\x4e\xe9\xcd\x0e\xae\xbe\x28\x0b\xa4\xeb\xb6\xf5\x72\xa2\xf2\xc9\x05\x8d\x2f\xfc\xca\x70\x43\x43\x5c\xce\xf8\x63\xeb\xd2\x65\x72\x63\x34\x56\x6b\x37\x14\x2b\x9d\xb1\xce\xc9\xbf\x00\x00\x00\xff\xff\x3e\x55\xc6\xa8\x7f\x03\x00\x00"

func idtablestakingAdminEnd_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_epochCdc,
		"idTableStaking/admin/end_epoch.cdc",
	)
}

func idtablestakingAdminEnd_epochCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xd5, 0xe5, 0x1d, 0x36, 0xba, 0x41, 0xf1, 0xae, 0xd2, 0x8d, 0x31, 0x74, 0x62, 0x19, 0xb2, 0x61, 0x6b, 0x50, 0x1f, 0x71, 0xba, 0x69, 0x3e, 0x60, 0x96, 0x66, 0xa, 0xc, 0x6, 0x77, 0xa7}}
	return a, nil
}

var _idtablestakingAdminEnd_epoch_change_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x3c\x7c\x08\x32\x04\xe9\x52\x7a\x10\x6d\x83\xd3\x34\x60\xc8\x21\xd4\x6e\xaf\x61\xb5\x1a\x59\x5b\x4b\x3b\x62\x77\x64\x25\x04\xff\xf7\xb2\xfa\x70\x9b\x3a\xee\x5e\x04\xda\xf7\x35\x3b\xcf\x34\x2d\x3b\xc1\x7d\xcd\xfd\xfa\x6e\xab\xf2\x9a\x36\xa2\xf6\xc6\xee\x50\x3a\x6e\xb0\x38\xbf\x58\x44\x51\x9a\x62\x5b\x19\x0f\x71\xca\x7a\xa5\xc5\xb0\x05\x95\x25\x69\x31\x07\xaa\x5f\x40\xb6\xf0\x90\x8a\x40\x2d\xeb\x0a\xca\x16\xf0\xa2\x9c\x78\x28\x58\xea\xc1\x96\x92\x28\x4d\x83\xce\x5a\xa0\xb9\xc9\x8d\xa5\x89\x61\x8b\x27\x3f\x25\x08\xbc\x86\x0f\xf4\x24\xbc\x27\xfb\xc6\xce\x07\x6e\x5f\x19\x5d\xfd\x31\x3b\xd1\xba\x01\x72\x3d\xdd\x3b\x2a\xbb\x00\xb1\x5c\x90\x47\x6f\xa4\x82\xb1\xbe\x2b\x4b\xa3\x0d\x59\x19\x68\x14\xe4\x66\x3b\x8f\xc9\x2f\x27\xe9\x89\x2c\xf2\x4e\xef\x49\x7c\x14\xfd\x15\x20\x36\x85\xcf\xf0\xba\x11\x67\xec\x2e\xc3\x2d\x73\x7d\xbc\x0e\xc3\x3d\xaa\x17\xee\x24\xc3\x8f\x7b\xf3\xfc\xf1\xc3\x12\xaf\x51\x04\x00\x69\x8a\x07\xd6\xaa\xc6\x41\x39\x13\x5e\x13\x25\x3b\xa8\x90\x8e\x1c\x59\x4d\x10\x1e\xa6\x58\xdf\x61\x78\x6d\xac\x8a\xc6\x58\x70\xfe\x8b\xb4\x0c\x12\x35\x09\x54\xf8\xf9\x9d\xca\x0c\x57\xe7\x9b\x49\x06\xca\xe8\xd7\x3a\x6a\x95\xa3\x58\x69\x2d\x19\x54\x27\x55\x7c\xcb\xce\x71\xff\x53\xd5\x1d\x2d\x71\xb5\xd2\x9a\x3b\x2b\x21\x20\xa6\x93\xa6\xc8\x07\xcc\x7b\xb9\xd4\xbf\x71\xc2\xf1\x54\x97\xc9\x9c\x09\x9f\x11\xdc\x12\x2f\xec\xd4\x8e\x92\x51\xeb\xd3\xc5\xa0\x5f\xe2\x50\xb1\xec\x9d\xee\x25\xd3\x77\x80\x6d\x46\xb9\x47\x25\xd5\xf2\x64\x1c\xce\xcd\x0d\x5a\x65\x8d\x8e\x17\x5f\xb9\xab\x0b\x58\x96\x39\xff\x9b\xf4\xa7\x5e\x04\xb5\xc5\xa8\x71\x1c\x5f\x89\x9e\x49\x77\x42\xf3\x92\xce\x46\x4a\x3c\xc9\xb7\xd0\xe1\x6d\x68\xc4\xb8\xda\xf8\xb4\xe4\xe5\x7f\x58\xab\xb6\x75\x7c\xa0\xe2\xc1\x78\x09\x5d\xb9\x88\x25\x5b\xcc\xd3\x8e\xbd\x8d\x2f\x42\x43\x39\x87\x20\x3e\x9e\xa7\x38\x46\xbf\x03\x00\x00\xff\xff\x46\x98\x5c\x53\xc1\x03\x00\x00"

func idtablestakingAdminEnd_epoch_change_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_epoch_change_payoutCdc,
		"idTableStaking/admin/end_epoch_change_payout.cdc",
	)
}

func idtablestakingAdminEnd_epoch_change_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_epoch_change_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_epoch_change_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0xe1, 0xca, 0x8e, 0x80, 0xb0, 0x14, 0x45, 0xf0, 0x71, 0xcf, 0x1, 0xe5, 0x2d, 0x72, 0xfa, 0xe3, 0xdc, 0x34, 0x68, 0x34, 0x37, 0x9b, 0x42, 0x1e, 0x3, 0x4d, 0xf4, 0x97, 0xac, 0x8d, 0xa}}
	return a, nil
}

var _idtablestakingAdminEnd_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x0f\x1f\x82\x0c\x45\xba\x8b\xb6\xc1\x69\x28\x04\x72\x28\x75\xe8\x7d\xbc\x1a\x59\xdb\xae\x77\xc4\xee\x6c\x54\x08\xfe\xef\x65\x57\x56\x68\xeb\x64\x2e\x02\xcd\xcc\x7b\xdf\xe8\xc9\x9e\x26\x09\x8a\xaf\x4e\xe6\x87\xfb\x27\x3a\x38\xde\x2b\xfd\xb2\xfe\x88\x21\xc8\x09\x9b\xeb\xc6\xa6\xaa\xda\x16\x4f\xa3\x8d\xd0\x40\x3e\x92\x51\x2b\x1e\xec\xfb\x08\x1d\x19\xf1\xb2\x4f\xa9\x34\x3e\x60\x1e\xad\x19\x11\x78\x48\x79\xc4\x4b\xcf\x11\x59\x62\xb6\x3a\xc2\xfa\x98\x86\xc1\x1a\xcb\x5e\xcb\x2a\x57\xd5\x5f\xb2\xb5\xed\x63\x87\x97\xbd\x06\xeb\x8f\x1d\xee\x44\xdc\x79\x8b\x97\xaa\x02\x80\xb6\xc5\xa3\x18\x72\x78\xa6\x60\x33\x21\x06\x09\xa0\x6c\xc5\x81\xbd\x61\xa8\x14\xa4\x87\x7b\x94\x0b\xb0\xeb\x4f\xd6\x43\x0e\x3f\xd9\x68\x91\x70\xac\xa0\xfc\xf2\x3b\x0f\x1d\x6e\xae\xaf\x6d\xca\xca\xe2\x37\x05\x9e\x28\x70\x4d\xc6\x68\x07\x4a\x3a\xd6\x77\x12\x82\xcc\x3f\xc8\x25\xde\xe2\x66\x67\x8c\x24\xaf\x19\x10\x97\x6a\x5b\x1c\xca\xcc\x5b\x5c\xf4\x3f\x4e\xae\xc8\x6e\x68\x56\x26\x7c\x42\x76\x6b\xa2\x4a\xa0\x23\x37\x8b\xd6\xc7\x77\x41\x3f\xd7\x39\xb6\xee\x8d\x3c\x9b\xcb\xb3\x8c\xed\x17\xb9\x6f\xa4\xe3\xf6\xd5\x38\xd7\xed\x2d\x26\xf2\xd6\xd4\x9b\x2f\x92\x5c\x0f\x2f\xba\xf2\xff\x43\xff\x1a\x72\x56\xdb\x2c\x1a\xe7\xe5\x2b\xf1\x6f\x36\x49\x79\x0d\xe9\xea\xa4\x26\xb2\xee\xa6\x29\xc8\x33\xf7\x8f\x36\x6a\x8e\x78\xfb\xde\x2c\xfb\x7e\xe5\x5e\x7e\xa7\x7a\xf5\x3a\xff\x09\x00\x00\xff\xff\x12\x49\x6b\xee\xba\x02\x00\x00"

func idtablestakingAdminEnd_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_stakingCdc,
		"idTableStaking/admin/end_staking.cdc",
	)
}

func idtablestakingAdminEnd_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xb3, 0xec, 0x2e, 0x69, 0xa9, 0x17, 0x98, 0x82, 0xc1, 0xe2, 0x4f, 0xf2, 0xd4, 0x82, 0xe9, 0x56, 0x9d, 0xb1, 0xdc, 0xbe, 0x9a, 0xd7, 0x2d, 0x12, 0x75, 0x92, 0x64, 0x6, 0x1d, 0x90, 0x10}}
	return a, nil
}

var _idtablestakingAdminMove_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6f\x82\x40\x10\x85\xef\xfc\x8a\x17\x0e\x06\x2f\x70\x37\x6d\x8d\xad\x69\x62\xd2\x43\x53\x4d\xef\xc3\x3a\x08\x15\x76\xc8\xee\xa0\x4d\x8c\xff\xbd\x61\xd1\x46\xab\x9d\x0b\x09\xbc\x79\xef\x63\x5e\xd5\xb4\xe2\x14\xaf\xb5\xec\x17\xf3\x15\xe5\x35\x2f\x95\xb6\x95\xdd\xa0\x70\xd2\x20\xbe\xfd\x10\x47\x51\x96\x61\x55\x56\x1e\xea\xc8\x7a\x32\x5a\x89\x45\x23\x3b\xf6\x50\xd9\xb2\xf5\xc8\x59\xf7\xcc\x16\x79\x67\xb6\xac\x3e\x8a\x2e\x95\x87\x28\x02\x80\x2c\xc3\x9b\x18\xaa\xb1\x23\x57\xf5\xfe\x28\xc4\x81\xe0\xb8\x60\xc7\xd6\x30\x54\xa0\x25\x63\x31\x47\xc8\xc7\x6c\xdd\x54\x16\x92\x7f\xb1\xd1\x60\x51\xb3\x82\xfa\x97\x1f\x5c\x4c\x30\xba\x65\x4d\xc3\xca\x90\xd7\x3a\x6e\xc9\x71\x42\xc6\xe8\x04\xd4\x69\x99\x3c\x8b\x73\xb2\xff\xa4\xba\xe3\x31\x46\x33\x63\xa4\xb3\x3a\xc6\x21\xe8\x4f\x8c\x79\xd0\xdc\xe3\xa2\xbf\x38\xfd\x78\xae\x8b\xf4\xcc\x84\x47\xf4\x69\xa9\x57\x71\xb4\xe1\x74\xf0\x7a\xf8\x17\xf4\x29\xe9\x8f\x3e\xb9\xd3\x46\x7a\x7a\x06\xd9\x72\xb0\x7b\x27\x2d\xc7\xbf\xc1\xfd\x4c\xa7\x68\xc9\x56\x26\x89\x5f\xa4\xab\xd7\xb0\xa2\x67\xfe\x2b\x7a\x7f\xaa\x38\x70\xc6\x83\xc7\x71\xb8\x12\x7f\xb3\xe9\x94\x2f\x6e\x70\xf5\x47\x69\x5f\xf3\x2a\x94\x9c\x9c\xf7\x8e\x3f\x01\x00\x00\xff\xff\x2f\xf8\xa5\xef\x44\x02\x00\x00"

func idtablestakingAdminMove_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminMove_tokensCdc,
		"idTableStaking/admin/move_tokens.cdc",
	)
}

func idtablestakingAdminMove_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingAdminMove_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/move_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0xe6, 0x9d, 0xb1, 0xe1, 0x26, 0x3, 0x9, 0x1e, 0x94, 0xc0, 0xcd, 0x21, 0x66, 0x45, 0xe1, 0xab, 0xcd, 0x70, 0x3c, 0xff, 0x6a, 0xc3, 0x43, 0xd9, 0x93, 0x7d, 0x60, 0x43, 0xc1, 0xea, 0xaf}}
	return a, nil
}

var _idtablestakingAdminPay_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x4f\x39\xa0\xe4\x92\xdc\x51\x29\xa2\x45\x95\x90\x7a\xa8\x00\xf5\x3e\x38\x13\x92\xe2\xd8\x91\x3d\x29\x8b\x10\xdf\x7d\xe5\xfc\x59\xc1\xc2\xfa\x12\x29\x79\xf3\xde\x2f\x6f\x5c\x37\xad\x75\x82\x5f\xda\x9e\x37\xeb\x3d\x1d\x34\xef\x84\x4e\xb5\x39\xa2\x74\xb6\x41\xfc\xfc\x21\x8e\xa2\x3c\xc7\xbe\xaa\x3d\xc4\x91\xf1\xa4\xa4\xb6\x06\x2d\x5d\x3c\x1c\x9f\xc9\x15\x1e\x62\x41\x5a\x43\x2a\x86\x17\x3a\x71\x01\x63\x0b\xf6\x51\x74\x3f\x71\x8d\x22\x00\xc8\x73\xfc\xb6\x8a\x34\xfe\x93\xab\x43\x0e\x4a\xeb\x40\x70\x5c\xb2\x63\xa3\x38\xb8\x05\xa7\xcd\x1a\x3d\x07\x56\x45\x53\x1b\xd8\xc3\x3f\x56\xd2\x5b\x68\x16\x50\x78\xb9\xe5\x72\x8e\xd9\x33\x73\xd6\x8f\x0c\x79\xad\xe3\x96\x1c\x27\xa4\x94\xcc\x41\x9d\x54\xc9\x0f\xeb\x9c\x3d\xff\x25\xdd\x71\x8a\xd9\x4a\x29\xdb\x19\x49\x71\xed\xf5\x23\xe3\xa1\xd7\xbc\xe2\xa2\xcf\x38\xe1\x78\xd6\x65\x36\x31\x61\x81\x90\x96\x79\xb1\x8e\x8e\x9c\x0d\x5e\xdf\xbe\x04\xfd\x9e\x84\xf2\xe7\x2f\xb6\x92\x8d\xcf\x5e\xb6\x1b\xec\xfe\x90\x54\xe9\x47\x70\x38\xcb\x25\x5a\x32\xb5\x4a\xe2\x9f\xb6\xd3\xa1\x7c\x99\xf8\x1f\xe8\xfd\xb8\xea\x9e\x33\x1e\x3c\x6e\x43\x4b\xfc\xc6\xaa\x13\xbe\xeb\x20\x94\xec\xbb\xa6\x21\x77\xc1\xe2\xf1\xff\x32\x45\x5a\x75\x9a\x84\xb7\xc3\x05\x48\xd2\xd7\x45\x64\x2d\x5d\x26\xc9\xe8\x35\xa5\xde\xde\x03\x00\x00\xff\xff\xb9\x2a\x7a\x88\x8a\x02\x00\x00"

func idtablestakingAdminPay_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminPay_rewardsCdc,
		"idTableStaking/admin/pay_rewards.cdc",
	)
}

func idtablestakingAdminPay_rewardsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminPay_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/pay_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x8d, 0xa7, 0xac, 0x1d, 0x3a, 0xd, 0x11, 0x73, 0x2b, 0x80, 0x21, 0x2b, 0xc6, 0x56, 0xc, 0x6, 0x47, 0xe2, 0xfa, 0xd7, 0x8b, 0x96, 0xda, 0x84, 0x45, 0x19, 0xc9, 0x73, 0x5d, 0x9d, 0xff}}
	return a, nil
}

var _idtablestakingAdminRemove_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x4f\x6b\xdb\x40\x10\xc5\xcf\xd6\xa7\x78\xf8\x10\x64\x68\xa5\xbb\x69\x1a\xd2\x9a\x82\x21\x34\x25\x31\xbd\x84\x1c\xc6\xd2\xc8\xda\x76\xbd\x2b\x76\xc7\x76\x4c\xf0\x77\x2f\xa3\x95\xda\xfc\x71\xf7\x22\xd8\x99\x79\xf3\xdb\x99\x27\xb3\xed\x7c\x10\x7c\xb3\xfe\xb0\x5c\xac\x68\x6d\xf9\x5e\xe8\xb7\x71\x1b\x34\xc1\x6f\x31\x7d\x1f\x98\x66\x59\x59\x62\xd5\x9a\x08\x09\xe4\x22\x55\x62\xbc\x43\xe0\xad\xdf\x73\x84\xf3\x35\x63\xb9\x88\xa9\x5e\x5a\x86\x35\x51\xe0\x1b\x50\xd7\x05\xbf\xe7\xba\x4f\x89\x30\x4e\x75\x34\x61\xb9\x80\x68\x83\x02\x7a\xb3\x6c\x40\xee\xa8\x05\x29\x16\xb1\xb8\xc5\xf7\xdb\x15\xf8\x49\x85\xc8\x06\xa6\xfa\x08\xe3\xfa\xb8\xa9\xd9\x89\x91\x63\x52\xf8\x00\x69\x4d\xec\x75\x5f\xa0\x1d\x8c\xb5\x08\xbc\xe7\x20\xc8\x9d\x17\x2d\xda\x76\x5e\xd8\xc9\x2c\xcb\x5e\x64\xe6\xa6\x8e\x73\x3c\xdc\x4b\x30\x6e\xf3\x38\xc3\x73\x96\x01\x40\x59\xe2\xc6\x57\x64\xb1\xa7\x60\xb4\x0d\x1a\x1f\x40\x08\xdc\x70\x60\x57\x31\xc4\x8f\x0f\xe9\x27\x85\xeb\x7a\x6b\x1c\xfc\xfa\x17\x57\xd2\x4b\x58\x16\x90\x5e\xde\x71\x33\xc7\xc5\xfb\xa9\x16\x7d\x49\xea\xd7\x05\xee\x28\x70\x4e\x55\x25\x73\xd0\x4e\xda\xfc\x8b\x0f\xc1\x1f\x7e\x92\xdd\xf1\x0c\x17\xd7\x55\xe5\x77\x4e\x14\x10\xc3\x29\x4b\xac\xfb\x9c\x73\x5c\xf4\x16\x47\x4f\x64\xdb\x14\x23\x13\x2e\xa1\xdd\x8a\x28\x3e\xd0\x86\x8b\xa4\xf5\xe9\xbf\xa0\x9f\x73\x5d\xef\xfc\x8c\x6f\x8a\xe1\xdb\xa7\xdd\x27\xb9\x1f\x24\xed\xec\x6f\x63\x3d\x57\x57\xe8\xc8\x99\x2a\x9f\x7e\xf5\x3b\xab\x96\x90\x91\xff\x15\x7d\x1c\xcc\xd8\x73\x4e\x93\xc6\x29\x4d\x89\x9f\xb8\xda\x09\xe3\x39\x9b\xe8\x74\xd5\x54\x6a\x96\xcb\x73\x4c\x1b\x96\xeb\xc1\x7d\x37\x26\x4a\xfe\x0f\xe6\x1c\x88\x1a\x6c\x74\x6b\x72\x6f\xef\xe5\x61\x36\xd3\x59\x96\x4d\xca\x72\x30\x3c\x98\xaa\x36\x99\x3e\x9b\xa8\x2d\x12\xc7\xca\xdf\xa5\xb0\x71\x30\x75\x54\xc8\xc9\x40\xf8\xf0\x3a\xe3\x11\x97\x70\xc6\x66\x93\x53\x92\x8d\x2c\x69\x67\xe3\xdf\xd2\x03\x0c\x8b\x74\x7c\x00\x59\xeb\x0f\x1f\xf5\xf6\xfc\x2a\x8b\xf8\xe6\xb1\x43\xdf\x71\x78\xa7\x3f\x01\x00\x00\xff\xff\x5e\x32\x19\xb8\xf3\x03\x00\x00"

func idtablestakingAdminRemove_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_approved_nodesCdc,
		"idTableStaking/admin/remove_approved_nodes.cdc",
	)
}

func idtablestakingAdminRemove_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x6e, 0x8d, 0x79, 0xfb, 0x33, 0x46, 0x8c, 0x90, 0xf0, 0x5b, 0xed, 0x99, 0x74, 0x18, 0xe0, 0x89, 0x87, 0xdb, 0x8d, 0x1e, 0x5, 0xba, 0x54, 0x1, 0x90, 0xdb, 0x87, 0xa8, 0x8f, 0x79, 0x8d}}
	return a, nil
}

var _idtablestakingAdminRemove_invalid_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x51\x8b\xdb\x30\x0c\xc7\xdf\xf3\x29\xfe\xf4\xe1\x48\x61\x24\xef\x61\xdb\x71\xb7\x32\x28\x8c\x31\xd6\x63\xef\xaa\xa3\x34\xde\x5c\x2b\xd8\x72\x3b\x38\xfa\xdd\x87\x9d\xe6\xd8\xd6\x3b\xbd\x84\xc4\xd2\x4f\x3f\x45\xb6\xc7\x49\x82\xe2\xb3\x93\xf3\x76\xf3\x44\x7b\xc7\x3b\xa5\x5f\xd6\x1f\x30\x04\x39\x62\x75\x7b\xb0\xaa\xaa\xb6\xc5\xd3\x68\x23\x34\x90\x8f\x64\xd4\x8a\x07\xfb\x3e\x42\x47\x46\xbc\xd6\x53\x2a\x07\xef\x70\x1e\xad\x19\x11\x78\x48\x39\xc5\x4b\xcf\x11\x19\x71\xb6\x3a\xc2\xfa\x98\x86\xc1\x1a\xcb\x5e\x4b\x29\x57\xd5\x5f\xd8\xda\xf6\xb1\xc3\xf3\x4e\x83\xf5\x87\x0e\x8f\x22\xee\xb2\xc6\x73\x55\x01\x40\xdb\xe2\x8b\x18\x72\x38\x51\xb0\xd9\x10\x83\x04\x50\x6e\xc5\x81\xbd\x61\xa8\x14\xa5\xed\x06\x65\x02\x3c\xf4\x47\xeb\x21\xfb\x9f\x6c\xb4\x20\x1c\x2b\x28\x7f\xfc\xce\x43\x87\xbb\xdb\x69\x9b\x52\x32\xf7\x9b\x02\x4f\x14\xb8\x26\x63\xb4\x03\x25\x1d\xeb\x47\x09\x41\xce\x3f\xc8\x25\x5e\xe3\xee\xc1\x18\x49\x5e\xb3\x20\xae\xd1\xb6\xd8\x97\x9c\xd7\xbc\xe8\x7f\x9d\x1c\x91\xdd\xd0\x2c\x4e\xf8\x80\xdc\xad\x89\x2a\x81\x0e\xdc\xcc\xac\xf7\x6f\x8a\x7e\xac\xf3\xda\xba\x57\xf6\xd9\x5c\x9f\x25\x6d\x37\xe3\xbe\x91\x8e\xeb\x97\xc6\x39\xee\xef\x31\x91\xb7\xa6\x5e\x7d\x92\xe4\x7a\x78\xd1\xc5\xff\x1f\xfb\x97\x25\x67\xda\x6a\x66\x5c\xe6\xbf\xc4\xbf\xd9\x24\xe5\x65\x49\x37\x23\x35\x81\x8f\x72\xe2\xad\x3f\x91\xb3\xfd\xd7\x7c\x1d\x6a\x9a\xa6\x20\x27\x2e\x6f\xdb\x4d\xec\x60\xfb\xb8\x40\x2f\x7f\x02\x00\x00\xff\xff\xe8\xd6\x99\x50\xa3\x02\x00\x00"

func idtablestakingAdminRemove_invalid_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_invalid_nodesCdc,
		"idTableStaking/admin/remove_invalid_nodes.cdc",
	)
}

func idtablestakingAdminRemove_invalid_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_invalid_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_invalid_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x11, 0x96, 0x38, 0x1b, 0x3c, 0x48, 0xf6, 0x63, 0x35, 0x22, 0x35, 0x1f, 0x16, 0xff, 0x98, 0xe8, 0x52, 0xfb, 0xfd, 0x5f, 0x55, 0xbb, 0xc8, 0xeb, 0xb9, 0xd6, 0xcf, 0x53, 0x18, 0x1b, 0x6d}}
	return a, nil
}

var _idtablestakingAdminRemove_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\xcb\xda\x40\x10\x86\xef\xf9\x15\x2f\x39\x48\xbc\x24\xf7\xd0\x56\x6c\xa5\x20\x94\x52\x54\x7a\x1f\x77\x27\x66\xdb\x64\x27\x6c\x26\x6a\x29\xfe\xf7\xb2\x89\x16\xfd\xf4\x9b\x4b\x20\x99\x79\xe6\x99\xc9\xb8\xb6\x93\xa0\xf8\xda\xc8\x69\xbd\xda\xd1\xbe\xe1\xad\xd2\x6f\xe7\x0f\xa8\x82\xb4\x48\x9f\x3f\xa4\x49\x52\x14\xd8\xd5\xae\x87\x06\xf2\x3d\x19\x75\xe2\x11\xb8\x95\x23\xf7\x20\x0f\x3e\xbb\x5e\x23\xc2\x8b\xe5\x89\xa3\x35\xc3\x59\xf6\xea\xf4\x0f\x34\xd2\x92\xe4\xae\x3a\x73\xb6\xc4\x56\x83\xf3\x87\x39\xfe\x26\x09\x00\x14\x05\xbe\x89\xa1\x06\x47\x0a\x2e\x56\xa0\x92\x00\x42\xe0\x8a\x03\x7b\xc3\x50\x19\xb9\xeb\x15\x46\x3f\x2c\x6d\xeb\x3c\x64\xff\x8b\x8d\x8e\x88\x86\x15\x14\x5f\x6e\xb8\x2a\x31\x7b\x9e\x25\x1f\x4b\xa6\x7e\x5d\xe0\x8e\x02\x67\x64\x8c\x96\xa0\x41\xeb\xec\xb3\x84\x20\xa7\x9f\xd4\x0c\x3c\xc7\x6c\x69\x8c\x0c\x5e\xa3\x20\xae\x51\x14\xd8\x8f\x39\xaf\xbc\xe8\xad\x4e\x8c\x9e\x9b\x2a\xbf\x39\xe1\x23\x62\xb7\xbc\x57\x09\x74\xe0\x7c\x62\x7d\x78\x57\xf4\x53\x16\x97\x59\xbe\xf8\x5b\xf9\xf5\x39\xa6\x6d\x27\xdc\x0f\xd2\x7a\xfe\xbf\x71\x8c\xc5\x02\x1d\x79\x67\xb2\xf4\x8b\x0c\x8d\x85\x17\xbd\xf9\x3f\xd8\xf7\xd7\x13\x18\x3d\xd3\x89\x71\x99\xb6\xc4\x67\x36\x83\xf2\xdd\x0e\x1e\x26\xca\xa7\x33\x58\x7a\xbb\xe1\x6a\xf0\xf6\xbb\x58\xde\xb0\x91\x60\x33\x67\x6f\xa0\xcb\xbf\x00\x00\x00\xff\xff\x4d\x37\x98\xf0\x75\x02\x00\x00"

func idtablestakingAdminRemove_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_nodeCdc,
		"idTableStaking/admin/remove_node.cdc",
	)
}

func idtablestakingAdminRemove_nodeCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x33, 0x14, 0xe6, 0x42, 0xf6, 0x32, 0x5d, 0x3b, 0x1b, 0xdf, 0xdd, 0xb5, 0x64, 0x5f, 0x18, 0x98, 0xfb, 0x4e, 0xc9, 0x81, 0x63, 0x57, 0x72, 0xf2, 0x1e, 0xc1, 0x11, 0xaa, 0xbc, 0x19, 0x24}}
	return a, nil
}

var _idtablestakingAdminScale_rewards_testCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\xab\x87\xe2\x40\x30\x76\x4b\x16\x83\x87\x94\x10\xc8\xd2\xa1\x7f\xa6\xd2\xe1\x2a\x5d\x8d\x89\x22\x85\xd3\x15\x0f\x21\xdf\xbd\x28\x89\x9d\xbf\x75\x35\x18\x0e\xbd\xf7\xd3\x7b\xe7\x66\xb5\xf6\x2c\x30\xb7\xbe\x5d\xcc\xde\xf0\xcb\xd2\xab\xe0\xb2\x71\x35\x7c\xb3\x5f\x41\x72\x7d\x91\x28\x25\x8c\x2e\xa0\x96\xc6\x3b\xd8\x28\x05\x00\xb0\x66\x5a\x23\x53\x8a\x5a\x4b\x09\xf7\x53\xad\xfd\x8f\x93\x11\x6c\x76\xb7\xf1\x58\x12\x60\x6a\x91\x4d\x78\x62\xc2\xa5\xf1\xad\x83\xea\xc6\xcb\xd9\xcb\x85\x2a\x75\xde\xd0\x62\x56\x42\x92\x1f\x4e\x91\x8c\x54\x0f\xbe\x84\x66\x81\xe4\xd9\x1b\x3a\x60\xd2\x22\xcf\xf3\x2c\x1f\x0d\xea\x67\x64\xa9\x46\xf1\xbc\x37\xa5\xa6\x9b\xe3\xb3\x05\x60\x80\xf7\x85\x93\xc7\x87\x71\xe7\x2e\xa1\xd8\x53\x07\xb0\x1a\x2d\x4d\xad\xed\x72\xc4\xb9\x71\xf5\x1c\xb5\x78\x2e\x21\xcf\x26\xc7\x4c\x18\x02\xb1\xa4\xfd\x7c\x13\xe8\x8e\xa5\xa0\xaa\x60\x12\x03\x8c\xcf\x2c\x2b\x0a\x01\x6b\x2a\x21\x69\xd9\xbb\x1a\xa2\xa3\xe3\xc0\x2e\x4f\xd2\xeb\x4f\xa2\xc7\x5f\x63\xce\x37\x10\xa0\xba\x0e\x70\xa9\xf9\x38\xd9\xcc\xe7\x9d\x1a\x6c\x73\xcd\x8f\x0d\xfe\x2b\xd0\xbb\xfe\x6e\x11\xbf\x5b\xb5\xfd\x0d\x00\x00\xff\xff\xbe\x67\xb1\xec\xc9\x02\x00\x00"

func idtablestakingAdminScale_rewards_testCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminScale_rewards_testCdc,
		"idTableStaking/admin/scale_rewards_test.cdc",
	)
}

func idtablestakingAdminScale_rewards_testCdc() (*asset, error) {
	bytes, err := idtablestakingAdminScale_rewards_testCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/scale_rewards_test.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0xfb, 0xe0, 0xff, 0xc8, 0xd5, 0x10, 0x1a, 0xf1, 0x22, 0x4, 0x38, 0x3f, 0xc9, 0xbd, 0xd9, 0x0, 0xa9, 0xb3, 0x36, 0xcf, 0x67, 0xb1, 0x7e, 0xbe, 0xe4, 0x70, 0x2b, 0x92, 0xff, 0x37, 0x16}}
	return a, nil
}

var _idtablestakingAdminSet_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfe\x14\x0f\x1f\x16\xe7\x62\xdf\x4d\xdb\x25\xdb\xa5\xb0\xb0\x87\xd2\x84\xde\x27\xf2\x38\x56\xab\x68\x8c\x34\x4e\x0a\x21\xdf\xbd\xc8\x7f\x4a\xd2\x64\xe7\x62\xb0\xf4\xde\xfc\x34\x6f\xec\xa1\x97\xa0\xf8\xe6\xe4\xf4\xf6\xba\xa5\x9d\xe3\x8d\xd2\x6f\xeb\xf7\x68\x83\x1c\x90\xdf\x1f\xe4\x59\x56\x55\xd8\x76\x36\x42\x03\xf9\x48\x46\xad\x78\x44\xd6\x08\xed\x18\xce\x46\x85\xb4\xa0\xbe\x0f\x72\xe4\x06\x5e\x1a\x8e\xb0\x7e\x3c\x7d\x7b\x85\x26\xb3\x2c\xbb\x12\x17\xb6\x89\x35\xce\x1b\x0d\xd6\xef\x6b\xbc\x88\xb8\xcb\x0a\xe7\x2c\x03\x80\xaa\xc2\xbb\x18\x72\x38\x52\xb0\x49\x8a\x56\x02\x08\x81\x5b\x0e\xec\x0d\x43\x65\xb1\x1e\x39\xb1\x6e\x0e\xd6\x43\x76\xbf\xd8\xe8\x68\xe1\x58\x41\xe9\xe7\x0f\x6e\x6b\x3c\xdd\xbf\xa9\x1c\x25\x53\xbf\x3e\x70\x4f\x81\x0b\x32\x46\x6b\xd0\xa0\x5d\xf1\x22\x21\xc8\xe9\x27\xb9\x81\x57\x78\x5a\x1b\x23\x83\xd7\x04\x88\xb9\xaa\x0a\xbb\xf1\xce\x23\x2e\xfa\x1f\x27\x55\x64\xd7\x96\x0b\x13\x3e\x23\x75\x2b\xa3\x4a\xa0\x3d\x97\x93\xd7\xa7\x0f\x41\xbf\x14\x29\x9c\xfa\x41\x6a\xe5\xfc\x1d\xaf\x6d\x26\xbb\xef\xa4\xdd\xea\x5f\xe3\x54\xcf\xcf\xe8\xc9\x5b\x53\xe4\x5f\x65\x70\x29\x21\x5d\xf8\x6f\xe8\xe3\xbc\x0a\x23\x67\x3e\x79\x5c\xa6\x29\xf1\x1f\x36\x83\xf2\xd5\x0c\x6e\x5e\x54\x46\xd6\xf5\xbc\x00\xef\x36\x6a\x4a\x78\xd1\x5f\xfe\x06\x00\x00\xff\xff\xff\xfc\x9f\x93\x74\x02\x00\x00"

func idtablestakingAdminSet_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_approved_nodesCdc,
		"idTableStaking/admin/set_approved_nodes.cdc",
	)
}

func idtablestakingAdminSet_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xa0, 0xfc, 0x5d, 0x65, 0x80, 0xeb, 0x76, 0x1e, 0x7, 0x24, 0x56, 0x7b, 0x94, 0x24, 0x0, 0x60, 0xd1, 0x2c, 0xd8, 0x6d, 0xd5, 0x84, 0xca, 0x73, 0x54, 0x45, 0x90, 0x97, 0x72, 0x4f, 0x64}}
	return a, nil
}

var _idtablestakingAdminSet_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\x4f\x39\xa0\xe4\x92\xdc\xd1\xee\x22\x16\xb4\x12\xd2\x1e\x56\x0b\xea\x7d\x70\x26\xc4\xc5\xb1\x23\x7b\x52\x5a\x21\xfe\x7b\xe5\x84\x54\x6d\x81\xb9\x44\x8a\x67\xde\xfb\x66\x9e\x6e\x3b\xe7\x05\x7f\x8c\x3b\x6d\xd6\x3b\xda\x1b\xde\x0a\x1d\xb5\x3d\xa0\xf6\xae\x45\x7a\xfb\x90\x26\x49\x59\x62\xd7\xe8\x00\xf1\x64\x03\x29\xd1\xce\xa2\xa3\xb7\x00\xcf\x27\xf2\x55\x80\x38\x90\x31\x90\x86\x11\x84\x8e\x5c\xc1\xba\x8a\x43\x92\x7c\x9e\x38\x27\x09\x00\x94\x25\xfe\x3a\x45\x06\x2f\xe4\x75\xf4\x41\xed\x3c\x08\x9e\x6b\xf6\x6c\x15\x47\xb5\xa8\xb4\x59\x63\xe0\xc0\xb2\x6a\xb5\x85\xdb\x3f\xb3\x92\x41\xc2\xb0\x80\xe2\xcf\xff\x5c\xcf\x31\xbb\x65\x2e\x86\x91\xd1\xaf\xf3\xdc\x91\xe7\x8c\x94\x92\x39\xa8\x97\x26\xfb\xed\xbc\x77\xa7\x27\x32\x3d\xe7\x98\x2d\x95\x72\xbd\x95\x7c\x02\xbc\x42\xee\x87\xa6\x7b\x60\xf4\x9d\x27\x56\x60\x53\x17\x13\x14\x7e\x22\xda\x15\x41\x9c\xa7\x03\x17\xa3\xd6\x8f\x87\xa4\xbf\xb2\x78\xfd\xf9\x9d\x58\x8a\xeb\x77\x68\xdb\x8e\x72\xff\x48\x9a\xfc\xc3\x38\xd6\x62\x81\x8e\xac\x56\x59\xba\x72\xbd\x89\xd7\x97\x89\xff\x0b\x7d\xb8\x66\x3d\x70\xa6\xa3\xc6\x65\xdc\x9a\x5f\x59\xf5\xc2\x38\xdf\xdf\xa8\x08\x2c\x2b\x43\xba\xe5\x2a\xcb\x1f\xb5\x08\x79\x99\x78\xfb\x21\xf4\x6c\xf2\xb8\xbc\x07\x00\x00\xff\xff\x58\x92\xe9\x95\x79\x02\x00\x00"

func idtablestakingAdminSet_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_claimedCdc,
		"idTableStaking/admin/set_claimed.cdc",
	)
}

func idtablestakingAdminSet_claimedCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xd5, 0xa0, 0x15, 0x9, 0x9e, 0xf5, 0xc0, 0xaf, 0xa2, 0x3e, 0xd3, 0x54, 0x30, 0xef, 0xcb, 0x9, 0xa1, 0x94, 0xb6, 0x48, 0x83, 0xf2, 0x39, 0xb2, 0xac, 0x3a, 0xf1, 0x6, 0x97, 0xdc, 0x21}}
	return a, nil
}

var _idtablestakingAdminSet_node_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\xd4\x40\x10\x85\xef\xf9\x15\x8f\x1c\x96\x0c\x48\x72\x11\x0f\x41\x5d\x56\x07\x21\x20\x22\xce\xaa\xe7\x9a\x4e\x25\x69\xed\xe9\x0a\xdd\x15\x67\x41\xf6\xbf\x4b\x77\x66\x74\xd7\x9d\xad\x4b\x43\xd2\xf5\xde\xd7\xf5\xca\x1e\x66\x09\x8a\x0f\x4e\x8e\xdd\xf6\x96\xf6\x8e\x77\x4a\x3f\xad\x1f\x31\x04\x39\xa0\x7c\xfa\xa3\x2c\x8a\xa6\xc1\xed\x64\x23\x34\x90\x8f\x64\xd4\x8a\x47\x64\x8d\xd0\x89\x61\xbd\x55\x4b\xee\x3b\xdb\x71\x52\xc8\x00\xf2\xe0\x3b\x1b\x35\x89\x7a\xe9\xb9\x78\xd0\x56\xd9\xbe\xc5\x4e\x83\xf5\xe3\x0b\x1c\x73\x4b\x8b\xaf\x9d\xd7\x57\x2f\x37\xf8\x5d\x14\x00\xd0\x34\xf8\x28\x86\x1c\x7e\x51\xb0\x09\x04\x83\x04\x10\x02\x0f\x1c\xd8\x1b\x86\x4a\x76\xee\xb6\xc8\xa0\xb8\xe9\x0f\xd6\x43\xf6\x3f\xd8\x68\x96\x70\xac\xa0\xf4\xf1\x0b\x0f\x2d\xae\x9e\x3e\xaa\xce\x2d\xab\xdf\x1c\x78\xa6\xc0\x15\x19\xa3\x2d\x68\xd1\xa9\x7a\x27\x21\xc8\xf1\x1b\xb9\x85\x37\xb8\xba\x31\x46\x16\xaf\x09\x10\xa7\x6a\x1a\xec\xf3\x9d\x4b\x5c\xf4\x3f\x4e\xaa\xc8\x6e\xa8\xcf\x4c\x78\x83\xe4\x56\x47\x95\x40\x23\xd7\xab\xd6\xeb\x67\x41\xdf\x56\x29\x9d\xf6\x42\x6c\xf5\xe9\xcc\xd7\x76\xab\xdc\x67\xd2\x69\xf3\xd7\x38\xd5\xf5\x35\x66\xf2\xd6\x54\xe5\x7b\x59\x5c\x0f\x2f\x7a\xe6\x7f\x44\x1f\x4f\xbb\x90\x39\xcb\x55\xe3\x7e\x9d\x12\xdf\xb1\x59\x94\x1f\xcc\xe0\xd1\x8b\xea\xc8\xfa\x49\x7a\x5e\xd7\xa0\x4a\xb9\x77\xdb\x16\xb6\xff\x17\xf3\x7a\x9e\x45\xef\xff\x04\x00\x00\xff\xff\xf3\x29\x18\xae\x8a\x02\x00\x00"

func idtablestakingAdminSet_node_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_node_weightCdc,
		"idTableStaking/admin/set_node_weight.cdc",
	)
}

func idtablestakingAdminSet_node_weightCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_node_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_node_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x38, 0x72, 0x86, 0x8a, 0x4f, 0x3d, 0x9e, 0x30, 0x9c, 0x8f, 0x8a, 0x50, 0xc1, 0x8, 0x15, 0x7, 0x30, 0xda, 0xd0, 0x81, 0x97, 0xb8, 0x37, 0xfe, 0x1b, 0x35, 0xa, 0xf0, 0x51, 0x3b, 0x4}}
	return a, nil
}

var _idtablestakingAdminSet_non_operationalCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x7c\x91\x72\x28\x3d\x88\xba\x21\x6d\x08\x04\x42\x5a\xea\xb4\x97\x90\xc3\x78\x77\x64\x6d\xbb\xde\x31\xbb\xe3\x2a\x60\xfc\xdd\xcb\x4a\xb6\xeb\xd6\xc9\x5c\x04\x9a\xd9\xf7\x7e\xf3\xc7\xad\xd6\x12\x15\xb7\x5e\xfa\xbb\x9b\x47\x5a\x78\x9e\x2b\xfd\x72\x61\x89\x36\xca\x0a\x93\xf3\xc4\xa4\x28\xea\x1a\x8f\x9d\x4b\xd0\x48\x21\x91\x51\x27\x01\x89\x35\x41\x3b\x86\x77\x49\x21\x2d\x82\x58\x4e\xe8\x3b\x01\x45\x46\x90\x00\x59\x73\xa4\x5c\x4c\x3e\x4b\x50\xb0\x39\x9d\x18\x91\x7b\x8a\x36\xa1\x77\xde\x63\xc1\xe8\x9d\x76\x1d\x7b\x5b\x14\x27\x0e\xa5\xb3\xa9\xc1\xd3\x5c\xa3\x0b\xcb\xe7\x29\xb6\x45\x01\x00\x75\x8d\x7b\x31\xe4\xf1\x9b\xa2\xcb\x98\x68\x25\x82\x10\xb9\xe5\xc8\xc1\x30\x54\x06\xae\xbb\x1b\x0c\x6d\xe0\xda\xae\x5c\x80\x2c\x7e\xb2\xd1\x41\xc2\xb3\x82\xf2\xcf\x6f\xdc\x36\xb8\x38\x6f\xb9\x1a\x9e\x8c\x7e\xeb\xc8\x6b\x8a\x5c\x92\x31\xda\x80\x36\xda\x95\x9f\x24\x46\xe9\x7f\x90\xdf\xf0\x14\x17\xd7\xc6\xc8\x26\x68\x06\xc4\x3e\xea\x1a\x8b\xa1\xe6\x35\x2e\xfa\x1f\x27\x47\x62\xdf\x56\x07\x26\xcc\x90\xdd\xaa\xa4\x12\x69\xc9\xd5\xa8\xf5\xe1\x4d\xd0\x8f\x65\xde\x5d\xf3\xca\x52\xab\xfd\x77\x28\x9b\x8f\x72\x5f\x49\xbb\xe9\xd1\x38\xc7\xd5\x15\xd6\x14\x9c\x29\x27\x9f\x65\xe3\x2d\x82\xe8\x81\xff\x1f\xfa\xb4\xbf\x94\x81\x73\x32\x6a\xec\xc6\x29\xf1\x0b\x9b\x8d\xf2\xc9\x0c\xf2\x90\xf3\x49\xdc\xbb\xa4\x0d\xb6\xe3\x1a\x1b\x7c\xbf\x75\x2f\xef\xdf\xed\x30\xc3\x76\x77\xac\xcd\x1b\x74\x16\x2e\xc0\xd9\x74\xa2\x91\xe3\xa0\xf1\xe4\xec\x33\x66\xb8\xac\x2e\x8f\xe9\xbd\xf7\xd9\xfc\xaa\xc4\xfa\x20\xe1\xcb\xdf\xf3\x7b\xc8\xb7\x99\x55\xca\x83\xdc\x81\x7e\xf7\x27\x00\x00\xff\xff\x8f\xd3\xc9\x6a\x11\x03\x00\x00"

func idtablestakingAdminSet_non_operationalCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_non_operationalCdc,
		"idTableStaking/admin/set_non_operational.cdc",
	)
}

func idtablestakingAdminSet_non_operationalCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_non_operationalCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_non_operational.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x68, 0xc4, 0x60, 0xca, 0x3c, 0x78, 0xdf, 0x66, 0x1d, 0xb4, 0xe3, 0xec, 0x5f, 0xa3, 0xa7, 0x1f, 0xe1, 0x64, 0x1e, 0xd3, 0xcf, 0x20, 0xfe, 0xff, 0x7b, 0x98, 0xdb, 0xaa, 0x39, 0x72, 0xcc}}
	return a, nil
}

var _idtablestakingAdminSet_slot_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x4f\x1b\x3d\x10\xbd\xe7\x57\xbc\x2f\x07\x14\xc4\xc7\xa6\x91\x4a\x85\xa2\xa6\x88\x16\x55\x8a\xca\xa1\x2a\xb4\x97\xaa\x87\xc1\x99\xcd\xba\x38\xf6\xca\x9e\x25\xac\x50\xfe\x7b\x65\x3b\x64\xb3\x90\x76\x2e\x51\xd6\x33\xef\xbd\x99\x79\xa3\x57\xb5\xf3\x82\xcf\xc6\xad\xe7\x57\xb7\x74\x67\xf8\x46\xe8\x5e\xdb\x25\x4a\xef\x56\x18\xbe\x7e\x18\x0e\x06\xe3\x31\x6e\x2b\x1d\x20\x9e\x6c\x20\x25\xda\x59\x04\x96\x00\xa9\x18\xc1\x38\x81\xd1\x2b\x2d\x01\xa5\xf3\x60\x52\x15\xac\x5b\x30\xa4\xad\x19\xa9\x3a\xe6\x5c\xe7\x14\x1d\x40\xf8\x3e\xb7\x32\x79\x07\xf2\x9e\x5a\x48\x45\x02\xe5\xac\x90\xb6\x19\x32\xa1\x45\xb0\x58\xfb\x02\x4f\x5b\x38\xbf\x60\x9f\xf5\xbe\x39\x7d\x5b\x60\x2e\x11\xb5\x09\xbc\x80\x38\xd4\xae\x6e\x0c\x09\xc7\x5a\xc2\x42\x27\xb9\xe4\xb7\x3c\x15\x05\xdc\x73\x1b\x10\x2a\x5d\x0a\x2f\x70\x32\x41\x70\xf9\x4d\x2a\x6e\x41\x46\x2f\x6d\xac\x5d\x6b\xa9\x92\x1a\xb6\xcd\x8a\x3d\xc5\xe4\x9d\x8c\x90\xe9\x27\xa7\x67\x83\xc1\xde\x54\x46\x5d\xa3\x53\xfc\xcc\x5d\xfe\x3a\xc6\xd3\x60\x00\x00\xe3\x31\xae\x9d\x22\x83\x07\xf2\x3a\x4e\x38\xcd\x8b\xe0\xb9\x64\xcf\x56\x71\x94\x1f\x19\xe7\x57\x48\x1b\xc0\xe5\x62\x15\xfb\xbd\xfb\xcd\x4a\x12\x84\x61\x01\xc5\x8f\xdf\xb8\x9c\xe2\xe8\xf5\xb6\x8a\x54\x92\xf9\x6a\xcf\x35\x79\x1e\x91\x52\x32\x05\x35\x52\x8d\x3e\x3a\xef\xdd\xfa\x07\x99\x86\x8f\x71\x74\xa9\x94\x6b\xac\x44\x81\xd8\xc6\x78\x8c\xbb\x94\x73\x48\x17\xbd\x94\x13\x23\xb0\x29\x8b\x67\x4d\x98\x21\xb2\x15\x41\x9c\xa7\x25\x17\x19\xeb\xfd\x5f\x85\x7e\x18\xc5\x39\x4e\x0f\xf8\xb1\xd8\xfe\xa6\xb4\x9b\x0c\xf7\x95\xa4\x3a\xde\x11\xc7\xb8\xb8\x40\x4d\x56\xab\xd1\xf0\x93\x6b\x4c\x5c\x90\x3c\xeb\xef\xa9\x0f\x5b\x93\x27\x9d\xc3\x8c\xb1\xc9\x53\xe2\x47\x56\x8d\x70\x7f\x06\x09\x14\xba\xc4\x9a\xb1\x70\x09\x36\xd4\xac\x74\xd9\x82\x1f\x49\x89\x69\xe1\xec\xbe\xf7\x51\xb3\xcf\xf6\xf0\xce\xf0\x0e\x4a\x97\x7b\xde\x2f\x0c\xdb\xa5\x54\xf8\x6f\x86\xb3\x3d\xba\xb4\xaa\xdc\xc4\xfe\x81\x91\x5f\x36\x2b\xb6\x82\x55\x13\x3a\xf6\x7f\xb1\x0e\xbb\xd9\x6c\x7b\x8b\xf1\x40\xbe\xd3\x70\xb5\x3b\x87\x29\x9e\xa2\x3f\xcf\xa7\xdb\x63\xdc\x60\x86\xa7\x4d\xaf\xaa\xbb\x9d\x2f\xdc\xe6\xbc\x73\xcc\x30\xe9\xb0\xa3\x7f\x77\xd8\xf1\x34\xf7\x0e\xbd\xdf\xe0\x01\x05\x85\xb6\x81\xbd\x8c\xee\x23\x78\x8f\xeb\xff\x2e\xbd\xbf\xee\x5e\x16\x66\x2f\xfe\x9f\x60\x72\x68\x00\x3d\x83\x16\x81\xe5\x66\x27\xb2\x77\xaf\x07\x24\x3e\x1b\x65\xf3\x27\x00\x00\xff\xff\x09\x74\xf0\x87\x37\x05\x00\x00"

func idtablestakingAdminSet_slot_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_slot_limitsCdc,
		"idTableStaking/admin/set_slot_limits.cdc",
	)
}

func idtablestakingAdminSet_slot_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_slot_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_slot_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xd0, 0x50, 0x62, 0x30, 0xf3, 0x1b, 0xb4, 0x2d, 0xdd, 0x2b, 0xfc, 0xc0, 0xec, 0xf7, 0x83, 0x11, 0x42, 0x76, 0x98, 0x3f, 0x47, 0xf7, 0x12, 0xc5, 0xa7, 0xab, 0xc6, 0x46, 0xc9, 0xb5, 0xff}}
	return a, nil
}

var _idtablestakingAdminStart_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x31\x6f\xc2\x30\x10\x85\xf7\xfc\x8a\xa7\x0c\x28\x2c\xc9\x8e\xda\x22\x5a\x54\x09\xa9\x43\x55\x50\xf7\xc3\xb9\x90\x14\x63\x47\xf6\xa5\xb4\x42\xfc\xf7\xca\x0e\xa9\xa0\xd0\x5b\x2c\xd9\x77\xef\x7d\x7e\xd7\xec\x5a\xeb\x04\xcf\xda\xee\x17\xf3\x15\xad\x35\x2f\x85\xb6\x8d\xd9\xa0\x72\x76\x87\xf4\xfa\x21\x4d\x92\xa2\xc0\xaa\x6e\x3c\xc4\x91\xf1\xa4\xa4\xb1\x06\x2d\x7d\x7b\x38\xde\x93\x2b\x3d\xc4\x82\xb4\x86\xd4\x0c\x2f\xb4\xe5\x12\xc6\x96\xec\x93\xe4\x7c\xe2\x90\x24\x00\x50\x14\x78\xb1\x8a\x34\x3e\xc9\x35\xc1\x07\x95\x75\x20\x38\xae\xd8\xb1\x51\x1c\xd4\x82\xd2\x62\x8e\xc8\x81\x59\xb9\x6b\x0c\xec\xfa\x83\x95\x44\x09\xcd\x02\x0a\x97\x6f\x5c\x4d\x30\xba\x66\xce\xe3\x48\xef\xd7\x3a\x6e\xc9\x71\x46\x4a\xc9\x04\xd4\x49\x9d\x3d\x5a\xe7\xec\xfe\x9d\x74\xc7\x63\x8c\x66\x4a\xd9\xce\xc8\x18\x87\xd8\x7f\x62\x5c\xc7\x9e\x5b\x5c\xf4\x17\x27\x94\x67\x5d\xe5\x03\x13\xee\x11\xdc\x72\x2f\xd6\xd1\x86\xf3\x5e\xeb\xee\x5f\xd0\x87\x2c\x84\x3f\xb9\xb1\x95\xfc\x74\xc6\xb6\x65\x2f\xf7\x4a\x52\x8f\x7f\x8d\x43\x4d\xa7\x68\xc9\x34\x2a\x4b\x9f\x6c\xa7\x43\xf8\x32\xf0\x5f\xd0\xfb\xd3\xaa\x23\x67\xda\x6b\x1c\xfb\x94\xf8\x8b\x55\x27\x7c\x96\xc1\xc5\x8f\x72\x2f\xe4\x64\x80\xe9\xe2\x42\xb3\x41\xe0\xf8\x13\x00\x00\xff\xff\x18\xdb\x97\xa0\x55\x02\x00\x00"

func idtablestakingAdminStart_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminStart_stakingCdc,
		"idTableStaking/admin/start_staking.cdc",
	)
}

func idtablestakingAdminStart_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminStart_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/start_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xae, 0x60, 0x65, 0xba, 0x40, 0xc1, 0x30, 0x64, 0xff, 0xc4, 0x97, 0x57, 0xf8, 0x6d, 0x7d, 0x89, 0xc3, 0x8c, 0xef, 0x8b, 0xca, 0x84, 0xfb, 0x5c, 0xb5, 0x0, 0x2e, 0xf, 0xce, 0xda, 0x60}}
	return a, nil
}

var _idtablestakingAdminTransfer_adminCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x51\x6b\xea\x40\x10\x85\xdf\xf7\x57\x1c\x7c\xb8\x37\x01\x6f\xf2\x2e\xde\x52\x69\x29\x14\xfa\x50\xd0\x3f\x30\xc6\x31\x2e\xae\x3b\xcb\x66\x8c\x88\xf8\xdf\x4b\x62\x9a\x5a\xb5\x0f\xf6\x75\xcf\xce\x9c\x73\xe6\xb3\x9b\x20\x51\xf1\xe2\x64\xf7\xfa\x3c\xa3\xb9\xe3\xa9\xd2\xda\xfa\x12\xcb\x28\x1b\x0c\xae\x85\x81\x31\x1a\xc9\x57\x54\xa8\x15\x8f\x83\x01\x42\xe4\x40\x91\x13\xd9\x79\x8e\x23\x4c\xb6\xba\x9a\x14\x85\x6c\xbd\x0e\x11\xb9\x60\x5b\x5f\x3c\xa7\x38\x18\x03\x00\x79\x8e\x37\xeb\xd7\xd0\x15\xa3\xea\x8c\x69\xb1\xb1\x1e\x05\x05\x9a\x5b\x67\x75\x0f\x15\x10\x42\xb4\x35\x29\x23\x38\x2a\xb8\x9d\x6d\xdd\x32\x67\xfd\x7a\xfc\xe7\x3a\x66\x36\x69\xd6\x3c\x24\x79\x37\x98\x2f\x9d\xec\x3a\xad\x95\x86\x50\x8a\x25\xeb\xe8\x46\xf9\xec\xfc\xe3\x54\x25\x52\xc9\xef\xa4\xab\xb4\x35\x76\xac\xb8\xdc\x86\xff\x5d\x9e\x92\xf5\xa9\x8f\xfe\xab\x60\xa9\xe9\x5d\xce\x8e\x30\xfe\xd7\x9f\x32\x73\x42\x8b\xf1\xe3\xcf\xab\x1b\x74\xf7\xd5\x3a\x39\x4a\x99\x7c\x39\x36\x4d\x66\xfb\xc0\x49\xda\xc9\x0b\xae\x34\xca\xfe\x2c\x54\xcf\x70\x4a\x35\xb7\x0c\xbf\x53\x6b\x5e\x3e\x43\xff\xad\x40\x27\xf8\xa8\x4e\xce\xed\x70\xdf\xa9\xa2\x9a\x93\x1b\x8c\xe4\x5e\x3e\x47\x73\x34\x30\x1f\x01\x00\x00\xff\xff\x83\x3c\x0a\x9c\xd8\x02\x00\x00"

func idtablestakingAdminTransfer_adminCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_adminCdc,
		"idTableStaking/admin/transfer_admin.cdc",
	)
}

func idtablestakingAdminTransfer_adminCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_adminCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_admin.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0x84, 0xe0, 0x24, 0x30, 0xb1, 0x5, 0xe3, 0x5f, 0x2, 0x62, 0x90, 0x3a, 0x5b, 0x39, 0xcc, 0x5a, 0x57, 0xdd, 0x6c, 0xe5, 0x5f, 0xc0, 0xd9, 0xcb, 0x67, 0x73, 0xd1, 0x11, 0xe2, 0xc, 0xa5}}
	return a, nil
}

var _idtablestakingAdminTransfer_fees_adminCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x6a\xf3\x30\x14\x85\x77\x3d\xc5\xf9\x97\xbf\x0e\x24\x76\xe7\x60\x4a\x0d\xb1\xa7\x40\xa1\x1e\x3a\xdf\x2a\xd7\xa9\x88\x2d\x09\xe9\xd6\x69\x29\x79\xf7\x62\x35\x36\xcd\x50\x8d\x57\xe7\x1c\xbe\xcf\x0c\xde\x05\x41\xd3\xbb\x73\xc3\x1c\xd1\x05\x37\xe0\xfe\xa3\xd9\x3f\xbd\x34\x75\xdd\x56\xbb\xdd\x73\xdd\xb6\x4a\x49\x20\x1b\x49\x8b\x71\x16\x5f\x4a\x01\x80\x0f\xec\x29\x70\xe6\xce\x96\xc3\x16\xff\x2b\xad\xdd\xbb\x95\x35\x02\x6b\x36\xe3\xef\xdb\x6a\xee\x4c\xaf\x28\xb0\x37\xf6\x04\x79\x63\x44\xa1\x93\xb1\x47\xd0\x61\x30\x16\x9a\x3c\xbd\x9a\xde\xc8\x27\xc4\x81\xe0\x83\x19\x49\x18\xbe\x27\xcd\x4b\xbf\x67\x41\xc7\x1c\xab\xd4\x29\x37\x48\x00\x79\xef\xe8\x50\x3e\xce\x22\x79\xfa\x35\x51\x02\x89\x0b\x0f\xd9\xe4\xb5\x45\x11\xc5\x05\x3a\x72\xd1\x5d\x63\x29\xb5\xfa\x77\x03\xd7\xd2\xc8\x09\xee\x16\x67\xba\xcc\x66\x77\x11\xf4\x63\x86\xeb\xe2\x32\x30\x47\xf2\x48\x23\x67\xe5\x66\x21\x5d\x43\xdc\x9f\x04\xa9\x7e\x51\xea\xa2\xa0\xbe\x03\x00\x00\xff\xff\x45\x9f\xb3\x90\x93\x01\x00\x00"

func idtablestakingAdminTransfer_fees_adminCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_fees_adminCdc,
		"idTableStaking/admin/transfer_fees_admin.cdc",
	)
}

func idtablestakingAdminTransfer_fees_adminCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_fees_adminCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_fees_admin.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x1, 0x68, 0xb5, 0x4a, 0x11, 0x73, 0x9f, 0x93, 0xbf, 0xa7, 0xae, 0xa5, 0x16, 0xb4, 0x78, 0x5a, 0xef, 0x82, 0xec, 0x63, 0xcf, 0x6a, 0xb, 0xcd, 0xf2, 0xe0, 0xef, 0xa, 0x7d, 0x9, 0x76}}
	return a, nil
}

var _idtablestakingAdminTransfer_minter_deployCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xe3\x48\x10\xbd\xfb\x57\x3c\xe5\x80\x1c\xad\x71\x40\x02\x84\x2c\xbc\x28\x9b\x5d\xa4\x15\x0c\x87\x61\x98\x0b\xca\xa1\x63\x57\xe2\x16\x76\x77\xd4\x5d\x4e\xc6\x8a\xf2\xdf\x47\xed\xb6\x9d\xc0\x64\xa4\xf1\xa1\x93\xae\x8f\x57\x55\xaf\xab\x4a\x56\x6b\x6d\x18\x33\xd3\xac\x59\x07\xdd\xed\xa1\xd4\xdb\x6f\xfa\x9d\x14\x96\x46\x57\x18\x0d\xf7\x51\x10\xb0\x11\xca\x8a\x8c\xa5\x56\xe1\xba\x5e\x94\x32\x7b\xa4\xc6\x26\x78\xf3\x10\xf1\x23\x35\x4f\xd2\xf2\x7f\x8a\x4d\x33\x8f\x90\x69\xc5\x46\x64\xfc\x2c\x2a\x4a\xf0\xc2\x46\xaa\x95\x93\xe6\x94\xe0\xed\xf5\x7f\xc5\xb7\xf3\x08\x86\xb6\xc2\xe4\xd3\x4a\xd7\x8a\x13\xbc\x3e\xc8\x1f\x37\x57\xbd\x74\x56\x1f\x89\x32\xa1\x72\x99\x0b\xa6\x67\x9d\xd3\x93\xac\x24\xdb\x0e\xe6\xe6\x6a\x3e\xc6\x2e\x08\x80\xb5\xa1\xb5\x30\x14\x5a\xb9\x52\x64\x12\x88\x9a\x8b\x70\x9a\xe7\x8f\xd4\x44\x78\x11\x1b\xfa\x2e\xca\x9a\x22\xfc\xa3\x8d\xd1\xdb\xf6\x32\xc6\xd9\x34\xcb\x5c\xf4\x0e\x03\x28\x89\x21\xb2\x8c\x91\xa2\x53\x85\x6b\xd1\x38\x3c\x8f\x3b\x6e\xad\xda\x63\xa9\x0d\xde\xa9\x81\x54\x38\x10\x82\x5d\xab\x73\x9f\x83\x89\xdf\xa9\xb1\xb1\xc8\xf3\x03\x67\x89\x73\x8a\x87\x6b\x84\x42\xd8\x62\x5a\xae\xb4\x91\x5c\x54\x5e\xfb\x41\x14\x61\x4b\x72\x55\xb0\x57\xf9\xff\x3e\x8d\xbd\xcf\x79\x32\x99\x74\x55\x41\xc0\xd0\x92\x0c\xa9\x8c\xc0\x1a\x5c\x50\xfb\xa8\xf0\xaf\x3a\xcd\x2b\xa9\x5c\xbe\x4e\x2e\x7c\x79\xb0\xac\x8d\x58\xd1\x50\xfd\xb2\x7f\x74\x6f\x9d\x76\x85\xc7\x9d\x5d\xbc\x68\x23\xdd\x9d\x0d\xcd\x11\xb7\x86\xd2\xb2\x11\xac\xcd\xdf\xa1\xeb\x9d\x04\x93\xce\x7e\xf2\x11\x6f\x3c\xd0\x73\x7f\x8f\xb5\x50\x32\x0b\x47\x33\x5d\x97\x39\x94\x66\x2c\xfe\xbc\x0a\x43\x56\xd7\x26\xa3\xd1\xf8\x40\xc2\xcc\x90\x60\x82\x38\xd4\xf0\x45\x2a\x26\xf3\xb5\xb3\xfd\xb5\x46\xaf\xc7\xdd\xf9\xa7\xb2\xe3\xac\x85\x7a\xa6\xad\xb7\x08\x45\x59\xea\x2d\x0d\xbd\x7a\x79\xd1\x7f\xf1\x45\x97\x40\xfb\xdc\x3d\x49\x56\x6c\x28\xbc\x3b\xff\x14\x27\x02\xeb\x53\xcc\x78\x6d\x8f\x63\x2d\x19\x0e\x4f\xb4\x7c\x5c\x92\x5a\x71\x81\x34\xc5\x75\x34\xf0\x08\xa0\x22\x6b\xc5\x8a\x12\x8c\x66\xbd\x17\x9c\x1b\x5a\x3f\x94\xd2\x32\x16\x35\xa3\x10\x1b\xc7\x4e\x07\xa3\x97\xb8\xee\xd9\x73\xa4\x9c\x88\xf8\xaf\xcc\x38\xc1\xae\x9d\xd7\x04\x7e\xde\xf6\x48\xb1\xdb\xb7\x5e\x1b\x61\x60\x74\x49\x5e\x75\x8b\x14\x97\xc1\x30\x1a\x65\x1b\x5b\xaa\x53\xb8\xc3\x94\xfc\x26\xe6\x9b\x43\x9d\x23\xf5\x20\x9d\xad\x93\x21\xf5\x3f\x7f\xe1\xf2\x78\x02\x5a\xee\xfb\x95\xe3\xe7\x4d\xb5\x8b\xe7\x78\x0d\xf5\xeb\xc7\x9d\x1f\x77\xcf\xd1\xce\x39\xb9\x6b\x5c\x4a\xae\x71\xf7\x41\xb0\x0f\x10\xfc\x0c\x00\x00\xff\xff\x83\x4c\x04\x12\x3c\x05\x00\x00"

func idtablestakingAdminTransfer_minter_deployCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_minter_deployCdc,
		"idTableStaking/admin/transfer_minter_deploy.cdc",
	)
}

func idtablestakingAdminTransfer_minter_deployCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_minter_deployCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_minter_deploy.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xdd, 0xfe, 0x97, 0x5, 0xa5, 0xdb, 0xb0, 0xfb, 0xa2, 0x42, 0x12, 0x87, 0x4d, 0x1c, 0x36, 0xbf, 0x1e, 0xc, 0xeb, 0x4d, 0x3d, 0x8f, 0xc0, 0xe7, 0x54, 0x44, 0xed, 0x74, 0x9e, 0x78, 0xb6}}
	return a, nil
}

var _idtablestakingAdminUpgrade_set_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x8b\x9c\x40\x10\xc5\xef\x7e\x8a\x87\x87\x45\x61\xd1\x6b\x90\x24\xcb\x66\x96\xc0\x40\x0e\x21\xbb\x9b\x4b\xc8\xa1\xa6\x2d\xd7\xce\xb6\x5d\xd2\x5d\x66\x12\x96\xf9\xee\xa1\x75\x66\xf2\x67\x4c\x1d\x14\xd4\xf7\x7b\xef\x75\x69\x87\x51\x82\xe2\xbd\x93\xfd\xf6\xee\x81\x76\x8e\xef\x95\x9e\xad\x7f\x42\x17\x64\x40\x7e\xf9\x22\xcf\xb2\xba\xc6\x43\x6f\x23\x34\x90\x8f\x64\xd4\x8a\xc7\x48\x3f\x23\x02\xef\x29\xb4\x11\x2a\x20\xe7\xa0\x3d\x23\x2a\x3d\x73\x0b\x2f\x2d\xc7\x2c\xfb\x43\x51\x18\x69\xb9\xc1\x97\xc7\xad\xd7\x57\x5f\x4b\xbc\x64\x19\x00\xd4\x35\x3e\x88\x21\x87\xef\x14\x6c\xb2\x45\x27\x01\x84\xc0\x1d\x07\xf6\x86\x13\x3c\x81\xb7\x77\x98\x63\xe1\xb6\x1d\xac\x87\xec\xbe\xb1\xd1\x19\xe1\x58\x41\xe9\xe1\x27\xee\x1a\x5c\x5d\x56\xa8\x66\xc9\xe2\x37\x06\x1e\x29\x70\x41\xc6\x68\x03\x9a\xb4\x2f\x1e\xc7\x96\x94\x37\xe2\x35\x90\xd1\x6b\xbc\x93\x10\x64\xff\x99\xdc\xc4\x25\xae\x6e\x8d\x91\xc9\xeb\x39\x70\x9a\x24\xae\xcc\x51\x10\xab\x69\x06\x14\x9e\x06\x6e\x56\x8f\xf0\x1a\x4b\xf9\x74\x2d\x7f\x63\xea\x1a\xbb\xd9\x6b\xad\x2f\xfd\x5b\x33\x4d\x64\xd7\x55\xa7\xae\x78\xb3\x04\x89\x2a\x81\x9e\xb8\x5a\x58\xaf\xff\x7b\x00\x6f\x8b\xb4\xe3\x66\x65\xf9\xd5\xf1\x3e\x7f\x76\xbf\xe0\x3e\x92\xf6\xe5\xd9\x38\xcd\xcd\x0d\x46\xf2\xd6\x14\xf9\x46\x26\x97\x76\xac\xa7\xfc\x7f\xa5\x8f\xc7\x3f\x6a\xce\x99\x2f\x8c\xc3\xd2\x9a\x7f\xb0\x99\x94\xf1\xb2\xde\xa8\x8a\xac\x1b\x47\x76\xe0\xb6\x38\xe9\x0e\xbf\x02\x00\x00\xff\xff\xf6\x62\xb3\x93\xb3\x02\x00\x00"

func idtablestakingAdminUpgrade_set_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminUpgrade_set_claimedCdc,
		"idTableStaking/admin/upgrade_set_claimed.cdc",
	)
}

func idtablestakingAdminUpgrade_set_claimedCdc() (*asset, error) {
	bytes, err := idtablestakingAdminUpgrade_set_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/upgrade_set_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x18, 0xb2, 0xdd, 0x50, 0x4a, 0xbf, 0x69, 0x23, 0x23, 0x78, 0xc8, 0x53, 0xc8, 0xd4, 0x61, 0x14, 0x50, 0x2b, 0x78, 0xc8, 0x94, 0xba, 0xb8, 0xbf, 0x98, 0xfe, 0x51, 0x48, 0x61, 0x83, 0xa0}}
	return a, nil
}

var _idtablestakingAdminUpgrade_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\x21\x85\x5c\x40\x52\x4b\x3a\x51\x84\xd4\x9a\x4a\x2c\xd6\xcd\xa2\xc1\xb8\x17\x2e\x7b\x58\x48\xfe\x5d\x2e\x66\x8a\xa9\xde\x9b\x71\x16\x49\x27\x62\xeb\x83\x7a\x0e\x9d\xd4\xb8\xb6\x8d\xda\xee\x56\xe2\xeb\x1c\x00\x8c\x51\x46\x8a\xe2\x89\xd9\x6a\x50\xb2\xa7\x6f\xc7\x8e\x4c\x0e\x41\x2d\x12\x5b\x89\xcd\x9e\x39\x24\xb5\xec\x60\x4d\xc6\x2b\x5e\x91\xa9\x4a\x8b\xe2\x95\xde\x52\xa3\x38\x0d\xe1\xd3\x1c\x2f\x74\x1f\xe4\x6c\xf4\xea\xf5\x51\x6c\xf1\xbf\xcf\x5d\x2e\x2b\xb3\x9b\x7f\x01\x00\x00\xff\xff\xe2\xcb\x57\x03\x9f\x00\x00\x00"

func idtablestakingAdminUpgrade_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminUpgrade_stakingCdc,
		"idTableStaking/admin/upgrade_staking.cdc",
	)
}

func idtablestakingAdminUpgrade_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminUpgrade_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/upgrade_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x5e, 0x5c, 0xd3, 0xb2, 0xd5, 0xa5, 0x4c, 0x45, 0xf4, 0x38, 0x8c, 0x9, 0x99, 0x95, 0xbc, 0xbd, 0x11, 0x8d, 0x62, 0x50, 0xa2, 0x21, 0xf2, 0x46, 0xce, 0x6e, 0xbe, 0x67, 0x1f, 0x7, 0x96}}
	return a, nil
}

var _idtablestakingDelegationDel_request_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x4e\xab\x50\x10\x87\xf7\x3c\xc5\x2f\x2c\x6e\x60\x03\x9b\x9b\xbb\x20\x57\x9b\xc6\xa6\x89\x89\x51\x63\xed\x03\x4c\x0f\x43\x41\xe9\x19\x1c\x06\xdb\xc4\xf4\xdd\x0d\x62\x51\x53\x96\xce\x66\x16\xf3\x87\xef\x63\x4e\xb5\x6b\x44\x0d\xcb\x5a\xf6\xd7\x8b\x47\xda\xd4\xbc\x32\x7a\xae\xfc\x16\x85\xca\x0e\xe1\x79\x21\x0c\x82\xc0\x94\x7c\x4b\xce\x2a\xf1\x11\xed\xa4\xf3\x96\x61\xbd\xac\x0e\xff\xfe\xc6\x78\x0b\x02\x00\x48\x53\xdc\x88\xa3\x1a\xaf\xa4\x55\x3f\x8e\x42\x14\x04\xe5\x82\x95\xbd\x63\x98\xc0\x4a\xc6\x82\x6b\xde\x92\x89\x42\x36\x4f\xec\xec\x63\xba\x66\x43\x7e\x2a\x3c\x70\x91\x81\x3a\x2b\xa3\x73\x9a\x64\x1c\xbf\xdb\x7b\xd6\x18\x7f\x26\x7a\x6e\x25\xe7\xb1\x6f\xc0\x6b\x94\x1b\x52\x8e\xc8\x39\xcb\x30\xef\xac\x9c\x3b\xd7\x8b\xf4\x02\xf8\x8c\x34\xc5\x46\x54\x65\x3f\xc5\x9d\x4f\x71\xf7\xd1\x72\x5d\x24\xdf\xe1\x71\x81\xfe\x33\xc9\xb0\xeb\xff\xaf\x99\x5c\x46\xfd\x8d\xb2\x89\xe3\x7d\xed\x5a\x99\x28\x6d\xf9\x9e\xac\x8c\x47\xc2\x3e\x66\x33\x34\xe4\x2b\x17\x85\x57\xd2\xd5\x39\xbc\xd8\x49\xf6\x87\xea\x28\x12\xc6\xc3\x9f\x3b\x0e\x89\x0f\xec\x3a\xe3\xd3\xb9\x27\xc5\x13\xe5\x97\x8e\x5b\x5b\xfb\x76\xe0\x1a\x1f\xcb\x90\xc7\x8d\xc7\xf7\x00\x00\x00\xff\xff\x21\xe6\x0c\xce\x87\x02\x00\x00"

func idtablestakingDelegationDel_request_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_request_unstakingCdc,
		"idTableStaking/delegation/del_request_unstaking.cdc",
	)
}

func idtablestakingDelegationDel_request_unstakingCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_request_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xdd, 0x32, 0xf3, 0xd, 0xf5, 0xd6, 0x1f, 0x79, 0x1f, 0x19, 0x43, 0x45, 0x66, 0x3c, 0x63, 0x1a, 0xa0, 0x1f, 0xd3, 0x8e, 0x95, 0x7, 0xec, 0x16, 0x10, 0xd8, 0x1b, 0xb4, 0x57, 0xb5, 0x25}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6b\xdc\x40\x0c\xbd\xcf\xaf\x10\x3e\x14\xfb\x50\xfb\x52\x7a\x58\xd2\x86\xd0\xb0\x50\x08\x49\x69\xd2\xe6\x2c\x8f\x65\x7b\x9a\xd9\x91\x19\xcb\x75\xa0\xec\x7f\x2f\xe3\xaf\xf5\xb2\x3e\xb4\xa5\xba\x0c\x63\x3d\x3d\xbd\x27\x8d\xcd\xa1\x61\x2f\xb0\xb7\xdc\x7f\xbe\x7d\xc2\xdc\xd2\xa3\xe0\x8b\x71\x15\x94\x9e\x0f\x10\x5d\x26\x22\xb5\xaa\x79\xe2\x17\x72\x2b\xe8\x70\x3f\x21\x3a\x57\x99\xdc\xd2\x19\x6a\xfd\x2d\x52\x4a\x89\x47\xd7\xa2\x16\xc3\x2e\xc6\x03\x77\x4e\x76\xf0\x6d\x6f\x5e\xdf\xbf\x4b\xe0\x97\x52\x00\x00\x59\x06\x77\xac\xd1\xc2\x4f\xf4\x26\x48\x81\x92\x3d\x20\x78\x2a\xc9\x93\xd3\x04\xc2\x20\x35\x41\x41\x96\x2a\x14\xf6\xc0\xf9\x0f\xd2\x32\x54\x5b\x92\x53\xe2\x2b\x95\x3b\xc0\x4e\xea\xf8\xd2\x59\x7a\x3b\xa3\x1e\x7a\x47\x3e\x81\x37\x1b\x98\x7b\x2e\x68\xc1\xa9\xa5\x41\x39\x9b\x5f\x35\x58\x3b\x4d\x9f\x8d\xd4\x85\xc7\x3e\x70\x4d\xcc\x63\xe2\x3b\x76\x56\x46\xa2\xc6\x53\x83\x9e\x62\xd4\x5a\x76\x70\xd3\x49\x7d\xa3\x75\x98\x48\x98\x04\x4c\x91\x65\x90\xb3\xf7\xdc\xff\xf1\x00\x42\xb4\x64\xcb\x74\x3d\x05\xf8\x00\xa1\x4d\x3a\x72\x5d\xfd\xb7\x91\x7c\x8c\xc3\x9e\x77\x1b\x2f\xea\xc4\xf5\x28\xec\xb1\xa2\x2f\x28\x75\xb2\x28\x0c\x71\x7d\x0d\x0d\x3a\xa3\xe3\xe8\x13\x77\xb6\x00\xc7\x32\x9b\x3d\xb3\xba\x18\x89\x12\x75\x6e\x71\xbd\x87\x4d\x8b\x7f\xb1\x94\xd9\x4a\xd6\x8e\x7a\xb3\x85\x7c\x48\xff\x9b\xf4\xfd\xdd\xc3\x33\x0c\xf5\xb3\xf6\xe3\x78\xd0\x2b\xe9\x4e\x68\x7e\xf3\x9b\x4b\x9b\x2f\x74\x4f\xa3\x90\x76\x92\x78\xf5\xf6\xc2\x7d\xda\x4f\xe6\x96\xbf\x6a\x3c\x93\xa5\xed\xf1\x77\x00\x00\x00\xff\xff\x85\x88\xb6\x28\xfd\x03\x00\x00"

func idtablestakingDelegationDel_stake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_new_tokensCdc,
		"idTableStaking/delegation/del_stake_new_tokens.cdc",
	)
}

func idtablestakingDelegationDel_stake_new_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xf7, 0xbe, 0x19, 0x9c, 0xb0, 0xa0, 0x20, 0xec, 0xc3, 0x1d, 0x38, 0x1b, 0x92, 0xd2, 0xcd, 0x26, 0x71, 0x99, 0xcb, 0x12, 0xc9, 0xaf, 0x7, 0x76, 0x90, 0x93, 0xe9, 0xb9, 0x34, 0x72, 0xd0}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_rewardedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x6a\xe3\x40\x0c\xc6\xef\x7e\x8a\x0f\x1f\x16\xfb\x12\x5f\x96\x3d\x98\xdd\x0d\xa1\x21\x50\x28\x6d\x49\xd2\x07\x50\xc6\x72\xec\xc6\x19\x19\x45\xae\x03\x25\xef\x5e\x5c\xd7\x6e\x4b\x7c\xac\x2e\x62\xd0\x9f\xf9\x7e\xf3\x4d\x79\xac\x45\x0d\xab\x4a\xda\xdb\xe5\x96\x76\x15\x6f\x8c\x0e\xa5\xdf\x23\x57\x39\x22\xbc\x2e\x84\x41\x10\x98\x92\x3f\x91\xb3\x52\x7c\x44\x47\x69\xbc\xa5\x78\x5a\x95\xe7\x3f\xbf\x63\xbc\x06\x01\x00\x24\x09\xee\xc4\x51\x85\x17\xd2\xb2\x1b\x47\x2e\x0a\x82\x72\xce\xca\xde\x31\x4c\x60\x05\x63\xc9\x15\xef\xc9\x44\x21\xbb\x67\x76\xf6\x3e\x5d\xb1\x21\x1b\x0a\x6b\xce\x53\x50\x63\x45\x74\xad\x66\x36\x8e\x3f\xb4\x9e\x35\xc6\xaf\x89\x9e\x7b\xc9\x78\xec\xeb\xe5\xd5\xca\x35\x29\x47\xe4\x9c\xa5\x58\x34\x56\x2c\x9c\xeb\x40\x3a\x00\x7c\x44\x92\x60\x27\xaa\xd2\x4e\xe9\xce\xa6\x74\x77\x71\xe2\x2a\x9f\x7d\x15\x8f\x7f\xe8\xae\x99\xf5\xbb\xfe\xfe\x18\xc9\xff\xa8\xf3\x28\x9d\x30\xef\x73\xd7\xc6\x44\x69\xcf\x8f\x64\x45\x3c\x2a\xec\x62\x3e\x47\x4d\xbe\x74\x51\x78\x23\x4d\x95\xc1\x8b\x0d\xb0\xdf\x50\x47\x90\x30\xee\x5f\xee\xd2\x27\x3e\xb3\x6b\x8c\x07\xbb\x27\xc1\x87\x03\xaf\xb9\x25\xcd\x38\xdb\xca\x81\xfd\x69\xfc\x32\x7d\x1e\xf7\x5e\xde\x02\x00\x00\xff\xff\x82\xfd\x9e\xd7\x8d\x02\x00\x00"

func idtablestakingDelegationDel_stake_rewardedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_rewardedCdc,
		"idTableStaking/delegation/del_stake_rewarded.cdc",
	)
}

func idtablestakingDelegationDel_stake_rewardedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_rewardedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_rewarded.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0xf, 0xa, 0x84, 0xc4, 0x39, 0x4d, 0x11, 0xe, 0x26, 0xfb, 0x5c, 0xff, 0xbe, 0x69, 0x65, 0xbc, 0xf6, 0x3e, 0xcb, 0x96, 0x41, 0x70, 0x5f, 0x7a, 0x39, 0x65, 0x44, 0x53, 0x83, 0x67, 0x99}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x6a\xe3\x40\x0c\xc6\xef\x7e\x8a\x0f\x1f\x16\xfb\x12\x5f\x96\x3d\x98\xdd\x0d\xa1\x21\x50\x28\x6d\x69\x92\x07\x50\xc6\x72\xec\xc6\x19\x19\x59\x6e\x02\x25\xef\x5e\x5c\xd7\x6e\x4b\x7c\xac\x2e\x62\xd0\x9f\xf9\x7e\xf3\x4d\x79\xac\x45\x0d\xab\x4a\x4e\xb7\xcb\x0d\xed\x2a\x5e\x1b\x1d\x4a\xbf\x47\xae\x72\x44\x78\x5d\x08\x83\x20\x30\x25\xdf\x90\xb3\x52\x7c\x44\x47\x69\xbd\xa5\xd8\xae\xca\xf3\x9f\xdf\x31\x5e\x83\x00\x00\x92\x04\x77\xe2\xa8\xc2\x0b\x69\xd9\x8d\x23\x17\x05\x41\x39\x67\x65\xef\x18\x26\xb0\x82\xb1\xe4\x8a\xf7\x64\xa2\x90\xdd\x33\x3b\x7b\x9f\xae\xd8\x90\x0d\x85\x27\xce\x53\x50\x6b\x45\x74\xad\x66\x36\x8e\x3f\x9c\x3c\x6b\x8c\x5f\x13\x3d\xf7\x92\xf1\xd8\xd7\xcb\xab\x95\x6b\x52\x8e\xc8\x39\x4b\xb1\x68\xad\x58\x38\xd7\x81\x74\x00\xf8\x88\x24\xc1\x4e\x54\xe5\x34\xa5\x3b\x9b\xd2\xdd\x45\xc3\x55\x3e\xfb\x2a\x1e\xff\xd0\x5d\x33\xeb\x77\xfd\xfd\x31\x92\xff\x51\xe7\x51\x3a\x61\xde\xe7\xae\xb5\x89\xd2\x9e\x1f\xc9\x8a\x78\x54\xd8\xc5\x7c\x8e\x9a\x7c\xe9\xa2\xf0\x46\xda\x2a\x83\x17\x1b\x60\xbf\xa1\x8e\x20\x61\xdc\xbf\xdc\xa5\x4f\x7c\x66\xd7\x1a\x0f\x76\x4f\x82\x0f\x07\xde\xfa\xc6\xe8\xc0\xd9\x46\x0e\xec\x9b\xf1\xcb\xf4\x79\xdc\x7b\x79\x0b\x00\x00\xff\xff\xad\xc9\x2e\xf9\x8d\x02\x00\x00"

func idtablestakingDelegationDel_stake_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_unstakedCdc,
		"idTableStaking/delegation/del_stake_unstaked.cdc",
	)
}

func idtablestakingDelegationDel_stake_unstakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x66, 0x6f, 0xd4, 0xd9, 0x65, 0x60, 0x17, 0xd7, 0xaf, 0x3c, 0xa8, 0x83, 0x13, 0x27, 0xd1, 0x8c, 0x71, 0xb3, 0x7, 0x6e, 0x26, 0x80, 0xea, 0xc, 0xfa, 0x17, 0x25, 0x7a, 0x27, 0x32, 0xdd}}
	return a, nil
}

var _idtablestakingDelegationDel_withdraw_reward_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x41\x6b\xdc\x30\x10\x85\xef\xfa\x15\x83\x0f\xc1\x3e\xd4\xbe\x94\x1e\x96\xb4\x21\x34\x2c\x14\x42\x53\x92\xb4\x3d\xcf\x4a\xe3\xb5\x1a\x59\x63\xc6\xe3\x3a\x50\xf2\xdf\x8b\xed\xb5\xe3\x64\xf7\x50\x4a\x74\x11\x66\xe6\xe9\xbd\x4f\x1a\xfb\xba\x61\x51\xd8\x06\xee\xbf\x5c\xdd\xe3\x2e\xd0\x9d\xe2\x83\x8f\x7b\x28\x85\x6b\x48\x8e\x0b\x89\x59\x69\xee\xf9\x81\xe2\xaa\x75\xfc\x4e\x8c\x31\x2a\x18\x5b\xb4\xea\x39\xa6\x58\x73\x17\x75\x03\xdf\xb7\xfe\xf1\xc3\xfb\x0c\xfe\x18\x03\x00\x50\x14\x70\xcd\x16\x03\xfc\x46\xf1\x83\x01\x94\x2c\x80\x20\x54\x92\x50\xb4\x04\xca\xa0\x15\x81\xa3\x40\x7b\x54\x16\xe0\xdd\x2f\xb2\x3a\xaa\x03\xe9\x73\xe1\x96\xca\x0d\x60\xa7\x55\x7a\x9c\x37\xbf\x9a\xbb\x6e\xfa\x48\x92\xc1\xd9\x89\x9e\xaf\xec\x68\xe9\x33\x8b\x41\x39\x23\x8d\x06\x67\x0b\x61\xfe\x03\xbb\xa0\x53\x5f\x23\xd4\xa0\x50\x8a\xd6\xea\x06\x2e\x3b\xad\x2e\xad\x1d\x80\x07\x50\x38\xac\xa2\x80\x1d\x8b\x70\xff\xcf\x7c\xc3\x6a\x29\x94\xf9\x1a\x12\x3e\xc2\x60\x93\x4f\x67\x9d\xbf\x19\xf1\xa7\x74\x78\xc2\xcd\x89\x31\x78\x3e\xeb\x4e\x59\x70\x4f\xdf\x50\xab\x6c\x49\x38\xac\x8b\x0b\x68\x30\x7a\x9b\x26\x9f\xb9\x0b\x0e\x22\xeb\x0c\xfb\x02\xb5\x3d\x0c\x16\xba\xda\xc7\x24\x33\x2f\x31\xd7\x57\xfd\x0a\xf3\xf5\xbd\xcf\x69\x8b\x76\x8a\x54\x2c\xda\xb1\xfc\x7f\xe9\xb6\xd7\x37\x3f\x61\xd4\xcf\xd1\x9e\xa6\x8d\x1e\xc9\x76\x4a\xf3\xd4\x9e\x0c\x9c\x3b\x6a\xb8\xf5\x7a\x08\x76\xfe\xee\xe8\xe5\xf2\xde\x6b\xe5\x04\xfb\x5b\xea\x51\x1c\xb9\x51\xda\x2e\xff\xc6\xb4\x67\x8b\xf5\xd3\xdf\x00\x00\x00\xff\xff\x74\xda\xf9\x62\x99\x03\x00\x00"

func idtablestakingDelegationDel_withdraw_reward_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_withdraw_reward_tokensCdc,
		"idTableStaking/delegation/del_withdraw_reward_tokens.cdc",
	)
}

func idtablestakingDelegationDel_withdraw_reward_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_withdraw_reward_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_withdraw_reward_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x4b, 0x1a, 0x8e, 0x8b, 0x65, 0x20, 0x1a, 0xe4, 0x29, 0xda, 0x30, 0xa5, 0xa8, 0xa0, 0xc6, 0xca, 0xd5, 0x2d, 0x23, 0x42, 0x23, 0xa9, 0x4b, 0xef, 0x84, 0x6f, 0xb7, 0x4d, 0x88, 0x80, 0x45}}
	return a, nil
}

var _idtablestakingDelegationDel_withdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x6a\xdc\x40\x0c\xc6\xef\xf3\x14\xc2\x87\x60\x1f\x6a\x5f\x4a\x0f\x26\x6d\x08\x0d\x0b\x85\xd0\x94\x26\x69\xcf\xda\xb1\xbc\x9e\xee\x78\x64\xc6\x72\xbd\x50\xf6\xdd\xcb\xd8\x6b\xaf\xf7\xcf\xa1\x94\xe8\x32\x18\x49\xf3\x7d\x3f\x8d\x6c\xea\x86\xbd\xc0\xca\x72\xff\xe5\xe1\x05\xd7\x96\x9e\x05\xb7\xc6\x6d\xa0\xf4\x5c\x43\x74\x99\x88\xd4\xa2\xe7\x85\xb7\xe4\x16\xa5\xc3\x77\xa4\x94\x12\x8f\xae\x45\x2d\x86\x5d\x8c\x35\x77\x4e\x72\x78\x5d\x99\xdd\x87\xf7\x09\xfc\x51\x0a\x00\x20\xcb\xe0\x91\x35\x5a\xf8\x8d\xde\x04\x01\x28\xd9\x03\x82\xa7\x92\x3c\x39\x4d\x20\x0c\x52\x11\x14\x64\x69\x83\xc2\x1e\x78\xfd\x8b\xb4\x0c\xdd\x96\xe4\x98\xf8\x4e\x65\x0e\xd8\x49\x15\x5f\xfa\x4d\x1f\xa6\xaa\xa7\xde\x91\x4f\xe0\xe6\x4a\xcd\x57\x2e\x68\xae\x53\xb3\x40\x39\x21\x0d\x02\x37\x33\x61\xfa\x03\x3b\x2b\x63\x5d\xe3\xa9\x41\x4f\x31\x6a\x2d\x39\xdc\x77\x52\xdd\x6b\x1d\x80\x03\x28\x1c\x22\xcb\x60\xcd\xde\x73\xff\xcf\x7c\x21\x5a\xb2\x65\xba\x84\x84\x8f\x10\x64\xd2\xf1\xae\xdb\x37\x23\xfe\x14\x87\x27\xcc\xaf\xac\xc1\xf1\xae\x67\x61\x8f\x1b\xfa\x86\x52\x25\xb3\xc3\x10\x77\x77\xd0\xa0\x33\x3a\x8e\x3e\x73\x67\x0b\x70\x2c\x13\xec\x09\x6a\x7b\x58\x2c\x2c\x6a\xe3\xa2\x44\x9d\x62\x2e\x47\x7d\x86\x79\x3e\xf7\xc9\x6d\xd6\x8e\x96\xb2\xb9\x77\x48\xff\x9f\xbb\xd5\xe3\xd3\x4f\x18\xfa\x27\x6b\xfb\xf1\xa0\x1d\xe9\x4e\x68\xda\xda\xab\x86\xd3\x82\x1a\x6e\x8d\x1c\x8c\xdd\xbe\xbb\x78\xb9\xb4\x37\x52\x15\x1e\xfb\x57\x17\xe6\x40\xc5\xd0\xda\xce\xff\xc6\x78\x26\xb3\xf4\xfe\x6f\x00\x00\x00\xff\xff\x19\x57\x06\xc9\x99\x03\x00\x00"

func idtablestakingDelegationDel_withdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_withdraw_unstaked_tokensCdc,
		"idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc",
	)
}

func idtablestakingDelegationDel_withdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_withdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xda, 0xef, 0x51, 0x96, 0x44, 0xca, 0xf1, 0x93, 0x42, 0xa5, 0xd2, 0x8a, 0x11, 0xa8, 0x5c, 0x7b, 0x9e, 0xe0, 0xb, 0xcf, 0x33, 0xe9, 0x7a, 0x28, 0x42, 0x74, 0x1b, 0xa1, 0x8f, 0x86, 0x58}}
	return a, nil
}

var _idtablestakingDelegationDelegator_add_capabilityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcd\x8a\xea\x40\x10\x85\xf7\xfd\x14\x85\x0b\x49\xe0\x62\xf6\xa2\x82\x5c\xb9\x70\x37\x33\x82\xbe\x40\xa5\x53\x26\x3d\x69\xbb\x42\xa7\x42\x66\xd0\xbc\xfb\x90\x38\xd3\x1a\x94\xf9\xa9\x5d\xd2\xa7\xce\x39\xf5\x99\x63\xc5\x5e\xe0\x9f\xe5\xf6\xff\x66\x8f\xa9\xa5\x9d\x60\x69\x5c\x0e\x07\xcf\x47\x98\xdc\x3f\x4c\xd4\xcd\xce\x9e\x4b\x72\x37\xd2\xe1\x7b\xa2\x54\x92\xc0\xbe\x30\x35\x88\x47\x57\xa3\x16\xc3\x0e\x30\xcb\x6a\x40\xa8\x9a\xd4\x1a\x0d\x19\x59\xca\x51\xd8\x83\xc6\x0a\x53\x63\x8d\xbc\x81\x30\xa0\x03\xd4\x9a\x1b\x27\xd0\x1a\x29\x7a\x27\x74\x40\xaf\xa6\x96\xbe\xd5\x13\x67\xb4\x09\xab\x9c\xbe\x90\x16\xa5\x6e\x63\x4e\x4a\x01\x00\x54\x9e\x2a\xf4\x14\xa1\xd6\x32\x87\x75\x23\xc5\xfa\x62\x1b\x7f\x2a\xfa\x31\x87\x3e\x4d\x66\x29\x7b\xcf\xed\x02\x1b\x29\xa2\xfb\x93\x67\x21\xf1\xb9\x75\xe4\x63\x98\x3e\xd0\x8c\x9a\xad\xa2\x9e\xc9\xfc\x01\xd7\xab\xd7\x4e\xd8\x63\x4e\x5b\x94\x22\x86\xe5\x12\x9c\xb1\x70\x3e\x87\x6a\xfd\x0c\xdd\x72\x92\xbf\x01\xd1\x62\x7a\xfa\x2e\x7b\x3b\x00\xee\x56\x51\x72\x41\x9d\x1c\x2c\xb7\x1f\xca\x20\x8a\x67\xba\x20\x5d\x46\x71\xc8\x3b\x8d\x92\x3d\x49\xe3\x5d\xf8\xd5\x5d\x91\x0d\x9d\xac\x71\xe5\x6f\xaa\x8c\xbc\xbf\xea\xf5\x67\xa4\x14\xf4\x39\xc9\x8f\x31\x86\xdd\xcb\x55\x9d\xea\xde\x03\x00\x00\xff\xff\x9f\x8a\x9c\x77\xdf\x02\x00\x00"

func idtablestakingDelegationDelegator_add_capabilityCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDelegator_add_capabilityCdc,
		"idTableStaking/delegation/delegator_add_capability.cdc",
	)
}

func idtablestakingDelegationDelegator_add_capabilityCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDelegator_add_capabilityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/delegator_add_capability.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x8e, 0x89, 0x49, 0xad, 0x20, 0xad, 0xdb, 0x39, 0xd1, 0xed, 0x98, 0xc9, 0xd8, 0x8a, 0x58, 0xf5, 0x52, 0xbd, 0x18, 0xbe, 0x49, 0xb2, 0xbd, 0xab, 0x93, 0x20, 0x18, 0x7f, 0x94, 0x32, 0x4}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_committedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x9e\xba\x20\x2d\xa8\x78\x28\x78\x72\x29\xec\xb9\xed\x0f\x98\x66\x27\xdb\xd0\x64\xa6\x24\x53\x14\xc4\xff\x2e\xeb\xd2\x55\xd4\x53\xc8\x9b\xc7\xf7\xf8\x62\xbe\x68\x31\x6c\x93\xbe\x76\xed\x9e\x8e\x89\x77\x46\xe7\x28\x03\x42\xd1\x8c\xc5\xdf\xc3\xc2\xb9\xf5\x1a\xfb\x53\xac\xa8\xbe\xc4\x8b\xa1\xb0\x5d\x8b\x54\xd8\x89\x71\xa4\x44\xe2\x19\x1a\xe0\x35\xe7\x68\xc6\x3d\x4c\xcf\x2c\x75\xcc\x08\x3d\x27\x1e\xc8\xb4\x38\x47\xde\x73\xad\x4b\x4a\xa9\x41\xb8\x0a\x32\x45\x59\x8a\xf6\xdc\xb5\x1b\xec\xac\x44\x19\xee\xbe\xfb\x63\x78\xe8\xc4\x1e\xee\x9b\x0d\x0e\xdb\xf8\xf6\xf4\x88\x77\x07\x00\x89\x6d\xac\x75\x12\x14\xcf\xff\xa8\xac\xda\x99\x21\x41\xe7\x85\xe9\xfd\xb5\xf0\xe3\xd3\x7c\xc1\x27\xb9\x1b\x7f\x35\xa9\xbc\xdc\xd4\xdc\xc7\x67\x00\x00\x00\xff\xff\xf7\xec\x35\xd4\x41\x01\x00\x00"

func idtablestakingDelegationGet_delegator_committedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_committedCdc,
		"idTableStaking/delegation/get_delegator_committed.cdc",
	)
}

func idtablestakingDelegationGet_delegator_committedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_committedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_committed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x47, 0x67, 0x61, 0x72, 0x82, 0xe7, 0x5, 0x71, 0x85, 0xa0, 0x71, 0x55, 0x61, 0x1, 0x5c, 0x1e, 0x63, 0xf7, 0x20, 0xd0, 0xe0, 0x44, 0x4f, 0x2d, 0xf0, 0xd3, 0x90, 0x56, 0x35, 0xa3, 0x92}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xc1\x4a\x87\x40\x10\x87\xef\xfb\x14\x3f\x3c\x29\x44\x42\xdd\x3c\x4b\xe0\x59\x7b\x80\x69\x1d\x75\x68\x9d\x95\xdd\x11\x0f\xd1\xbb\x87\x14\x16\x15\xfc\x4f\xc3\xcc\x7c\xf0\x7d\xb2\x6e\x31\x19\x9e\x42\x3c\xba\x76\xa0\x97\xc0\xbd\xd1\xab\xe8\x8c\x29\xc5\x15\xc5\xdf\x47\xe1\x5c\x5d\x63\x58\x24\x23\xfb\x24\x9b\x21\xb1\xed\x49\x33\x28\x04\xd8\xc2\x10\x9d\x22\x28\xe7\xe8\x85\x8c\x47\x1c\x62\x0b\x08\x23\x07\x9e\xc9\x62\x72\x8e\xbc\xe7\x9c\x4b\x0a\xa1\xc2\xb4\x2b\x56\x12\x2d\x35\x8e\xdc\xb5\x0d\x7a\x4b\xa2\xf3\xdd\x37\x7f\x1e\x9f\x3b\xb5\xc7\x87\xaa\xf9\xa7\xf4\xbe\xbd\xc0\x53\xfc\xe6\x00\x7c\x35\xdd\xa4\x2f\xe9\xe7\xfc\x25\xfd\xb1\x54\xee\xfd\x23\x00\x00\xff\xff\x23\x78\xfb\x5e\x2b\x01\x00\x00"

func idtablestakingDelegationGet_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_infoCdc,
		"idTableStaking/delegation/get_delegator_info.cdc",
	)
}

func idtablestakingDelegationGet_delegator_infoCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xec, 0xa2, 0x5c, 0x37, 0x3d, 0x48, 0x22, 0x10, 0x24, 0xc6, 0xbc, 0x82, 0x80, 0x47, 0xaf, 0xd2, 0xac, 0xbf, 0xb3, 0xc5, 0x14, 0x25, 0x8f, 0x5b, 0x8f, 0x80, 0x5e, 0x86, 0x97, 0x9e, 0x72}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_info_from_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x6a\xf3\x40\x0c\xc4\xef\xfb\x14\x83\x0f\x1f\x36\x7c\xc4\xf7\xd0\x36\x84\x84\x42\x2e\xa5\xd0\xbc\x80\xbc\x2b\x3b\xdb\x6e\x56\x66\x57\x26\x94\x90\x77\x2f\x89\x9b\x3f\xa5\x81\xea\x24\x46\xc3\xfc\x24\xf9\x6d\x2f\x49\xf1\x1c\x64\xb7\x5a\xae\xa9\x09\xfc\xa6\xf4\xe1\x63\x87\x36\xc9\x16\xc5\xef\x41\x61\x4c\x5d\x63\xbd\xf1\x19\xd9\x26\xdf\x2b\x3a\xd6\x0c\x0a\x01\xba\x61\xf8\xd8\x0a\xa8\x91\x41\x41\x70\x1c\xb8\x23\x95\x04\x8a\x0e\x89\x75\x48\x31\xc3\xab\x31\x64\x2d\xe7\x5c\x52\x08\x15\xda\x21\x62\x4b\x3e\x96\xe4\x5c\xe2\x9c\xa7\x98\x8f\x4d\x35\xbd\xb3\xd8\x64\x79\x0e\x5d\x1d\x51\x7b\x63\x00\x20\xb0\xde\xd0\x1e\x8f\x3b\xcd\xad\x95\x21\xea\x39\xb5\x3a\xf9\x8e\x35\xe9\x58\x17\xd4\x53\xe3\x83\xd7\xcf\x87\x7f\xfb\x3b\x90\x17\x71\x7c\x01\xbd\x0e\x4d\xf0\xf6\xf0\x54\xd6\xfd\xa9\xab\xdb\x20\xbb\x6f\xe7\xc5\x74\x93\xdf\x48\x4a\xb2\x2b\xaf\xca\x6c\x86\x9e\xa2\xb7\x65\xb1\x90\x21\x38\x44\x51\x8c\x26\x24\x6e\x39\x71\xb4\x0c\x95\x9b\x0b\xa4\x79\x67\xab\x45\x35\x5e\x37\x7e\xee\xcf\x67\x94\x51\x1c\xaf\x96\xd3\x6b\xce\x64\x54\xfe\x5f\x95\x9f\x63\xef\x2a\x73\x30\x5f\x01\x00\x00\xff\xff\x00\x83\xc3\x6a\x05\x02\x00\x00"

func idtablestakingDelegationGet_delegator_info_from_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_info_from_addressCdc,
		"idTableStaking/delegation/get_delegator_info_from_address.cdc",
	)
}

func idtablestakingDelegationGet_delegator_info_from_addressCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_info_from_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_info_from_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x2, 0x1b, 0x49, 0x6, 0xce, 0x6b, 0x6f, 0x3f, 0x70, 0xaf, 0xe3, 0xcc, 0xec, 0xdb, 0xcc, 0x4d, 0xf, 0x5f, 0x46, 0x99, 0x70, 0x3e, 0xcb, 0xab, 0xbe, 0x4c, 0xd0, 0xea, 0xd9, 0xd3, 0x9}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\x3f\x3d\x35\x20\x2d\xa8\x78\x28\x78\x0b\x85\x5c\x6d\xf2\x00\xd3\x64\x36\x5d\xba\x99\xa9\xbb\xb3\x28\x88\xef\x2e\x6d\x6d\x15\xed\x69\x98\x99\x9f\xef\xe7\x0b\xd3\x41\x93\x61\x1d\xf5\xad\xa9\x5b\xda\x46\xde\x18\xed\x83\x8c\xf0\x49\x27\xcc\xfe\x3f\x66\xce\x2d\x97\x68\x77\x21\x23\xf7\x29\x1c\x0c\x89\xad\x24\xc9\xb0\x1d\x23\xf1\x6b\xe1\x6c\x3c\xa0\x48\xfe\x26\x6d\x29\x92\xf4\x0c\xf5\x20\x0c\x1c\x79\x24\xd3\xe4\x1c\xf5\x3d\xe7\x3c\xa7\x18\x2b\xf8\x22\x98\x28\xc8\x5c\x74\xe0\xa6\x5e\x61\x63\x29\xc8\x78\xf7\x93\x3f\x1e\xbb\x46\xec\xe1\xbe\x5a\xa1\x5b\x87\xf7\xa7\x47\x7c\x38\x00\x88\x6c\xc7\x58\x23\x5e\xf1\x7c\x43\x65\x51\x5f\x19\xe2\xf5\xda\x70\x9e\x7f\x1a\x7e\x2d\xd5\x09\x7e\x96\xbb\xf0\x17\xa6\x7b\x96\xfc\x72\xb1\x6c\xb5\x3b\x69\xb2\xfb\xfc\x0a\x00\x00\xff\xff\xac\xc1\x7c\x54\x4a\x01\x00\x00"

func idtablestakingDelegationGet_delegator_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_requestCdc,
		"idTableStaking/delegation/get_delegator_request.cdc",
	)
}

func idtablestakingDelegationGet_delegator_requestCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xbb, 0x41, 0xe6, 0xc4, 0x7c, 0xfd, 0xd9, 0xbd, 0x61, 0xf5, 0x8b, 0xe7, 0x6b, 0x66, 0x9e, 0xb3, 0x1c, 0x8b, 0xe3, 0x1f, 0xcf, 0x60, 0x5b, 0x7d, 0x90, 0x27, 0x78, 0xc9, 0x89, 0x7c, 0x74}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_rewardedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\x35\x20\x2d\xa8\x78\x28\x78\x0b\x85\x5c\x6d\xfb\x03\xa6\xc9\x6c\xba\x74\x33\x53\x66\xa7\x54\x10\xff\xbb\xc4\x68\x15\xed\x69\xd9\x37\x8f\xef\xf1\xa5\xe1\xa4\xe6\x58\x67\xbd\x34\xf5\x96\xf6\x99\x37\x4e\xc7\x24\x3d\xa2\xe9\x80\xd9\xff\xc3\x2c\x84\xe5\x12\xdb\x43\x2a\x28\xad\xa5\x93\xc3\xd8\xcf\x26\x05\x7e\x60\xec\x29\x93\xb4\x0c\x8d\x30\xbe\x90\x75\xdc\xc1\xf5\xc8\x52\xc6\x88\xd0\x71\xe6\x9e\x5c\x2d\x04\x6a\x5b\x2e\x65\x4e\x39\x57\x88\x67\xc1\x40\x49\xe6\xa2\x1d\x37\xf5\x0a\x1b\xb7\x24\xfd\xdd\x4f\x7f\x0c\x77\x8d\xf8\xc3\x7d\xb5\xc2\x6e\x9d\x5e\x9f\x1e\xf1\x16\x00\x20\xb3\x8f\xb5\x46\xa2\xe2\xf9\x86\xc9\xa2\xbe\x32\x24\xea\x75\x61\x7a\xff\x2c\xfc\xfa\x54\x9f\xf0\xc9\xed\x9b\xbf\x98\x54\x5e\xbe\xcc\xc2\xfb\x47\x00\x00\x00\xff\xff\x43\x2a\x44\xd3\x3f\x01\x00\x00"

func idtablestakingDelegationGet_delegator_rewardedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_rewardedCdc,
		"idTableStaking/delegation/get_delegator_rewarded.cdc",
	)
}

func idtablestakingDelegationGet_delegator_rewardedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_rewardedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_rewarded.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x68, 0x38, 0xca, 0x24, 0xda, 0x96, 0x6b, 0xc3, 0x6d, 0x21, 0xa3, 0xf8, 0x87, 0x48, 0x9, 0x2b, 0x15, 0x80, 0xf6, 0x53, 0x30, 0xce, 0x89, 0x5d, 0x88, 0xbe, 0xba, 0xd, 0xab, 0x52, 0x88}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_stakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x21\xa7\x18\x4a\x02\x6d\xe9\x21\xd0\x9b\x09\xf8\xec\xe4\x03\x36\xf2\xca\x11\x96\x77\x83\xb4\xa1\x85\xd2\x7f\x2f\x8e\xa9\x5b\xda\x9c\x84\x66\x87\x37\xbc\x38\x5e\x34\x1b\xf6\x49\xdf\x9a\xfa\x40\xa7\xc4\xad\xd1\x10\xa5\x47\xc8\x3a\x62\xf5\xff\xb0\x72\x6e\xbb\xc5\xe1\x1c\x0b\x8a\xcf\xf1\x62\xc8\x6c\xd7\x2c\x05\x76\x66\x9c\x28\x91\x78\x86\x06\x14\xa3\x81\x3b\x98\x0e\x2c\x65\x0a\x08\x1d\x27\xee\xc9\x34\x3b\x47\xde\x73\x29\x6b\x4a\xa9\x42\xb8\x0a\x46\x8a\xb2\x16\xed\xb8\xa9\x77\x68\x2d\x47\xe9\x1f\x7e\xfa\x53\x78\x6c\xc4\x9e\x1e\xab\x1d\x8e\xfb\xf8\xfe\xf2\x8c\x0f\x07\x00\x89\x6d\xaa\x35\x12\x14\xaf\x77\x3c\x36\xf5\xc2\x90\xa0\xcb\xc2\xfc\xfe\x59\xf8\xf5\xa9\x6e\xf0\xd9\xec\x9b\xbf\x99\x55\xda\x9b\x97\xfb\xfc\x0a\x00\x00\xff\xff\xb6\x0e\x61\x8e\x3b\x01\x00\x00"

func idtablestakingDelegationGet_delegator_stakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_stakedCdc,
		"idTableStaking/delegation/get_delegator_staked.cdc",
	)
}

func idtablestakingDelegationGet_delegator_stakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_stakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_staked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0xa3, 0x50, 0xb5, 0xe3, 0xfd, 0x6a, 0x86, 0xd8, 0xd, 0x25, 0x9d, 0x1, 0xff, 0xb6, 0x29, 0x19, 0xea, 0xb3, 0x5e, 0x31, 0x71, 0x98, 0xc9, 0x61, 0x24, 0x8c, 0xc6, 0x53, 0x15, 0xa5, 0xee}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\x35\x20\x2d\xa8\x78\x28\x78\x0b\x85\x9c\xdb\xfc\x80\xe9\x66\x36\x5d\xb2\x99\x29\xbb\x13\x14\xc4\xff\x2e\x31\x18\x45\x3d\x2d\xfb\xe6\xf1\x3d\xbe\x38\xde\x34\x1b\x8e\x49\x5f\x9a\xfa\x4c\x97\xc4\x27\xa3\x21\x4a\x8f\x90\x75\xc4\xe6\xef\x61\xe3\xdc\x7e\x8f\xf3\x35\x16\x14\x9f\xe3\xcd\x90\xd9\xa6\x2c\x05\x76\x65\x5c\x28\x91\x78\x86\x06\x4c\x92\xd4\x0f\xdc\xc1\x74\x60\x29\x73\x44\xe8\x38\x71\x4f\xa6\xd9\x39\xf2\x9e\x4b\xd9\x52\x4a\x15\xc2\x24\x18\x29\xca\x56\xb4\xe3\xa6\x3e\xe0\x64\x39\x4a\x7f\xf7\xdd\x9f\xc3\xb6\x11\x7b\xb8\xaf\x0e\x68\x8f\xf1\xf5\xe9\x11\x6f\x0e\x00\x12\xdb\x5c\x6b\x24\x28\x9e\xff\x31\xd9\xd5\x2b\x43\x82\xae\x0b\xcb\xfb\x6b\xe1\xc7\xa7\xfa\x84\x2f\x6e\x5f\xfc\xdd\xa2\xd2\x4a\x31\x1a\xb8\x73\xef\x1f\x01\x00\x00\xff\xff\x17\x71\xde\xe9\x3f\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstakedCdc,
		"idTableStaking/delegation/get_delegator_unstaked.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xc8, 0x77, 0xab, 0xbb, 0xa7, 0xd3, 0xbf, 0xfd, 0x5a, 0xfa, 0x9a, 0xce, 0x3f, 0xb2, 0x23, 0x98, 0x64, 0x8b, 0x20, 0x2a, 0x9f, 0x26, 0xb6, 0x78, 0xe5, 0xc, 0x1a, 0x6f, 0xa7, 0xf9, 0xcf}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x9e\xba\x20\x2d\xa8\x78\x28\x78\x5b\x0a\x39\xb7\xfb\x03\xa6\xe9\x64\x1b\x9a\x9d\x29\xc9\x2c\x0a\xe2\x7f\x97\x75\x6d\x15\xf5\x14\xf2\xe6\xf1\x3d\xbe\x34\x5c\xb4\x18\xb6\x59\x5f\x7c\xbb\xa7\x43\xe6\x9d\xd1\x39\x49\x8f\x58\x74\xc0\xe2\xef\x61\xe1\xdc\x7a\x8d\xfd\x29\x55\xd4\x50\xd2\xc5\x50\xd8\xc6\x22\x15\x76\x62\x1c\x28\x93\x04\x86\x46\x8c\x52\xbf\x50\xa6\x67\x96\x3a\x65\x84\x23\x67\xee\xc9\xb4\x38\x47\x21\x70\xad\x4b\xca\xb9\x41\x1c\x05\x03\x25\x59\x8a\x1e\xd9\xb7\x1b\xec\xac\x24\xe9\xef\xbe\xfb\x53\xd8\x79\xb1\x87\xfb\x66\x83\x6e\x9b\x5e\x9f\x1e\xf1\xe6\x00\x20\xb3\x4d\x35\x2f\x51\xf1\xfc\x8f\xca\xaa\xbd\x31\x24\xea\x6d\x61\x7e\x7f\x2d\xfc\xf8\x34\x9f\xf0\x59\xee\xca\x5f\xcd\x2a\xdd\x55\xcd\xbd\x7f\x04\x00\x00\xff\xff\x4e\x43\x93\xce\x41\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstakingCdc,
		"idTableStaking/delegation/get_delegator_unstaking.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstakingCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0x24, 0x1a, 0xd4, 0x50, 0x1c, 0x82, 0xa3, 0x78, 0x5f, 0xcf, 0x98, 0x34, 0xf2, 0x69, 0x64, 0x7d, 0x4e, 0xb2, 0xf8, 0x97, 0x2b, 0x6d, 0xd5, 0x4d, 0x7f, 0x79, 0x31, 0xfb, 0xa5, 0x97, 0xda}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstaking_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\x35\x20\x2d\xa8\x78\x28\x78\x0b\x85\x5c\x6d\xf2\x03\xa6\xc9\x6c\xba\x74\x33\x53\x77\x27\x28\x88\xff\x5d\xd2\x68\x14\xf5\xb4\xec\x9b\xc7\xf7\xf8\xc2\x70\xd1\x64\xd8\x47\x7d\xa9\xca\x9a\x8e\x91\x0f\x46\xe7\x20\x3d\x7c\xd2\x01\xab\xbf\x87\x95\x73\xdb\x2d\xea\x53\xc8\xc8\x6d\x0a\x17\x43\x62\x1b\x93\x64\xd8\x89\x71\xa4\x48\xd2\x32\xd4\x63\x94\xfc\x89\x32\x3d\xb3\xe4\x29\x23\x74\x1c\xb9\x27\xd3\xe4\x1c\xb5\x2d\xe7\xbc\xa6\x18\x0b\xf8\x51\x30\x50\x90\xb5\x68\xc7\x55\xb9\xc3\xc1\x52\x90\xfe\xe6\xbb\x3f\x85\x4d\x25\x76\x77\x5b\xec\xd0\xec\xc3\xeb\xc3\x3d\xde\x1c\x00\x44\xb6\xa9\x56\x89\x57\x3c\xfe\xa3\xb2\x29\x17\x86\x78\x5d\x16\xe6\xf7\xd7\xc2\x8f\x4f\x71\x85\xcf\x72\x5f\xfc\xcd\xac\xf2\xc4\xcf\x23\x67\xe3\xae\xd6\xe6\x6a\xc9\xee\xfd\x23\x00\x00\xff\xff\x1d\xef\xbb\x1e\x4a\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstaking_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstaking_requestCdc,
		"idTableStaking/delegation/get_delegator_unstaking_request.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstaking_requestCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstaking_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaking_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xe, 0x2e, 0xcf, 0x7d, 0x6e, 0x43, 0x3d, 0x3f, 0x1c, 0x19, 0x96, 0x15, 0x58, 0x75, 0x47, 0x8, 0x3c, 0xc1, 0xd, 0x7, 0x76, 0x5f, 0x45, 0x84, 0xc5, 0x71, 0xa6, 0x4e, 0xc1, 0x3, 0x6a}}
	return a, nil
}

var _idtablestakingDelegationRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x91\x0f\x11\x48\x31\x5c\xaa\x1e\x10\x4d\x14\xd9\xb2\x14\xa9\x4a\xa3\x3a\x6d\xce\x03\x0c\xb0\x35\xec\xa0\x61\x28\x95\x22\xff\xf7\x6a\x71\xb2\xc1\xad\x2f\xd9\xcb\xda\xec\x9b\x99\xef\xcd\x33\x5d\xcf\xa2\xb0\x6b\x79\xba\xdf\x3e\x61\xde\xd2\x5e\xf1\x60\x6c\x0d\x95\x70\x07\xab\xff\x1f\x56\xc1\xa2\xe6\x89\x0f\x64\x17\xd2\xf9\xff\xbb\x62\xb4\xb5\xc9\x5b\x3a\x53\x2d\xbf\xad\x82\x40\x05\xed\x80\x85\x1a\xb6\xa1\xe5\x92\xee\xb7\x29\xec\x55\x8c\xad\xaf\x01\x3b\x1e\xad\xa6\xf0\x63\x67\xfe\x7c\xfe\x14\xc1\x4b\x10\x00\x00\xf4\x42\x3d\x0a\x85\x58\x14\x9a\xc2\xdd\xa8\xcd\x5d\x51\x38\xa5\x57\xb8\xd3\x92\x42\xf5\x86\xf4\x9d\x2a\xf8\x02\xae\x20\xce\x59\x84\xa7\x0c\x47\x6d\xc2\x33\x98\xf8\xd9\x68\x53\x0a\x4e\xce\x6c\x04\x57\xde\x4f\xfc\x13\xc7\x56\x6f\x42\x67\x20\x85\x64\x50\x16\xac\x29\xf1\xcd\xe7\xe7\xc8\x0f\x76\xe7\xf6\x16\x7a\xb4\xa6\x08\x57\x1b\x1e\xdb\x12\x2c\x2b\x9c\x06\x83\x50\x45\x42\xb6\x20\x50\x86\xdd\xd7\x6f\xcf\x30\xd7\xaf\xa2\x77\xf4\x24\x81\x8d\x10\x2a\x01\x82\xa5\x09\x4a\x6a\xa9\x46\x65\x01\xce\x7f\x51\xa1\x50\xb1\x80\x36\x04\x6e\x61\x67\x86\x2d\x4d\x5b\x2f\xce\xd6\x17\x72\x8d\x85\x6a\x33\x28\xc9\xc3\x42\xea\x37\x7f\xba\xaf\x41\x9d\xaf\x61\xc3\x5d\x67\x54\xa9\x4c\x21\x5b\x2f\x77\x19\x4f\xaf\xab\x0a\xdf\x22\x3a\xdd\xd1\xb9\x89\xbd\xb2\xd0\x0c\xfa\xaf\x03\xaf\x9a\x23\x19\xf0\x37\x85\xd9\x7a\x09\xef\x10\xd2\x4b\xf8\x5e\xb1\x3f\xc5\xf0\x88\xda\x2c\xa6\xce\xfd\x5a\x63\x0f\xd9\xd5\xcb\x85\xea\x07\x2e\xc9\x77\x78\x1c\xf3\xd6\x14\xc7\x9b\x30\xe9\xe7\x5f\x73\xa2\xaf\xca\x25\x08\x4a\x4d\xfa\x01\x18\xc7\x71\x0c\x82\xe3\xdf\x00\x00\x00\xff\xff\x87\x06\xc4\x34\x5c\x03\x00\x00"

func idtablestakingDelegationRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationRegister_delegatorCdc,
		"idTableStaking/delegation/register_delegator.cdc",
	)
}

func idtablestakingDelegationRegister_delegatorCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x98, 0xd5, 0xb2, 0x34, 0x10, 0x9d, 0x3a, 0x29, 0x0, 0x4f, 0xc9, 0xb3, 0x8c, 0x69, 0x7a, 0x16, 0xa2, 0xa0, 0x1, 0x57, 0x1f, 0x9c, 0xab, 0x7d, 0x33, 0x4c, 0xaa, 0x47, 0xaa, 0x76, 0xd9}}
	return a, nil
}

var _idtablestakingDelegationRegister_many_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6f\xba\x40\x10\xc5\xef\xfb\x29\x5e\x3c\x61\xfe\x8a\xfe\xaf\x44\x0f\x46\xdb\xc4\x4b\xd3\x44\xd3\x8b\xf1\x30\xe2\x08\x5b\x61\x97\x2c\xa3\xa6\x31\x7e\xf7\x66\x51\x29\xd0\xce\x09\x66\xe6\xcd\xbe\xf7\xd3\x79\x61\x9d\xe0\x35\xb3\x97\xe5\x62\x4d\xbb\x8c\x57\x42\x47\x6d\x12\x1c\x9c\xcd\xd1\xfb\x3d\xe8\xa9\x86\x66\x6d\x8f\x6c\x1a\xab\xd5\x7f\x4f\x29\x71\x64\x4a\x8a\x45\x5b\x13\x18\xbb\xe7\xe5\xa2\x8c\xb0\x59\x89\xd3\x26\xd9\x0e\x50\x90\xa4\xf7\x86\x75\x94\xf0\x3b\x49\xba\xed\xe3\xaa\x14\x00\x14\x8e\x0b\x72\x1c\x50\x1c\x4b\x84\xd9\x49\xd2\x59\x1c\xdb\x93\x91\x7a\xc3\xd7\x99\x1c\x34\xa6\x18\xff\xb4\x0e\xd6\x55\x97\xa1\xcd\xfd\x05\x5c\xeb\x99\xaf\xd1\x08\x73\xc7\x24\x0c\x82\xe1\x0b\xf6\x9c\x71\x42\x62\x1d\xec\xee\x93\x63\xa9\x0e\x48\xca\xf0\x8e\x5b\xca\x8c\xc5\x2b\x16\xb5\x60\x32\xfc\x03\x59\xe8\x38\xd1\xa5\xb0\x7b\x6b\xac\x3e\xe2\x47\x78\x60\xd8\xe8\xed\x00\xe2\x31\x95\x73\x9b\xe7\x5a\x84\xf7\x11\x26\xc3\x9a\x5e\x18\x57\x1e\x5f\xf2\x42\xbe\x3e\xe8\x94\x49\xd0\xef\xab\x6e\x0e\x0f\x8e\x2b\xaf\xdd\x10\xad\x4d\x8f\x30\x2c\xe9\xcc\xc1\x64\xd8\xf4\xef\x1d\x44\x15\xa3\xce\x69\x4f\x54\xe3\x1f\xfe\xb7\xbb\x07\x3f\x98\x3e\x23\x84\x19\x9b\x44\xd2\x0e\xdd\xa7\x7c\xdc\xea\xde\x54\xfb\xeb\xa6\xd4\xed\x3b\x00\x00\xff\xff\x82\x5d\xe0\xf4\x74\x02\x00\x00"

func idtablestakingDelegationRegister_many_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationRegister_many_delegatorsCdc,
		"idTableStaking/delegation/register_many_delegators.cdc",
	)
}

func idtablestakingDelegationRegister_many_delegatorsCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationRegister_many_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/register_many_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xc9, 0xb1, 0xc8, 0xf3, 0xd2, 0x6b, 0xd, 0x5e, 0x9e, 0x32, 0x40, 0x84, 0x52, 0xbd, 0x15, 0x2f, 0xe8, 0xd6, 0x34, 0x69, 0x82, 0x4e, 0x12, 0xef, 0x7b, 0xfd, 0xa3, 0xcf, 0x8d, 0x37, 0x72}}
	return a, nil
}

var _idtablestakingNodeNode_add_capabilityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xd1\x6a\xf2\x40\x10\x85\xef\xf7\x29\x06\x2f\x24\x81\x1f\xbd\x17\x15\xe4\x2f\x85\xde\xb4\x82\xbe\xc0\x64\x33\x26\xdb\xc4\x9d\x30\x99\x60\x8b\xe6\xdd\xcb\x46\x9a\x46\xac\x25\x73\x97\xec\x99\x73\xbe\x39\xee\x58\xb1\x28\x3c\x97\x7c\x7a\x79\xda\x63\x52\xd2\x4e\xb1\x70\x3e\x83\x83\xf0\x11\x26\xf7\x0f\x13\x33\xd8\xd9\x73\x41\x7e\x20\xed\xbe\x27\xc6\xcc\xe7\xb0\xcf\x5d\x0d\x2a\xe8\x6b\xb4\xea\xd8\x03\xa6\x69\x0d\x08\x55\x93\x94\xce\x82\xe7\x94\xc0\x62\x85\x89\x2b\x9d\x7e\x82\x32\xa0\x07\xb4\x96\x1b\xaf\x70\x72\x9a\x07\x13\xf4\x40\x1f\xae\xd6\x00\xf4\xca\x69\xc7\x40\x02\x9c\xbc\x93\x55\x63\x86\xf6\x67\x63\x00\x00\x2a\xa1\x0a\x85\x22\xb4\x56\x17\xb0\x69\x34\xdf\x5c\x3d\xe3\x6f\x45\x18\x77\x08\x51\x3a\x4b\x58\x84\x4f\x4b\x6c\x34\x8f\xee\x4f\x9d\x85\xc8\xb7\x8a\x04\x95\x25\x86\xe9\x03\xc5\x15\x6a\x1d\x85\x1a\x16\xbf\x54\x39\x10\xed\x94\x05\x33\xda\xa2\xe6\x31\xac\x56\xe0\x5d\x09\x97\x4b\x8f\x15\xa6\xe3\xca\x48\xff\xf7\xdd\x2c\xa7\xe7\x3f\x4d\xb7\x5d\xa3\xed\xfa\xd1\x05\x43\x55\x97\x3c\xb3\x39\xd9\x22\x8a\xfb\xdc\xf3\x0d\x81\x90\x36\xe2\xfb\x5f\xed\x4f\x6d\x1d\x5b\xe9\x7c\x31\x1a\xe9\xc6\x78\x24\xdf\xbf\x9b\x25\x45\xc9\x48\xc7\xf7\xda\x2f\x5f\xcf\x6b\x4d\xfb\x15\x00\x00\xff\xff\xe2\xbc\x02\x74\xe4\x02\x00\x00"

func idtablestakingNodeNode_add_capabilityCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeNode_add_capabilityCdc,
		"idTableStaking/node/node_add_capability.cdc",
	)
}

func idtablestakingNodeNode_add_capabilityCdc() (*asset, error) {
	bytes, err := idtablestakingNodeNode_add_capabilityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/node_add_capability.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0xe9, 0x19, 0x75, 0x7, 0x9, 0x2c, 0xc7, 0xb, 0x88, 0xb8, 0xbb, 0x46, 0x0, 0xb8, 0xbe, 0x24, 0xff, 0x89, 0xca, 0xe9, 0x6b, 0xce, 0x5a, 0x10, 0xcb, 0xaf, 0x70, 0xa8, 0x9b, 0xeb, 0x11}}
	return a, nil
}

var _idtablestakingNodeRegister_many_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x0c\x3a\x14\x99\xc6\x72\x0b\xa5\x94\xc5\x69\x30\x29\x86\x90\xd2\x96\x24\x6d\x0e\xc6\x87\xb5\x76\x64\x6d\x23\xed\x98\xd5\x28\x6a\x28\xf9\xef\x65\x57\xb6\xf5\x09\x9d\x83\x40\x6f\xde\xbc\xd9\x99\x79\xba\x38\x90\x65\x58\xe7\x54\xdf\x7c\x79\x90\xbb\x1c\xef\x59\x3e\x69\xb3\x87\xd4\x52\x01\xe1\x38\x11\x06\x9d\x9a\x07\x7a\x42\xd3\xa1\xfa\xff\x96\x51\x99\xbd\xde\xe5\xd8\x63\x75\xb1\x30\x08\xd8\x4a\x53\xca\x84\x35\x99\x28\x00\x00\xd0\xaa\x14\xb0\xb9\x67\xab\xcd\x7e\x7b\xe1\x21\x4b\x39\x3a\xf0\xe7\x8d\xe1\x4f\x47\xcc\x20\xd7\x64\xdd\x83\x56\x4a\x59\x2c\x4b\x1c\x95\xb5\x94\x5b\x7c\x19\x65\xcb\x66\x9c\xa9\x94\x2c\xa8\x32\xec\x3b\xae\xf5\x9f\x8f\x1f\x8e\xf0\x41\x72\xd6\x70\xc9\xca\x3d\xfe\x90\x9c\x6d\x83\x19\xfc\x0d\x9a\xac\xc5\x83\xb4\x18\xc9\x24\x61\x01\xab\x8a\xb3\x55\x92\x38\x9d\x33\xc3\xc5\xb3\xb4\xa0\xe1\x12\xde\xb5\x50\x4a\xd6\x4b\x83\x36\x4d\x8b\x2e\xdf\x45\x8e\x0c\xe9\x69\xb9\x77\x98\xc2\x25\xb8\x26\xf1\x8e\xac\xa5\x7a\x29\x2b\xce\xa2\xde\x5a\xe3\x47\xcd\x99\xb2\xb2\x76\x67\x9b\xc1\x9b\xf3\x65\xe2\x5f\xb2\xca\xf9\x73\xe4\x4e\x21\x60\x51\x36\x83\x2c\xce\xe2\x3e\x3d\xeb\x35\x77\x71\x75\x05\x07\x69\x74\x12\x85\xd7\x54\xe5\x0a\x0c\x31\x34\xcd\xc1\x62\x8a\x16\x4d\x82\xc0\x04\xeb\xaf\xdf\x1f\xc1\x6b\x84\xb3\xf1\x08\xec\x3a\x94\xd7\x54\x14\x9a\x19\x15\x2c\xe7\xbd\xa9\xe2\xfa\xf8\xe8\xa8\x59\xbf\x38\x9d\x61\xa3\xb7\x13\x6a\x86\x94\x77\x24\x5a\x27\x34\xb6\x69\x2c\x95\xfa\x46\x0a\xef\x30\x21\xab\xa2\xd1\x4c\x5a\x09\x67\xb5\x8d\x3e\x1e\xb7\x1b\xce\x6f\xa2\x71\xdd\x64\x7e\xe4\x3d\x31\x65\xc7\xff\x94\xde\xe2\x8b\x18\x58\x74\xb2\xa2\xf5\xa9\xe8\x7a\x76\x92\x3b\x58\xb1\x80\xe5\x7c\x00\xf5\x4a\x06\x6b\x5d\x2c\xc0\x59\x1b\x81\x33\xf4\xfb\x05\xda\xfd\xc6\x84\x7b\x24\xef\xbc\x52\x3e\x63\xb4\x9c\xb7\x37\xb8\x00\x26\xe1\xdd\x3b\xd0\x74\x5e\xd7\xf0\x16\xde\x9f\xd1\xd7\xa0\xf9\x06\xaf\xff\x02\x00\x00\xff\xff\xb8\x6b\xa8\xa9\x7c\x04\x00\x00"

func idtablestakingNodeRegister_many_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRegister_many_nodesCdc,
		"idTableStaking/node/register_many_nodes.cdc",
	)
}

func idtablestakingNodeRegister_many_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRegister_many_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/register_many_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0xdd, 0xd, 0x23, 0x8a, 0x8f, 0xa2, 0x92, 0xf, 0x9e, 0xed, 0xb9, 0xf9, 0xfd, 0x52, 0x80, 0xb3, 0xbc, 0xcd, 0x89, 0xea, 0x8, 0x21, 0xee, 0x71, 0xbf, 0x3b, 0x72, 0x68, 0xa5, 0xda, 0x19}}
	return a, nil
}

var _idtablestakingNodeRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdd\x6a\xdb\x4c\x10\xbd\xd7\x53\x0c\xbe\x08\x32\x38\xf6\xcd\xc7\x47\x11\x4e\x42\x48\x09\x84\x96\x26\xe4\xa7\xb9\x5e\xef\x8e\xad\x6d\xd6\x3b\x62\x76\x54\x35\x84\xbc\x7b\x59\x29\xb6\xb4\xc8\x0d\x89\x2e\x64\xef\xcc\x99\x1f\x9d\x73\xd6\x6e\x2b\x62\x81\x4b\x47\xcd\xd5\xd7\x7b\xb5\x72\x78\x27\xea\xc9\xfa\x0d\xac\x99\xb6\x30\x19\x27\x26\xd9\xa0\xe6\x9e\x9e\xd0\x0f\xa0\xed\xb9\x47\xd4\x7e\x63\x57\x0e\x13\xd4\x30\x36\xc9\xb2\xc5\x02\xee\x4b\x1b\x40\x58\xf9\xa0\xb4\x58\xf2\xa0\x19\x95\x60\x00\x05\x1e\x1b\xf0\x64\x10\x82\x70\xad\x05\x68\xf5\x0b\xb5\xc4\x22\xe5\x0d\xd4\x95\x69\x71\x52\x22\x54\x4c\x15\x05\x34\x70\x65\xd0\x8b\x95\x67\x68\x97\xce\xb2\x41\xe3\x3c\x03\x00\xb0\xa6\x80\x3b\x61\xeb\x37\xb3\xf6\xcc\xe4\xb0\x80\x87\x2b\x2f\x5f\xba\x80\x47\x69\x88\xe3\xb7\x9e\x1b\xc3\x18\x42\x8a\xef\xd3\xdf\xf0\x39\x4d\x85\x8e\xa2\x51\x5c\x6d\xa9\xf6\x52\xc0\xc3\xa5\xfd\xf3\xff\x7f\xd9\x14\x5e\xb2\x36\xee\x50\x60\xbd\xa3\xed\x16\xd7\x05\xa8\x5a\xca\x3c\xe1\x68\xfe\x68\xa5\x34\xac\x9a\xf8\x39\x53\x38\xda\xd3\x3c\xff\xa9\x6a\x27\x5d\xa3\x8a\xb1\x52\x8c\xb9\xd2\x5a\x0a\x38\xaf\xa5\x3c\xd7\x3a\xce\xdc\x8f\x6a\xd7\x43\xb7\x9e\x0f\xe7\xc1\x09\xc4\x8a\xf9\x8a\x98\xa9\x59\x7e\x7a\xf8\x69\x1e\x45\x2d\x60\x11\x84\x58\x6d\x70\xb1\x6f\xde\xa6\xa7\xfb\xc9\xf1\x39\x3b\x83\x4a\x79\xab\xf3\xc9\x05\xd5\xce\x80\x27\x81\x6e\x30\x30\xae\x91\xd1\x6b\x04\x21\xb8\xfc\x7e\xfd\x08\x6d\xfd\x64\xda\xef\x1e\xa9\x8a\x4e\x88\x2e\x44\x86\xe5\xf1\x01\xcf\xce\x95\x31\x3f\xc8\xe0\x2d\x6a\x62\x93\x27\xd3\xa3\xea\xd6\xcc\x92\x58\xa7\x7c\x7c\xa7\xf1\x03\x06\x18\x85\xfe\x55\xd1\x6a\x9f\x1c\x53\xe4\xd0\x22\xfd\xff\x14\x23\x91\xc1\x70\x41\xdb\xad\x15\x41\x53\xc0\xf2\x78\x24\xdd\xbc\x79\x53\x26\xdf\x99\xab\xfb\xed\x39\x1f\x90\x67\xd7\x07\x74\x1e\xd3\x17\xb9\xbb\xae\x90\x95\x10\xbf\x89\x7d\x00\xd1\x29\xb0\x93\xfe\x5d\xd0\x5d\x67\x8b\x1b\x25\xe5\x14\x4e\x4e\xc0\x5b\x37\xf4\x63\x7b\x35\xe2\x5e\x41\xfd\xc6\x7c\x79\xdc\xeb\x3b\x03\xa1\x4f\xf4\x3e\xd0\xd2\x59\xff\xb4\x3c\x7a\x79\xb7\xc5\x4d\xbd\x72\x56\xbf\x9e\xa6\x4e\x89\xcf\x07\xca\xe2\xe0\xd9\xa8\x50\x14\x6f\x50\x3e\xbe\x7a\xd2\xa0\xd7\xee\x15\xd0\x05\x84\x97\x24\x6d\x30\x08\xd3\xf3\xe0\x1a\xf4\xf8\xac\x7b\xbf\xfe\x0d\x00\x00\xff\xff\xbe\x03\xe3\x4b\xd0\x05\x00\x00"

func idtablestakingNodeRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRegister_nodeCdc,
		"idTableStaking/node/register_node.cdc",
	)
}

func idtablestakingNodeRegister_nodeCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0xa, 0x1e, 0x16, 0x39, 0xfa, 0xf8, 0x1d, 0xc5, 0xfd, 0x7b, 0x8f, 0x39, 0xb0, 0x20, 0x83, 0x7f, 0x8d, 0x3c, 0x80, 0xbe, 0xca, 0x7f, 0xe0, 0x5e, 0x87, 0x8f, 0x19, 0x74, 0xd4, 0x3b, 0xfe}}
	return a, nil
}

var _idtablestakingNodeRequest_unstakeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x6b\xa3\x70\x10\xc5\xef\x7e\x8a\x87\x87\x45\x2f\x7a\x59\xf6\x20\xbb\x1b\xc2\x2e\x81\x42\x69\x4b\xd3\x7c\x80\xc9\xdf\x31\xda\xe8\x7f\xec\x38\x36\x81\x92\xef\x5e\x8c\x89\xb4\xa4\x85\x1e\xfa\x2e\x73\x70\xe6\xf1\x7b\xbe\x7f\xd5\xb4\xa2\x86\x45\x2d\xbb\xab\xff\x0f\xb4\xae\x79\x69\xb4\xad\xfc\x06\x85\x4a\x83\xf0\xf2\x43\x18\x04\x81\x29\xf9\x8e\x9c\x55\xe2\x23\x6a\xa4\xf7\x96\x61\xb5\xa8\xf6\xbf\x7e\xc6\x78\x09\x02\x00\x48\x53\x5c\x8b\xa3\x1a\xcf\xa4\xd5\x70\x8e\x42\x14\x04\xe5\x82\x95\xbd\x63\x98\xc0\x4a\x86\x97\x9c\x21\xeb\x47\x76\x76\x3c\xac\xd9\xd0\x19\x6d\x59\xef\xb9\xc8\x40\xbd\x95\xd1\x25\x45\x72\x23\x39\xdf\xb6\xac\x64\xa2\x31\x7e\x7c\xb2\xb1\x3c\x1a\x8d\x44\xad\x72\x4b\xca\x11\x39\x67\x19\xe6\xbd\x95\x73\xe7\x06\xf6\x81\x19\x27\xa5\x29\xd6\xa2\x2a\xbb\xaf\xa0\x0e\xea\xb8\x2e\x92\x89\x17\x7f\x30\xd8\x27\xa3\xc7\xef\xef\x80\xff\x1b\x0d\x4d\x64\x1f\x54\xf4\x66\x69\x69\xa2\xb4\xe1\x3b\xb2\x32\x9e\xd0\x06\xcd\x66\x68\xc9\x57\x2e\x0a\xff\x49\x5f\xe7\xf0\x62\xe7\x80\xef\xe2\x75\xa7\xd6\x29\x6f\x2a\x1f\xc6\xe3\x1f\x3b\x8c\x83\xf7\xec\x7a\xe3\x73\xb3\x97\xa9\x13\xe5\xa7\x9e\x3b\x5b\xf9\x93\xcd\xf4\x28\xc6\x39\xd9\x1d\x5e\x03\x00\x00\xff\xff\x47\x2f\x90\xdd\x6f\x02\x00\x00"

func idtablestakingNodeRequest_unstakeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRequest_unstakeCdc,
		"idTableStaking/node/request_unstake.cdc",
	)
}

func idtablestakingNodeRequest_unstakeCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRequest_unstakeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/request_unstake.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x5f, 0x13, 0xcd, 0xff, 0x5a, 0x6d, 0xce, 0x6e, 0xca, 0xd9, 0xf1, 0x4f, 0xc1, 0x68, 0xea, 0xc2, 0xf4, 0x81, 0xd8, 0x17, 0xb8, 0xee, 0x39, 0xe7, 0x88, 0x7e, 0x11, 0xb1, 0xfe, 0xea, 0x37}}
	return a, nil
}

var _idtablestakingNodeStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x8e\xd3\x40\x0c\x86\xef\x79\x0a\x2b\x07\x94\x1c\x48\x2e\x88\x43\xb5\xb0\x5a\x81\x2a\x21\xad\x76\x11\x5d\xd8\xb3\x3b\x71\x9a\xa1\xd3\x71\xe4\x38\x74\x25\xb4\xef\x8e\x26\xd3\x84\x54\x29\x12\xa0\x9d\xcb\xb4\xb1\xfd\xe7\xff\x6c\xc7\x1e\x5a\x16\x85\xb5\xe3\xe3\xa7\x8f\x0f\xb8\x75\xb4\x51\xdc\x5b\xbf\x83\x5a\xf8\x00\xe9\x32\x90\x26\xb3\x9a\x07\xde\x93\x9f\xa5\x0e\xff\x7f\x67\xf4\x7e\x67\xb7\x8e\xce\xb2\xe6\xcf\xd2\x24\x51\x41\xdf\xa1\x51\xcb\x3e\xc3\x03\xf7\x5e\x57\xf0\x75\x6d\x9f\xde\xbe\xc9\xe1\x67\x92\x00\x00\x94\x25\xdc\xb2\x41\x07\x3f\x50\x6c\x70\x02\x35\x0b\x20\x08\xd5\x24\xe4\x0d\x81\x32\x68\x43\xe0\xb9\x22\xe0\xed\x77\x32\x3a\x14\x3a\x52\xe8\x14\xf7\x24\x5f\xa8\x5e\x01\xf6\xda\x64\x4b\xa0\xe2\x8e\x2b\xba\x6f\x49\x50\x59\x72\x78\xf5\x87\x8c\xcd\x20\x94\x4c\xc2\xf5\x88\x3b\xd3\x9e\xb3\x15\x8f\x56\x9b\x4a\xf0\x18\x84\x4e\xb2\x31\xf0\x0d\x7b\xa7\x51\xa8\x15\x6a\x51\x28\x43\x63\x74\x05\x37\xbd\x36\x37\xc6\x84\x26\x04\x78\x38\x9d\xb2\x84\x2d\x8b\xf0\xf1\x6f\x98\xc3\xe9\xc8\xd5\xc5\x04\x0e\xef\x20\xc8\x17\x51\xe3\xea\x25\xba\xf0\x3e\x0b\xc3\x5c\x5d\x58\x9b\x59\xd2\x46\x59\x70\x47\x9f\x51\x9b\x7c\xb2\x16\xce\xf5\x35\xb4\xe8\xad\xc9\xd2\x0f\xdc\xbb\x0a\x3c\xeb\x08\x78\x86\xd7\x9d\x36\x11\xab\x83\xf5\x69\x9e\x9c\xf3\xcd\xfb\x7f\x11\xf1\x1f\x86\x31\xf2\x94\x5d\xf4\x5c\x4e\xe2\x43\xf8\xff\xec\xaf\x6f\xef\x1f\x61\xa8\x1f\xbd\x3f\xc7\x8b\x9e\xc8\xf4\x4a\xe3\x7a\x2f\x27\x16\x7f\xdd\x51\xb4\xd0\x65\x57\xaf\x17\xc4\xc5\xf1\x04\x34\x7d\x34\xf1\xce\xa7\x57\x3d\xff\x0a\x00\x00\xff\xff\xc0\x27\x6e\x53\xdb\x03\x00\x00"

func idtablestakingNodeStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_new_tokensCdc,
		"idTableStaking/node/stake_new_tokens.cdc",
	)
}

func idtablestakingNodeStake_new_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xe9, 0x39, 0x6d, 0xfe, 0xbe, 0xb2, 0x52, 0x5b, 0x62, 0x2a, 0x2f, 0x58, 0x96, 0x49, 0xbc, 0x7a, 0x5c, 0x51, 0x35, 0x1f, 0x8a, 0x56, 0xc, 0x58, 0x29, 0x42, 0x94, 0xb7, 0x48, 0x66, 0x1a}}
	return a, nil
}

var _idtablestakingNodeStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xeb\x50\x10\x85\xf7\xf9\x15\x87\x2c\x1e\xc9\xa6\xd9\x3c\xde\x22\x3c\x2d\x45\x29\x08\xa2\xd2\xd6\x1f\x30\xbd\x99\x34\xb1\xc9\x9d\x30\x99\xd8\x82\xf4\xbf\x4b\x9a\x36\x28\x55\x70\xe1\x6c\xe6\xc2\x9d\x39\x7c\xe7\x9e\x5b\xd6\x8d\xa8\x61\x5e\xc9\xee\xee\x76\x45\xeb\x8a\x97\x46\xdb\xd2\x6f\x90\xab\xd4\x08\x2f\x2f\xc2\x20\x08\x4c\xc9\xb7\xe4\xac\x14\x1f\x51\x2d\x9d\xb7\x14\xcf\xf3\x72\xff\xef\x6f\x8c\xb7\x20\x00\x80\x24\xc1\xbd\x38\xaa\xf0\x4a\x5a\xf6\xeb\xc8\x45\x41\x50\xce\x59\xd9\x3b\x86\x09\xac\x60\x78\xc9\x18\xb2\x7e\x61\x67\xc7\xc5\x8a\x0d\xad\xd1\x96\x75\xc1\x79\x0a\xea\xac\x88\x2e\x29\x26\x0f\x92\xf1\x63\xc3\x4a\x26\x1a\xe3\xcf\x37\x13\xcb\xa3\xd0\x40\xd4\x28\x37\xa4\x1c\x91\x73\x96\x62\xd6\x59\x31\x73\xae\x67\xef\x99\x71\xaa\x24\xc1\x5a\x54\x65\xf7\x13\xd4\xbe\x5a\xae\xf2\xc9\xc8\x8b\x2b\xf4\xf2\x93\x41\xe3\xff\x6f\xc0\x5f\x47\x7d\x12\xe9\x17\x11\x7d\x18\x5a\x9a\x28\x6d\xf8\x89\xac\x88\x47\xb4\xbe\xa6\x53\x34\xe4\x4b\x17\x85\x37\xd2\x55\x19\xbc\xd8\xd9\xe0\x27\x7b\xed\x29\x75\xca\xea\xd2\x87\xf1\xf0\x62\x87\xa1\xf1\x9e\x5d\x67\x7c\x4e\xf6\xd2\xf5\x70\x5a\xf0\x8e\x34\xe3\x6c\x25\x5b\xf6\xed\xf8\x2f\x86\x3e\x2a\x1e\xde\x03\x00\x00\xff\xff\xa5\x19\x83\x3a\x72\x02\x00\x00"

func idtablestakingNodeStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_rewarded_tokensCdc,
		"idTableStaking/node/stake_rewarded_tokens.cdc",
	)
}

func idtablestakingNodeStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xf6, 0xac, 0xe8, 0x52, 0xe, 0x2a, 0x37, 0x55, 0x82, 0x7a, 0x7d, 0x32, 0xf0, 0xa4, 0x7c, 0xf9, 0x3d, 0x94, 0xe0, 0x66, 0xac, 0xca, 0xa, 0xd4, 0xec, 0xc1, 0x58, 0x81, 0xd4, 0x14, 0xdf}}
	return a, nil
}

var _idtablestakingNodeStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xfb\x40\x10\xc5\xef\xf9\x14\x8f\x1c\xfe\x24\x97\xe6\xf2\xc7\x43\x50\x4b\x51\x0a\x82\x28\xd8\xf6\x03\x4c\x37\x93\x36\x36\xd9\x09\x93\x89\x2d\x48\xbf\xbb\xa4\xdb\x06\xa4\x08\x1e\x9c\xcb\x2c\xcc\xce\xe3\xf7\xf6\x6d\xd5\xb4\xa2\x86\x79\x2d\xfb\xa7\xc7\x25\xad\x6b\x5e\x18\xed\x2a\xbf\x41\xa9\xd2\x20\xbe\x1e\xc4\x51\x14\x99\x92\xef\xc8\x59\x25\x3e\xa1\x46\x7a\x6f\x39\x56\xf3\xea\x70\xf3\x3f\xc5\x67\x14\x01\x40\x96\xe1\x59\x1c\xd5\xf8\x20\xad\x86\x75\x94\xa2\x20\x28\x97\xac\xec\x1d\xc3\x04\xb6\x65\x78\x29\x18\xb2\x7e\x67\x67\xa7\xc5\x9a\x0d\x9d\xd1\x8e\xf5\x8d\xcb\x1c\xd4\xdb\x36\xb9\xa6\x98\xbc\x48\xc1\xaf\x2d\x2b\x99\x68\x8a\x7f\x3f\xdc\x58\x9c\x84\x02\x51\xab\xdc\x92\x72\x42\xce\x59\x8e\x59\x6f\xdb\x99\x73\x03\xfb\xc0\x8c\x73\x65\x19\xd6\xa2\x2a\xfb\xdf\xa0\x0e\xd5\x71\x5d\x4e\x46\x5e\xdc\x61\x90\x9f\x04\x8d\xdb\xbf\x80\xbf\x4f\x86\x24\x72\x64\x9d\x89\xd2\x86\xb3\xb2\x96\x7d\x18\xa5\x23\xc5\x50\xd3\x29\x5a\xf2\x95\x4b\xe2\x07\xe9\xeb\x02\x5e\xec\xe2\xe5\x9b\x93\xee\x1c\x30\x15\x4d\xe5\xe3\x34\x3c\xce\x31\x34\x3e\xb0\xeb\x8d\x2f\x21\x5e\x1b\x0c\xa7\x95\x3f\xb5\x62\x29\x3b\xf6\xdd\xf8\x05\x42\x1f\x15\x8f\x5f\x01\x00\x00\xff\xff\x41\xee\x38\xc1\x5d\x02\x00\x00"

func idtablestakingNodeStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_unstaked_tokensCdc,
		"idTableStaking/node/stake_unstaked_tokens.cdc",
	)
}

func idtablestakingNodeStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x32, 0xcc, 0x35, 0xda, 0x79, 0xb7, 0xea, 0x10, 0x45, 0x27, 0x4a, 0x6a, 0xb2, 0xac, 0x2e, 0x68, 0x7c, 0x8, 0x81, 0x8c, 0x13, 0x4c, 0xc7, 0x50, 0x6c, 0xf8, 0x2c, 0x9f, 0x27, 0x22, 0x7c}}
	return a, nil
}

var _idtablestakingNodeUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x8f\x1c\x24\xb9\xa4\xf7\xa2\x96\xa2\x08\x82\xa8\x58\xff\xc0\x74\x33\x69\x62\xb7\x3b\x61\x32\x6b\x85\xd2\xff\x2e\x49\xda\xa2\x54\xc1\x83\x73\xd9\x85\x7d\x33\xfb\xbd\x79\xcd\xa6\x15\x35\xdc\x79\xd9\xde\xdf\xbe\xd2\xd2\xf3\xc2\x68\xdd\x84\x15\x2a\x95\x0d\xd2\xf3\x87\x34\x49\x12\x53\x0a\x1d\x39\x6b\x24\x60\x97\x24\x00\x30\x99\xe0\x41\x1c\x79\xbc\x93\x36\xbd\x1c\x95\x28\x08\xca\x15\x2b\x07\xc7\x30\x81\xd5\x8c\x20\x25\x43\x96\x6f\xec\x6c\x68\xf4\x6c\xe8\x8c\xd6\xac\x2f\x5c\x4d\x41\xd1\xea\xec\xfc\xd7\xe2\x51\x4a\x7e\x6a\x59\xc9\x44\x73\x5c\xfc\xa2\x58\x0c\x83\x46\xa2\x56\xb9\x25\xe5\x8c\x9c\xb3\x29\xe6\xd1\xea\xb9\x73\x12\x83\xe5\xd8\x0d\x82\x03\xf6\x52\x54\x65\xfb\x17\xd4\xbe\x3a\xf6\x55\x71\xe2\xc5\x15\xfa\xf1\xc5\x38\xe3\xf2\x3f\xe0\xaf\xb3\x7e\xf3\xd3\x1f\x22\xf9\x22\x5a\x98\x28\xad\xf8\x99\xac\xce\x4f\x68\x7d\xcd\x66\x68\x29\x34\x2e\x4b\x6f\x24\xfa\x12\x41\xec\x68\xf0\x9b\xbd\xee\x90\x32\x95\x9b\x26\xa4\xf9\xb8\xb1\xfd\x78\xf0\x07\xbb\x68\x7c\x4c\xf6\xdc\x75\x11\xc3\x70\x9f\x7b\x9f\x9d\x5a\xf7\x9f\x01\x00\x00\xff\xff\x3f\xfc\xd6\x90\x4b\x02\x00\x00"

func idtablestakingNodeUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeUnstake_allCdc,
		"idTableStaking/node/unstake_all.cdc",
	)
}

func idtablestakingNodeUnstake_allCdc() (*asset, error) {
	bytes, err := idtablestakingNodeUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x11, 0xa7, 0x24, 0xb8, 0xa4, 0xd9, 0x43, 0xd2, 0xb0, 0xd6, 0x87, 0x98, 0xb4, 0x70, 0x3f, 0x7f, 0xb3, 0x13, 0x38, 0x85, 0x97, 0x9b, 0x47, 0xfa, 0xca, 0x98, 0x30, 0xfa, 0x7d, 0xf8, 0x62}}
	return a, nil
}

var _idtablestakingNodeUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6a\xb3\x50\x10\x85\xf7\x3e\xc5\xc1\xc5\x8f\x6e\x74\x2f\x7f\x1b\x42\x4b\xa1\x50\xd2\x52\xfb\x02\x93\xeb\x18\x6d\xcc\x1d\x19\xc7\x5a\x28\x79\xf7\x62\x34\x21\x25\x2d\x74\xd1\xd9\x3a\x7e\x7c\xe7\x9e\xa9\x77\xad\xa8\xe1\xae\x91\xe1\xfe\xf6\x85\xd6\x0d\xe7\x46\xdb\xda\x6f\x50\xaa\xec\x10\x5e\x7e\x08\x83\xc0\x94\x7c\x47\xce\x6a\xf1\x91\xe7\x61\x59\x14\xca\x5d\x97\x21\x37\xad\xfd\x26\xc6\x47\x10\x00\x40\x9a\xe2\x41\x1c\x35\x78\x23\xad\x47\x02\x4a\x51\x10\x94\x4b\x56\xf6\x8e\x61\x02\xab\x18\x5e\x0a\x86\xac\x5f\xd9\xd9\xe1\xc7\x86\x0d\x9d\xd1\x96\xf5\x99\xcb\x0c\xd4\x5b\x15\x5d\x8a\x24\x2b\x29\xf8\xb1\x65\x25\x13\x8d\xf1\xef\x87\x8d\xfc\x00\x9a\x8c\x5a\xe5\x96\x94\x23\x72\xce\x32\x2c\x7b\xab\x96\xce\x49\xef\x6d\x74\xc6\x3c\x69\x8a\xb5\xa8\xca\xf0\x1b\xd5\x71\x3a\x6e\xca\xe4\xe4\x8b\x2b\x8c\xf8\x64\x62\xfc\xff\x0b\xf9\xeb\x68\x2c\x23\xfb\xa6\xa5\xb3\xa5\xdc\x44\x69\xc3\x4f\x64\x55\x7c\x52\x1b\x67\xb1\x40\x4b\xbe\x76\x51\x78\x23\x7d\x53\xc0\x8b\x1d\x03\x7e\x89\xd7\xcd\xc5\x53\xb1\xab\x7d\x38\x31\xf6\xd3\xbb\xf1\x3b\xbb\xde\xf8\x58\xec\x65\xe8\xa4\x6f\x0b\x32\x5e\xb1\x0d\xa2\x23\x65\xbe\x89\xb3\xf3\x88\x83\x99\xb8\xff\x0c\x00\x00\xff\xff\x06\xb1\xc3\xe1\x74\x02\x00\x00"

func idtablestakingNodeUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeUpdate_networking_addressCdc,
		"idTableStaking/node/update_networking_address.cdc",
	)
}

func idtablestakingNodeUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := idtablestakingNodeUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x92, 0x5f, 0x3b, 0xc7, 0xb1, 0x68, 0x85, 0x2c, 0xec, 0xce, 0x84, 0xb1, 0x54, 0xff, 0xc5, 0x59, 0x7f, 0x86, 0x6f, 0x40, 0xab, 0xb2, 0xc8, 0x30, 0xa3, 0xba, 0xdc, 0x23, 0xe9, 0xae, 0x9f}}
	return a, nil
}

var _idtablestakingNodeWithdraw_reward_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8b\x9c\x40\x10\xc5\xef\xfd\x29\x0a\x0f\x8b\x1e\xa2\x97\x90\x83\x6c\xb2\x2c\x09\x03\x81\x25\x1b\x76\x36\xc9\xb9\xa6\xbb\x5c\x3b\xa3\x5d\x52\x96\x71\x21\xec\x77\x0f\xea\x28\xce\x9f\x40\x08\x5b\x17\x91\xae\xf7\xfa\xfd\xba\xca\xd7\x0d\x8b\xc2\xa6\xe2\xfe\xf3\xa7\x47\xdc\x55\xb4\x55\xdc\xfb\xf0\x04\x85\x70\x0d\xd1\xf9\x41\x64\x56\x9a\x47\xde\x53\x58\xb5\x8e\xff\x91\x31\x46\x05\x43\x8b\x56\x3d\x87\x18\x6b\xee\x82\xe6\xf0\x6d\xe3\x9f\xdf\xbd\x4d\xe0\xb7\x31\x00\x00\x59\x06\x77\x6c\xb1\x82\x5f\x28\x7e\xb8\x00\x0a\x16\x40\x10\x2a\x48\x28\x58\x02\x65\xd0\x92\x20\xb0\x23\xe0\xdd\x4f\xb2\x3a\x0a\x2b\x52\x68\x15\xf7\x24\x0f\x54\xe4\x80\x9d\x96\xf1\x79\xce\xf4\x0b\x3b\xba\x6f\x48\x50\x59\x12\xb8\xfa\x4b\xc7\x76\x34\x32\x8b\x71\x31\x53\x8c\xde\x57\x0b\x54\xfa\x1d\xbb\x4a\xa7\xbe\x46\xa8\x41\xa1\x18\xad\xd5\x1c\x6e\x3b\x2d\x6f\xad\x1d\x18\x07\x36\x38\x54\x96\xc1\x8e\x45\xb8\xff\x17\xa4\xa1\x5a\xaa\x8a\x74\xe1\x82\xf7\x30\xd8\xa7\x93\xc7\xf5\x6b\x40\x7e\x88\x87\x41\xe5\x17\x86\xbd\x6a\xda\x2a\x0b\x3e\xd1\x57\xd4\x32\x59\xa2\x0d\x75\x73\x03\x0d\x06\x6f\xe3\xe8\x23\x77\x95\x83\xc0\x3a\x03\x1e\xe1\xb5\x87\xfd\x41\x57\xfb\x10\x25\xe6\x98\x6f\xfd\xbc\x27\x88\xa7\x6f\x3d\xc7\xcd\xda\x29\x52\xb6\x68\xc7\xe3\xff\x4b\xb7\xb9\xbb\xff\x01\xa3\x7e\x8e\xf6\x32\x7d\xe8\x99\x6c\xa7\x34\x2f\xe7\xc5\xc0\xa9\xa3\x86\x5b\xaf\x87\x60\xd7\x6f\x8e\x47\x96\xf6\x5e\x4b\x27\xd8\x3f\x50\x8f\xe2\xc8\x8d\xba\x76\xd9\xff\xe9\x9b\x2c\xf7\xbe\xfc\x09\x00\x00\xff\xff\x24\x3f\x85\x0a\x7d\x03\x00\x00"

func idtablestakingNodeWithdraw_reward_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeWithdraw_reward_tokensCdc,
		"idTableStaking/node/withdraw_reward_tokens.cdc",
	)
}

func idtablestakingNodeWithdraw_reward_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeWithdraw_reward_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/withdraw_reward_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x91, 0x3a, 0xb2, 0xf2, 0x3b, 0xef, 0xc5, 0xb2, 0xbf, 0x73, 0x31, 0xe4, 0x5f, 0x6c, 0xd0, 0x62, 0xb3, 0xcf, 0xeb, 0xa1, 0xef, 0xe9, 0x6a, 0x50, 0x75, 0x27, 0x2a, 0xb, 0x11, 0xff, 0xaa}}
	return a, nil
}

var _idtablestakingNodeWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8b\x9c\x40\x10\xc5\xef\xfd\x29\x0a\x0f\x8b\x1e\xa2\x97\x90\x83\x6c\xb2\x2c\x09\x03\x81\x25\x1b\x32\xbb\xc9\xb9\xa6\x2d\xd7\xce\x68\x97\x94\x65\x5c\x08\xfb\xdd\x83\xed\x28\xce\x9f\x40\x08\xdb\x97\x46\xbb\xde\xeb\xf7\xeb\x2a\xd7\xb4\x2c\x0a\x9b\x9a\x87\xcf\x9f\x1e\x70\x57\xd3\x56\x71\xef\xfc\x13\x94\xc2\x0d\x44\xe7\x07\x91\x59\x69\x1e\x78\x4f\x7e\x55\x1a\xbe\x23\x63\x8c\x0a\xfa\x0e\xad\x3a\xf6\x31\x36\xdc\x7b\xcd\xe1\x71\xe3\x9e\xdf\xbd\x4d\xe0\xb7\x31\x00\x00\x59\x06\x77\x6c\xb1\x86\x5f\x28\x6e\xbc\x00\x4a\x16\x40\x10\x2a\x49\xc8\x5b\x02\x65\xd0\x8a\xc0\x73\x41\xc0\xbb\x9f\x64\x35\x08\x6b\x52\xe8\x14\xf7\x24\xdf\xa8\xcc\x01\x7b\xad\xe2\xf3\x9c\xe9\x17\x2e\xe8\xbe\x25\x41\x65\x49\xe0\xea\x2f\x15\xdb\x60\x64\x16\xe3\x72\xa6\x08\xde\x57\x0b\x54\xfa\x1d\xfb\x5a\xa7\xba\x56\xa8\x45\xa1\x18\xad\xd5\x1c\x6e\x7b\xad\x6e\xad\x1d\x19\x47\x36\x38\xac\x2c\x83\x1d\x8b\xf0\xf0\x2f\x48\xe3\xea\xa8\x2e\xd3\x85\x0b\xde\xc3\x68\x9f\x4e\x1e\xd7\xaf\x01\xf9\x21\x1e\x1b\x95\x5f\x68\xf6\xaa\x68\xab\x2c\xf8\x44\x5f\x51\xab\x64\x89\x36\xae\x9b\x1b\x68\xd1\x3b\x1b\x47\x1f\xb9\xaf\x0b\xf0\xac\x33\xe0\x11\x5e\x77\x98\x1f\x2c\x1a\xe7\xa3\xc4\x1c\xf3\xad\x9f\xf7\x04\xf1\xf4\xad\xe7\xb8\x59\x37\x45\xca\x16\x6d\x38\xfe\xbf\x74\x9b\xbb\xfb\x1f\x10\xf4\x73\xb4\x97\x69\xa3\x67\xb2\xbd\xd2\x3c\x9c\x17\x03\xa7\x05\xb5\xdc\x39\x3d\x04\xbb\x7e\x73\xdc\xb2\x74\x70\x5a\x15\x82\xc3\xa3\x0f\xff\x8a\xa0\xeb\x96\xf9\x9f\xf6\x64\xb9\xf7\xe5\x4f\x00\x00\x00\xff\xff\x49\xb2\x7a\xa1\x7d\x03\x00\x00"

func idtablestakingNodeWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeWithdraw_unstaked_tokensCdc,
		"idTableStaking/node/withdraw_unstaked_tokens.cdc",
	)
}

func idtablestakingNodeWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0xec, 0xfc, 0xbe, 0xe6, 0x2b, 0x8f, 0x32, 0x31, 0x86, 0xda, 0x2d, 0xc5, 0xa9, 0x7e, 0x82, 0xa, 0x62, 0x4, 0xb6, 0xd6, 0x65, 0xb3, 0x74, 0x20, 0x68, 0x70, 0x6c, 0x9a, 0x81, 0xb5, 0x3f}}
	return a, nil
}

var _idtablestakingScriptsGet_approved_but_not_staked_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x31\x8f\x9b\x40\x10\x85\x7b\x7e\xc5\x8b\x2b\x68\xec\xde\x12\x45\x22\x2b\x92\xa5\x24\x8d\xdd\x59\x14\x6b\x18\xcc\xca\xcb\x0e\x99\x1d\x9c\x9c\x2c\xfe\xfb\x09\xf0\x01\x96\x4f\xb7\x05\x12\xbb\xdf\xe3\x7b\x8c\xd6\xd6\x0d\x8b\xe2\xa7\xe3\x7f\xfb\xdd\xd1\x9c\x1d\x1d\xd4\x5c\xad\xbf\xa0\x14\xae\xb1\x7a\x3d\x58\x45\xd1\x66\x83\x63\x65\x03\x42\x2e\xb6\x51\x08\x69\x2b\x3e\x40\x2b\x82\xb3\x41\xc1\x25\x3c\x17\xd4\xef\x18\x85\x11\x02\xfb\xe1\xd4\x34\x8d\xf0\x8d\x8a\x11\x3b\xb7\x8a\x82\xe1\x59\x91\xb7\x22\xe4\xd5\xbd\xa1\x32\x37\x82\xf2\x95\x7c\x40\x50\x73\xa5\x02\xe6\xcc\xfd\x5e\x45\xa8\xad\xb7\x75\x5b\x43\xe8\x6f\x6b\x85\x6a\xf2\xba\x8e\x4c\x9e\x53\x08\xb1\x71\x2e\x41\xd9\x7a\xd4\xc6\xfa\x38\xd9\xe2\x74\x50\xb1\xfe\x92\xe1\x1e\x01\x80\x23\x9d\xfc\xfb\x5d\x40\xfa\xc9\x4f\xaf\x2f\xa4\xdf\x1f\xcc\x2f\x1b\x34\x4e\xa6\xe8\xd8\xe5\xab\xe0\x61\x20\xfe\x70\x41\xfb\x5d\x88\x93\xe8\x35\xfa\xdb\x34\x5b\xdc\xc7\x5a\x5b\xfc\x60\x76\x1d\x52\xdc\xbb\x81\x2c\x59\x26\x12\xd6\x2f\x84\x63\xff\x7e\x2d\xbf\x74\xfa\x78\xc9\x90\x42\xa5\xa5\x81\xea\x66\x2d\xfd\x57\x31\x8f\x3a\x8b\x69\xa4\x38\x65\x93\x70\x1e\x48\xaf\x5c\x8e\x67\x96\xda\xf2\xd9\x3b\x53\x19\xbe\x8d\xea\x05\xdd\xaf\xa5\x79\x6d\x9a\x86\x7c\x11\xcf\xa9\x64\x62\xbb\x68\x7e\x8e\x97\xe8\x29\x1a\x75\xef\x01\x00\x00\xff\xff\x1f\x13\x7f\x5b\x9e\x02\x00\x00"

func idtablestakingScriptsGet_approved_but_not_staked_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_approved_but_not_staked_nodesCdc,
		"idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc",
	)
}

func idtablestakingScriptsGet_approved_but_not_staked_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_approved_but_not_staked_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0xa8, 0xd9, 0xd7, 0xa2, 0x3c, 0xd5, 0x82, 0xed, 0xbe, 0x41, 0xd5, 0xa4, 0x94, 0x1e, 0x60, 0x33, 0x2f, 0x2e, 0x61, 0x5a, 0x62, 0x82, 0xc9, 0x65, 0x58, 0xaf, 0xf, 0x89, 0x70, 0xdd, 0xec}}
	return a, nil
}

var _idtablestakingScriptsGet_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\x03\x41\x0c\x85\xef\xf3\x2b\x1e\x7b\xda\xbd\xb4\x77\x41\x8a\x28\x82\xe0\xad\xbd\x89\x87\x38\x9b\x6e\x43\x67\x67\x86\x24\xa3\x88\xf8\xdf\x65\x5b\x11\xc5\xe6\x9a\x7c\x79\xdf\x93\xb9\x16\x75\xdc\xa7\xf2\xf6\x70\xb7\xa3\x97\xc4\x5b\xa7\xa3\xe4\x09\x7b\x2d\x33\xba\xff\x8b\x2e\x84\xf5\x1a\xbb\x83\x18\x2c\xaa\x54\x87\xb2\x37\xcd\x06\x3f\x30\x62\x53\xe5\xec\xa0\x5a\xb5\xbc\xf2\x88\x24\xe6\x21\x50\x8c\x6c\xd6\x53\x4a\x03\xf6\x2d\x63\x26\xc9\xfd\x70\x85\xa7\xad\xab\xe4\xe9\x19\x1f\x01\x00\x12\xff\x90\x8f\x62\x8e\xeb\x0b\x62\xab\x89\xfd\xe6\xfb\xfb\x72\xd4\x0f\x27\x74\x99\xcd\x06\x95\xb2\xc4\xbe\xbb\x2d\x2d\x8d\xc8\x65\x91\xa3\xf1\xaf\xcd\xb9\x99\x79\x51\x9a\xb8\x1b\xc2\x09\x3f\x77\xf8\x1d\xbe\x3a\xf2\xbb\x85\xcf\xaf\x00\x00\x00\xff\xff\x00\x5c\x95\xe3\x21\x01\x00\x00"

func idtablestakingScriptsGet_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_approved_nodesCdc,
		"idTableStaking/scripts/get_approved_nodes.cdc",
	)
}

func idtablestakingScriptsGet_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xac, 0xf9, 0x96, 0xc5, 0x4, 0x35, 0x8f, 0xd3, 0xaf, 0xca, 0x92, 0x87, 0x91, 0x68, 0xe0, 0xfd, 0xe2, 0xfc, 0x80, 0x6b, 0x22, 0xa5, 0x41, 0x2, 0x1c, 0xa8, 0xb1, 0x19, 0x20, 0xe7, 0x1a}}
	return a, nil
}

var _idtablestakingScriptsGet_candidate_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xc1\x4a\x03\x41\x0c\x06\xe0\xfb\x3c\xc5\xcf\x9e\x76\x2f\xf6\x22\x22\xbd\xf4\x50\x11\x0a\xe2\xc5\xfa\x00\x71\x26\xdb\x0d\xce\x24\xcb\x4c\x16\x0f\xa5\xef\x2e\x6d\x15\x04\x9b\x4b\x20\xe1\xe7\xff\xa4\xcc\x56\x1d\xcf\xd9\xbe\x76\x4f\x7b\xfa\xc8\xfc\xe6\xf4\x29\x7a\xc0\x58\xad\xa0\xfb\xff\xe8\x42\x58\xad\xb0\x9f\xa4\xa1\xc5\x2a\xb3\xa3\xb2\x2f\x55\x1b\x7c\x62\x64\x29\xe2\x0d\xa3\x55\x44\xd2\x24\x89\x9c\xa1\x96\xf8\x7a\x63\x8a\x13\xaa\x65\x0e\x14\x23\xb7\xd6\x53\xce\x03\xc6\x45\x51\x48\xb4\x1f\xd6\x38\xbe\xef\xd4\x1f\xd7\x38\xaf\x87\xfb\x13\x8e\x01\xc0\x4f\xc5\x0d\xe6\xdd\x81\x7d\xfb\x5b\xf4\x6a\x89\x5f\x2e\x80\x7e\xb8\xc4\xce\xb3\xd9\x60\x26\x95\xd8\x77\x5b\x5b\x72\x82\x9a\x23\x1b\xa5\x3f\xbe\x2b\xba\x1b\xc2\xe9\x3b\x00\x00\xff\xff\xa1\x29\xc8\x31\x0f\x01\x00\x00"

func idtablestakingScriptsGet_candidate_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_candidate_limitsCdc,
		"idTableStaking/scripts/get_candidate_limits.cdc",
	)
}

func idtablestakingScriptsGet_candidate_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_candidate_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_candidate_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xa1, 0xa5, 0x45, 0xe1, 0x6a, 0x41, 0x4d, 0x33, 0x8d, 0xe9, 0x2a, 0x3f, 0x31, 0x86, 0xb6, 0x91, 0x74, 0xd1, 0xd9, 0x51, 0xe2, 0x22, 0x15, 0xb2, 0xcf, 0x5d, 0x6a, 0x5c, 0x5c, 0xd3, 0xa5}}
	return a, nil
}

var _idtablestakingScriptsGet_candidate_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x4e\xc4\x30\x10\x04\xd0\xde\x5f\x31\xba\x2a\x69\xb8\x16\xa5\x04\x84\x74\x12\xa2\xb9\xe3\x03\x8c\xb3\x49\x56\xd8\xbb\x96\x77\x23\x8a\x28\xff\x8e\x82\xa0\x82\x7a\x66\xf4\x86\x4b\xd5\xe6\x78\xce\xfa\x79\x79\xba\xc5\xf7\x4c\x57\x8f\x1f\x2c\x33\xa6\xa6\x05\xa7\xbf\xc1\x29\x84\xf3\x19\xb7\x85\x0d\x96\x1a\x57\x47\x23\x5f\x9b\x18\x7c\x21\x64\x36\x87\x4e\x48\x51\x46\x1e\xa3\x13\x44\x47\xb2\x63\x32\x69\xfb\xae\xac\x35\x69\x39\x04\xaa\x9a\x96\x10\x53\x22\xb3\x2e\xe6\xdc\x63\x5a\x05\x25\xb2\x74\xfd\x80\xed\xed\x22\x7e\x3f\x60\xbb\x7a\x63\x99\x07\x3c\xa8\xe6\x7d\xc7\x16\x00\xfc\x98\xff\xfc\xbe\x9b\xc9\x1f\x7f\xf1\x57\x1d\xe9\x85\xcd\xbb\x3e\xec\x5f\x01\x00\x00\xff\xff\x7b\x95\x26\x62\xea\x00\x00\x00"

func idtablestakingScriptsGet_candidate_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_candidate_nodesCdc,
		"idTableStaking/scripts/get_candidate_nodes.cdc",
	)
}

func idtablestakingScriptsGet_candidate_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_candidate_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_candidate_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x34, 0x2c, 0xe4, 0x3e, 0x22, 0x7b, 0x2, 0x58, 0xff, 0x6d, 0xe6, 0x39, 0x29, 0x45, 0xd4, 0x5e, 0x50, 0x9d, 0xec, 0xf7, 0x45, 0xd8, 0xa8, 0x2f, 0x14, 0x2e, 0x64, 0x10, 0x35, 0x81, 0xf1}}
	return a, nil
}

var _idtablestakingScriptsGet_current_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\xaa\x83\x40\x10\x45\xfb\xfd\x8a\x8b\x95\x36\xcf\xfe\xd5\xf2\xc0\xe6\x35\xda\x85\x14\x9b\x75\x5c\x87\xac\xb3\x32\x3b\x12\x42\xc8\xbf\x07\x21\x5d\xd2\x5d\xb8\x9c\xc3\xe1\x75\xcb\x6a\xf8\x4b\xf9\xd6\x77\xa3\xbf\x24\x1a\xcc\x5f\x59\x22\x66\xcd\x2b\xaa\xcf\xa3\x72\xae\x6d\x31\x2e\x5c\x50\x82\xf2\x66\x50\xb2\x5d\xa5\xc0\x16\x42\xd8\x55\x49\x0c\x3c\x91\x18\xdb\x1d\x76\xa0\x48\x24\xd1\x16\xe7\x7c\x08\x54\x4a\xed\x53\x6a\x30\xef\x82\xd5\xb3\xd4\xcd\x2f\x4e\x83\x29\x4b\x3c\xe3\xe1\x00\xbc\x8d\x5f\xaa\x7e\x22\xd9\x31\x69\xfa\xcf\x13\xf5\x5d\xa9\x1b\xf7\x7c\x05\x00\x00\xff\xff\x1e\x08\x43\x94\xc4\x00\x00\x00"

func idtablestakingScriptsGet_current_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_current_tableCdc,
		"idTableStaking/scripts/get_current_table.cdc",
	)
}

func idtablestakingScriptsGet_current_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_current_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_current_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x2a, 0x6b, 0x96, 0x8d, 0x9a, 0x6c, 0xa5, 0xb8, 0x89, 0xda, 0x4d, 0x43, 0x19, 0x77, 0x6c, 0xda, 0x84, 0x85, 0xfc, 0xfa, 0xdc, 0x7f, 0x3a, 0xa7, 0x27, 0x23, 0x9a, 0x14, 0x5, 0xb7, 0x1e}}
	return a, nil
}

var _idtablestakingScriptsGet_cut_percentageCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x8b\x83\x40\x10\x46\xfb\xfd\x15\x1f\x56\xda\x9c\xcd\x71\xc5\xb5\x77\x08\xe9\x42\x62\x7e\xc0\xb8\x8e\xba\xb8\xce\xca\xce\x88\x81\x90\xff\x1e\x02\xe9\x92\xf6\x3d\x78\xbc\xb0\xac\x29\x1b\x9a\x98\xf6\xc3\x7f\x4b\x5d\xe4\xb3\xd1\x1c\x64\xc4\x90\xd3\x82\xe2\x5d\x14\xce\xd5\x35\xda\x29\x28\xd4\xe7\xb0\x1a\x32\xdb\x96\x45\x61\x13\xa3\xa3\x48\xe2\x19\x69\x80\x1a\xcd\xdc\xc3\xd2\xcc\xa2\x4f\x40\x90\xd4\xb3\x73\xe4\x3d\xab\x96\x14\x63\x85\x61\x13\x2c\x14\xa4\xac\x7e\x71\x69\xc2\xf5\xe7\x1b\x37\x07\xe0\x15\xfd\x30\xf6\x35\xb2\x9d\x78\xa7\xdc\xff\x6d\x76\xe4\xec\x59\x8c\x46\x2e\x2b\x77\x7f\x04\x00\x00\xff\xff\x65\xa1\x14\x25\xcd\x00\x00\x00"

func idtablestakingScriptsGet_cut_percentageCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_cut_percentageCdc,
		"idTableStaking/scripts/get_cut_percentage.cdc",
	)
}

func idtablestakingScriptsGet_cut_percentageCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_cut_percentageCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_cut_percentage.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xe2, 0xb8, 0x9, 0x30, 0x55, 0xde, 0x80, 0x22, 0x1d, 0xce, 0xcd, 0x75, 0x1c, 0x49, 0x6c, 0xc0, 0xf4, 0x71, 0xba, 0x1a, 0x1f, 0x4, 0x99, 0x53, 0xe6, 0x65, 0xc4, 0xff, 0x2b, 0xe7, 0x62}}
	return a, nil
}

var _idtablestakingScriptsGet_del_stake_requirementsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xbd\x8a\xc2\x40\x14\x46\xfb\x79\x8a\x8f\x54\x49\xb3\x69\x96\x2d\xb6\x0e\x01\x0b\x1b\x8d\x0f\x30\xc6\x9b\xe4\x92\xf9\x89\x77\xee\xa0\x20\xbe\xbb\x88\x8a\x85\xd6\x07\xce\x39\xec\x97\x28\x8a\xd6\xc5\xd3\xaa\xe9\xec\xde\xd1\x56\xed\xcc\x61\xc4\x20\xd1\xa3\xf8\x04\x85\x31\x75\x8d\x6e\xe2\x84\xd4\x0b\x2f\x0a\x21\xcd\x12\x12\x74\x22\x78\x0e\xec\xb3\x47\x52\x3b\x13\x84\x8e\x99\x85\x3c\x05\xc5\x10\x05\x07\x72\x34\x5a\x8d\x92\x8c\xb1\x7d\x4f\x29\x95\xd6\xb9\x0a\x43\x0e\xf0\x96\x43\x59\xfd\x63\xd7\xf2\xf9\xef\x17\x17\x03\xe0\xa9\xfe\xb2\xf7\x33\x92\x36\x2f\xdb\xfa\x11\xbd\x23\xda\xbc\x93\x65\x65\xae\xb7\x00\x00\x00\xff\xff\x64\x7c\x1f\x80\xe0\x00\x00\x00"

func idtablestakingScriptsGet_del_stake_requirementsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_del_stake_requirementsCdc,
		"idTableStaking/scripts/get_del_stake_requirements.cdc",
	)
}

func idtablestakingScriptsGet_del_stake_requirementsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_del_stake_requirementsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_del_stake_requirements.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0x91, 0xe2, 0x54, 0xf9, 0x96, 0x3e, 0xcc, 0xa2, 0xe6, 0x3c, 0x46, 0x6b, 0xe2, 0xf0, 0x7e, 0xa2, 0x0, 0xec, 0xf0, 0xd0, 0xa4, 0x98, 0xa9, 0x64, 0x92, 0xc, 0xd0, 0xe4, 0x47, 0x5f, 0x75}}
	return a, nil
}

var _idtablestakingScriptsGet_delegators_below_minCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x3c\xf6\xb0\xb5\xd9\xe2\x4d\xa1\xdb\x83\x69\x7a\x28\x61\x21\xd0\x8f\x43\x52\x7a\x58\x96\x45\x89\xe5\x44\x44\x96\x82\x24\x6f\x4a\x97\xfc\xf7\x22\x7f\xc4\x52\xac\x7c\x54\x97\x10\xcd\x9b\x37\x6f\x66\x34\x63\x56\x6e\xa5\x32\x78\xe4\x72\x37\x9d\xcc\xc9\x82\xd3\x99\x21\x1b\x26\x56\x28\x94\x2c\x71\x33\x34\xdc\x44\xd1\xfd\x3d\xe6\x6b\xa6\xa1\x97\x8a\x6d\x0d\x0a\x26\x72\x0d\xc2\x39\x64\x01\x02\x21\x73\xfa\x4e\x23\xa7\x9c\xae\x88\x91\x4a\x63\xb7\x96\x20\x8a\x42\x1b\xb2\xa1\x39\xc8\x42\xbe\x52\xfc\xa5\x4a\x5a\xa6\x45\x65\xb0\xa0\x5c\xee\x60\xd6\x14\x25\x13\xac\xac\x4a\xcb\xf4\x30\xc2\xe3\xb7\x9f\xbf\x41\x44\x0e\x45\x4d\xa5\x84\x06\x13\x85\x54\x25\x31\x4c\x0a\x4b\x53\x19\xeb\x54\x46\x11\x59\x2e\xa9\xd6\x31\xe1\x3c\x81\x36\xaa\x5a\x1a\x4c\xba\xf8\x5f\x2d\xf9\x77\x26\xa6\xa2\x90\x78\x8b\x22\x00\x70\xf1\xaf\x44\xc1\x48\x43\xf8\xac\x96\x97\xe1\xd7\x23\xfb\xf3\xe9\xe3\x69\x5c\x47\x68\x85\x1e\xf9\x04\x9d\x44\x55\x1e\xc4\xe8\x0c\x53\x61\x2e\xc3\xba\x18\x0d\x3c\x88\x3f\x14\xd8\x26\xd6\xe3\x9f\x86\x2d\x4b\x27\x2e\xf4\xb9\xa1\x63\x82\x99\x78\x28\x2d\xc1\x5b\x6d\xb6\x47\x53\x5e\xa4\x4e\x69\x30\xc6\x28\x1d\x05\xcc\xc3\x8a\x84\xa0\x5e\x30\x8c\xfd\x84\xcf\x40\x3b\x76\xcb\xe9\xc3\x82\x25\xc0\x18\x4f\xcf\x35\x6e\x3f\x2c\x5c\x51\x09\x90\x3c\x9f\xf7\x49\xc5\x2f\xcd\xbb\xec\x7a\x78\xa1\x00\x83\xab\xbb\xc6\xfd\x42\xc0\x4e\xdc\xff\xc4\x0c\x56\xf5\xac\xf9\x3a\x2d\x83\xc9\x88\x07\xf1\x4f\xd5\xff\x8c\xf1\x0e\x1f\xae\x8d\x6b\xbb\x15\xbf\xd4\xc3\x9c\x05\x56\x8f\xff\x5c\x07\xda\x82\x4d\x4f\xc9\x76\x4b\x45\x1e\x5b\xce\xa4\xd5\xb1\xf7\xf7\x82\x55\x51\x12\x26\x62\xbb\xa0\xa6\x93\x0c\x33\xa3\x98\x58\x25\xd9\xc9\x55\x61\x69\x38\x35\xf5\x46\xab\xaf\xc6\x21\xb5\x3f\x5a\xeb\x81\xb7\xf9\x4d\xa2\x83\x7f\xee\xbd\xfa\x16\xde\xe7\xa1\x7b\xe4\xc2\xe9\x29\xc6\x61\x61\xc7\x43\xdb\xf3\xa4\x9c\x8a\x95\x59\xb7\x91\x0b\xe9\xee\x88\x09\x98\x70\x85\xf4\x45\x6d\x15\x9e\x4e\xd0\xef\x9b\x9f\xe5\x7b\x37\x44\xe6\xfe\x69\x55\xd8\xe3\x66\x95\x1e\x4d\x5f\x1b\x39\x35\x72\x43\x85\x6e\x2e\x1d\x57\x56\x20\x84\xc0\x67\x3c\x8c\xd2\x11\x6e\x6f\xc3\xe6\x2f\x76\xfb\x38\x39\x86\x54\xf8\x69\xb5\x34\xc9\x75\x2e\xfd\xe4\x9c\xc5\x1f\x4d\x7d\x38\xd7\xce\x79\xef\x8e\x4f\xf3\xc1\xf3\x08\xa3\x7d\xf4\x2f\x00\x00\xff\xff\xb6\xa7\x8d\x2b\xae\x07\x00\x00"

func idtablestakingScriptsGet_delegators_below_minCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_delegators_below_minCdc,
		"idTableStaking/scripts/get_delegators_below_min.cdc",
	)
}

func idtablestakingScriptsGet_delegators_below_minCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_delegators_below_minCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_delegators_below_min.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x96, 0x53, 0x67, 0x6, 0x66, 0xfa, 0x53, 0xbc, 0xa1, 0x1d, 0x59, 0xf, 0x29, 0xe, 0x3a, 0x37, 0x82, 0x68, 0x33, 0x3e, 0xb1, 0x9e, 0xd9, 0xc5, 0x5d, 0xf5, 0x2b, 0xab, 0x83, 0x17, 0x5}}
	return a, nil
}

var _idtablestakingScriptsGet_node_committed_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x6a\x03\x41\x0c\x45\xfb\x39\xc5\xc7\x95\xb7\xb1\x9b\x90\xc2\x90\x2a\xc6\xb0\x4d\x1a\x3b\x07\x90\x67\x35\xb6\xd8\x19\xc9\xcc\xc8\x24\x10\x72\xf7\xe0\xdd\xb0\x4d\x52\x09\xf4\xf8\x8f\x27\xe5\x66\xd5\x71\xc8\xf6\xd1\xef\x4f\x74\xce\x7c\x74\x1a\x45\x2f\x48\xd5\x0a\x56\x7f\xc1\x2a\x84\xed\x16\xa7\xab\x34\xb4\x58\xe5\xe6\xa8\xec\xf7\xaa\x0d\x7e\x65\x9c\x29\x93\x46\x86\x25\x34\xa7\x91\x07\xb8\x8d\xac\xed\xf1\x20\xa8\x0d\x1c\x02\xc5\xc8\xad\xad\x29\xe7\x0e\xe9\xae\x28\x24\xba\x7e\xa0\x7e\xbf\xc3\xd1\xab\xe8\xa5\xdb\xe1\xfd\x20\x9f\xcf\x4f\xf8\x0a\x00\x90\xd9\xa7\x71\xaf\xc9\xf0\xf2\x4f\xee\xe6\xed\x97\x2e\xa2\xf9\x76\xd3\x7c\x2e\x5c\x0c\x9b\xb9\xe9\xd5\x4a\x11\x77\x1e\xc2\xf7\x4f\x00\x00\x00\xff\xff\x76\x78\x67\x79\x07\x01\x00\x00"

func idtablestakingScriptsGet_node_committed_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_committed_tokensCdc,
		"idTableStaking/scripts/get_node_committed_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_committed_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_committed_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_committed_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xb9, 0x2, 0x2f, 0xff, 0xa2, 0x25, 0x20, 0x27, 0xda, 0xa3, 0xde, 0xa5, 0x91, 0xdb, 0x43, 0xb6, 0x80, 0x4c, 0x45, 0x3d, 0x15, 0x8c, 0xd4, 0x75, 0x99, 0x3, 0xed, 0x25, 0x51, 0x1b, 0x2c}}
	return a, nil
}

var _idtablestakingScriptsGet_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\x0e\x82\x40\x0c\xc6\xf1\xbd\x4f\xf1\x85\x09\x16\xd9\x99\x89\x09\x8b\x0b\xbc\x40\x81\x03\x1a\x8f\x1e\xb9\x2b\x71\x30\xbe\xbb\x21\x1a\x17\x8d\x53\x87\xfe\xf3\xcb\x27\xeb\x16\xa2\xe1\xec\xc3\xad\xa9\x3b\xee\xbd\x6b\x8d\xaf\xa2\x33\xa6\x18\x56\x64\xdf\x8f\x8c\xa8\x2c\xd1\x2d\x92\x90\x86\x28\x9b\x61\x76\x96\xc0\xde\xc3\x16\x07\xd1\x29\x80\xfb\xb0\x1b\x18\x1a\x46\x07\xd6\x11\xd1\xd9\x1e\x35\x41\x8c\x88\x87\xc1\xa5\x94\xb3\xf7\x05\xa6\x5d\xb1\xb2\x68\x7e\x94\x4d\x5d\xa1\xb5\x28\x3a\x17\xd5\x8f\x45\xa7\xcb\xd1\x1c\xfc\x9d\x00\xbc\xcd\x7f\xe1\x47\x7d\xdd\x82\x1e\xf4\x0c\x00\x00\xff\xff\x18\xd8\x93\xc8\xf0\x00\x00\x00"

func idtablestakingScriptsGet_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_infoCdc,
		"idTableStaking/scripts/get_node_info.cdc",
	)
}

func idtablestakingScriptsGet_node_infoCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0x21, 0xcd, 0xb7, 0xd2, 0xc, 0x46, 0xd2, 0xc3, 0x2b, 0x49, 0xac, 0x98, 0xc7, 0x5a, 0x8, 0x8e, 0xaa, 0xfe, 0xdd, 0x85, 0xe6, 0x93, 0x64, 0x53, 0x63, 0xc5, 0x65, 0xe3, 0xef, 0xa3, 0x39}}
	return a, nil
}

var _idtablestakingScriptsGet_node_info_from_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x6a\x02\x31\x10\xc6\xef\x79\x8a\x8f\x3d\x94\xdd\x8b\xde\xa5\xad\x88\x52\xf0\x52\x84\xfa\x02\xb3\xc9\xac\xa6\xcd\x66\x96\x64\x16\x29\xe2\xbb\x97\x35\x94\x0a\xfd\x43\x73\x0a\x99\x2f\xf3\x9b\xf9\xf9\x7e\x90\xa4\x78\x0a\x72\xda\x6e\xf6\xd4\x06\x7e\x51\x7a\xf3\xf1\x80\x2e\x49\x8f\xea\x7b\xa1\x32\x66\x3e\xc7\xfe\xe8\x33\xb2\x4d\x7e\x50\x1c\x58\x33\x28\x04\xe8\x91\xe1\x63\x27\xa0\x56\x46\x05\x21\x8a\x63\x50\x74\x48\xac\x63\x8a\x19\x5e\x8d\x21\x6b\x39\xe7\x9a\x42\x68\xd0\x8d\x11\x3d\xf9\x58\x93\x73\x89\x73\x5e\x60\x55\x2e\xcd\xe2\x87\x99\x66\xcf\xe2\x78\x3b\x01\xce\xc6\x00\x40\x60\xbd\x32\xa6\x3a\x27\x3c\x4c\xa3\xac\xac\x95\x31\xea\x67\xc7\xe6\x1a\x9c\xce\xec\xc0\xba\xa6\x81\x5a\x1f\xbc\xbe\xdf\xdf\x9d\x7f\x01\x94\x66\xbb\xb1\x0d\xde\x5e\x1e\xeb\x7f\xa4\x76\xa4\xc7\x1b\x4e\x2b\x29\xc9\xa9\xfe\x7a\x59\x2e\x31\x50\xf4\xb6\xae\xd6\x32\x06\x87\x28\x8a\x12\x42\xe2\x8e\x13\x47\xcb\x50\x29\xba\x72\xd9\x45\xda\x57\xb6\x5a\x35\x65\xd1\xe2\xef\x2f\x25\xf5\xf4\x79\xbb\x59\xdc\xf8\x98\x79\xd7\x98\x8b\xf9\x08\x00\x00\xff\xff\x77\x61\x21\xf9\xe3\x01\x00\x00"

func idtablestakingScriptsGet_node_info_from_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_info_from_addressCdc,
		"idTableStaking/scripts/get_node_info_from_address.cdc",
	)
}

func idtablestakingScriptsGet_node_info_from_addressCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_info_from_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_info_from_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xeb, 0x71, 0x1f, 0xdc, 0xae, 0x6b, 0x7a, 0x3a, 0x44, 0x55, 0x5, 0xb1, 0x2c, 0x46, 0x74, 0xb8, 0xf3, 0x94, 0xf9, 0x6a, 0x21, 0x80, 0x6e, 0x5b, 0x6a, 0x31, 0x53, 0x95, 0x58, 0xfa, 0x20}}
	return a, nil
}

var _idtablestakingScriptsGet_node_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x8a\x84\x30\x14\x45\xfb\x7c\xc5\xc5\x4a\x1b\x6d\x96\x2d\x84\xed\x64\x21\xcd\x36\xba\x6c\x9d\x75\x12\x7d\x4c\x7c\x91\xe4\x89\xc5\x30\xff\x3e\x8c\x8a\xcd\x4c\x75\x8b\xc3\x3d\x1c\x9a\xe6\x10\x05\xdf\x3e\xac\xba\xe9\xcc\xbf\xb7\xad\x98\x2b\xf1\x00\x17\xc3\x84\xec\x15\x64\x4a\x55\x15\xba\x91\x12\x52\x1f\x69\x16\x44\x2b\x4b\xe4\x04\x19\x2d\x88\x49\xc8\x78\xac\x96\x86\x51\x10\x1c\x0c\x38\x5c\xac\x52\xa6\xef\x6d\x4a\xb9\xf1\xbe\x80\x5b\x18\x93\x21\xce\x9f\x48\x37\x35\x5a\x89\xc4\x43\x51\xe3\x57\xb3\x7c\x7e\xe0\xa6\x00\xc0\x5b\xd9\xce\x9a\x5d\xc0\xd7\x9b\xc8\xf2\xe7\xa0\xa7\x68\xdf\x62\xbb\xef\x5d\xa7\xa1\x3c\xda\xfe\xb6\x34\x75\x7f\x04\x00\x00\xff\xff\x7c\x2d\x7f\xbb\xfb\x00\x00\x00"

func idtablestakingScriptsGet_node_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_initial_weightCdc,
		"idTableStaking/scripts/get_node_initial_weight.cdc",
	)
}

func idtablestakingScriptsGet_node_initial_weightCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x31, 0x8c, 0x67, 0xbd, 0xca, 0x66, 0x6e, 0xa, 0xa, 0x1, 0x6b, 0x1f, 0xf3, 0x67, 0xaf, 0xa1, 0x6d, 0x22, 0xeb, 0xb9, 0xd0, 0xa7, 0x45, 0xd8, 0x2b, 0x75, 0xb2, 0x1d, 0xfe, 0xb1, 0x92}}
	return a, nil
}

var _idtablestakingScriptsGet_node_networking_addrCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x6a\x84\x40\x10\x86\xfb\x7d\x8a\x1f\x2b\x6d\xb4\x0f\xa4\x08\x48\xc0\x26\x8d\xbe\xc0\x46\x67\x75\xc9\x3a\x2b\xb3\x23\x16\x21\xef\x1e\x4e\x3d\xaf\xb8\xab\x66\xe0\xe3\xff\xf8\xfc\xbc\x44\x51\x7c\x86\xb8\x35\x75\x67\xbf\x03\xb5\x6a\x7f\x3c\x8f\x70\x12\x67\x64\xcf\x20\x33\xa6\xaa\xd0\x4d\x3e\x21\xf5\xe2\x17\x85\x90\xae\xc2\x09\x3a\x11\x98\x74\x8b\xb2\x0b\x3e\x86\x41\x28\x25\x44\x07\x0b\x8e\x03\x19\x63\xfb\x9e\x52\xca\x6d\x08\x05\xdc\xca\x98\xad\xe7\xfc\x86\x9a\xfa\x0d\xad\x8a\xe7\xb1\xb8\x3f\xf8\x35\x00\x10\x48\xf7\x71\xc3\x2e\xe2\xfd\x45\x68\xf9\x75\xd2\x4b\x74\xdc\x62\x9f\x1f\x6d\x97\xa1\x7c\xf4\x9d\x79\xe6\xef\x3f\x00\x00\xff\xff\x9b\x3e\x96\x87\x03\x01\x00\x00"

func idtablestakingScriptsGet_node_networking_addrCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_networking_addrCdc,
		"idTableStaking/scripts/get_node_networking_addr.cdc",
	)
}

func idtablestakingScriptsGet_node_networking_addrCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_networking_addrCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_networking_addr.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x91, 0xae, 0x4, 0xd4, 0x58, 0xda, 0xbc, 0x54, 0xfe, 0xdd, 0xf4, 0x99, 0x87, 0x9a, 0xe2, 0x69, 0xe0, 0xca, 0xcf, 0xf, 0xc2, 0x5d, 0x7e, 0xa9, 0x2b, 0xd8, 0x99, 0xca, 0xcd, 0x39, 0xf6}}
	return a, nil
}

var _idtablestakingScriptsGet_node_networking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\xaa\x83\x40\x10\x45\xfb\xfd\x8a\x8b\x95\x36\xda\x3f\x78\x9d\x3c\x90\x07\x69\xf4\x07\x36\x66\x56\x17\xd7\x59\xd9\x1d\x11\x09\xf9\xf7\x10\x4d\x4c\x91\x54\x33\x70\xb8\x87\x63\xc7\xc9\x07\xc1\x9f\xf3\x4b\x55\x36\xfa\xec\xa8\x16\x3d\x58\xee\x60\x82\x1f\x91\x7c\x82\x44\xa9\xa2\x40\xd3\xdb\x88\xd8\x06\x3b\x09\x02\xc9\x1c\x38\x42\x7a\x02\x93\x2c\x3e\x6c\x82\x81\x56\x78\x03\x0d\xf6\x17\x52\x4a\xb7\x2d\xc5\x98\x6a\xe7\x32\x98\x99\x31\x6a\xcb\xe9\x03\x55\xe5\x0f\x6a\x09\x96\xbb\xec\xf5\xe0\xaa\x00\xc0\x91\x6c\xe3\x8a\x8d\xc7\xef\x97\xc8\xfc\xf4\xa4\x87\x68\xbf\xd9\x36\xdf\xbb\x0e\x43\xfe\x6e\xfb\xa7\x55\xdd\xee\x01\x00\x00\xff\xff\x95\x72\xe4\x3d\xfb\x00\x00\x00"

func idtablestakingScriptsGet_node_networking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_networking_keyCdc,
		"idTableStaking/scripts/get_node_networking_key.cdc",
	)
}

func idtablestakingScriptsGet_node_networking_keyCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_networking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_networking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x80, 0xca, 0xa7, 0xf8, 0xbc, 0x50, 0xe7, 0x5b, 0x44, 0x46, 0xe3, 0x38, 0x25, 0x5d, 0x5f, 0xfe, 0x21, 0x3, 0xbd, 0xd6, 0x4a, 0x73, 0x41, 0x70, 0x5d, 0x8f, 0xbc, 0x57, 0x97, 0xf6, 0x77}}
	return a, nil
}

var _idtablestakingScriptsGet_node_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3d\x6a\xc3\x40\x10\x46\xfb\x3d\xc5\x87\x2b\xab\xb1\x9b\x90\xc2\x90\xce\x18\xd4\xa4\x88\x9d\x03\x8c\x57\xb3\xf6\xa2\xd5\xac\x98\x1d\xa1\x40\xc8\xdd\x83\x7e\x50\x93\x54\x03\xf3\xf8\x1e\x2f\x76\x7d\x56\xc3\x25\xe5\xb1\x3e\xdf\xe8\x9e\xf8\x6a\xd4\x46\x79\x20\x68\xee\xb0\xfb\x0b\x76\xce\x1d\x8f\xb8\x3d\x63\x41\xf1\x1a\x7b\x83\xb2\x0d\x2a\x05\xf6\x64\xdc\x29\x91\x78\x46\x0e\x50\x1e\x49\x1b\x6e\x60\xb9\x65\x29\xd3\x8b\x20\xb9\x61\xe7\xc8\x7b\x2e\x65\x4f\x29\x55\x08\x83\xa0\xa3\x28\xfb\x09\xd5\xe7\x13\xae\xa6\x51\x1e\xd5\x09\x9f\x97\xf8\xf5\xfa\x82\x6f\x07\x00\x89\x6d\x1e\xd7\x12\x32\xde\xfe\x09\x3e\xbc\xaf\x74\x13\x2d\xb7\x9a\xe7\x4b\xe3\x66\x38\x2c\x4d\x1f\x6b\xa2\xfb\xf9\x0d\x00\x00\xff\xff\xf4\x1f\x63\x6a\x08\x01\x00\x00"

func idtablestakingScriptsGet_node_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_rewarded_tokensCdc,
		"idTableStaking/scripts/get_node_rewarded_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_rewarded_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x9a, 0xcb, 0xd1, 0x44, 0xce, 0xa6, 0xa9, 0xb, 0xf5, 0x69, 0x8, 0x75, 0x31, 0x3d, 0xa4, 0xfe, 0x77, 0x25, 0x7, 0x2e, 0x9a, 0x2a, 0xe8, 0xf2, 0x14, 0x6d, 0x39, 0x96, 0x0, 0x13, 0x24}}
	return a, nil
}

var _idtablestakingScriptsGet_node_roleCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\xca\x83\x30\x14\x85\xf7\x3c\xc5\xc1\x49\x17\x5d\x7f\x84\x7f\x93\x42\x96\x2e\xda\x07\x48\x6d\xa2\xa1\xf1\x46\x6e\xae\x74\x28\x7d\xf7\xa2\x16\x97\x76\x3a\xc3\xc7\xf9\xf8\xfc\x34\x47\x16\x9c\x42\x7c\xe8\xa6\x33\xd7\x60\x5b\x31\x77\x4f\x03\x1c\xc7\x09\xd9\x37\xc8\x94\xaa\x2a\x74\xa3\x4f\x48\x3d\xfb\x59\xc0\x56\x16\xa6\x04\x19\x2d\x38\x06\x8b\xe8\x60\x40\xf1\x66\x95\x32\x7d\x6f\x53\xca\x4d\x08\x05\xdc\x42\x98\x8c\xa7\x7c\x45\xba\xa9\xd1\x0a\x7b\x1a\x8a\x1a\x17\x4d\xf2\x87\xa7\x02\x80\x60\x65\xfb\x6a\x72\x11\xff\x3f\xca\xca\xf3\x87\x1e\x9e\x7d\x8b\xed\xbe\xc7\x1c\x86\x72\x0d\x52\xaf\x77\x00\x00\x00\xff\xff\xf6\xa1\xe0\xc7\xe7\x00\x00\x00"

func idtablestakingScriptsGet_node_roleCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_roleCdc,
		"idTableStaking/scripts/get_node_role.cdc",
	)
}

func idtablestakingScriptsGet_node_roleCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_roleCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_role.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xb7, 0xb0, 0x5f, 0x96, 0x55, 0x19, 0x86, 0x7a, 0x0, 0xf0, 0xfe, 0xd6, 0x6f, 0xce, 0xc4, 0x56, 0x65, 0x59, 0x5c, 0x66, 0x15, 0x56, 0x22, 0xc8, 0xe, 0x22, 0x44, 0x49, 0xf0, 0xc0, 0x78}}
	return a, nil
}

var _idtablestakingScriptsGet_node_staked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x6a\x84\x40\x10\x86\xfb\x7d\x8a\x9f\xab\xce\xe6\xae\x09\x29\x0e\xd2\x89\x60\x93\x46\xf3\x00\xe3\x3a\xab\x8b\xeb\xac\xec\x8e\x24\x10\xf2\xee\x41\x0d\x36\xb9\x6a\x60\x3e\xfe\x8f\xcf\xcf\x4b\x4c\x8a\x2a\xc4\xcf\xba\x6c\xa9\x0b\xdc\x28\x4d\x5e\x06\xb8\x14\x67\x5c\xfe\x83\x8b\x31\xf7\x3b\xda\xd1\x67\x64\x9b\xfc\xa2\x48\xac\x6b\x92\x0c\x1d\x19\x1d\x05\x12\xcb\x88\x0e\x59\x69\xe2\x1e\x1a\x27\x96\xbc\x3d\x08\x12\x7b\x36\x86\xac\xe5\x9c\xaf\x14\x42\x01\xb7\x0a\x66\xf2\x72\xdd\x50\x5d\x3e\xd0\x68\xf2\x32\x14\x0f\x7c\x54\xfe\xeb\xf5\x05\xdf\x06\x00\x02\xeb\x3e\xae\xc5\x45\xbc\x3d\xc9\xbd\xbd\xff\xd1\x53\x74\xdc\x62\x9f\x1f\x85\xa7\xe1\x76\x34\x35\x7b\xa0\xf9\xf9\x0d\x00\x00\xff\xff\x88\xf6\xd5\xbd\x04\x01\x00\x00"

func idtablestakingScriptsGet_node_staked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_staked_tokensCdc,
		"idTableStaking/scripts/get_node_staked_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_staked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_staked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_staked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x54, 0xed, 0x63, 0x3d, 0x4f, 0x58, 0xcc, 0xc0, 0xc2, 0x61, 0x56, 0xca, 0x69, 0xb6, 0x69, 0xbc, 0xb0, 0x62, 0x73, 0x82, 0x4c, 0x79, 0xe7, 0x37, 0xfd, 0x98, 0x8e, 0x96, 0x78, 0x0, 0xd9}}
	return a, nil
}

var _idtablestakingScriptsGet_node_staking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\xaa\x83\x40\x10\x45\xfb\xfd\x8a\x8b\x95\x36\xda\x3f\x78\x9d\x04\x44\x48\xa3\x3f\xb0\x31\xb3\xba\x64\x9d\x95\xdd\x91\x20\x21\xff\x1e\xa2\xc6\x26\xa9\x66\xe0\x70\x2e\xc7\x8e\x93\x0f\x82\x93\xf3\xf7\xaa\x6c\xf5\xc5\x51\x23\xfa\x66\xb9\x87\x09\x7e\x44\xf2\x0d\x12\xa5\x8a\x02\xed\x60\x23\x62\x17\xec\x24\x08\x24\x73\xe0\x08\x19\x08\x71\xb7\x6b\x5a\xe0\x0d\x34\xd8\x5f\x49\x29\xdd\x75\x14\x63\xaa\x9d\xcb\x60\x66\xc6\xa8\x2d\xa7\x6f\x54\x95\x7f\x68\x24\x58\xee\xb3\xcf\x83\x87\x02\x00\x47\xb2\xca\x15\x1b\x8f\xff\x1f\x85\xf9\x79\xa7\xc7\xd0\x76\xb3\x55\xdf\xa2\x8e\x85\x7c\x0f\xab\x69\x51\xcf\x57\x00\x00\x00\xff\xff\xe3\x1d\xee\xbd\xf5\x00\x00\x00"

func idtablestakingScriptsGet_node_staking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_staking_keyCdc,
		"idTableStaking/scripts/get_node_staking_key.cdc",
	)
}

func idtablestakingScriptsGet_node_staking_keyCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_staking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_staking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x60, 0xc8, 0xcc, 0xd8, 0xd1, 0x4, 0x35, 0xdc, 0x43, 0xab, 0xa6, 0x61, 0x23, 0x93, 0x51, 0xd2, 0x5a, 0x24, 0xe6, 0xe2, 0x95, 0xc3, 0xe5, 0xbf, 0x68, 0x26, 0x94, 0xfb, 0x6a, 0xe9, 0x73}}
	return a, nil
}

var _idtablestakingScriptsGet_node_total_commitmentCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x6b\xc3\x40\x0c\x46\xf7\xfb\x15\x1f\x99\xec\x25\x59\x4a\x87\x40\xa7\x9a\x80\x97\x2e\x49\xe9\xac\xd8\x3a\x5b\xf8\x4e\x0a\x77\x0a\x2d\x94\xfe\xf7\x92\xa4\x64\x69\x26\x81\x1e\xdf\xe3\x49\x3e\x59\x71\xec\x92\x7d\xf6\xdd\x81\x8e\x89\xf7\x4e\x8b\xe8\x84\x58\x2c\x63\xf5\x1f\xac\x42\xd8\x6c\x70\x98\xa5\xa2\x0e\x45\x4e\x8e\xc2\x7e\x2e\x5a\xe1\x33\xe3\x48\x89\x74\x60\x58\x44\x75\x5a\x78\x84\xdb\xc2\x5a\x2f\x0f\x82\xda\xc8\x21\xd0\x30\x70\xad\x0d\xa5\xd4\x22\x9e\x15\x99\x44\x9b\x0b\xea\xbb\x2d\xf6\x5e\x44\xa7\x76\x8b\xf7\x9d\x7c\x3d\x3f\xe1\x3b\x00\x40\x62\xbf\x8e\x7b\x8d\x86\x97\x07\xb9\xeb\xb7\x3f\x7a\x17\xdd\x6e\x7b\x9d\xdf\x0a\xef\x86\xb5\x9b\x53\x7a\xb5\x9c\xc5\x9d\xc7\x0f\xf1\xb9\xe3\xc4\x13\xb9\x95\xda\xb4\xe1\x27\xfc\x06\x00\x00\xff\xff\xde\x81\x86\x0c\x17\x01\x00\x00"

func idtablestakingScriptsGet_node_total_commitmentCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_total_commitmentCdc,
		"idTableStaking/scripts/get_node_total_commitment.cdc",
	)
}

func idtablestakingScriptsGet_node_total_commitmentCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_total_commitmentCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_total_commitment.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x4e, 0xa8, 0x2, 0x91, 0x80, 0xc1, 0xa6, 0xf6, 0x9b, 0x8c, 0x17, 0xce, 0x51, 0x4d, 0x8c, 0x4, 0x66, 0x16, 0xe7, 0x9e, 0x9c, 0x54, 0xd7, 0x3c, 0x96, 0x45, 0x48, 0x4b, 0x9a, 0x26, 0x27}}
	return a, nil
}

var _idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x6b\xc3\x40\x0c\x46\xf7\xfb\x15\x1f\x99\xec\x25\x59\x4a\x87\x40\xa7\x9a\x80\x97\x2e\x49\xe9\xac\xd8\xb2\x2d\x7c\x27\x85\x3b\x99\x16\x4a\xff\x7b\x49\x52\xbc\x34\x93\x40\x8f\xef\xf1\x24\x5d\x2c\x3b\x0e\xd1\x3e\xdb\xe6\x44\xe7\xc8\x47\xa7\x59\x74\xc4\x90\x2d\x61\xf3\x1f\x6c\x42\xd8\xed\x70\x9a\xa4\xa0\x74\x59\x2e\x8e\xcc\xbe\x64\x2d\xf0\x89\x71\xa6\x48\xda\x31\x6c\x40\x71\x9a\xb9\x87\xdb\xcc\x5a\xae\x0f\x82\x5a\xcf\x21\x50\xd7\x71\x29\x15\xc5\x58\x63\x58\x14\x89\x44\xab\x2b\x6a\x9b\x3d\x8e\x9e\x45\xc7\x7a\x8f\xf7\x83\x7c\x3d\x3f\xe1\x3b\x00\x40\x64\xbf\x8d\x5b\x1d\x0c\x2f\x0f\x72\xb7\x6f\x7f\x74\x15\xdd\x6f\x7d\x9b\xdf\x0b\x57\xc3\xd6\xcd\x29\xbe\x5a\x4a\xe2\xce\xfd\x87\xf8\x64\x8b\x37\x1c\x79\x24\xb7\x5c\xaa\x3a\xfc\x84\xdf\x00\x00\x00\xff\xff\x30\xea\x1b\x75\x1a\x01\x00\x00"

func idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc,
		"idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc",
	)
}

func idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x32, 0xaf, 0x9f, 0xd3, 0x1e, 0x55, 0x10, 0x72, 0x2d, 0x94, 0x44, 0xae, 0x6b, 0xa4, 0xc5, 0xe4, 0x2, 0xc6, 0x10, 0x0, 0xae, 0xb5, 0x69, 0x35, 0xb, 0xf6, 0x87, 0x8d, 0x53, 0x4, 0xa7}}
	return a, nil
}

var _idtablestakingScriptsGet_node_type_ratioCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4b\x03\x51\x10\x84\xfb\xf7\x2b\xc6\x54\x77\x8d\x69\x44\x24\x60\x27\x81\xb4\x31\xa9\xc4\x62\xf3\x6e\x2f\x79\xdc\xbb\xdd\xb0\xbb\xe1\x04\xf1\xbf\xcb\x9d\x76\xda\xce\xcc\x37\x7c\x65\xbc\xaa\x05\xb6\x55\xa7\xdd\xcb\x81\x4e\x95\x5f\x83\x86\x22\x67\xf4\xa6\x23\x56\x7f\x8b\x55\x4a\xeb\x35\x0e\x97\xe2\xf0\x6c\xe5\x1a\x30\x8e\x9b\x89\x23\x2e\x8c\x13\x55\x92\xcc\xd0\x1e\x1e\x34\x70\x87\xd0\x81\xc5\xe7\x80\x20\xda\x71\x4a\x94\x33\xbb\x37\x54\x6b\x8b\xfe\x26\x18\xa9\x48\x63\x5a\x79\x83\xe3\x4e\xe2\xa9\xdd\xe0\xb8\x2d\x1f\x8f\x0f\xf8\x4c\x00\x50\x39\x60\x14\x45\x1d\xcf\xff\x98\xde\x9f\x39\xf6\x3c\x91\x75\xfb\x65\xd4\xb4\x69\xc1\x7e\xb4\x7e\xc9\xb7\xf9\xff\xfd\x2e\x7d\x7d\x07\x00\x00\xff\xff\x6f\x62\x2e\xa0\xf1\x00\x00\x00"

func idtablestakingScriptsGet_node_type_ratioCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_type_ratioCdc,
		"idTableStaking/scripts/get_node_type_ratio.cdc",
	)
}

func idtablestakingScriptsGet_node_type_ratioCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_type_ratioCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_type_ratio.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x6, 0x3f, 0x1a, 0x72, 0xbf, 0x77, 0x88, 0xc2, 0xac, 0xd6, 0x2a, 0xea, 0x37, 0xc, 0x1, 0xe8, 0x1b, 0x86, 0x79, 0x76, 0xdc, 0x56, 0x9b, 0x51, 0x27, 0x7d, 0xd1, 0x92, 0x12, 0xe8, 0x89}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3d\x6a\xc3\x40\x10\x46\xfb\x3d\xc5\x87\x2b\xab\xb1\x9b\x90\xc2\x90\xce\x18\xd4\xa4\xb1\x74\x80\xd1\x6a\x56\x5a\xb4\x9a\x15\xbb\x23\x12\x08\xb9\x7b\xd0\x0f\x6a\xe2\x6a\x60\x1e\xdf\xe3\xf9\x71\x8a\x49\xf1\x08\xf1\xab\xbc\x57\xd4\x04\x7e\x2a\x0d\x5e\x3a\xb8\x14\x47\x9c\xfe\x83\x93\x31\xd7\x2b\xaa\xde\x67\x64\x9b\xfc\xa4\x48\xac\x73\x92\x0c\xed\x19\x0d\x05\x12\xcb\x88\x0e\xb3\x64\xa5\x81\x5b\x68\x1c\x58\xf2\xf2\x22\x48\x6c\xd9\x18\xb2\x96\x73\x3e\x53\x08\x05\xdc\x2c\x18\xc9\xcb\x79\x41\xe5\xfd\x86\xa7\x26\x2f\x5d\x71\x43\xfd\xf0\xdf\xef\x6f\xf8\x31\x00\x10\x58\xd7\x71\x29\x2e\xe2\xe3\x45\xf0\xe5\x73\xa7\x87\x68\xbb\xc5\x3a\xdf\x1a\x0f\xc3\x65\x6b\xaa\xf7\x44\xf3\xfb\x17\x00\x00\xff\xff\xa2\xd9\x0b\x78\x08\x01\x00\x00"

func idtablestakingScriptsGet_node_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaked_tokensCdc,
		"idTableStaking/scripts/get_node_unstaked_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0xa2, 0xab, 0xa0, 0xe4, 0x1e, 0x5c, 0xf, 0xd8, 0x2c, 0x53, 0xe8, 0xa3, 0x53, 0x38, 0xd8, 0xa7, 0x8e, 0x66, 0x3a, 0x95, 0x72, 0xf5, 0x76, 0xe2, 0x78, 0xad, 0xc0, 0xa8, 0x45, 0xe2, 0xc4}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaking_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x4e\x02\x41\x10\x86\xfb\x7d\x8a\x3f\x54\x5c\x03\x8d\xb1\x20\xb1\x23\x24\xd7\x58\xc8\xf1\x00\xeb\x31\x0b\x1b\x76\x67\x70\x66\x36\x9a\x18\xdf\xdd\x78\xe0\x35\x5a\xfd\xc5\x97\xff\xcb\x97\xeb\x55\xd4\xb1\x2b\xf2\xde\x6f\x87\xf8\x5a\x68\xef\xf1\x92\xf9\x84\xa4\x52\xb1\xf8\x0b\x16\x21\xac\xd7\x18\xce\xd9\x60\xa3\xe6\xab\x43\xc9\x9b\xb2\xc1\xcf\x04\xa5\xb7\x46\xe6\x74\x44\x63\xbb\x9b\x62\x95\xc6\x8e\x24\x8a\x08\x96\x23\x85\x10\xc7\x91\xcc\x96\xb1\x94\x0e\xa9\x31\x6a\xcc\xbc\xfc\x41\xfd\x76\x83\xbd\x6b\xe6\x53\xb7\xc1\x61\x97\x3f\x1e\x1f\xf0\x19\x00\xa0\x90\x4f\xe7\x9e\x93\xe0\xe9\x9f\xe2\xd5\xf3\x9d\xce\xa2\xdb\x76\xd3\xfd\x16\x39\x1b\x56\x2e\x17\x62\x7b\xf9\xcd\x1d\xe4\x30\xf5\x52\xf8\xfa\x0e\x00\x00\xff\xff\x8e\x70\xaf\x46\x13\x01\x00\x00"

func idtablestakingScriptsGet_node_unstaking_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaking_requestCdc,
		"idTableStaking/scripts/get_node_unstaking_request.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaking_requestCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaking_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaking_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x48, 0x65, 0x66, 0x2f, 0x86, 0x85, 0xb3, 0x19, 0xdb, 0x18, 0xda, 0x34, 0x83, 0xe5, 0x55, 0xa, 0xd6, 0x75, 0xc8, 0x5f, 0xba, 0xf2, 0xe, 0x69, 0xf6, 0x73, 0x47, 0xe0, 0x35, 0x6c, 0x84}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaking_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3d\x6a\xc3\x40\x10\x46\xfb\x3d\xc5\x87\x2b\xab\xb1\x9b\x90\xc2\x90\xce\x18\xd4\xa4\x91\x74\x80\xd1\x66\x56\x5a\xb4\x9a\x15\xbb\x23\x12\x08\xb9\x7b\xd0\x4f\xd4\xc4\xd5\xc0\x3c\xbe\xc7\xf3\xe3\x14\x93\xe2\x11\xe2\x67\x79\xaf\xa9\x0d\x5c\x29\x0d\x5e\x3a\xb8\x14\x47\x9c\xfe\x83\x93\x31\xd7\x2b\xea\xde\x67\x64\x9b\xfc\xa4\x48\xac\x73\x92\x0c\xed\x19\x2d\x05\x12\xcb\x88\x0e\xb3\xe4\x5d\xa5\x71\x60\xc9\xcb\x8f\x20\xf1\x83\x8d\x21\x6b\x39\xe7\x33\x85\x50\xc0\xcd\x82\x91\xbc\x9c\x17\x54\xde\x6f\xa8\x34\x79\xe9\x8a\x1b\x9a\x87\xff\x7a\x7d\xc1\xb7\x01\x80\xc0\xba\x8e\x4b\x71\x11\x6f\x4f\x8a\x2f\xef\x3b\x3d\x44\xdb\x2d\xd6\xf9\x16\x79\x18\x2e\x5b\x53\xf3\xd7\x68\x7e\x7e\x03\x00\x00\xff\xff\xfc\x55\x50\x18\x0a\x01\x00\x00"

func idtablestakingScriptsGet_node_unstaking_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaking_tokensCdc,
		"idTableStaking/scripts/get_node_unstaking_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaking_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaking_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaking_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0xa2, 0x4e, 0x56, 0xb7, 0x3, 0xd3, 0x8, 0x1c, 0xf9, 0x4b, 0xa2, 0x84, 0xcc, 0xc7, 0xdd, 0x56, 0xbc, 0xd7, 0xae, 0x99, 0x6d, 0x53, 0x4e, 0xa9, 0xd4, 0x97, 0x14, 0x3f, 0xe3, 0xa, 0xfa}}
	return a, nil
}

var _idtablestakingScriptsGet_non_operationalCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x6b\x83\x50\x10\xc7\xf1\xfd\xfd\x15\x3f\x9c\x74\xa8\xee\x9d\x4b\xa1\x50\xec\xa0\x5b\xe9\xf0\x6a\x4e\x3d\x7c\xde\xc9\xbb\x93\x10\x42\xfe\xf7\x10\x08\x64\x48\xe6\x2f\x7c\xf8\xf2\xba\x69\x76\x7c\x26\x3d\x7e\x7d\xf4\xf1\x3f\x51\xe7\x71\x61\x99\x30\x66\x5d\x51\x3c\x87\x22\x84\xa6\x41\x3f\xb3\xc1\x86\xcc\x9b\x23\x93\xef\x59\x0c\x3e\x13\x12\x9b\x43\x47\x88\xca\x9b\x6e\x94\xa3\xb3\x4a\x4c\x10\x3d\x90\x85\x10\x87\x81\xcc\xca\x98\x52\x85\x71\x17\xac\x91\xa5\xac\xde\xf1\xdb\x79\x66\x99\xfe\x70\x0e\x00\xee\xe2\x8b\xab\x7a\x22\x6f\x55\x7e\x1e\x72\x7b\x83\xbf\xd9\xbc\xac\xea\x85\x4e\x16\x2e\xd7\x00\x00\x00\xff\xff\x38\xdb\x00\xb4\xd3\x00\x00\x00"

func idtablestakingScriptsGet_non_operationalCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_non_operationalCdc,
		"idTableStaking/scripts/get_non_operational.cdc",
	)
}

func idtablestakingScriptsGet_non_operationalCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_non_operationalCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_non_operational.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x89, 0x18, 0xff, 0x98, 0x6e, 0xd7, 0x28, 0x71, 0xee, 0x6f, 0xa0, 0x59, 0x7e, 0xc5, 0x96, 0xcb, 0xef, 0xb4, 0x9f, 0x6b, 0xe6, 0x75, 0x21, 0xb, 0x6a, 0x90, 0xb5, 0xde, 0xa5, 0xfd, 0x61}}
	return a, nil
}

var _idtablestakingScriptsGet_proposed_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x8b\xc2\x40\x10\x46\xfb\xfd\x15\x1f\xa9\x92\xe6\xd2\x5f\x1d\x0e\xd2\x1c\x42\xd2\x89\xc5\xba\x99\x6c\x06\x37\xb3\x61\x76\x82\x88\xf8\xdf\x45\xb0\xd3\xfa\xf1\x1e\x8f\xd7\x2d\xab\xe1\x2f\xe5\x6b\xdf\x8d\xfe\x9c\x68\x30\x7f\x61\x89\x98\x35\xaf\xa8\x3e\x41\xe5\x5c\xdb\x62\x5c\xb8\xa0\x04\xe5\xcd\xa0\x64\xbb\x4a\x81\x2d\x84\xb0\xab\x92\x18\x78\x22\x31\xb6\x1b\xec\xa5\x22\x91\x44\x5b\x9c\xf3\x21\x50\x29\xb5\x4f\xa9\xc1\xbc\x0b\x56\xcf\x52\x37\xbf\x38\x0e\xa6\x2c\xf1\x84\xbb\x03\xf0\x2e\x7e\xb9\xfa\x89\x64\x07\xcd\x5b\x2e\x34\xfd\xe7\x89\xfa\xae\xd4\x8d\x7b\x3c\x03\x00\x00\xff\xff\x09\xfb\xc4\x0b\xc6\x00\x00\x00"

func idtablestakingScriptsGet_proposed_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_proposed_tableCdc,
		"idTableStaking/scripts/get_proposed_table.cdc",
	)
}

func idtablestakingScriptsGet_proposed_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_proposed_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_proposed_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x53, 0xc3, 0x59, 0x7d, 0xbb, 0x1e, 0xfe, 0x8e, 0x70, 0x72, 0xc5, 0x58, 0x91, 0x67, 0xc1, 0xd3, 0x89, 0x22, 0x23, 0x5, 0xf9, 0x9c, 0xf4, 0x18, 0xbd, 0x64, 0x88, 0xef, 0x61, 0xa4, 0xcb}}
	return a, nil
}

var _idtablestakingScriptsGet_role_countsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4b\xc4\x40\x10\x46\xfb\xfd\x15\x1f\x57\x25\x8d\x87\x8d\xc8\xb5\x27\xc2\x35\x16\x1a\x7f\xc0\x9a\x4c\x92\xc5\xd9\x99\x30\x33\x8b\x45\xc8\x7f\x17\xc1\x4e\xab\x57\x3c\x78\xbc\x52\x37\xb5\xc0\x33\xeb\xd7\xed\x69\xc8\x1f\x4c\x6f\x91\x3f\x8b\x2c\x98\x4d\x2b\x4e\x7f\xc5\x29\xa5\xf3\x19\xc3\x5a\x1c\x3e\x5a\xd9\x02\x46\xd1\x4c\x1c\xb1\x12\x9c\x35\xc0\xa5\x96\x70\xcc\x6a\x10\x9d\x08\xa6\x4c\x9e\x52\x1e\x47\x72\xef\x32\x73\x8f\xb9\x09\x6a\x2e\xd2\xf5\x17\xec\xef\x37\x89\xc7\x0b\x7e\x70\xff\x70\x60\x4f\x00\x7e\xab\xff\x9c\xdd\x2d\x14\xd7\x66\x46\x12\xaf\xca\xf4\xa2\x13\x5d\xb5\x49\x78\xd7\xa7\xe3\x3b\x00\x00\xff\xff\xe7\x1d\xde\xdf\xd0\x00\x00\x00"

func idtablestakingScriptsGet_role_countsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_role_countsCdc,
		"idTableStaking/scripts/get_role_counts.cdc",
	)
}

func idtablestakingScriptsGet_role_countsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_role_countsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_role_counts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x52, 0xf9, 0xab, 0x6c, 0xc9, 0xbd, 0x96, 0x38, 0x13, 0xbc, 0x3b, 0x1, 0xb0, 0x5c, 0x4, 0xc8, 0xe4, 0x78, 0xca, 0x66, 0x28, 0x95, 0xe4, 0xb4, 0x54, 0x91, 0xa5, 0xa0, 0x3f, 0x44, 0xe9}}
	return a, nil
}

var _idtablestakingScriptsGet_slot_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\x31\x4b\x34\x31\x10\xc6\xf1\x3e\x9f\xe2\x61\xab\xdd\xe6\x3d\xde\x46\x44\x90\x2b\x14\xe1\xc0\xca\x3b\x2b\xb1\x88\xd9\xc9\xdd\xe0\x6c\x66\xc9\xcc\x62\x21\x7e\x77\xd9\x1c\xa2\xa0\x69\x52\x3c\xe1\xcf\x2f\x3c\xcd\x5a\x1d\x77\xa2\x6f\xbb\xdb\x43\x7c\x11\xda\x7b\x7c\xe5\x72\x44\xae\x3a\xa1\xfb\x3d\x74\x21\x6c\x36\x38\x9c\xd8\x60\xa9\xf2\xec\xa8\xe4\x4b\x2d\x06\x3f\x11\x4c\xd4\x21\x3c\xb1\x1b\xb2\x56\x14\x1d\x09\x55\x85\x2c\x84\x98\x12\x99\xf5\x51\x64\x40\x5e\x0a\xa6\xc8\xa5\x5f\xb7\x2b\x3c\xee\x8a\x5f\x0e\xe7\xfb\xff\x05\xde\x03\x00\x08\x79\xeb\xdd\xaf\x39\x5c\xff\x81\xfc\x77\x24\x7f\x50\xa1\xfd\xd7\x2b\xeb\x87\xa7\xb5\xf8\xdc\x02\xeb\xd9\x6e\x31\xc7\xc2\xa9\xef\x6e\x74\x91\x11\x45\x1d\x99\xcb\xf8\x43\xda\xa0\x0d\x3f\x53\xe2\xcc\x34\x36\x71\x37\x84\x56\x39\x7f\xef\x5b\x12\x3e\x3e\x03\x00\x00\xff\xff\x3b\xd0\x7e\xcc\x35\x01\x00\x00"

func idtablestakingScriptsGet_slot_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_slot_limitsCdc,
		"idTableStaking/scripts/get_slot_limits.cdc",
	)
}

func idtablestakingScriptsGet_slot_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_slot_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_slot_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xb5, 0xbb, 0x6d, 0xa6, 0x2a, 0xf, 0xfa, 0xb4, 0xc1, 0x4, 0x2, 0x12, 0x6f, 0x89, 0xa8, 0x7, 0x2f, 0x19, 0x27, 0x70, 0xe6, 0x9a, 0xc2, 0xc7, 0xa2, 0x4c, 0xd7, 0x65, 0xa4, 0x4e, 0xd0}}
	return a, nil
}

var _idtablestakingScriptsGet_stake_requirementsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4b\x03\x41\x10\x46\xfb\xfd\x15\x9f\xa9\xee\x1a\xd3\x88\x48\xc0\x4e\x02\x29\x6c\x34\xa9\xc4\x62\xb2\x99\x4b\x86\xdb\x9d\x4d\x76\x66\x51\x10\xff\xbb\xac\x96\xa6\x7d\xc3\x7c\xef\x49\x3e\x97\xea\x58\xa7\xf2\xb1\x79\xda\xd2\x3e\xf1\xab\xd3\x2c\x7a\xc4\x54\x4b\xc6\xe2\xff\x61\x11\xc2\x72\x89\xed\x49\x0c\x16\xab\x9c\x1d\x95\xbd\x55\x35\xf8\x89\xb1\xa7\x44\x1a\x19\x65\x82\x39\xcd\x7c\x80\x97\x99\xd5\x3a\x20\x68\x39\x70\x08\x14\x23\x9b\x0d\x94\xd2\x88\xa9\x29\x32\x89\x0e\xb5\x24\x5e\x61\xb7\x51\x7f\x18\x57\xd8\xad\xe5\xf3\xfe\x0e\x5f\x01\x00\x12\x77\xc7\x05\x8f\x57\x32\x6f\x8f\xec\xcf\xa2\x92\x5b\xee\x84\x5f\xf8\xd2\xa4\x72\x66\x75\x1b\xc6\xf0\xfb\xff\xd7\xd7\x27\xde\xba\xe5\xfd\x26\x7c\xff\x04\x00\x00\xff\xff\x6c\xf5\xe4\x97\xf7\x00\x00\x00"

func idtablestakingScriptsGet_stake_requirementsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_stake_requirementsCdc,
		"idTableStaking/scripts/get_stake_requirements.cdc",
	)
}

func idtablestakingScriptsGet_stake_requirementsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_stake_requirementsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_stake_requirements.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x86, 0xdf, 0xf1, 0xc8, 0xc4, 0x94, 0xcc, 0x38, 0x85, 0xa2, 0x94, 0x17, 0x58, 0xe4, 0xe, 0xc7, 0x91, 0x1f, 0xd6, 0x72, 0xd0, 0x98, 0x61, 0x35, 0x17, 0x5, 0x79, 0x52, 0xf2, 0xcc, 0xf3}}
	return a, nil
}

var _idtablestakingScriptsGet_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\xca\xc2\x40\x10\x06\xfb\x7b\x8a\x8f\x54\x49\xf3\xa7\xff\xeb\x20\xa4\xb1\x49\x3a\xb1\x38\x2f\x9b\xcb\xe2\x65\x2f\xec\x6d\x10\x11\xdf\x5d\x04\x3b\xad\x87\x19\x86\xd7\x2d\xab\xe1\x90\xf2\xad\xef\x46\x7f\x49\x34\x98\xbf\xb2\x44\xcc\x9a\x57\x54\xdf\xa0\x72\xae\x6d\x31\x2e\x5c\x50\x82\xf2\x66\x50\xb2\x5d\xa5\xc0\x16\x42\xd8\x55\x49\x0c\x3c\x91\x18\xdb\x1d\xf6\x56\x91\x48\xa2\x2d\xce\xf9\x10\xa8\x94\xda\xa7\xd4\x60\xde\x05\xab\x67\xa9\x9b\x7f\x9c\x06\x53\x96\x78\xc6\xc3\x01\xf8\x14\x7f\x5c\xfd\x45\xb2\x63\x9e\xa8\xef\x4a\xdd\xb8\xe7\x2b\x00\x00\xff\xff\x9f\x7f\xe9\x36\xbe\x00\x00\x00"

func idtablestakingScriptsGet_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_tableCdc,
		"idTableStaking/scripts/get_table.cdc",
	)
}

func idtablestakingScriptsGet_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xc8, 0x81, 0x80, 0x7d, 0x40, 0xfd, 0xf, 0xc7, 0x71, 0xe, 0x59, 0x88, 0xdd, 0x66, 0x97, 0x72, 0x23, 0xc6, 0xf1, 0x52, 0xa2, 0x60, 0x27, 0xb8, 0x71, 0x9d, 0x2, 0xcf, 0x39, 0x24, 0x16}}
	return a, nil
}

var _idtablestakingScriptsGet_total_stakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4f\xc3\x30\x14\x84\x77\xff\x8a\x6b\xa7\x44\x48\x6d\x07\x40\x08\x29\x0b\xaa\x2a\x75\x61\x69\x3a\x21\x06\x37\x7d\x29\x56\x1c\xbf\xca\x7e\x01\x2a\xd4\xff\x8e\x6a\x97\x90\x08\x3c\xd8\xb2\x7c\xf7\xdd\xf9\x99\xf6\xc8\x5e\xb0\xb2\xfc\xb1\x5e\x96\x7a\x67\x69\x23\xba\x31\xee\x80\xda\x73\x8b\xe9\xdf\x87\xa9\x52\xba\xaa\x28\x84\x4c\x5b\x9b\xa3\xee\x1c\x5a\x6d\x5c\x96\x3f\x62\xbb\x32\x9f\xf7\xb7\xf8\x52\x00\x60\x49\x10\x44\x37\xb4\x2f\xb9\x21\x17\x50\xfc\x93\x32\x3b\x90\x94\x2c\xda\x26\xcd\x26\xea\x9f\x4e\xcf\xbc\xa7\xf2\x74\xa4\x2c\x57\x91\x35\x9f\xa3\xd2\xb6\xea\xac\x16\x82\xbc\x11\xe4\xe2\x81\xeb\xda\x1d\x79\x70\x0d\x49\x11\x29\x2f\x5a\xde\xb5\x4f\xaa\xc4\xec\xcb\x15\x58\xcc\x16\x51\x51\xb3\x87\xbb\x06\xc1\xb8\x51\xd9\x59\x43\xa7\x70\xfd\xc8\xb5\xc0\x92\xe1\x58\x50\x71\xe7\x04\x69\x02\xd1\x1e\x7a\x91\xa9\x7f\x79\x93\x02\xdb\xb5\x93\x87\xec\x2e\x1f\x60\x2e\x6b\x50\x0a\xc5\xe8\x76\x33\xaa\xf0\xf2\xc3\x7a\x9d\xf4\xfe\xb3\x4a\x7b\x3c\x3c\x49\xe7\xdd\x90\xa0\xce\xdf\x01\x00\x00\xff\xff\x4d\x18\xa4\x68\xcf\x01\x00\x00"

func idtablestakingScriptsGet_total_stakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_total_stakedCdc,
		"idTableStaking/scripts/get_total_staked.cdc",
	)
}

func idtablestakingScriptsGet_total_stakedCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_total_stakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_total_staked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x84, 0x69, 0x78, 0x9e, 0xaf, 0x71, 0x2a, 0xc4, 0x96, 0xa3, 0xa6, 0x92, 0x57, 0x3c, 0x53, 0xe3, 0x4, 0xe7, 0x79, 0x41, 0x9e, 0x30, 0xd3, 0xee, 0x4c, 0xf1, 0x6c, 0xee, 0x29, 0x62, 0x56}}
	return a, nil
}

var _idtablestakingScriptsGet_total_staked_by_typeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4b\x03\x41\x10\x46\xfb\xfd\x15\x9f\xa9\xee\x1a\xd3\x88\x48\xc0\x46\x24\x90\xc6\x26\x9b\x4a\x2c\x26\x7b\x73\xc9\x72\x73\x33\xc7\xee\x04\x0d\xe2\x7f\x97\x9c\x5a\x99\x76\xe6\xe3\xbd\x97\xc7\xc9\x8a\x63\x2d\xf6\xbe\x79\x8e\xb4\x17\xde\x3a\x0d\x59\x0f\xe8\x8b\x8d\x58\xfc\x7f\x2c\x42\x58\x2e\x11\x8f\xb9\xa2\xa6\x92\x27\x47\x61\x3f\x15\xad\xf0\x23\x63\x4f\x42\x9a\x18\xd6\xa3\x3a\x0d\xdc\xc1\x6d\x60\xad\x97\x03\x41\xad\xe3\x10\x28\x25\xae\xb5\x21\x91\x16\xfd\x49\x31\x52\xd6\xa6\x98\xf0\x0a\xbb\x8d\xfa\x43\xbb\xc2\x6e\x9d\x3f\xee\xef\xf0\x19\x00\x40\xd8\xff\x60\x8f\x57\x4a\x6f\x0f\xec\xd1\x9c\x24\xce\xa6\xed\xbc\x7c\x3a\xbf\x58\xc7\xf1\x3c\x71\xd3\x86\x99\xf2\x53\xf9\x0b\x7a\xbd\xe8\xde\x6e\xc2\xd7\x77\x00\x00\x00\xff\xff\x86\x18\xde\x12\x00\x01\x00\x00"

func idtablestakingScriptsGet_total_staked_by_typeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_total_staked_by_typeCdc,
		"idTableStaking/scripts/get_total_staked_by_type.cdc",
	)
}

func idtablestakingScriptsGet_total_staked_by_typeCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_total_staked_by_typeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_total_staked_by_type.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xa5, 0x8b, 0x42, 0xe8, 0x8b, 0x45, 0x62, 0x3c, 0x6, 0x1b, 0x16, 0xa7, 0xc3, 0xfc, 0xf9, 0x75, 0xc8, 0x3b, 0xbe, 0x43, 0x97, 0xee, 0x83, 0xd6, 0x7f, 0xa5, 0x89, 0x4d, 0x3c, 0xdb, 0xe6}}
	return a, nil
}

var _idtablestakingScriptsGet_weekly_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x8a\x83\x40\x10\xc6\xf1\x7e\x9f\xe2\xc3\x4a\x9b\xb3\x39\xae\xb8\xfa\x4e\x48\x17\x88\x79\x80\x71\x1d\x75\x71\xdd\x91\x9d\x91\x24\x84\xbc\x7b\x10\xd2\x25\xed\xf7\xc1\x8f\x7f\x58\x56\xc9\x86\x26\xca\xe5\xf0\xd7\x52\x17\xf9\x64\x34\x87\x34\x62\xc8\xb2\xa0\x78\x3f\x0a\xe7\xea\x1a\xed\x14\x14\xea\x73\x58\x0d\x99\x6d\xcb\x49\x61\x13\xa3\xa3\x48\xc9\x33\x64\x80\x1a\xcd\xdc\xc3\x64\xe6\xa4\xfb\x40\x48\xd2\xb3\x73\xe4\x3d\xab\x96\x14\x63\x85\x61\x4b\x58\x28\xa4\xb2\xfa\xc5\xb9\x09\xd7\x9f\x6f\xdc\x1d\x80\x17\xfa\x21\xec\x6b\x64\xfb\x5f\xc5\x4f\xed\x0e\x1f\xe9\x26\x9b\x95\x95\x7b\x3c\x03\x00\x00\xff\xff\x18\x12\xd8\x60\xca\x00\x00\x00"

func idtablestakingScriptsGet_weekly_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_weekly_payoutCdc,
		"idTableStaking/scripts/get_weekly_payout.cdc",
	)
}

func idtablestakingScriptsGet_weekly_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_weekly_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_weekly_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x33, 0xf7, 0xf1, 0xb5, 0x1, 0x7e, 0x39, 0x3f, 0xe8, 0x81, 0x91, 0x4, 0x3e, 0x4c, 0x38, 0xba, 0x10, 0x42, 0xdd, 0xcc, 0x18, 0xf7, 0xcf, 0xa, 0xd1, 0x9e, 0x85, 0x1d, 0xc7, 0xe2, 0x81}}
	return a, nil
}

var _inspect_fieldCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x09\x42\x31\x0c\x06\xe0\x7b\xa7\xf8\x8f\x7a\x91\x22\x5a\x1f\xde\xbc\x74\x01\x71\x80\xbe\x9a\x42\xc0\x26\x8f\x98\xea\x03\x71\x77\x17\x70\x81\x8f\xfb\xa2\xe6\xc8\x0f\x7d\x5f\xc9\x5e\x5c\xe9\x52\xab\x0e\x71\x34\xd3\x8e\xb8\xb6\xe9\x9e\x28\x1e\xa7\x34\xc7\xb2\x8f\xf5\x14\xc2\x32\x66\xb4\x21\xe8\x85\x65\xb3\x3d\xe3\x96\x79\x4d\x07\x7c\x02\x00\x18\xf9\x30\xf9\xe3\xed\xdc\x8a\x3c\x4b\x75\x56\xc9\x44\xe1\xfb\x0b\x00\x00\xff\xff\x7c\xe1\x51\x3b\x7a\x00\x00\x00"

func inspect_fieldCdcBytes() ([]byte, error) {
	return bindataRead(
		_inspect_fieldCdc,
		"inspect_field.cdc",
	)
}

func inspect_fieldCdc() (*asset, error) {
	bytes, err := inspect_fieldCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inspect_field.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xeb, 0x82, 0x68, 0x87, 0xc8, 0xaf, 0x97, 0x60, 0xf6, 0x63, 0x18, 0x23, 0x85, 0x7b, 0xb6, 0xf6, 0xbb, 0x8c, 0x4d, 0x40, 0x9c, 0x25, 0xc, 0xc5, 0x56, 0xa, 0xdf, 0x63, 0xa8, 0x28, 0xea}}
	return a, nil
}

var _lockedtokensAdminAdmin_create_shared_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x72\x58\xc8\x80\x63\x79\x8f\x15\x92\x2e\x0c\x27\x8b\x16\x49\x9b\x60\x93\x76\xcf\x63\x89\xb6\x08\xd3\xa4\x4a\x51\x76\x8d\x45\xfe\x7b\x41\x52\x5f\x94\xa8\xd8\x2e\x52\xa0\x39\xc5\xd2\x9b\xaf\x37\x6f\x86\x14\xdd\xe5\x42\x2a\x58\xca\x63\xae\x44\x50\xfd\xfa\xca\xc4\xe1\x55\x6c\x09\x87\xb5\x14\x3b\xb8\x6a\x7e\x5f\x35\x88\x92\x6f\xe8\x8a\x11\x07\xd5\x7d\xd6\x20\x1f\x45\xb2\x25\xa9\x79\x56\x58\xe0\xfc\xef\xc7\xa7\xe5\xc3\xfd\xdd\xeb\xd3\xc3\xfd\xef\x8b\xbb\xbb\x6f\xf7\x2f\x2f\x41\x10\x45\x11\xbc\x4a\xe4\x05\x26\x8a\x0a\x0e\x2a\x43\x05\x2a\x23\xb0\x43\xca\x41\x99\x38\x98\xee\x28\x87\x83\x28\x59\x0a\x05\xdd\x70\x63\xa4\x04\x24\x92\xa0\x22\x80\x50\x64\x28\x49\x0a\x98\x24\xa2\xe4\x0a\x90\xa7\x80\x1c\x4a\xce\x4c\x12\x06\x8e\xf6\xd5\x5a\x48\x40\x28\x0b\x22\x83\x40\xb5\x61\xc3\x00\x00\x20\x47\xa9\x28\xb2\x85\x0e\xf7\x5c\xae\x18\x4d\x1e\xc8\x31\xae\x48\x9a\x3d\x90\xe3\x23\x2d\xd4\x3d\x57\xf2\x38\x85\x28\x82\xef\x84\x6e\x32\x15\xc3\xe7\xf9\xbc\x6b\xfe\x47\x41\xe4\x05\xd6\x3f\x55\xd6\xeb\x92\x5d\x6a\xfa\x79\x3e\x9f\x07\x13\x80\x1f\x81\x8d\x2f\x49\x8e\x92\x84\x86\xae\x18\x16\xa5\xca\x16\x96\x91\x49\x0d\xd1\x7f\x51\x04\x4b\x4b\x9c\xa6\x99\x93\x43\xcd\x5b\x61\x89\x4b\x53\xfd\x82\x4a\xd8\x92\x63\xd1\x58\x31\xa2\x2a\x9a\x2b\x9f\x70\xdb\x8d\x10\xe6\x78\x24\x32\xb6\xad\x9a\x38\x56\x9a\xec\x73\x6c\x1a\x23\x27\xcc\x4c\x67\x31\xc3\x34\x0d\xf3\x96\x18\x6f\xa3\x66\x0d\x60\x0a\x19\x16\xd9\x82\x6d\x84\xa4\x2a\xdb\x8d\xe1\x1d\xd0\x14\x0e\x15\xab\x7e\xb0\x7d\x3b\xb9\x3c\x49\xa7\xa7\xa7\x73\x74\xe1\xef\xa7\xe8\x62\xeb\x0c\x9b\x14\x3b\xc4\x7b\x13\x1c\x28\xee\x9d\xec\x86\xd8\x91\xd4\x86\xc0\x41\x5e\xad\x00\x11\x72\x49\xf7\xfa\x3f\x46\xf9\x56\x8f\xb4\x96\x64\xa1\x84\x9e\xe6\x3d\x96\x4c\x39\x4a\x32\x4f\x96\x98\xe3\x8a\x32\xaa\x8e\x70\xeb\x76\xa1\xc1\xea\xbf\x99\xf6\x78\x83\xa5\xca\x42\x67\x41\xcd\xbe\x53\x95\xa5\x12\x0f\xb8\x62\x64\x02\x9f\x9a\x1d\x37\xfb\x53\x7b\xff\x39\x74\xbc\x98\x74\xab\x1c\xa3\x75\x0d\x35\xc8\xe9\x00\xa8\x50\x6e\x88\x8a\x21\xd2\x05\xe0\xa6\x6f\xe0\xe0\x27\xce\xaf\x2f\x5f\x20\x47\x4e\x93\xf0\x6a\x69\x96\x1c\x17\xca\x32\xa2\xb3\x03\xbb\x6c\x8d\x0f\x48\x9a\xea\xaf\x5c\x46\x9b\x5d\x68\x77\x5e\xb5\x39\x77\xc8\x71\x43\xa4\x19\xec\x8a\x56\xaa\x40\x2f\x56\xcd\xb3\xb3\x35\x1d\xa6\x59\xbb\xbd\x7f\xab\x5c\xdc\x5c\x3b\x3b\x7d\x66\x03\x3e\x0e\x80\xa1\xe9\x52\xdc\x6f\xd6\xd8\xe4\x14\xb8\x27\xe1\xcd\xf5\x30\xe0\x14\x94\x88\xdd\x90\xc3\x60\x2f\x96\xe9\x67\x54\x59\x87\x0e\x5d\x81\xea\xa0\x3e\x58\x32\x27\x72\xf2\x48\xe8\x84\xc5\xb3\x15\x98\xae\x62\x5c\x55\xe7\x33\xd1\xb8\x98\xbc\x27\x2d\x57\x20\x7e\x5d\x35\x44\xfe\x22\x58\x3a\xaa\x81\xd7\x16\xe1\x96\x6e\x9b\xba\x48\x53\x49\x8a\x22\xee\x35\x1e\xed\x63\xb7\xe0\x6e\xd7\xe2\x91\x1e\xb6\xe5\xf9\x57\x9d\x51\x94\xe3\xf5\xe6\xba\x53\x44\x3f\x60\x8f\xd9\x4e\x31\x1d\x4a\xa7\xa7\x82\x1a\xe9\x7c\x1a\xf3\xd4\x93\x84\xa7\x95\x95\x9f\x5f\xf9\x5a\xd8\xcd\x39\x14\x83\x57\x08\xfe\x74\x7d\xd9\x36\xbd\x34\x07\xdb\xff\x76\x24\xec\xb1\xfb\x1f\x0d\x04\x9c\xbf\x79\xbb\x37\x4f\x7d\x2e\x75\xa7\xc5\x3b\x22\x96\x56\xc1\x18\xb1\x17\xd9\x5b\x6b\xec\xd2\xb9\x12\x52\x8a\x83\x4f\x28\x3d\x73\x0f\x63\xfa\x12\x3d\x5e\x75\xcf\xfe\xdf\x57\x6f\x53\x04\x49\xd6\x44\x12\x9e\x10\x5d\xbd\xa5\x21\x69\xbc\x77\x09\xf0\x15\xaf\x87\xbb\xbe\xe4\x39\x01\x1d\xa5\x5d\xb2\x18\xea\xbb\x7c\xdf\xb4\x3b\x83\xe3\x1b\x65\x61\x6f\xc4\x3e\xf9\xfb\x46\x25\x8a\xe0\x69\x4f\xa4\xa4\xa9\xbd\x23\xa7\x64\x6d\x0e\xdf\xf6\xfb\x48\x92\x84\xd0\x3d\x91\x23\x87\x5a\xc9\xb5\x86\xc2\xc8\xde\xa7\xda\x7b\xc0\xb7\xca\xcc\x7b\x74\xeb\x9b\x78\xed\xd7\x7e\x06\xed\x50\x6e\x8b\xfa\x59\x75\xa4\x17\x80\x45\xfb\x65\xe3\x0f\x6f\x97\xd1\x0f\x77\x62\xeb\xd8\x6f\x3d\x69\x8d\x26\x79\xc6\xf6\x39\xf3\x18\x72\xaa\xcd\x4b\x05\x5c\xc8\x1d\xb2\xb6\x5a\xca\xf5\x47\x9c\xfe\x7a\xd1\x44\x94\x9c\xfe\x55\x12\xc8\xbb\x3e\x3e\xa0\x40\x4b\xd9\xd7\xf3\xca\x3c\x75\x87\xb3\x73\xf4\x16\xbc\x05\xff\x04\x00\x00\xff\xff\xe1\x99\x64\x2f\x4a\x0f\x00\x00"

func lockedtokensAdminAdmin_create_shared_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_create_shared_accountsCdc,
		"lockedTokens/admin/admin_create_shared_accounts.cdc",
	)
}

func lockedtokensAdminAdmin_create_shared_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_create_shared_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_create_shared_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0xa1, 0x22, 0x8b, 0x77, 0x49, 0x1d, 0x1c, 0x19, 0x74, 0xb, 0x9c, 0x3b, 0xba, 0x96, 0x5a, 0xa2, 0x4d, 0xc1, 0x61, 0xd, 0xfd, 0x68, 0x5b, 0x7f, 0xeb, 0xc2, 0x9a, 0x97, 0xc8, 0x4f, 0x65}}
	return a, nil
}

var _lockedtokensAdminAdmin_deploy_contractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x4f\xc1\x4a\xc5\x30\x10\xbc\xf7\x2b\xf6\xd8\x42\xe9\x07\x14\x3c\x14\x11\x84\x27\x5e\xf4\x26\x1e\x62\xb2\x36\xa1\x6d\x36\x6c\xb6\x68\x90\xf7\xef\xd2\x86\xf6\x45\xcc\x61\x92\xcd\xce\xce\xce\xb8\x25\x10\x0b\xdc\x73\x0a\x42\x55\x25\xac\x7c\x54\x5a\x1c\xf9\x5a\x93\x17\x56\x5a\x9e\xd5\x82\x3d\xbc\x08\x3b\x3f\xb6\xa0\xc9\x14\x55\x58\x3f\x66\xa7\x2f\x98\x62\x0f\x6f\x59\xa4\xbb\x60\x7a\x72\x51\x1e\xbc\x70\x7a\x6f\xe0\xa7\x02\x00\xd8\x21\x30\x06\xc5\x58\x2b\xb3\x38\xdf\xc3\xb0\x8a\x1d\xb4\xa6\xd5\xcb\x41\xdb\xce\x8c\x02\x33\xe9\x09\xcd\x2b\x4d\xe8\x23\xdc\x95\xcc\x3a\xa8\x84\xdc\xc3\xae\xd1\xdc\x86\x8a\x81\xee\x70\x1e\x3b\x65\x4c\xed\x77\xff\x65\x9a\x23\xc5\x86\x9d\xc1\xed\x7a\xc4\xef\xba\x69\x0f\xd5\x53\xf6\x93\x18\x26\x4c\xe0\x7c\x11\xb5\xf0\xfa\x6f\xf5\x84\x29\x6f\x3d\xe9\xfd\x26\xd0\x9d\x65\x0b\x56\x45\x3b\xcc\x23\xb1\x13\xbb\xe4\xee\x9f\xaf\x16\xbe\xd0\x8d\x56\x72\x2b\xbf\x6f\x41\xaf\x55\xc6\x6b\xf5\x1b\x00\x00\xff\xff\xdf\x5c\xcb\x79\xbb\x01\x00\x00"

func lockedtokensAdminAdmin_deploy_contractCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_deploy_contractCdc,
		"lockedTokens/admin/admin_deploy_contract.cdc",
	)
}

func lockedtokensAdminAdmin_deploy_contractCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_deploy_contractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_deploy_contract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x9a, 0x97, 0x6b, 0xe8, 0x7e, 0x5e, 0x52, 0xde, 0xaf, 0x33, 0x49, 0x33, 0x5e, 0x3e, 0xa7, 0x54, 0x57, 0x9d, 0xa1, 0x71, 0x7e, 0xbe, 0x2e, 0x5e, 0x2b, 0xc2, 0x3a, 0x9d, 0xd4, 0xd2, 0x7a}}
	return a, nil
}

var _lockedtokensAdminAdmin_deposit_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xeb\x2b\x88\x1e\x36\xe7\x92\xec\x1c\xac\x2b\x0c\x27\xa7\x16\x6b\xd0\xe6\x07\x18\x89\x8d\x85\x2a\xa2\x40\xd1\xe9\x8a\xa1\xff\x3e\x28\x36\x52\xbb\xcb\x56\x9e\x6c\xe2\xbd\x47\xbe\x27\xfa\x43\x62\x51\xb8\x63\xfb\x4c\x6e\xcb\xcf\x14\x33\x3c\x09\x1f\xe0\xdb\xaf\xbb\xfb\xe6\x76\xbd\xda\xde\xdf\xae\x7f\xd6\xab\xd5\xc3\xfa\xf1\xd1\x98\xc5\x62\x01\x5a\x50\x80\xee\xe0\x23\x64\xbf\x8f\x19\xb4\xf5\x19\x54\x30\x66\xb4\xea\x39\x82\x32\x38\x4a\x9c\xbd\x02\x82\xc5\x84\x3b\x1f\xbc\xbe\x9e\xe8\x3e\x2a\x97\x6e\x97\x95\xdd\x2b\x24\xe1\xa3\x77\x24\x5f\x33\xa0\xb5\xdc\x45\x05\x6d\x51\x01\x43\xe0\x97\x22\x4d\x87\x22\x87\xce\x9d\xd8\x03\x26\x97\x9e\xb6\x04\x42\x96\xc5\x19\x33\x9a\x5e\x0d\xd2\x9b\x41\xb9\x76\x4e\x28\xe7\x25\x0c\x1f\x33\xf8\x6d\x0c\x00\x40\x12\x4a\x28\x54\x9d\xac\x2c\xa1\xee\xb4\xad\x7b\xf9\x33\xa4\x54\x20\x1d\x79\x78\x20\x4b\xfe\x48\x02\xd7\xb0\x27\x1d\xf0\xff\x18\x39\x3b\x6b\x94\x9a\xef\x49\x9b\xb3\xce\xf7\x2f\xe3\xcc\xe7\xfd\xcf\x20\xd7\x08\xa1\xb2\xfc\xa8\x26\xfc\x52\x9f\x72\x36\xdd\x2e\x78\xbb\x41\x6d\x27\xdc\x0f\x9b\xec\x58\x84\x5f\xaa\x69\xf7\xe6\x06\x12\x46\x6f\xab\xab\x86\xbb\xe0\x20\xb2\x42\x0f\x1c\xd9\x2f\x81\xf7\xfe\x85\x9e\x48\x28\x5a\xba\x9a\x4d\xb3\x3a\xdd\x47\x5d\x32\x6d\x38\x04\xea\x2f\xe2\xba\x3f\x98\xff\x66\xb0\xbd\x40\xfc\x90\xc1\x05\xff\xef\xac\x8d\xf8\x23\x2a\x4d\xcc\x8f\x76\xfb\xfb\x0d\xe7\xe8\xdc\xfb\x36\x95\xc5\xb4\xbc\xb8\x7d\x9f\xd3\x9b\x79\x33\x7f\x02\x00\x00\xff\xff\x99\xa2\xb5\xd4\x2f\x03\x00\x00"

func lockedtokensAdminAdmin_deposit_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_deposit_account_creatorCdc,
		"lockedTokens/admin/admin_deposit_account_creator.cdc",
	)
}

func lockedtokensAdminAdmin_deposit_account_creatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_deposit_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_deposit_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x2, 0x6d, 0x5e, 0xa, 0xf2, 0x7f, 0x1a, 0x87, 0x59, 0x63, 0xdc, 0xac, 0xd3, 0x8d, 0xa9, 0x8c, 0x80, 0x27, 0x34, 0xba, 0xa0, 0x2d, 0xb0, 0x9d, 0xf3, 0x75, 0x53, 0x53, 0x73, 0x8, 0x74}}
	return a, nil
}

var _lockedtokensAdminAdmin_remove_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xc1\x4f\xfa\x50\x0c\xc7\xef\xfb\x2b\xfa\xe3\xf0\xcb\x76\x90\x78\x26\x28\x99\x6c\x26\x04\x04\xc3\xde\xc5\x63\x79\x2b\x63\xe1\xed\x75\xe9\x8a\x68\x0c\xff\xbb\x99\x73\x32\x4f\xf6\xd6\xf4\xf3\x69\xbf\x2d\xab\x9a\x45\xe1\xd1\xf1\x79\x91\x18\xdc\x39\xca\x14\x8f\xa5\x2f\x60\x2f\x5c\xc1\xed\xdb\x22\x49\xd7\x66\x61\x5e\x4c\xfc\xb0\x4a\xe3\x24\xd9\xa6\x59\x16\x7c\x5b\x2b\xb6\x47\xca\x0d\x1f\xc9\x37\x3d\xbf\xda\xcc\x97\x69\x62\x36\xcb\x74\xdd\xd3\x81\x0a\xfa\x06\xad\x96\xec\xe1\x23\x08\x00\x00\x6a\xa1\x1a\x85\xc2\xa6\x2c\x3c\xc9\x04\xe2\x93\x1e\x62\x6b\xf9\xe4\x35\xea\x99\xb6\x1c\x29\x54\xe8\xb1\x20\xd9\xd2\x1e\xee\xa0\x13\xc6\x3b\x16\xe1\xf3\xf4\xff\x30\xc2\x78\xd0\x3c\x75\xce\x7d\xd8\xc6\x9a\xc0\x1f\x58\xa6\x2c\x58\xd0\x33\xea\x21\xfa\x39\xdd\xd6\x6c\x06\x35\xfa\xd2\x86\xa3\x39\x9f\x5c\x0e\x9e\x15\xba\xd3\x80\x20\xb4\x27\x21\x6f\x09\x94\x41\x0f\x04\xee\x6b\x31\x68\xbb\xb9\x4f\x3d\x8a\x7e\x3f\x93\x93\xa3\x02\x95\x05\xa6\x37\x83\xcf\xc6\x42\x15\xbf\x52\xd2\x4f\xc3\xe8\xdf\xd5\xcb\xa9\x51\xe1\xf7\xab\xdb\x8d\x2e\xc1\x25\xf8\x0c\x00\x00\xff\xff\x33\x91\x55\x64\xc0\x01\x00\x00"

func lockedtokensAdminAdmin_remove_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_remove_delegatorCdc,
		"lockedTokens/admin/admin_remove_delegator.cdc",
	)
}

func lockedtokensAdminAdmin_remove_delegatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_remove_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_remove_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x45, 0x4f, 0xc6, 0x2d, 0xa8, 0x8, 0x67, 0x3d, 0x3b, 0x76, 0x24, 0x7e, 0x97, 0xc8, 0x6, 0x34, 0xe8, 0xea, 0xfa, 0x7b, 0x91, 0x9c, 0x76, 0x38, 0x88, 0x31, 0x29, 0xb2, 0x25, 0x1, 0xf6}}
	return a, nil
}

var _lockedtokensAdminCheck_main_registrationCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6a\xdb\x40\x10\x86\xef\x7a\x8a\x89\x0e\x45\x86\x22\x7a\x16\x75\x82\x90\x5d\x5a\x12\x9a\x10\xfb\x05\xc6\xab\x91\xbc\x64\xb5\x23\x76\x47\xa4\xa5\xe4\xdd\x8b\x56\x92\xd1\x36\xa6\x87\xec\xc5\xec\xf8\xdf\x99\xff\xff\x34\xba\xeb\xd9\x09\x7c\x1b\x6c\xab\x4f\x86\x8e\xfc\x42\x16\x1a\xc7\x1d\xa4\x51\x2d\x4d\x16\xa5\xe1\xd7\x48\xb5\xdc\xd3\x64\x91\x3c\xb0\x7a\xa1\x3a\x14\xfd\xa4\xfa\xf2\xeb\xe1\xb1\xba\xdf\xef\x8e\x8f\xf7\xfb\x9f\xe5\x6e\xf7\xbc\x3f\x1c\x92\x44\x1c\x5a\x8f\x4a\x34\xdb\xac\x43\x6d\x4b\xa5\x78\xb0\x52\x40\x59\xd7\x8e\xbc\xdf\xc0\x9f\x24\x01\x00\xe8\x1d\xf5\xe8\x28\xf3\xba\xb5\xe4\x0a\x28\x07\x39\xcf\xe2\x8b\x66\x3c\x86\x04\xb0\xee\xb4\x7d\xa6\x06\xb6\x30\xc9\xf3\x13\x3b\xc7\xaf\x5f\x3f\xad\x6d\xe5\xe1\xa7\x1c\xb5\x15\x1b\x43\xc1\xc4\x6d\x36\x9a\x2d\x22\xff\xf9\xea\xf2\x8f\xfc\x20\xec\xb0\xa5\x27\x94\xf3\xe6\x62\x61\x3c\x77\x77\xd0\xa3\xd5\x2a\x4b\x2b\x1e\x4c\x0d\x96\x05\x26\x13\x80\xe0\xa8\x21\x47\x56\x11\x08\x83\x9c\x09\x4c\x18\x00\x12\x98\x06\xf7\xa0\x2e\x33\xd2\x4d\x9c\x6e\x12\xcf\xd9\x7f\xd8\x86\xa7\xa4\x2d\xc9\x5c\x5b\x83\x8c\x5d\xe5\x2d\x49\x85\x3d\x9e\xb4\xd1\xf2\xfb\x1a\x8e\xef\x6c\x6a\x72\xb7\xd9\x95\xfc\xab\x89\x4f\xc3\xc9\x68\xf5\x3e\xf5\xcc\x39\xfb\x28\x8b\x3e\xf4\x85\x77\xf3\xfe\x8b\x00\xb6\x57\x91\x8c\x59\xa3\x46\xf3\x46\x65\xab\x5e\xe8\x3d\x39\xc9\x22\xb7\xcb\xf2\xe4\x2b\xa0\x38\x3d\x2d\xe2\x41\x1b\xb8\xd9\x82\xd5\xe6\x73\xf4\xbe\x23\xef\xb1\xa5\x02\xd2\xe3\x99\xc0\xf7\xa4\x74\xa3\xa9\x06\x9c\xdd\x6a\x1f\x00\xe0\xf2\xd1\xe7\xfa\x0d\x54\x68\xc7\x3f\x3c\xd9\x3a\x5a\x08\x9f\x5e\xfa\x4f\x5c\xdf\x92\xb7\xe4\x6f\x00\x00\x00\xff\xff\xb0\x35\x89\xe4\xb4\x03\x00\x00"

func lockedtokensAdminCheck_main_registrationCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCheck_main_registrationCdc,
		"lockedTokens/admin/check_main_registration.cdc",
	)
}

func lockedtokensAdminCheck_main_registrationCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCheck_main_registrationCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/check_main_registration.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x5e, 0x3e, 0x1d, 0xe0, 0xfa, 0x52, 0x26, 0x28, 0x3d, 0x94, 0xf9, 0x8, 0x79, 0xe4, 0xad, 0xa9, 0xe, 0x74, 0x85, 0x19, 0x24, 0x6b, 0x90, 0xa, 0xd0, 0x8a, 0x64, 0x32, 0x41, 0xdf, 0x72}}
	return a, nil
}

var _lockedtokensAdminCheck_shared_registrationCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x8e\xa3\x30\x10\x44\xef\xfe\x8a\x0a\x87\x15\x48\x2b\xb4\x67\xb4\xd9\x08\x91\xec\x25\xd1\x64\x94\xe4\x07\x1c\xd3\x80\x15\x63\x23\xdb\x28\x23\x8d\xf2\xef\x23\x20\x30\xf1\xf4\x05\x75\xf3\xda\x5d\x55\xb2\xed\x8c\xf5\xf8\xdf\xeb\x5a\x5e\x15\x5d\xcc\x8d\x34\x2a\x6b\x5a\x44\xc1\x2c\x62\x33\xa9\xcc\x3d\xa0\xe6\x3e\x62\x33\x72\x30\xe2\x46\xe5\x38\x74\x13\xf5\xe7\xe3\x70\x2c\xf6\xbb\xed\xe5\xb8\xdf\xbd\xe5\xdb\xed\x69\x77\x3e\x33\xe6\x2d\xd7\x8e\x0b\x2f\x8d\x8e\xd5\xb8\x93\x0b\x61\x7a\xed\x33\xe4\x65\x69\xc9\xb9\x04\x9f\x8c\x01\x40\x67\xa9\xe3\x96\x62\x27\x6b\x4d\x36\x43\xde\xfb\xe6\x09\x2f\xcc\x50\x8a\x3c\x78\xd9\x4a\x7d\xa2\x0a\x6b\x4c\x78\x7a\x35\xd6\x9a\xfb\xdf\x5f\xaf\xc2\xd2\xf1\x93\x0f\x6c\x61\x94\xa2\x51\xc6\xbf\x78\x90\x9b\x05\x0e\xd2\x97\xe6\x07\x7e\xf6\xc6\xf2\x9a\xde\xb9\x6f\x92\x45\xc2\x50\x9b\x0d\x3a\xae\xa5\x88\xa3\xc2\xf4\xaa\x84\x36\x1e\x93\x08\x70\x58\xaa\xc8\x92\x16\x04\x6f\xe0\x1b\xc2\xe4\x1d\x7e\x4c\x75\x54\x0f\xb1\xdc\x88\x92\x6f\x77\xdc\x39\xb2\x1e\x71\x70\x6b\xb6\x9b\xd6\xe4\x9f\x91\xc4\x7c\x8a\x2f\x43\x10\x6b\x82\xd5\x1a\x5a\xaa\xdf\xc1\x7e\x4b\xce\xf1\x9a\x32\x44\x97\x86\xe0\x3a\x12\xb2\x92\x54\x82\x4f\x4b\x90\x6e\x94\xcf\x67\x99\xcf\xf9\x0a\x05\xd7\xc3\x0f\x47\xba\x0c\x2c\xb8\x68\x79\x7f\x4a\xe5\xc1\x1e\xec\x2b\x00\x00\xff\xff\x68\xc2\xee\x14\x68\x02\x00\x00"

func lockedtokensAdminCheck_shared_registrationCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCheck_shared_registrationCdc,
		"lockedTokens/admin/check_shared_registration.cdc",
	)
}

func lockedtokensAdminCheck_shared_registrationCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCheck_shared_registrationCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/check_shared_registration.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xd8, 0xf0, 0x95, 0xb, 0x58, 0x4e, 0x30, 0x91, 0x95, 0x2, 0x4a, 0xc5, 0xf3, 0x33, 0x3f, 0xe8, 0x7e, 0xad, 0xc5, 0x26, 0x38, 0xcf, 0x79, 0x47, 0xb0, 0xf2, 0xf6, 0xd5, 0x1a, 0xaf, 0xac}}
	return a, nil
}

var _lockedtokensAdminCustody_create_account_with_lease_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x72\x58\xc8\x80\x63\xa5\x57\xc1\xc9\xc2\x70\xb2\x68\x91\xb4\x09\x36\x69\xf7\x3c\x96\xc6\x16\x61\x99\x54\x49\xca\xae\xb1\xc8\x7f\x2f\x48\xea\x8b\xb2\x14\x27\x68\x0e\xf5\xc1\x80\xc4\x37\xc3\x79\x6f\x3e\x34\x6c\x57\x08\xa9\x61\x29\x8f\x85\x16\x41\xf5\xf4\x2d\x17\x87\x17\xb1\x25\x0e\x6b\x29\x76\x70\xd1\x3c\x5f\x34\x88\x92\x6f\xd8\x2a\x27\x0f\xd5\x7d\xd7\x20\x1f\x44\xb2\xa5\xd4\xbe\x53\x0e\x78\xf5\xcf\xc3\xe3\xf2\xfe\xee\xf6\xe5\xf1\xfe\xee\x8f\xc5\xed\xed\xf7\xbb\xe7\xe7\x20\x88\xa2\x08\x5e\x24\x72\x85\x89\x66\x82\x83\xce\x50\x03\x42\x52\x2a\x2d\xd2\x23\x14\x52\xec\x59\x4a\x12\x0e\xa2\xcc\x53\x50\x6c\xc3\xad\x89\x16\x90\x48\x42\x4d\x80\xa0\x32\x94\x94\x02\x26\x89\x28\xb9\x06\xe4\x29\x20\x87\x92\xe7\x36\x04\x0b\xaf\xcf\xd6\x42\x02\x42\xa9\x48\x06\x81\x6e\x6f\x0d\x03\x00\x80\x75\x99\xe7\x8b\x74\xc7\xf8\x53\xb9\xca\x59\x72\x4f\xc7\xb8\x12\x68\x76\x4f\xc7\x07\xa6\xf4\x1d\xd7\xf2\x38\x85\x28\x82\x1f\xc4\x36\x99\x8e\xe1\x97\xab\xab\xab\xc6\xf8\x4f\x45\xf2\xa3\xb6\x13\x80\x9f\x81\xf5\x50\x48\x2a\x50\x52\x58\x51\x7f\xaa\x98\xc7\xb0\x28\x75\xb6\x70\x04\x26\x35\xd8\xfc\x72\xd2\x15\xf7\xea\x14\xae\xbb\xd8\xb0\xc0\xa3\x31\xef\xf9\x9b\x78\xf6\x46\x8a\x8f\x59\x37\xe6\xde\xd5\xb3\x2d\x1d\xd5\x0c\xd3\x34\x2c\x5a\x01\x4e\x05\x9d\x35\xa7\x53\xc8\x50\x65\x8b\x7c\x23\x24\xd3\xd9\x6e\x10\xec\x21\xa6\x70\xa8\x74\x1b\x40\xba\xa3\x96\x9a\xf9\x35\x0f\x1d\x8e\xa3\x61\x7a\xa9\x3b\x13\xa5\x8f\x7d\x23\x48\x1f\x58\xc5\x08\xe0\x67\x70\x8f\x65\xae\x97\x58\xe0\x8a\xe5\x4c\x1f\xe1\xda\x17\xd6\xa3\x34\xcb\x19\xdf\xce\xb1\xd4\x59\xe8\x75\xdd\xec\x07\xd3\x59\x2a\xf1\x80\xab\x9c\x26\xf0\xa5\x69\xdc\xd9\x5f\xc6\xfb\x4d\x18\x15\x92\xed\x51\x53\xb4\xae\x4f\xec\xc1\x14\x34\xca\x0d\xe9\x18\x22\xa5\x85\xc4\x4d\x1f\xe0\x2b\xfa\xf5\x2b\x14\xc8\x59\x12\x5e\x2c\x6d\x37\x72\xa1\xc1\x44\x64\x07\x07\xb8\x99\x60\xcd\x20\x69\xf8\x5c\x4c\x7c\xba\x79\x3b\x17\x7e\x47\x8e\x1b\x92\x30\xbf\xf4\xa6\xc5\xcc\x35\xf6\xc3\x09\x30\xb4\x52\xc5\x7d\xc5\x46\x4b\x52\xe1\x9e\xc2\xf9\xe5\xe9\x8d\x53\xd0\x22\xf6\xef\x3c\xbd\xed\xd9\x09\xf2\x84\x3a\xeb\x51\xd0\x1d\xd4\x27\x27\xee\x4c\x4c\x37\xa1\xe7\xd5\xfc\xce\x58\x3c\xb9\xbc\x1b\x16\xd3\x13\xdb\x3a\xf9\xef\x57\xa2\x71\x31\x79\xab\x1c\xac\x40\xb0\xab\xd2\x3b\x5e\x0b\x16\xf7\xab\xc8\xd3\xd1\x22\x78\x69\x11\xa1\xcb\xe3\x22\x4d\x25\x29\x15\xf7\x72\x8d\xee\xf5\xd4\x4b\x4e\x3c\x92\xaa\x4e\x18\xdd\xd9\x60\xeb\xc5\x13\x69\x7e\xd9\x09\x71\x0a\xde\xd9\x49\x09\x75\x62\xed\x28\xd6\xaa\x3e\x72\xab\xad\x8c\x2f\x63\x9e\x6e\xc2\x81\xe4\x54\xa6\xbf\xf1\xb5\x70\xe3\xc5\x5e\x34\x9c\xce\xe1\xa8\x86\x12\x61\x47\xea\xff\xb6\x9e\xdd\xc0\xff\xdc\x6a\x7e\xe7\x74\x73\xe5\xdc\xfb\x10\x9a\x0d\xc4\xab\xf3\xe1\x41\x57\x89\xb7\x34\xd5\x2c\x24\x5c\xf7\xdd\xf8\xaa\xae\x84\x94\xe2\x30\x1f\x92\xcd\x77\x74\x13\x9a\x95\x6a\x90\xab\x0f\xfc\x10\x5b\x77\x3d\x48\x5a\x93\x24\x9e\x90\xe1\x38\xe4\xd4\xa3\x3a\x70\x6e\xba\xb1\x5e\x23\xbc\x1a\x3a\xd7\xbc\xf5\xce\xd6\x87\x77\xfb\xc5\xef\x74\x5b\x16\xf1\x60\x01\x77\x82\x8c\x22\x78\xdc\x93\x94\x2c\x25\xd0\x19\x41\x4a\x6b\xfb\x99\x6a\x17\x5e\x49\x09\xb1\x7d\x27\x1f\x7e\x84\x25\x37\x95\x10\x46\x6e\x31\x68\x3f\x92\xdf\x2b\xb3\x91\xcd\x23\x8a\xea\x2d\x95\xd3\xa1\xb9\xc3\xed\xb8\x3b\x94\x5b\x55\xbf\x4b\x1d\x03\x05\xa8\xda\xc5\x75\x38\x14\x37\x2f\x7e\xfa\x6d\x57\xc7\xf1\xda\xeb\xa8\xd1\x80\xfd\xf6\xf9\x2f\x1f\x02\x4f\xe5\xa2\x5c\x01\x17\x72\x87\x79\xcb\x96\x71\xb3\xa3\x9b\xdd\xd6\x08\x51\x72\xf6\x77\x49\x50\x74\x7d\x7c\x02\x41\x27\xd9\xb7\xf7\xd1\x1c\x59\x76\x3a\x9c\xcc\xff\x6b\xf0\x1a\xfc\x1b\x00\x00\xff\xff\x49\x1d\x2e\x96\x27\x0d\x00\x00"

func lockedtokensAdminCustody_create_account_with_lease_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_account_with_lease_accountCdc,
		"lockedTokens/admin/custody_create_account_with_lease_account.cdc",
	)
}

func lockedtokensAdminCustody_create_account_with_lease_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_account_with_lease_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_account_with_lease_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xb4, 0x47, 0x1b, 0xab, 0xd0, 0x47, 0xde, 0xba, 0xa3, 0xaf, 0x77, 0x36, 0x0, 0xb5, 0x18, 0x4d, 0xa0, 0x72, 0x13, 0x98, 0xbc, 0x7d, 0x59, 0x24, 0x80, 0x45, 0x26, 0xca, 0x13, 0xcb, 0x41}}
	return a, nil
}

var _lockedtokensAdminCustody_create_only_lease_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\x06\x39\x2c\x64\xc0\xb1\xd2\xab\xe0\x64\x61\x38\x59\xb4\x48\xda\x04\x9b\xa0\x7b\x1e\x4b\x63\x8b\x30\x4d\xaa\x24\x65\x57\x08\xf2\xef\x05\x49\x59\x16\x65\xa9\x49\xd1\x1c\xd6\x07\x03\x22\xdf\x0c\x67\xde\xbc\x21\x87\xed\x4a\xa9\x0c\x2c\x55\x5d\x1a\x19\x35\x5f\xdf\xb8\x3c\xbc\xc8\x2d\x09\x58\x2b\xb9\x83\x8b\xf6\xfb\xa2\x45\x54\x62\xc3\x56\x9c\x02\x54\x77\xad\x45\x3e\xc8\x6c\x4b\xb9\x5b\xd3\x1e\x78\xf5\xf7\xc3\xe3\xf2\xfe\xee\xf6\xe5\xf1\xfe\xee\x8f\xc5\xed\xed\xf7\xbb\xe7\xe7\x28\x4a\x92\x04\x5e\x14\x0a\x8d\x99\x61\x52\x80\x29\xd0\x00\x42\x56\x69\x23\xf3\x1a\x4a\x25\xf7\x2c\x27\x05\x07\x59\xf1\x1c\x34\xdb\x08\x67\x62\x24\x64\x8a\xd0\x10\x20\xe8\x02\x15\xe5\x80\x59\x26\x2b\x61\x60\x2d\x15\x20\x54\xda\x1a\x15\x12\x90\x2b\xc2\xbc\x76\x56\x05\x6a\x30\x05\x31\x05\x95\xe0\x2e\xc0\xd6\xca\x7b\xcb\x2d\xcc\xc7\x54\xd0\x39\xc8\xd9\x4b\x17\x85\xf5\x03\xa6\x13\x38\x72\x2d\xa3\xa8\xb3\x12\x47\x00\x00\xeb\x8a\xf3\x45\xbe\x63\xe2\xa9\x5a\x71\x96\xdd\x53\x9d\x36\xac\xcf\xee\xa9\x7e\x60\xda\xdc\x09\xa3\xea\x29\x24\x09\xfc\x20\xb6\x29\x4c\x0a\xbf\x5c\x5d\x5d\x45\x13\x80\xd7\xc8\xb9\x28\x15\x95\xa8\x28\x6e\x38\x79\x6a\x28\x49\x61\x51\x99\x62\xe1\x43\x9b\xba\x84\x9b\x8f\x60\x67\x72\x74\x63\x7f\x9c\x4c\x43\x57\xb3\x0b\xd7\x5d\x6c\x5c\x62\x6d\x1d\xf7\x4e\x9a\x9c\x1c\x04\xc6\xb3\x2d\xd5\x7a\x86\x79\x1e\x97\xa7\xe4\xce\x13\x9e\xb5\xbb\x53\xcb\x60\xb1\xe0\x1b\xa9\x98\x29\x76\x83\xe0\x00\x31\x85\x43\xc3\xc9\x00\xd2\x6f\x4d\xc2\xec\xf6\x58\x71\xb3\xc4\x12\x57\x8c\x33\x53\xc3\x75\x18\x72\x8b\xb5\xbf\x19\x67\x62\x3b\xc7\xca\x14\x71\x20\xe2\xd9\x0f\x66\x8a\x5c\xe1\x01\x57\x9c\x26\xf0\xa5\xed\x83\xd9\x9f\xd6\xfb\x4d\x9c\x94\x8a\xed\xd1\x50\xb2\x3e\xee\xb8\x8d\x29\x18\x54\x1b\x32\x29\x24\xda\x48\x85\x9b\x3e\x60\x12\x1c\xff\xf5\x2b\x94\x28\x58\x16\x5f\x2c\x9d\xb8\x85\x34\x60\x23\x72\x7d\x08\xbe\xc5\x9c\x19\x64\x6d\x3e\x17\xbd\x74\xf9\xa9\xcd\x7e\x47\x81\x1b\x52\x30\xbf\x0c\x9a\x6f\xe6\x95\xfd\x70\x06\x8c\x1d\x55\x69\x9f\xb1\xd1\x62\x6b\xdc\x53\x3c\xbf\x3c\x3f\x71\x0a\x46\xa6\xe1\x99\xe7\xa7\x3d\x7b\x42\x9e\xd0\x14\xbd\x14\x4c\x07\xf5\xc9\x85\x7b\x27\xa6\x9b\x38\xf0\x6a\x7f\xef\x58\x3c\xf9\xba\xdb\x2c\xa6\x67\xb6\xc7\xe2\x7f\x9c\x89\xd6\xc5\xe4\xdf\xe4\xe0\x08\x82\x5d\x53\xde\x71\x2d\x38\xdc\xaf\x92\xe7\xa3\x22\x78\x39\x21\x62\x5f\xc7\x45\x9e\x2b\xd2\x3a\xed\xd5\x1a\xfd\xf2\x34\x28\x4e\x3a\x52\xaa\x4e\x18\x9d\x4b\xc8\xeb\x25\x20\x69\x7e\xd9\x09\x71\x0a\xc1\xde\x99\x84\x3a\xb1\x76\x18\x3b\xb1\x3e\x72\xaa\x53\xc6\x97\x31\x4f\x37\xf1\x40\x71\x1a\xd3\xdf\xc4\x5a\xfa\xcb\xc5\x1d\x34\x5c\xce\xe1\xa8\x86\x0a\xe1\x2e\xab\x9f\x56\xcf\xfe\x2a\xfd\x5c\x35\x7f\xf0\x76\xf3\x72\xee\x3d\x31\xf6\x59\x0d\x74\x6e\xc5\x3d\x70\xd3\x35\xec\x2d\xad\x9c\xa5\x82\xeb\xbe\x9f\x90\xd6\x95\x54\x4a\x1e\xe6\x43\xbc\x85\x8e\x6e\x62\x3b\xa2\x0c\x26\x1b\x02\xff\x53\xba\xfe\x78\x50\xb4\x26\x45\x22\x23\x9b\xe4\x90\xd3\xa0\x91\x07\xf6\x6d\x3b\x1e\x5f\xe8\x40\x44\xef\x75\xef\x71\x80\xe9\xc3\xbb\x0d\x13\xb6\xba\xd3\x45\x3a\xa8\xe0\x4e\x90\x49\x02\x8f\x7b\x52\x8a\xe5\xe4\xe6\xa0\x9c\xd6\xee\x9d\x3a\x0d\x90\x8a\x32\x62\xfb\x4e\x3d\xc2\x08\x2b\x61\xa5\x10\x27\x7e\x32\x38\xbd\x92\xdf\x1b\xb3\x90\xdb\xee\xb9\xcd\xd4\x27\xe8\xd0\x9e\xe1\x67\xc6\x1d\xaa\xad\x3e\xae\xe5\x3e\x03\x0d\xa8\x5b\x12\x46\x42\xf1\x17\xc6\x6b\xd8\x77\xc7\x38\xde\x7a\x2d\x35\x1a\x70\xd8\x3f\xff\xe7\x25\x08\x58\x2e\xab\x15\x08\xa9\x76\xc8\x4f\xd9\x32\x61\x67\x5e\x3b\x12\x5a\x22\x2a\xc1\xfe\xaa\x08\xca\xae\x8f\x4f\x48\xd0\x53\xf6\xed\x63\x69\x8e\x4c\x3b\x9d\x9c\xec\xff\x5b\xf4\x16\xfd\x13\x00\x00\xff\xff\x4b\x6b\x23\x4c\x77\x0c\x00\x00"

func lockedtokensAdminCustody_create_only_lease_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_only_lease_accountCdc,
		"lockedTokens/admin/custody_create_only_lease_account.cdc",
	)
}

func lockedtokensAdminCustody_create_only_lease_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_only_lease_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_only_lease_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0xff, 0xc4, 0xdd, 0x5e, 0xf5, 0xee, 0x61, 0x9e, 0x13, 0x8, 0xce, 0x17, 0x29, 0x19, 0x5, 0x89, 0x24, 0x24, 0xaa, 0xb, 0x4c, 0x4c, 0x9e, 0x78, 0xd6, 0xf4, 0x65, 0x76, 0xea, 0xbc, 0xc9}}
	return a, nil
}

var _lockedtokensAdminCustody_create_only_shared_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\x39\x2c\x64\xc0\xb1\xdc\x63\x0d\x67\x17\x86\x93\x45\x8b\xa4\x4d\xb0\x49\xbb\xe7\xb1\x34\xb6\x08\xd3\xa4\x4a\x52\x76\x85\x45\xde\xbd\x20\x29\xcb\xa2\x2c\x35\xce\x62\x0f\xab\x93\x45\x7e\xf3\xf7\xcd\x8f\xc6\x6c\x57\x48\x65\x60\xa9\xaa\xc2\xc8\xa8\x7e\xfb\xcc\xe5\xe1\x45\x6e\x49\xc0\x5a\xc9\x1d\x5c\x35\xef\x57\x0d\xa2\x14\x1b\xb6\xe2\x14\xa0\xda\x67\x0d\xf2\x41\xa6\x5b\xca\xdc\x99\xf6\xc0\xe9\xbf\x0f\x8f\xcb\xfb\xbb\xdb\x97\xc7\xfb\xbb\x3f\x17\xb7\xb7\x5f\xee\x9e\x9f\xa3\x28\x49\x12\x78\x51\x28\x34\xa6\x86\x49\x01\x26\x47\x03\x08\x69\xa9\x8d\xcc\x2a\x28\x94\xdc\xb3\x8c\x14\x1c\x64\xc9\x33\xd0\x6c\x23\x9c\x88\x91\x90\x2a\x42\x43\x80\xa0\x73\x54\x94\x01\xa6\xa9\x2c\x85\x81\xb5\x54\x80\x50\x6a\x2b\x94\x4b\x40\xae\x08\xb3\xca\x49\xe5\xa8\xc1\xe4\xc4\x14\x94\x82\x3b\x07\x1b\x29\xaf\x2d\xb3\x30\xef\x53\x4e\xe7\x20\x27\x2f\x9d\x17\x56\x0f\x98\x96\xe3\xc8\xb5\x8c\xa2\xd6\x49\x1c\x01\x00\x14\xa8\x0c\x43\xbe\xc8\x76\x4c\x3c\x95\x2b\xce\xd2\x7b\xaa\x66\x35\xf1\x93\x7b\xaa\x1e\x98\x36\x77\xc2\xa8\x6a\x0c\x49\x02\x5f\x89\x6d\x72\x33\x83\x5f\xa6\xd3\xb6\xf8\x5f\x9a\xd4\x3b\xa4\x7f\x9d\x4e\xa3\x11\xc0\xb7\xc8\xeb\x50\x54\xa0\xa2\xb8\xe6\xf4\xa9\xa6\x74\x06\x8b\xd2\xe4\x0b\x1f\xda\xd8\x11\x56\xbf\x04\x37\xa3\xa3\x1a\xfb\x70\x32\x35\xdd\xf5\x2d\xdc\xb4\xb1\x71\x81\x95\x55\xdc\xb1\x34\x3a\x29\x08\x84\x27\x5b\xaa\xf4\x04\xb3\x2c\x2e\x4e\xb1\xf5\x12\x36\x69\x00\x63\x9b\x84\x7c\xc1\x37\x52\x31\x93\xef\x86\xf0\x01\x68\x0c\x87\x9a\x98\x7e\xb0\xbf\x1d\xbd\xdf\xc9\x20\x2d\x6f\xfb\x18\xc2\xff\xdf\xc5\x10\x7b\xf4\x30\x48\xc4\x1e\x4b\x6e\x96\x58\xe0\x8a\x71\x66\x2a\xb8\x09\x1d\x6f\xb0\xf6\x99\x70\x26\xb6\x73\x2c\x4d\x1e\x07\xfd\x3a\xf9\xca\x4c\x9e\x29\x3c\xe0\x8a\xd3\x08\x3e\x34\x2d\x3f\xf9\xdb\x6a\xff\x18\x27\x85\x62\x7b\x34\x94\xac\x8f\x37\xee\x62\x0c\x06\xd5\x86\xcc\x0c\x12\x6d\xa4\xc2\x4d\x17\x30\x0a\xcc\x7f\xfa\x04\x05\x0a\x96\xc6\x57\x4b\xd7\xc7\x42\x1a\xb0\x1e\xb9\x91\x03\x7e\x9a\x38\x31\x48\x9b\x78\xae\x3a\xe1\xf2\xd3\x44\xf9\x03\x05\x6e\x48\xc1\xfc\x3a\x98\x33\x13\xdf\xc4\x0f\x67\xc0\xd8\x51\x35\xeb\x32\x36\x58\x97\x1a\xf7\x14\xcf\xaf\xcf\x2d\x8e\xc1\xc8\x59\x68\xf3\xdc\xda\xb3\x27\xe4\x09\x4d\xde\x09\xc1\xb4\x50\x3f\x38\x71\x6f\xf8\xf4\x31\x0e\xb4\xda\xe7\x0d\x89\x27\x9f\x77\x1b\xc5\xf8\x4c\xf6\x98\xfc\xcb\x99\x08\x54\x5c\x58\x1c\x8e\x2e\xd8\xd5\xc9\x1e\xae\x0c\x87\xfb\x4d\xf2\x6c\xb0\x24\x5e\x4e\x88\x90\x08\x9f\xe2\x45\x96\x29\xd2\x7a\xd6\x29\x03\xf4\xc7\x61\xf8\xed\x1c\xce\x06\x32\x1a\x9d\x02\x6d\x7e\xb6\xe6\xab\xaf\xaf\x40\xeb\xfc\xba\x15\x44\xd7\x60\x87\xe7\x56\x30\x2d\x82\xc7\x6f\x19\x75\x85\xf4\x61\x48\x53\xa7\x40\x7a\x12\x5b\xeb\xf9\x5d\xac\xa5\x1f\x4c\xe7\xa5\xd1\x5b\x16\xfd\xee\xf6\x79\xdb\xe4\xd2\xcd\xe7\x9f\xb6\x41\xfc\xd7\xe3\x67\x69\x8f\xce\xb7\xd6\xee\x27\x41\xdf\xd8\x66\xe9\x99\xa3\x35\x95\x4b\xdb\x1e\x52\xc1\x4d\x57\x4f\xc8\xf1\x4a\x2a\x25\x0f\xf3\x3e\x12\x43\x45\x3d\x34\xda\xe5\xaf\x97\x8a\x50\xf2\xfb\xc9\xf0\xce\x81\xa2\x35\x29\x12\x29\x59\x0a\xfa\x2c\x04\x63\xa3\xe7\xde\xf6\xfb\x71\x91\x09\x8c\x06\xc5\xf7\x9e\x59\x71\x5c\x20\xbb\xa2\xed\xb6\x1c\x1e\x32\xae\xce\x66\xbd\x1d\xd1\xd7\x3d\x49\x02\x8f\x7b\x52\x8a\x65\xe4\x96\xd3\x8c\xd6\xee\x8b\x7a\xda\xea\x15\xa5\xc4\xf6\xad\xdc\x86\x21\x94\xc2\x96\x55\x9c\xf8\x3d\xe6\xf4\x3d\xff\x52\x8b\x85\xb6\xea\xf5\x5b\xd0\xa1\xd1\xeb\x97\xf7\x1d\xaa\xad\x3e\x9e\x65\xde\x7d\x0d\xa8\x1b\x36\x06\xcc\xfb\xf9\xf4\x2d\x6c\xe2\xa3\xed\xd7\x4e\x61\x0d\x3a\x79\xc1\x40\xba\xac\x11\xc3\x68\x8b\x72\x05\x42\xaa\x1d\xf2\x53\xb4\x4c\xd8\x3f\x1f\x76\xb7\xb6\x44\x94\x82\xfd\x53\x12\x14\x6d\x1d\x3f\x20\x40\x4f\xd9\xe7\xcb\xc2\x1c\xd8\xc5\xa2\xb0\x97\x5e\xa3\xd7\xe8\xbf\x00\x00\x00\xff\xff\x5b\x28\xe9\xee\x00\x0e\x00\x00"

func lockedtokensAdminCustody_create_only_shared_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_only_shared_accountCdc,
		"lockedTokens/admin/custody_create_only_shared_account.cdc",
	)
}

func lockedtokensAdminCustody_create_only_shared_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_only_shared_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_only_shared_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xba, 0x9f, 0x8c, 0x43, 0xd, 0xdc, 0xd8, 0x19, 0x54, 0x3b, 0x44, 0x3f, 0xe4, 0x97, 0xaf, 0x92, 0xbe, 0x3, 0x35, 0x11, 0xe3, 0x8, 0xc4, 0x3c, 0x8c, 0x41, 0xbc, 0xff, 0xc0, 0xf9, 0x34}}
	return a, nil
}

var _lockedtokensAdminCustody_create_shared_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xdb\x38\x10\xbe\xeb\x29\x06\x39\x14\x32\xe0\x58\xee\x71\x0d\x67\x0b\xc3\x49\xb1\x8b\x64\x37\x41\x93\xdd\x9e\xc7\xd2\xd8\x22\x2c\x93\x5a\x92\xb2\xd7\x28\xf2\xee\x05\x45\x59\x12\x25\xaa\x8e\x8b\x1e\xa2\x9b\xc8\x6f\xfe\xbe\xf9\x21\xc9\x76\xb9\x90\x1a\x96\xf2\x98\x6b\x11\x54\x7f\x9f\x33\x71\x78\x11\x5b\xe2\xb0\x96\x62\x07\x57\xf5\xff\x55\x8d\x28\xf8\x86\xad\x32\x72\x50\xed\xb5\x1a\xf9\x20\xe2\x2d\x25\xe5\x9a\xb2\xc0\xe9\xff\x0f\x8f\xcb\xfb\xbb\xdb\x97\xc7\xfb\xbb\xbf\x17\xb7\xb7\x5f\xee\x9e\x9f\x83\x20\x8a\x22\x78\x91\xc8\x15\xc6\x9a\x09\x0e\x3a\x45\x0d\x08\x71\xa1\xb4\x48\x8e\x90\x4b\xb1\x67\x09\x49\x38\x88\x22\x4b\x40\xb1\x0d\x2f\x45\xb4\x80\x58\x12\x6a\x02\x04\x95\xa2\xa4\x04\x30\x8e\x45\xc1\x35\x20\x4f\x00\x39\x14\x3c\x2b\x5d\x28\xe1\xa7\xbd\xb5\x90\x80\x50\x28\x92\x41\xa0\x1b\xab\x61\x00\x00\x90\xa3\xd4\x0c\xb3\x45\xb2\x63\xfc\xa9\x58\x65\x2c\xbe\xa7\xe3\xac\xe2\x68\x72\x4f\xc7\x07\xa6\xf4\x1d\xd7\xf2\x38\x86\x28\x82\xaf\xc4\x36\xa9\x9e\xc1\xc7\xe9\xb4\x2d\xfe\x8f\x22\x79\x81\xf4\x6f\x95\xf4\xba\xc8\x2e\x15\xfd\x38\x9d\x4e\x83\x11\x7c\x0b\xac\x79\x49\x39\x4a\x0a\x2b\xe6\x9e\x2a\xe2\x66\xb0\x28\x74\xba\xb0\xf1\xd7\x60\xf3\x65\xa4\x2b\xea\xaa\x5d\xb8\x69\x63\xc3\x1c\x8f\x46\xbc\xa3\x6f\xe4\xc8\x1b\x26\x2f\x93\xae\xc5\x1d\xd3\x93\x2d\x1d\xd5\x04\x93\x24\xcc\x9b\xf8\xbd\xf9\x98\xd4\x80\x31\xa4\xa8\xd2\x45\xb6\x11\x92\xe9\x74\x37\x84\x77\x40\x63\x38\x54\xe4\xf9\xc1\x76\x77\x74\xb9\x93\x4e\xea\xce\xfb\xe8\xc2\x7f\xec\xa2\x8b\x3d\x79\x58\xbb\xd8\x4a\x81\xd7\xc1\x5e\x61\xfd\xc0\xbb\x3e\x76\xc0\xb5\x3e\xb0\xe7\x97\x29\x8f\x3d\x16\x99\x5e\x62\x8e\x2b\x96\x31\x7d\x84\x1b\x97\xd0\x1a\x6b\xbe\x49\xc6\xf8\x76\x8e\x85\x4e\x43\x67\xa2\x4c\xbe\x32\x9d\x26\x12\x0f\xb8\xca\x68\x04\x1f\xea\xa1\x34\xf9\xd7\x68\xff\x3d\x74\xb4\x98\x2f\xca\x25\xdb\xa3\xa6\x68\x7d\x82\x96\xc8\x71\x0f\xa8\x51\x6e\x48\xcf\x20\x52\x5a\x48\xdc\x74\x05\x1c\xfc\xc8\xf9\xfb\xf4\x09\x72\xe4\x2c\x0e\xaf\x96\xe5\x5c\xe2\x42\x83\xf1\xbf\x1c\xa1\x60\xa7\x63\xa9\x03\xe2\x3a\xfa\xab\x0e\x39\x59\x33\x21\xff\x42\x8e\x1b\x92\x30\xbf\x76\xe6\xe6\xc4\x8e\xb8\x87\x1e\x30\x2c\x89\x9d\x75\xf9\x1d\xec\x2e\x85\x7b\x0a\xe7\xd7\x7d\x8b\x63\xd0\x62\xe6\xda\xec\x5b\x7b\xb6\xec\x3c\xa1\x4e\x3b\x21\xe8\x16\xea\x17\xa7\xf9\x8c\x4f\x9e\xb4\x9f\x91\x78\xb2\x45\x61\xa2\x18\xae\x84\xb7\x33\xf1\x33\xc5\x51\xd2\x05\xbb\x2a\xd9\xc3\x95\x51\xe2\xfe\x10\x59\x32\x58\x12\x2f\x0d\xc2\x25\xc2\xa6\x78\x91\x24\x92\x94\x9a\x75\xca\x00\xed\xb2\x1b\x7e\x3b\x87\xb3\x81\x8c\x06\x4d\xa0\xde\xb9\x53\xd6\x97\xa3\x75\x7e\xdd\x0a\xa2\x6b\xb0\xc3\x73\x2b\x98\x16\xc1\xe3\x73\x46\xcb\x42\xfa\x30\xa4\xa9\x53\x20\x9e\xc4\x56\x7a\xfe\xe4\x6b\x61\xc7\x58\xbf\x34\xbc\x65\xe1\x77\xd7\xe7\x6d\x9d\xcb\xf2\x94\x79\xb7\x0d\x62\xcf\xc0\xf7\xd2\x1e\x9d\x1b\x83\xb9\xe9\x39\x7d\xe3\x1f\xa3\x15\x93\x4b\xd3\x1d\x42\xc2\x4d\x57\x8d\x4b\xf1\x4a\x48\x29\x0e\x73\x1f\x87\xae\x22\x0f\x8b\xe6\x2e\xeb\x65\xc2\x95\xfc\x79\x2e\xac\x73\x20\x69\x4d\x92\x78\x4c\x86\x01\x9f\x05\x87\x08\xcf\xbe\x69\xf7\xd3\x6d\xcc\x31\xea\xd4\xde\x25\xa3\xe2\x74\xa5\xee\x8a\xb6\xbb\x72\x78\xc6\x94\x65\x36\xf3\x36\x84\xaf\x79\xa2\x08\x1e\xf7\x24\x25\x4b\x08\x74\x4a\x90\xd0\xba\x3c\x50\x9b\x47\x8a\xa4\x98\xd8\xbe\x95\x5b\x37\x84\x82\x9b\xaa\x0a\x23\x7b\xdd\x69\xce\xf6\x2f\x95\x98\x6b\xab\x7a\x4d\x70\x3a\xd4\x7a\xed\x5b\x64\x87\x72\xab\x4e\x6b\x89\x75\x5f\x01\xaa\xe6\x81\xe1\x37\x6f\xc7\xd3\x37\xb7\x87\x4f\xb6\x5f\x3b\x85\x35\xe8\xe4\x1b\xe6\xd1\xdb\xfa\xd0\x8d\x36\x2f\x56\xc0\x85\xdc\x61\xd6\x44\xcb\xb8\x79\x4b\x99\x47\x84\x21\xa2\xe0\xec\xbf\x82\x20\x6f\xeb\xf8\x05\x01\x5a\xca\x3e\xbf\x2d\xcc\x73\xf7\x32\xdb\x4b\xaf\xc1\x6b\xf0\x3d\x00\x00\xff\xff\x52\x8f\x22\xea\xcf\x0e\x00\x00"

func lockedtokensAdminCustody_create_shared_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_shared_accountsCdc,
		"lockedTokens/admin/custody_create_shared_accounts.cdc",
	)
}

func lockedtokensAdminCustody_create_shared_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_shared_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_shared_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xd9, 0x9, 0xd7, 0x82, 0x22, 0x92, 0xdc, 0xec, 0xf7, 0x34, 0xce, 0xc2, 0x4f, 0x6b, 0xc6, 0x35, 0x9d, 0xfd, 0x9d, 0x6, 0x6, 0x2c, 0xaa, 0x7f, 0x5e, 0x11, 0x49, 0x4b, 0x7d, 0x13, 0xa4}}
	return a, nil
}

var _lockedtokensAdminCustody_setup_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x50\xcd\x6a\x83\x40\x10\xbe\xef\x53\xcc\xa9\x24\x90\x9f\x9e\x83\x14\x24\x7a\x4a\x68\xa4\xe6\x05\xa6\xeb\x34\x2e\xea\xae\xcc\x8e\xb6\xa5\xe4\xdd\x8b\x91\x58\x36\xb4\x84\xce\x6d\xbf\xf9\x76\xbe\x1f\xd3\xb4\x8e\x05\xf6\x4e\x57\x54\x1c\x5d\x45\xd6\xc3\x1b\xbb\x06\x1e\x3f\xf6\x87\xed\x2e\x4d\x8e\x87\x5d\xfa\x1c\x27\xc9\x4b\x9a\xe7\x4a\x09\xa3\xf5\xa8\xc5\x38\x0b\x5f\x4a\x01\x00\xb4\x4c\x2d\x32\xcd\x74\xe7\xc5\x15\x9f\x19\xbb\xde\x14\xc4\x1b\x88\x3b\x29\x63\xad\x5d\x67\x65\x7e\x25\x0f\x53\x93\x00\x8e\xf8\x96\x09\xc5\x31\x44\xcb\xc0\xc1\x4a\x0f\x38\x8d\x50\x1c\x50\x67\xf3\x9f\x43\x37\x8a\x2b\x8f\x3d\xcd\xa6\xed\x30\xd1\x32\x14\x5a\x40\xb0\x16\xb7\x09\x75\x7f\x53\xcc\xc5\x31\x9e\x28\x43\x29\x17\xd3\xef\x79\x70\x67\x7a\xac\xd7\x30\x5a\x07\x4b\xef\xc0\xa4\xc9\xf4\xc4\x20\x25\x0a\x34\xc8\x95\xbf\x62\x05\xc8\xd8\x35\x7a\xe8\x6c\x7d\x91\xfd\x33\x57\x6d\x6c\x15\x3d\xdc\x35\xfa\x14\x66\xbf\xcb\xcf\xba\xd7\xda\xe8\x30\xd7\xa5\x15\xe4\x13\xc9\xff\x9a\xb9\x29\xe6\xac\xce\xea\x3b\x00\x00\xff\xff\xff\x73\x6a\xb6\x5a\x02\x00\x00"

func lockedtokensAdminCustody_setup_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_setup_account_creatorCdc,
		"lockedTokens/admin/custody_setup_account_creator.cdc",
	)
}

func lockedtokensAdminCustody_setup_account_creatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_setup_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_setup_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x5d, 0xab, 0xd2, 0x1f, 0x88, 0x4b, 0xe, 0x6a, 0x28, 0xd5, 0x20, 0xb2, 0xa4, 0x69, 0xe6, 0x14, 0xb1, 0x8a, 0xd2, 0x13, 0xc1, 0x1d, 0x75, 0x79, 0x77, 0x17, 0xbf, 0xd4, 0x76, 0x85, 0x22}}
	return a, nil
}

var _lockedtokensAdminDeposit_locked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x41\x4f\xdc\x3c\x10\x3d\x93\x5f\x31\xe4\x00\x89\x04\xd9\xef\xf0\xa9\x87\x68\x81\xae\x76\xa1\x07\x50\xa9\x80\xb6\x67\x27\x99\x6c\x5c\xbc\x76\x64\x4f\x58\x2a\xc4\x7f\xaf\x62\xc7\x69\xbc\x8b\xa0\xb9\x44\x19\x8f\xdf\xbc\x99\x79\x2f\x7c\xd3\x2a\x4d\x70\xd5\xc9\x35\x2f\x04\x3e\xa8\x47\x94\x50\x6b\xb5\x81\x38\x88\xc5\x91\xcf\x14\x6a\x1b\x64\xf9\xef\x38\xf2\x29\x37\xaa\x7c\xc4\xca\x06\x8d\xcb\xfa\xef\xf9\xe6\x76\x79\x7d\xb9\x7a\xb8\xbd\xbe\xfc\xba\x58\xad\xee\x2e\xef\xef\xa3\x88\x34\x93\x86\x95\xc4\x95\x4c\x48\xe5\xb0\xa8\x2a\x8d\xc6\x9c\x00\xdb\xa8\x4e\x52\x0e\xdf\xaf\xf8\xf3\xa7\xff\x53\x78\x89\x22\x00\x80\xd9\x0c\x1e\x1a\x84\x1f\xac\x13\x04\x1a\x8d\xea\x74\x89\x40\x0d\x23\x68\x94\xa8\x0c\x50\x83\x40\xae\xac\x8d\x32\x8d\x50\x20\x97\x6b\xb0\xa5\x6a\xd4\x1a\x2b\x0b\x25\x90\xc0\xa0\x24\x8b\x95\xc3\xe7\x97\xa0\xd9\xcc\x86\x5f\x5d\xd5\x56\x63\xcb\x34\x26\xac\xda\x70\x99\xc3\xa2\xa3\x66\x51\x96\x3d\xc1\x91\xd8\x40\xee\x0b\x12\x30\xd0\x58\xa3\x46\xd9\x33\x53\x96\x91\xbd\x78\x6c\xc0\x90\xd2\x58\xc1\x53\x8f\x3d\x5e\xeb\x89\xd8\xc8\x1d\xd6\x70\xe6\x72\xb3\x42\x69\xad\xb6\x73\xd6\x51\x93\x84\xc4\x7e\x72\x6a\x2a\xcd\xb6\xac\x10\x98\xc2\xd1\x38\x7c\xc7\xf8\x3c\xe9\xa7\x9d\xc3\xac\x2f\xc5\xd6\x38\xab\xfd\xb9\x3d\x4e\xa3\x83\x83\x83\x8b\x0b\x68\x99\xe4\x65\x12\x2f\x55\x27\x2a\x90\x8a\xc0\xd5\xdb\x67\xae\xb6\x12\xf5\xb1\x71\x13\x3f\x8c\xd3\x28\xa0\x6d\xb9\x4e\x68\x8f\x87\xfd\xe3\x7b\x38\x9a\x8a\x21\xb3\xaf\x45\x9f\xbc\x54\x42\xa0\x5d\xfd\x79\x12\x5c\xec\x1f\xd7\x45\x70\x73\xf2\xb1\x73\xff\xde\xf5\xfa\x8d\x51\x13\x00\xa5\xc1\xd7\x3b\x6d\xbf\xb1\x32\x61\xab\x39\x2d\xb9\xe6\xa0\x1c\x0b\x4e\xe7\xc0\x8c\x41\x4d\x61\x07\x7e\x2e\xd9\x1a\x69\x50\x4a\xc2\x9c\xb4\x73\x20\x95\xc2\xe1\x19\x48\x2e\x4e\x82\x4b\x1b\x34\x86\xad\x31\x87\xb8\x97\xb8\x69\xb1\xe4\x35\xc7\x0a\x98\x03\x00\x6e\x2c\x65\xe6\xa9\x0d\xf1\x43\x58\x32\xd9\x1f\x18\x94\x55\x40\xdb\xc4\xd1\xdf\x49\x4c\x55\xea\x25\xe4\x9d\x62\x0d\xfa\xa1\x4e\x0d\x8a\x3a\x1b\x1d\x03\xf3\xd3\x51\xb5\xd9\x76\x00\x4c\xbc\x6d\xdd\xdb\xcd\x7f\x30\x11\x3e\x63\xd9\x11\xbe\x61\x98\xbe\xb2\xc6\x92\xb7\x1c\x25\x1d\x1b\x68\xbb\x42\xf0\x72\xec\x5b\x15\xbf\xb0\x0c\xed\x32\x66\xc3\x19\x4c\x46\x4c\x2a\xfd\x17\x37\x4e\x6b\xdd\x61\x89\xfc\x09\xf5\x2e\xbc\x0d\x3a\x65\x8f\xe9\xa1\xba\xd7\x48\x4b\xd6\xb2\x82\x0b\x4e\xbf\xe7\x47\x3b\xbf\x0f\x8f\xfb\xfa\x86\xb6\x67\xae\xc1\x99\xdb\xd5\x68\xe0\x3d\x2a\xfb\x12\x1e\x2c\x95\x7c\x6c\x63\x07\xf5\x7e\xef\x83\x56\xec\x3a\xe3\x70\x72\x2b\x6c\x95\xe1\x6e\x35\x7e\xb9\xd2\xcb\x85\xcb\x3d\x28\xbd\xcb\x7d\x32\xc2\xac\x72\x60\xc3\x9f\x69\x7e\x1a\x0a\xc9\x8b\xe4\x35\xfa\x13\x00\x00\xff\xff\x35\x62\x62\xfc\x89\x06\x00\x00"

func lockedtokensAdminDeposit_locked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminDeposit_locked_tokensCdc,
		"lockedTokens/admin/deposit_locked_tokens.cdc",
	)
}

func lockedtokensAdminDeposit_locked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensAdminDeposit_locked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/deposit_locked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x3c, 0xce, 0x3d, 0xad, 0x25, 0xee, 0xc, 0x3c, 0x93, 0x98, 0xe0, 0x97, 0x72, 0x15, 0x43, 0xfb, 0x7c, 0xc5, 0x5f, 0xb6, 0x21, 0x84, 0xc0, 0x5f, 0x12, 0x8a, 0xd6, 0x70, 0xbf, 0x2e, 0xdd}}
	return a, nil
}

var _lockedtokensAdminGet_unlocking_bad_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\xa1\x07\x94\x5c\xda\x0b\xe2\x10\x11\xaa\x50\xc4\x03\x20\x71\x42\x1c\x1c\x7b\x13\x59\x71\xd7\x91\x7f\x04\x51\x94\x77\x47\x6d\xd2\x50\xd1\xf8\x64\xcb\x33\xf3\xcd\x6e\x92\x08\x29\xc9\xfb\x54\x18\x93\xa1\x8e\x8c\xa3\xd0\x9c\x06\xdb\x12\x97\xea\xa8\x39\x47\xa9\x94\x23\xef\xb3\x1c\xc3\x7c\xcd\xf1\xf1\xa6\x7f\x1e\x1f\x46\x0c\x49\x02\x00\x86\x02\xa4\xed\x7a\x5b\xbf\x6a\x19\xb4\x65\xe1\xfa\x35\x79\x81\x61\xfc\x73\x08\x29\x6d\xe4\x80\x02\x0d\x85\x72\x7a\x5c\x91\xb3\xb3\x70\x51\xab\x25\xf9\x9d\x6a\x72\xc4\x92\x50\x5c\x32\xb6\x0d\x85\x83\xe8\x44\xa5\x8d\x0e\xfd\xd3\xfd\x0d\xfa\x39\xdd\x75\xb1\x32\x5a\xee\x22\x1b\x2b\x5b\xcd\xcd\x8b\x50\x33\xd4\x67\xdb\xca\x3a\x67\xbf\xd3\x89\x79\x3a\xfb\x3d\x3a\xc1\x5a\xa6\x9b\x83\x8d\x46\x81\x6d\x38\xd5\x44\x25\xd4\x05\xea\xaf\x3a\x6d\xb2\x69\xae\xda\x3a\x88\x89\x0d\xcd\x6b\xa5\xb7\x2d\xf5\x1e\xc3\x02\xfa\xbf\xb7\xcf\xd9\xfe\x85\x62\xcd\xbe\x7c\xdf\x9d\x13\xe6\x75\x3a\x0a\xd1\xf1\x4d\x56\x32\xfe\x06\x00\x00\xff\xff\xac\x2d\x3d\x31\xe0\x01\x00\x00"

func lockedtokensAdminGet_unlocking_bad_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminGet_unlocking_bad_accountsCdc,
		"lockedTokens/admin/get_unlocking_bad_accounts.cdc",
	)
}

func lockedtokensAdminGet_unlocking_bad_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminGet_unlocking_bad_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/get_unlocking_bad_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x5b, 0xd3, 0x7b, 0x41, 0xd1, 0x85, 0x69, 0xad, 0xf7, 0x1, 0x49, 0x72, 0x7c, 0x48, 0xb1, 0x89, 0xe7, 0x86, 0x10, 0xb8, 0xa4, 0x88, 0xe4, 0x58, 0xa2, 0x4c, 0x95, 0x88, 0x7a, 0x56, 0x6}}
	return a, nil
}

var _lockedtokensAdminUnlock_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcd\x6e\xea\x30\x10\x85\xf7\x79\x8a\xb9\x2c\xee\x4d\xa4\xab\xa8\x8b\xaa\x8b\xa8\x2d\x8a\x80\x6e\xa0\xa5\xe2\xe7\x01\xa6\xce\x04\x2c\x12\x4f\x34\x9e\xa8\x48\x15\xef\x5e\x25\x46\x34\xb0\xed\x6c\xc6\x96\x8f\xed\xef\x9c\xb1\x75\xc3\xa2\xb0\x60\x73\xa0\x62\xc3\x07\x72\x1e\x4a\xe1\x1a\xee\x8e\x8b\xe5\x64\x3e\x9b\x6e\x96\xf3\xd9\x5b\x3e\x9d\xae\x66\xeb\x75\x14\xa9\xa0\xf3\x68\xd4\xb2\x8b\x15\x65\x47\x9a\x1b\xc3\xad\xd3\x0c\xf2\xa2\x10\xf2\xfe\x3f\x14\x54\x29\x66\xb0\x7d\xb1\xc7\x87\xfb\x04\xbe\xa2\x08\x00\xa0\x11\x6a\x50\x28\xc6\xa2\xb6\x2e\x83\xbc\xd5\xfd\xf9\xea\x45\xd2\x55\x45\x0a\xbd\x64\x45\x25\x3c\x85\x65\xfa\xc1\x22\xfc\xf9\xf8\x77\x48\x99\xf6\x2d\xef\xce\x27\x5c\x55\xd4\x33\x3d\xc7\x1d\x7b\x76\x65\x27\x1d\x6c\x6e\xe4\x6b\x65\xc1\x1d\xbd\xa3\xee\x93\x0b\x41\x57\xe3\x31\x34\xe8\xac\x89\x47\x13\x6e\xab\x02\x1c\x2b\x04\x08\x40\x10\x2a\x49\xc8\x19\x02\x65\xd0\x3d\x05\x48\x30\x97\x67\x47\xc9\xb5\x1f\xed\xbe\x7e\x45\x87\x3b\x92\x81\xad\x15\x95\xe9\x4f\x80\x31\x86\xfc\x32\xb8\xca\x35\xf9\x73\x76\x1f\xff\x86\xb0\xf5\x24\xff\x7c\x00\x81\x3a\x90\x0c\x29\x6f\x08\x53\xeb\x8c\x10\x7a\xda\xba\x8a\xcd\x61\x61\x6b\xab\xf1\x79\xac\x7d\x0b\x2c\xa7\xe8\x14\x7d\x07\x00\x00\xff\xff\xd0\xd3\x4e\x0e\x40\x02\x00\x00"

func lockedtokensAdminUnlock_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminUnlock_tokensCdc,
		"lockedTokens/admin/unlock_tokens.cdc",
	)
}

func lockedtokensAdminUnlock_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensAdminUnlock_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/unlock_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x58, 0xa9, 0x1, 0xbc, 0x31, 0xd2, 0x33, 0xd, 0x5b, 0xb, 0x97, 0x13, 0xe6, 0x85, 0x86, 0x57, 0xa2, 0x99, 0xa6, 0x1f, 0x8c, 0x9f, 0x8b, 0xb5, 0xab, 0xd9, 0x40, 0x1, 0x5d, 0x97, 0x33}}
	return a, nil
}

var _lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x6f\xe3\x46\x0c\xbd\xfb\x57\xb0\x7b\xd8\xda\x40\x10\xf7\x50\xf4\x10\x24\xbb\x70\x93\xb4\x0d\x36\xed\x2e\x92\xec\xa9\xe8\x81\xd6\x50\xd2\xc0\xd2\x8c\x31\x43\xc5\x09\x02\xff\xf7\x82\x33\x92\x3d\xfa\x88\xb1\xba\x24\x96\xc8\xc7\xaf\x47\x3e\x5d\x6f\xad\x63\xb8\xb7\xd9\x86\xd4\x93\xdd\x90\xf1\x90\x3b\x5b\xc3\x2f\x2f\xf7\x5f\xaf\xbf\xdc\xde\x3c\x7d\xfd\x72\xfb\xcf\xea\xe6\xe6\xe1\xf6\xf1\x71\x36\x5b\x2e\xe1\xa9\xd4\x1e\xd8\xa1\xf1\x98\xb1\xb6\x06\x1a\x4f\x1e\xb8\x24\xa8\x02\x08\x70\x44\x41\x55\x6b\x23\x0e\x6c\xc1\x13\x07\x8b\xc6\x88\x0d\x54\xba\xd6\x0c\xb9\x75\x50\x37\x15\xeb\x6d\x45\x80\x59\x66\x1b\xc3\x5e\x1c\xb4\x01\x04\xaf\x4d\x51\x51\x1a\x28\x06\x3f\x98\x02\x2a\xe5\xc8\x4b\xf0\xc6\x93\x02\xf4\xb0\xa1\xd7\x00\xe0\x4b\xdb\x54\x0a\xd6\x94\x04\x15\x8b\xa1\xe3\x6c\x96\xc0\xcf\xa3\xdd\x9d\xc9\xed\x05\xbc\xad\xa2\xcd\x05\x7c\xff\x43\xbf\xfc\xf6\xeb\x7e\x01\x6f\xb3\x19\x00\xc0\xd6\xd1\x16\x1d\xcd\x43\x79\x17\xb0\x6a\xb8\x5c\x45\xdc\x83\x89\x3c\xcb\x25\x7c\xef\xe2\xae\x46\x09\x73\x89\x0c\x25\x2a\xf0\xb6\x26\xf0\x32\x01\x9b\x03\x39\x67\x5d\x8a\x80\x8e\xc0\xb3\x75\xa4\xa4\x27\x2c\x8d\x57\x3a\x24\x8b\xee\x15\xbc\x95\xf2\x5e\x21\x43\x23\xa5\x6a\xe3\xb7\x94\x31\x29\xa8\x90\xa9\x87\x73\x97\x87\x46\xa4\x43\x33\x44\xca\xcb\x68\x5c\x63\x8e\x53\x60\x5d\x93\x3f\x4b\x5d\xb9\x24\x13\x9c\x93\xc0\xda\x83\xb1\x0c\xf6\x99\xdc\xce\x69\x66\x32\x07\x8f\x67\x74\xb0\x46\xd5\x56\xec\x27\x1a\x09\x57\x91\x19\xe7\x95\x45\x75\x39\xfa\xfc\x69\x2e\xec\xbb\x80\xa5\xd4\x8d\x05\x2d\xe3\x54\xb4\x29\x7e\x3f\xc2\x2e\x0e\xf1\xe4\xf9\xfc\x19\xde\xf6\x32\xfe\x11\xd8\x71\x1c\x15\x71\x0c\xfb\x40\xf9\x21\x83\xb5\x75\xce\xee\x2e\x3f\xa6\xe4\x3f\x0f\x7f\x56\xf2\xfd\xda\x56\x15\x85\xa2\xbb\xa4\x7a\x86\xc9\x8f\x81\xf9\x63\x4c\xfd\x1b\x72\x39\xca\x74\x8b\x46\x67\xf3\x0f\xd7\x81\xa0\xd2\xc5\x98\x04\x20\x38\xca\xc9\x91\xc9\x48\xa6\x22\x1d\x0f\x49\x42\x76\x80\xfd\xb0\x38\xd6\x23\xbb\xd3\xf1\xba\xad\x5a\x28\x72\xa4\xf0\xb9\xec\x42\x4a\xc8\x76\x9e\xab\xaa\x12\xaa\x09\xbe\xce\xa5\x2d\x3e\xb0\x6c\x4d\x19\x36\x9e\x60\x47\xa0\xac\xf9\x99\x01\x76\x68\x18\xd8\x0e\xfd\x1d\x3d\x93\x8b\xcb\x4c\x86\xb5\xeb\xb3\x4a\xe7\x20\x8b\x8d\xba\xf2\x43\x47\xb6\x50\xb4\x57\x40\x9b\xdc\xba\x1a\x83\x87\x14\x72\x58\xf6\x76\x41\x7a\xae\x31\xcb\xf6\xb6\xb4\x04\x90\x02\xe3\x20\x0b\xe2\xf6\xdd\x7c\xd0\x8e\x7e\xe7\xe5\x39\x2f\x88\xaf\x71\x8b\x6b\x5d\x69\x7e\x9d\x1a\xfb\x5f\xb6\x52\xe4\x3e\xcd\x27\xe6\x9c\x44\xfe\xd6\xac\x2b\x9d\x8d\xa7\x1b\x62\xc4\x71\xce\x17\xc3\xd6\x77\x24\xec\xd5\xd1\x4d\xee\x6a\xb2\x3c\xc9\xf7\x7e\xc2\x7c\xbe\x18\x43\xf7\xba\x14\x39\x19\x7d\x1e\x28\xb3\x4e\x75\x94\x6f\x51\xbb\x96\x61\xb7\x2f\x53\x59\x49\x09\xc3\x30\xf2\x4c\xbe\x6c\xe3\x87\xd3\xff\x37\x1a\x2c\xc8\xc5\x01\xbd\x97\xd1\xc9\x46\x25\xb4\xf9\xb3\xaf\x1c\x58\x87\x4b\x1a\x14\x6a\x78\xd2\xd0\x15\x4d\x4d\x86\x93\x53\xf5\x2e\xb2\xdc\xa9\x08\xb9\x8a\x88\x57\xc9\xee\xfc\x3b\xa0\xd2\x7f\x3f\x9d\x4c\xf1\xce\x64\x8e\xd0\xd3\x58\xe1\xd6\xaf\x71\x91\x43\x88\x77\x21\x06\x4d\x3b\xd7\x2d\x5e\xd4\x8f\x7b\x41\x9a\x2b\xaa\x18\x2f\x7a\x29\x4f\xb0\x20\x49\xea\xda\x1a\xd6\xa6\x39\x1c\x13\x43\x2f\x0c\x9a\xc9\xc5\xb5\x6b\x4f\x40\x65\xed\xf6\x14\x4a\x77\x16\x38\x91\x5d\xdf\x64\x19\x91\x12\x3d\x35\x0a\x94\xa5\xa8\x06\x22\x28\xa7\xa0\xd8\x8a\x48\xd5\xe8\x36\x51\xab\xd7\xf8\xbe\x79\xd6\x26\x3f\x69\xb0\x1f\xbd\xdd\xf7\x39\xb9\x1f\x1d\xbd\x56\xff\xe8\x85\xb2\x26\x94\x5f\xe3\x86\xbc\x9c\xaa\x92\x1c\xc1\xfc\x50\x84\x23\xcc\xca\x60\xdb\xa5\x00\xb8\xb6\xcf\xb4\x18\x22\x6a\x86\x9a\xd0\xf8\x20\xe0\x5c\x6a\x53\xc0\x4e\xa8\xb7\x73\x56\xfe\xd5\x5c\x26\x6c\x90\xaf\x72\xe7\x92\x2e\x0e\xf1\xa4\x95\x9a\x8f\xaa\xbc\x26\xf0\xf8\x3c\xe8\x68\x22\xac\x23\x8a\x9e\x26\xf0\x6c\xa2\x37\x51\x03\x25\xca\x94\x0a\x27\xb1\xce\x80\xed\x0f\x0b\x72\xab\xed\xda\x6c\x2e\x3f\x4e\xc0\x2e\xb7\xe1\x78\x4e\x82\x9c\x01\xa3\x2b\x88\x7f\x28\xd6\x7e\xb6\x9f\xfd\x1f\x00\x00\xff\xff\x18\xa1\x72\xd1\xbc\x0a\x00\x00"

func lockedtokensAdminUnlock_tokens_for_multiple_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc,
		"lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc",
	)
}

func lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminUnlock_tokens_for_multiple_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x33, 0xad, 0xc4, 0x84, 0xb9, 0x27, 0xb, 0x5e, 0xc1, 0xf8, 0xc8, 0xcc, 0xc0, 0x2f, 0xd7, 0x2d, 0x3f, 0x7f, 0x86, 0x98, 0x3d, 0xfd, 0x37, 0x47, 0x9d, 0x29, 0x13, 0xa, 0x13, 0xc4, 0x32}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x75\x28\xd2\x21\x4a\x0f\xa5\x87\x60\x37\xb8\xb1\x43\x21\xc1\x09\x71\xda\x9e\xd7\xd2\xe8\x03\xaf\x35\x62\x35\xaa\x5d\x8c\xff\x7b\x59\xed\x4a\xd9\x95\x09\x14\xaa\x8b\xd8\x9d\xb7\xf3\xde\x9b\x37\xd5\xbe\x21\xc5\x70\x2f\xe9\xf0\x4a\x3b\xac\x21\x57\xb4\x87\x70\x3c\x87\xc1\x80\xe8\xea\xa2\xda\x4a\xf4\x50\xee\xdd\x88\x7c\xa4\x74\x87\x59\x7f\xd7\x1a\xe0\xa7\xe3\xe3\xd3\xdd\xc3\x6a\xf9\xfa\xf4\xb0\x5a\x2f\x96\xcb\x97\xd5\x66\x13\x04\xac\x44\xdd\x8a\x94\x2b\xaa\x23\xb1\xa7\xae\xe6\x1b\xf8\x71\x5f\x1d\xbf\x7c\x8e\xe1\x14\x04\x00\x00\x12\x19\x4a\x92\x19\xaa\x17\xcc\x6f\xe0\xa3\xdb\x3a\xe9\x7f\xdf\xfb\xea\x1b\xfa\xb7\xe8\x24\x1b\xf0\xe8\x21\xf9\xa9\x2f\x0d\xa6\x51\xd8\x08\x85\x91\x48\x53\xc3\xb8\xe8\xb8\x5c\x98\x83\xa6\x05\xfb\xb5\x28\xf3\x64\xa4\x86\x39\xd8\x07\xc9\x96\x94\xa2\xc3\xec\x5d\x29\x5f\x23\x6d\xf9\x06\xde\xab\x6f\x98\x94\x28\xf0\x59\x70\x19\x8f\x6c\xfa\xbb\xbd\x85\x46\xd4\x55\x1a\x85\x77\xd4\xc9\x0c\x6a\x62\x30\x64\xa0\x30\x47\x85\x75\x8a\xc0\x04\x4e\xaf\x30\x0e\x7c\xc1\x83\xfb\x4b\xbd\xa2\xe3\x32\xf2\xf2\x4a\x7e\x55\x5c\x66\x4a\x1c\xc4\x56\x62\x7c\x31\xae\xc1\xc7\x75\x6b\x04\x5f\xe7\x43\xbd\x2f\xff\xb3\x76\xfd\x0c\xb8\x5f\x9a\x5e\xdd\x9b\x99\xd0\xf4\x38\x1b\x0f\x78\xc4\xb4\x63\x74\x22\xd0\x71\xb6\x2c\x76\xa8\x9e\x15\x1d\xff\xc0\x7c\x12\x8a\xb5\xb6\x44\x89\x85\x60\x52\x91\x33\x0d\xfd\x56\xf6\x09\x7c\x13\x52\xe8\xc9\x5d\xbc\x2e\x90\x4d\x46\x36\x7d\x0b\x74\xbb\x54\x39\x98\xc5\x84\xd9\x7c\xd2\xee\x14\x78\x03\x70\x74\x26\x99\x11\x84\x6b\x34\xf3\x6a\xc7\xed\x36\x7f\x87\xe0\x0c\x28\x5b\xd4\x3c\x91\x05\xc1\x95\x4f\x14\x6b\x6a\x2f\xdb\x64\x3b\x54\xa6\x1a\x7c\x7f\x19\x36\xd4\x56\x6c\x63\x9c\x5d\xf9\x4d\x0e\x36\xfc\x89\xb6\x0b\xfa\xf8\x7f\x7c\x4e\x6c\x9e\xbc\x56\x76\x61\xd6\xc4\x80\x35\x75\x45\x69\xb6\xa4\xd5\x3b\xde\xd3\x7c\x08\x9d\x0e\x76\x55\xce\xc1\xdf\x00\x00\x00\xff\xff\x3e\xde\x16\x69\xb1\x04\x00\x00"

func lockedtokensDelegatorDelegate_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_new_tokensCdc,
		"lockedTokens/delegator/delegate_new_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_new_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x1f, 0x62, 0x9d, 0x23, 0x3b, 0xb2, 0x89, 0x1f, 0x4, 0xad, 0x2f, 0x4b, 0xfb, 0x2c, 0x9, 0x9, 0x50, 0x41, 0xed, 0xdc, 0x3a, 0xa5, 0x60, 0x56, 0x3a, 0x34, 0xac, 0x4f, 0xe2, 0x22, 0x6e}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xc2\x40\x10\x85\xef\xf9\x15\x83\x87\x12\x2f\xa1\x87\xd2\x83\xd4\x8a\x34\x96\x82\xa2\xa2\xf6\x07\x4c\x77\x27\x66\x31\xee\x84\xc9\x58\x53\x8a\xff\xbd\xe8\x9a\x54\x2b\xcd\x65\x32\xec\xe3\x7d\xfb\xde\xba\x6d\xc9\xa2\x30\x61\xb3\x21\xbb\xe2\x0d\xf9\x0a\x32\xe1\x2d\xdc\xd7\x93\xd9\xcb\x78\x94\xae\x66\xe3\xd1\x74\x98\xa6\x8b\xd1\x72\x19\x45\x2a\xe8\x2b\x34\xea\xd8\xc7\xb8\xe5\x9d\xd7\x1e\xbc\xbf\xba\xfa\xf1\xa1\x0b\xdf\x11\x00\x40\x41\x0a\x9e\x2d\xa5\x54\xd0\x1a\x95\x65\x2e\x5c\x7f\xf5\xae\x08\x49\x58\xa6\x37\xb2\xe8\x64\x51\x0a\x95\x28\x14\xa3\x31\x81\x30\xdc\x69\x3e\x0c\x4b\x83\x69\x50\x39\x17\x96\x64\x41\x19\xf4\xe1\xac\x4f\x3e\x58\x84\xf7\x4f\x77\x57\xc8\xd3\x78\x3b\xa9\x9f\xe3\x63\xc2\x3f\x57\xba\x38\x5f\x2a\x0b\xae\x69\x8e\x9a\x77\xa1\xa5\x1d\xbf\xc1\x00\x4a\xf4\xce\xc4\x9d\x0b\x39\xb8\x0a\x3c\x2b\x54\xf8\x49\x16\x50\xa1\x2a\xc9\xb8\xcc\x91\x85\x12\x35\xef\x74\x5b\x8b\xf6\xa7\xa2\x22\x4b\x6e\x5b\x82\xfe\x6f\x9e\x73\x8a\x56\x10\x07\x9b\x43\xa8\x88\x6a\x32\x3b\xa5\x8b\x32\xfe\xb1\x4c\x6c\x58\x69\x41\x7b\x14\xdb\xc4\x6d\x1f\x2f\xcc\xc6\xfb\x10\xfd\x04\x00\x00\xff\xff\xf2\xb4\xba\xeb\x10\x02\x00\x00"

func lockedtokensDelegatorDelegate_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_rewarded_tokensCdc,
		"lockedTokens/delegator/delegate_rewarded_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xb5, 0x9a, 0xc5, 0xf6, 0xa3, 0xb3, 0x51, 0x42, 0xb8, 0x88, 0xa8, 0x28, 0x71, 0x66, 0x3d, 0x34, 0x4, 0x99, 0xf3, 0x94, 0x13, 0xef, 0x85, 0x3f, 0x7f, 0xa0, 0xa3, 0x40, 0x76, 0x94, 0xb}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x6a\xc2\x40\x10\xc6\xef\x79\x8a\xc1\x43\x49\x2e\xa1\x87\xd2\x83\xd4\x8a\x34\x96\x82\xa2\xe2\x9f\x07\x98\x6e\x26\x66\x31\xee\x2c\xbb\x63\x9b\x52\x7c\xf7\x62\x56\xd3\x58\xe9\x5e\x86\x61\xbf\xfd\x7e\xf3\xcd\xea\xbd\x65\x27\x30\x65\xb5\xa3\x7c\xcd\x3b\x32\x1e\x0a\xc7\x7b\xb8\xaf\xa7\xf3\x97\xc9\x38\x5b\xcf\x27\xe3\xd9\x28\xcb\x96\xe3\xd5\x2a\x8a\xc4\xa1\xf1\xa8\x44\xb3\x89\x71\xcf\x07\x23\x7d\xd8\xbc\xea\xfa\xf1\x21\x81\xef\x08\x00\xa0\x22\x01\xc3\x39\x65\x54\xd1\x16\x85\xdd\xc2\x71\xfd\xd5\xbf\x22\xa4\xa1\x99\xdd\xc8\xa2\xc6\xc2\x3a\xb2\xe8\x28\x46\xa5\x02\x61\x74\x90\x72\x14\x9a\x0b\xe6\x82\x2a\xb9\xca\xc9\x2d\xa9\x80\x01\x9c\xf5\xe9\x3b\x3b\xc7\x9f\x4f\x77\x57\xc8\xa6\xbc\x35\xea\xe7\xf8\x94\xf0\xcf\x48\x9d\xfb\x95\xb0\xc3\x2d\x2d\x50\xca\x04\x5a\xda\xe9\x0c\x87\x60\xd1\x68\x15\xf7\x3a\x72\xd0\x1e\x0c\x0b\x78\xfc\xa0\x1c\x50\xc0\x5b\x52\xba\xd0\x94\x83\x45\x29\x7b\x49\xd4\x7a\x78\xaa\x8a\xf4\x76\x3b\x30\xf8\xcd\x71\x9e\xbe\x15\xc4\x49\xf3\xfa\x18\x4c\xa8\x26\x75\x10\xea\x2c\xe1\x1f\xcb\x34\x0f\x2d\x6d\x8c\x17\x6c\x63\xb6\x9f\x16\xea\xc5\xfb\x18\xfd\x04\x00\x00\xff\xff\xfe\xc1\x9a\x73\x08\x02\x00\x00"

func lockedtokensDelegatorDelegate_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_unstaked_tokensCdc,
		"lockedTokens/delegator/delegate_unstaked_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xfe, 0xf6, 0x67, 0xf, 0x7b, 0x3, 0xf4, 0x14, 0x99, 0xaa, 0x92, 0xe3, 0xd4, 0x35, 0x90, 0x51, 0x4f, 0x83, 0x36, 0xd6, 0xf9, 0xed, 0x2a, 0x9f, 0x37, 0x1, 0x43, 0x9f, 0xd5, 0x50, 0x8f}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xdf\x4a\xf3\x40\x10\xc5\xef\xf7\x29\xce\xd7\x8b\x8f\xcd\x4d\x11\xbd\x2b\x6a\x29\x4d\xc1\xd2\x62\x4b\x5b\x1f\x60\xb3\x99\xc4\xa5\x9b\x9d\xb0\x99\xa0\x22\xbe\xbb\x24\xd1\x5a\xff\xcc\xcd\xc2\x70\xce\xf9\xed\x1c\x57\xd5\x1c\x05\x6b\xb6\x47\xca\x0f\x7c\xa4\xd0\xa0\x88\x5c\xe1\xe2\x79\xbd\x99\xaf\x16\xe9\x61\xb3\x5a\xdc\xcf\xd2\x74\xb7\xd8\xef\x95\x32\xd6\x52\xd3\x68\xe3\x7d\x82\xa2\x0d\xa8\x8c\x0b\xda\x58\xcb\x6d\x90\x09\x66\x79\x1e\xa9\x69\x92\x09\x1e\x96\x41\xae\x2e\xf1\xaa\x14\x00\x78\x12\xf8\x9e\x30\x1b\xa4\xcb\x50\xf0\x8e\x0a\xdc\xa0\x24\xf9\xd8\x7d\xc6\x24\xbd\xa5\x9b\x71\x49\x32\x37\xb5\xc9\x9c\x77\xf2\x72\xfd\xff\xfc\x93\xe3\xfe\xb9\x63\x9f\x53\xbc\xd5\x27\x4b\x37\xdf\x64\xeb\x9f\xd8\x6d\x9b\x79\x67\xb7\x46\x1e\x4f\xa6\x33\x62\xc6\x31\xf2\x93\xfe\xda\x4c\xa7\xa8\x4d\x70\x56\x8f\xe6\xdc\xfa\x1c\x81\x05\x83\x08\x06\x91\x0a\x8a\x14\x2c\x41\x18\x75\x1f\x8c\x5f\xc0\x51\x32\x94\x10\x49\xda\x18\xfe\xec\xa1\x3b\x34\x25\x4f\xa5\x11\x8e\xcb\x54\x27\xff\xd4\x9b\x7a\x0f\x00\x00\xff\xff\xc4\xad\x7d\x8c\x9a\x01\x00\x00"

func lockedtokensDelegatorGet_delegator_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_idCdc,
		"lockedTokens/delegator/get_delegator_id.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_idCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0x45, 0x26, 0x28, 0x0, 0x9e, 0x9d, 0x16, 0x8f, 0x3e, 0x88, 0x31, 0x36, 0x91, 0x96, 0x34, 0xdc, 0x16, 0x16, 0xb3, 0xfa, 0x23, 0x32, 0xa1, 0x76, 0x92, 0x32, 0x6e, 0x70, 0x2c, 0xd, 0xc}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x8b\xe2\x4e\x10\xbd\xe7\x53\x94\x73\x90\x04\x86\xf8\x3b\xcb\x2f\x0b\x62\x5c\x56\x46\x9c\x41\xbd\x0d\x73\xe8\xa4\x2b\xda\x6b\xdb\x15\xba\x5b\xdc\x41\xfc\xee\x4b\xfe\x18\xd3\x26\x82\x6c\x2e\xc1\xea\xf7\xaa\x5e\xd7\x7b\x46\x1c\x72\xd2\x16\x7e\x4a\x3a\xcd\xe3\x0d\x4b\x24\xae\x2d\xdb\x0b\xb5\x85\x4c\xd3\x01\x5e\xba\x07\x2f\x5e\xcd\x59\x50\xba\x47\xbe\xa1\x3d\x2a\x53\xa1\xff\xfb\xb3\x78\x9f\xbe\xcd\xe2\xcd\xfb\xdb\x6c\x39\x89\xe3\xd5\x6c\xbd\xf6\xbc\xd1\x08\x56\x68\x8f\x5a\x19\x60\x0a\x98\xd6\xec\x1b\x28\x83\x18\x25\x6e\x99\x25\x3d\x57\x19\x01\x25\xbf\x31\xb5\x06\xec\x8e\x59\xb0\x3b\x04\x96\xa6\x74\x54\x16\x52\x52\x56\x93\x34\x45\x1b\xa1\x40\x58\x03\x8a\xf4\x81\xc9\x06\xc1\x14\x07\xb3\x63\x1a\xf9\xb5\xe4\x79\x2c\x4d\xd1\x18\x9f\x49\x19\x40\x76\x54\x70\x60\x42\xf9\xf5\xe9\x18\x26\x9c\x6b\x34\x26\x18\xc3\x67\xf7\x7e\xa1\x23\xec\x0b\xce\x9e\x07\x00\x20\xd1\x02\x6f\x9f\x4c\x8a\x8b\x3c\xd5\x21\x82\xcf\xaf\x5b\x93\xfc\x98\x4c\x6a\xe5\x11\x6c\xd1\xd6\x3f\xae\xea\x82\x9e\x71\x53\x96\x43\xd4\x22\x96\x88\xe2\x09\xb7\x68\xa7\x2c\x67\x89\x90\xc2\x7e\xff\x3f\x3c\xf7\x88\x59\x12\xc7\x46\xd0\xc7\x31\x91\x22\xbd\xfc\xf0\x9b\x16\xc5\x33\xca\xcb\xf2\x28\x93\x74\xaa\x69\x0d\xa3\x01\xd6\xc2\x44\xe6\x6a\x5b\x61\x06\x91\x23\x35\x4c\x48\x6b\x3a\xf9\x01\x9c\x1b\x72\x41\x11\x85\xcf\x51\x4f\xd4\xdc\x7d\xb9\xd2\x14\x71\x9c\xc7\x63\x67\x5e\x58\x15\x5f\x1d\xe0\xcd\x9b\x7b\xb4\xe0\xad\x3b\x74\xe1\x57\x2b\x43\x96\xe7\xa8\xb8\x5f\xc8\xac\x70\x97\x9b\x15\xb2\xcc\x7a\xbd\xfe\x82\xf2\xb4\x25\xed\x7f\x49\x58\xbe\x7e\x91\xe4\xa8\xef\x2c\x70\x60\x8b\xfb\x69\x95\x6d\x1f\xcc\xee\x1e\xd8\xd1\xd1\x57\xd9\xd2\x27\xfb\x91\x3d\xd5\x52\xfb\x48\xc5\x12\xb7\x68\x1b\x97\x96\x25\xd2\x0f\x1c\x7a\x6b\xff\xcf\xf4\x28\xf9\x4d\x03\x91\x5d\xc7\x0f\x22\x50\x42\xc2\x70\xe8\x34\xac\xab\x67\x67\x65\xff\x9c\xa9\x76\xae\xaa\xf7\xe0\xb5\x03\xe8\xcf\xd3\x3c\x1e\x38\xc8\xe0\x41\x06\x1f\x87\xaa\x0a\x56\x2b\x5e\xba\xfc\x36\xf6\x70\xbd\x8b\xf7\x37\x00\x00\xff\xff\xb0\x2f\x5f\x0b\x9e\x05\x00\x00"

func lockedtokensDelegatorGet_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_infoCdc,
		"lockedTokens/delegator/get_delegator_info.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_infoCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xda, 0xfb, 0x16, 0xfd, 0x90, 0x7d, 0x88, 0x9a, 0xc8, 0xbb, 0xee, 0xa0, 0xc7, 0xc0, 0x6a, 0x40, 0xa7, 0xb8, 0xdc, 0xf, 0x52, 0x5d, 0xf3, 0xad, 0xe5, 0xe7, 0xe7, 0xee, 0xda, 0x86, 0x16}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_node_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\xfd\x72\xf8\x90\x2f\xa1\xe7\xd0\x36\x84\xd8\xd0\x10\x93\x84\x38\x2f\x20\x4b\x6b\x57\x44\xd6\x9a\xf5\x9a\xb6\x94\xbe\x7b\xb1\xdd\xa6\xe9\x9f\xbd\x08\x96\x99\xf9\x69\xc7\x37\x2d\xb1\x40\x4e\xf6\x8c\xee\x44\x67\x8c\x1d\x54\x4c\x0d\xdc\x3c\xe7\xfb\xf5\x36\x4b\x4f\xfb\x6d\xb6\x5b\xa5\xe9\x31\x2b\x0a\xa5\x8c\xb5\xd8\x75\xda\x84\x90\x40\xd5\x47\x68\x8c\x8f\xda\x58\x4b\x7d\x94\x05\xac\x9c\x63\xec\xba\x64\x01\x85\xb0\x8f\x35\xbc\x2a\x05\x00\x10\x50\x20\x8c\x84\xd5\x24\xdd\xc4\x8a\x8e\x58\xc1\x1d\xd4\x28\x1f\xbb\xcf\x98\x64\xb4\x0c\x33\xaf\x51\xd6\xa6\x35\xa5\x0f\x5e\x5e\x6e\xff\x5f\x7f\x72\x3e\x3e\x0f\x14\x1c\xf2\xbd\xbe\x58\x86\xf9\x26\xcb\x7f\x62\x0f\x7d\x19\xbc\x3d\x18\x79\xbc\x98\xae\x88\x25\x31\xd3\x93\xfe\xda\x2c\x97\xd0\x9a\xe8\xad\x9e\xad\xa9\x0f\x0e\x22\x09\x4c\x22\x30\xc0\x58\x21\x63\xb4\x08\x42\xd0\x8e\xc1\xf0\x0b\x38\x4b\xa6\x12\x18\xa5\xe7\xf8\x67\x0f\xc3\xa1\x29\x06\xac\x8d\x10\xef\xc8\xe1\x26\xd5\xc9\x3f\xf5\xa6\xde\x03\x00\x00\xff\xff\x8b\x50\x78\x4f\x9e\x01\x00\x00"

func lockedtokensDelegatorGet_delegator_node_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_node_idCdc,
		"lockedTokens/delegator/get_delegator_node_id.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_node_idCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_node_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_node_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0x41, 0x6a, 0x34, 0x8c, 0x74, 0xbf, 0x4c, 0x48, 0xd6, 0xb4, 0x20, 0xcd, 0x6e, 0x1e, 0xc2, 0x24, 0x77, 0x51, 0x3, 0x4e, 0xe3, 0x64, 0x32, 0x21, 0xa2, 0x45, 0x48, 0xae, 0xfd, 0xe8, 0xc2}}
	return a, nil
}

var _lockedtokensDelegatorRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x53\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\xf0\xf3\xe1\x83\x0d\xac\xee\x0e\xc3\x0e\x41\xbb\xa2\xab\x5b\xac\x68\x97\x16\x49\xb6\x9d\x15\x8b\xb6\x85\xc8\x92\x27\xd1\x4d\x86\x20\xff\x7d\x90\xe5\x38\x76\xb2\xec\x0f\x2c\x97\xc0\x22\xf9\xf8\xde\x23\x29\xaa\x5a\x1b\x82\x07\xa9\xd7\x0b\xbd\x42\x05\xb9\xd1\x15\x84\xfd\x77\x18\x74\x19\xcf\x3a\x5b\x21\x6f\xdf\xac\x4f\x7a\xbf\x79\x7e\xb9\x7b\xba\x4f\x17\x2f\x4f\xf7\xd3\xdb\x34\x9d\xdd\xcf\xe7\xc1\x00\xef\x31\x5d\xb0\xa5\xc4\x39\xb1\x95\x50\xc5\x00\x78\x1c\xe8\x3b\x3c\x34\xaa\x10\x4b\x89\x23\x1e\xc3\xb7\x30\x08\xc8\x30\x65\x59\x46\x42\xab\x48\xf0\x09\xcc\xc9\x08\x55\xbc\x03\x56\xe9\x46\xd1\x04\xbe\x3d\x88\xcd\xc7\x0f\x31\x6c\x83\x00\x00\x40\x22\x41\xa9\x25\x47\x33\xc3\x7c\x02\xff\x0f\x45\x24\xed\xdf\x97\x36\x7a\xc8\x7e\x63\x8d\x24\x9f\xdc\x7b\x90\x7c\x77\x8f\x3e\xa7\x36\x58\x33\x83\x11\xcb\x32\xdf\xf1\xb6\xa1\xf2\xd6\x7f\xb8\xb6\xd0\xfd\x2c\xca\x3c\xe9\x5b\xc3\x35\x74\x05\xc9\x52\x1b\xa3\xd7\x57\x67\xa9\x7c\x8a\x9c\xf2\x09\x9c\x8b\xcf\x49\x1b\x56\xe0\x2b\xa3\x32\x86\xbe\x9d\xfb\xdd\xdc\x40\xcd\x94\xc8\xa2\x70\x90\x0e\xc2\x82\xd2\x04\x96\xbd\x21\x07\x46\x60\x6b\xcc\x44\x2e\x90\x43\xcd\xa8\x0c\xe3\x60\x4c\x79\xaf\xff\x94\x31\x6b\xa8\x8c\x46\xf3\x48\x7e\x08\x2a\xb9\x61\x6b\x37\xcd\xf8\xc4\xb0\xbd\x92\x4b\xeb\x29\x5f\xe6\xfb\x78\x1b\x8e\xcf\x90\xbf\xd3\x8d\xe4\x2d\x67\xdf\x18\x5c\x19\x50\xbb\x14\x2d\x3b\x30\x98\xa3\x41\x95\x61\xe8\x31\x76\x5e\x03\x6e\x30\x6b\x08\x07\x43\x70\x03\x95\xad\x8f\x9f\x99\x64\x2a\x43\xb8\x3e\x1a\x4c\x52\x20\x79\xa7\xbb\x19\x76\x89\xd1\xc0\x17\x91\x77\xeb\x05\x57\xd7\x47\x70\xdb\x60\x24\xe2\x08\x3b\x33\xc8\x08\xa7\x9a\x63\x8a\x12\x0b\x46\xda\x44\x4a\x73\x7c\x4c\x27\x20\x78\x3c\xae\x75\x5c\x2d\xb1\x15\x9a\x57\xa3\x37\xbf\x4e\x99\x7a\x37\x0e\x48\x47\xf5\x83\xda\x84\xfb\x24\x9c\xa2\xf7\xdb\x46\xfb\xfb\xe8\x84\x5c\xfc\xe1\x40\x9d\x15\x3d\xfa\x57\xa1\x44\xd5\x54\x2e\x84\x33\xfc\xd9\x08\x83\x15\x2a\x8a\xe2\x41\xd7\x1d\xa0\xb4\xe8\xec\x89\xa2\x1e\x77\xe4\x4f\xec\x1c\x1b\xad\x55\xb2\xdc\x47\xfe\x6e\x1d\xc7\x5a\x5b\x41\xdd\x06\x5d\x5d\x8c\x41\xd6\xdd\xde\x9d\xca\x1a\xb7\x3f\xb6\xe8\x5f\x1c\xcf\x76\x44\xa3\xbb\xb1\xa9\x26\x40\xa5\x9b\xa2\xf4\x87\x65\x81\xb4\xa7\xf8\x5f\x78\xb8\xcb\x5d\x77\x5d\xbb\xe0\x77\x00\x00\x00\xff\xff\xdb\xa8\x21\xd9\x26\x06\x00\x00"

func lockedtokensDelegatorRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorRegister_delegatorCdc,
		"lockedTokens/delegator/register_delegator.cdc",
	)
}

func lockedtokensDelegatorRegister_delegatorCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0xd9, 0x77, 0x22, 0xa7, 0x8d, 0xfc, 0xd1, 0x1e, 0xec, 0x25, 0x54, 0xf7, 0x7c, 0x6c, 0xef, 0x31, 0x1d, 0xf4, 0xf8, 0xa3, 0x68, 0x6a, 0x28, 0xd6, 0x22, 0xf0, 0x2b, 0x20, 0xf3, 0xe7, 0xc0}}
	return a, nil
}

var _lockedtokensDelegatorRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xdf\x6a\xf2\x40\x10\xc5\xef\xf3\x14\x83\x17\x1f\xf1\x26\x7c\x17\xa5\x17\x52\x2b\xd2\x58\x0a\x8a\x8a\x7f\x1e\x60\xba\x99\x98\xc5\xb8\x93\xce\x4e\xda\x94\xe2\xbb\x17\x5d\x4d\xb5\xd2\xdc\x4c\x86\x3d\x9c\xdf\x9e\xb3\x76\x57\xb1\x28\x4c\xd8\x6c\x29\x5b\xf1\x96\x9c\x87\x5c\x78\x07\xff\x9b\xc9\xec\x69\x3c\x4a\x57\xb3\xf1\x68\x3a\x4c\xd3\xc5\x68\xb9\x8c\x22\x15\x74\x1e\x8d\x5a\x76\x31\xee\xb8\x76\xda\x83\xf5\xb3\x6d\xee\xef\xba\xf0\x15\x01\x00\x94\xa4\xe0\x38\xa3\x94\x4a\xda\xa0\xb2\xcc\x85\x9b\xcf\xde\x15\x21\x09\xcb\xf4\x46\x16\x1d\x2d\x2a\xa1\x0a\x85\x62\x34\x26\x10\x86\xb5\x16\xc3\xb0\x9c\x31\x67\x54\xc1\x65\x46\xb2\xa0\x1c\xfa\x70\xd2\x27\xaf\x2c\xc2\x1f\x0f\xff\xae\x90\xc7\xf1\x72\x54\x3f\xc6\x87\x84\xbf\xae\x74\x71\xbe\x54\x16\xdc\xd0\x1c\xb5\xe8\x42\x4b\x3b\x7c\x83\x01\x54\xe8\xac\x89\x3b\x17\x72\xb0\x1e\x1c\x2b\x78\x7c\xa7\x0c\x50\xc1\x57\x64\x6c\x6e\x29\x83\x0a\xb5\xe8\x74\x5b\x8b\xf6\xc7\x53\x99\x27\xb7\x2d\x41\xff\x27\xcf\x29\x45\x2b\x88\x83\xcd\x3e\x54\x44\x0d\x99\x5a\xe9\xa2\x8c\x3f\x2c\x13\xa1\xb7\x9a\xbc\xae\x9d\x57\xdc\x5a\xb7\x69\x9f\x2d\xcc\xb3\xeb\x3e\xfa\x0e\x00\x00\xff\xff\xb1\xf9\x7f\xb3\x0a\x02\x00\x00"

func lockedtokensDelegatorRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorRequest_unstakingCdc,
		"lockedTokens/delegator/request_unstaking.cdc",
	)
}

func lockedtokensDelegatorRequest_unstakingCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x4a, 0xf3, 0x42, 0x72, 0x6b, 0xbf, 0x51, 0x4d, 0x3a, 0xe6, 0x9b, 0xce, 0x42, 0xbc, 0x7, 0x8b, 0xa6, 0x15, 0x6a, 0xda, 0xb7, 0x66, 0x6b, 0xa8, 0xbd, 0x2e, 0xf1, 0x0, 0x96, 0x7, 0x4}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x6f\x82\x40\x10\x85\xef\xfc\x8a\x09\x87\x06\x0e\xc5\x1e\x9a\x1e\x8c\xd6\x18\xd1\x34\xd1\x54\xa3\xb6\xf7\x2d\x0c\x42\x5c\x19\xb2\x0c\x42\xd3\xf8\xdf\x1b\x58\xa0\x48\xf4\xd2\xbd\x6c\x96\x79\x3b\xef\x9b\xb7\x44\xa7\x84\x14\xc3\x8a\xbc\x23\xfa\x7b\x3a\x62\x9c\x42\xa0\xe8\x04\x4f\xc5\x6a\x3d\x5b\xce\xdd\xfd\x7a\x39\x7f\x9f\xba\xee\x76\xbe\xdb\x19\xb5\x7a\x21\x29\xaf\xb4\x5a\x6a\xb6\x67\xd3\x30\x58\x89\x38\x15\x1e\x47\x14\x5b\xe2\x44\x59\xcc\x43\xf8\x58\x44\xc5\xcb\xb3\x0d\x3f\x86\x01\x00\x20\x91\x21\x24\xe9\xa3\xda\x62\x30\x84\x87\xae\xb9\x53\x6d\x6f\x55\xb5\x15\x9f\x45\x26\x59\x6b\x5b\x2b\xe7\xb3\xfc\xa8\x1b\x26\x0a\x13\xa1\xd0\x12\x9e\xa7\x0d\xa7\x19\x87\x53\x7d\x28\x5d\xa1\x5e\x29\xca\xc0\x69\x9d\x61\x0c\xf5\x05\xe7\x8b\x94\xa2\x7c\x74\x97\xe4\xd5\x2a\x07\x1d\xc2\xbd\xfa\x8e\x49\x89\x03\x6e\x04\x87\x36\xb4\x76\xe5\x9a\x4c\x20\x11\x71\xe4\x59\xe6\x8c\x32\xe9\x43\x4c\x0c\xda\x0d\x14\x06\xa8\x30\xf6\x10\x98\xa0\xd3\xcc\xb4\x8d\x6b\xe2\x66\xfc\x1b\xc0\xbd\x38\x1a\xce\x41\xaa\x81\x06\x41\x53\xaf\xca\xf6\xbf\xd0\xfe\x5e\xfb\x2c\x64\x86\xa6\xee\x72\xd1\x90\x58\xa0\x97\x31\x76\x42\x2e\x1f\xcc\x47\x89\x07\xc1\xa4\x36\x8a\x8a\x6f\x18\xf7\x92\xaf\xf1\xdd\x46\x65\x75\x26\xbe\xbe\xea\xe4\x11\x87\xbe\x12\xf9\x16\x73\xa1\xfc\x26\xfb\xf6\xcf\xd2\xbb\x7d\x3b\x2f\xc7\xc7\x84\xd2\x88\xeb\x50\x46\x8f\x3d\x8a\xa6\x77\xbf\x5b\x33\xe0\xc5\xf8\x0d\x00\x00\xff\xff\xfe\x31\x8d\xb4\x1e\x03\x00\x00"

func lockedtokensDelegatorWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_rewarded_tokensCdc,
		"lockedTokens/delegator/withdraw_rewarded_tokens.cdc",
	)
}

func lockedtokensDelegatorWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xa4, 0x8c, 0xb5, 0xa0, 0xe8, 0xbb, 0xed, 0x30, 0x2, 0x92, 0x8a, 0xc9, 0x36, 0x90, 0x64, 0x59, 0x4e, 0xd9, 0x10, 0x6c, 0x42, 0xe4, 0x45, 0x6b, 0x85, 0x35, 0xdd, 0xc0, 0x76, 0x12, 0x71}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xc2\x40\x10\x85\xef\xf9\x15\x83\x87\x12\x2f\xa1\x87\xd2\x83\xd4\x8a\x34\x96\x82\xa2\xa2\xf6\x07\x4c\x77\x27\x66\x31\xee\x84\xc9\xd8\xa4\x14\xff\x7b\xd1\x98\x34\x56\x9a\xcb\x64\xd8\xc7\xfb\xf6\xbd\x75\xfb\x9c\x45\x61\xc6\x66\x47\x76\xc3\x3b\xf2\x05\x24\xc2\x7b\xb8\xaf\x66\x8b\x97\xe9\x24\xde\x2c\xa6\x93\xf9\x38\x8e\x57\x93\xf5\x3a\x08\x54\xd0\x17\x68\xd4\xb1\x0f\x71\xcf\x07\xaf\x03\x78\x7f\x75\xd5\xe3\x43\x1f\xbe\x03\x00\x80\x8c\x14\x3c\x5b\x8a\x29\xa3\x2d\x2a\xcb\x52\xb8\xfa\x1a\x5c\x11\xa2\x7a\x99\xdf\xc8\x82\xb3\x45\x2e\x94\xa3\x50\x88\xc6\xd4\x84\xf1\x41\xd3\x71\xbd\x34\x98\x06\x95\x72\x66\x49\x56\x94\xc0\x10\x2e\xfa\xe8\x83\x45\xb8\x7c\xba\xbb\x42\x9e\xc7\xdb\x59\xfd\x1c\x9e\x12\xfe\xb9\x52\xe7\x7c\xad\x2c\xb8\xa5\x25\x6a\xda\x87\x96\x76\xfa\x46\x23\xc8\xd1\x3b\x13\xf6\x3a\x72\x70\x05\x78\x56\x28\xf0\x93\x2c\xa0\x42\x91\x93\x71\x89\x23\x0b\x39\x6a\xda\xeb\xb7\x16\xed\x4f\x41\x59\x12\xdd\xb6\x04\xc3\xdf\x3c\x97\x14\xad\x20\xac\x6d\x8e\x75\x45\x54\x91\x39\x28\x75\xca\xf8\xc7\x32\x2a\x9d\xa6\x56\xb0\x5c\x51\x89\x62\x9b\xb8\xed\xe3\xd5\xb3\xf1\x3e\x06\x3f\x01\x00\x00\xff\xff\x93\x68\x03\x07\x10\x02\x00\x00"

func lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc,
		"lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc",
	)
}

func lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0x82, 0x3d, 0xe0, 0xb7, 0x1e, 0xf7, 0xed, 0x59, 0xb8, 0x4, 0xce, 0x38, 0xb6, 0x6e, 0x9a, 0x69, 0x60, 0x72, 0x8, 0x27, 0xcf, 0xa5, 0x8, 0x5f, 0x3e, 0xb7, 0x74, 0xcb, 0xaa, 0x37, 0xfe}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xdf\x6a\xf2\x40\x10\xc5\xef\xf3\x14\x83\x17\x1f\xf1\x26\x7c\x17\xa5\x17\x52\x2b\xd2\x58\x0a\x8a\x8a\x7f\x1e\x60\xba\x99\x98\xc5\xb8\x13\x66\xc7\x9a\x52\x7c\xf7\xa2\xd1\x6d\xac\x34\x37\x93\x61\x0f\xe7\xb7\xe7\xac\xdd\x55\x2c\x0a\x13\x36\x5b\xca\x56\xbc\x25\xe7\x21\x17\xde\xc1\xff\x7a\x32\x7b\x19\x8f\xd2\xd5\x6c\x3c\x9a\x0e\xd3\x74\x31\x5a\x2e\xa3\x48\x05\x9d\x47\xa3\x96\x5d\x8c\x3b\xde\x3b\xed\xc1\xfa\xd5\xd6\x8f\x0f\x5d\xf8\x8a\x00\x00\x4a\x52\x70\x9c\x51\x4a\x25\x6d\x50\x59\xe6\xc2\xf5\x67\xef\x86\x90\x34\xcb\xf4\x4e\x16\x9d\x2d\x2a\xa1\x0a\x85\x62\x34\xa6\x21\x0c\xf7\x5a\x0c\x9b\xe5\x8a\xb9\xa2\x0a\x2e\x33\x92\x05\xe5\xd0\x87\x8b\x3e\x79\x67\x11\x3e\x3c\xfd\xbb\x41\x9e\xc7\xdb\x59\xfd\x1c\x9f\x12\xfe\xba\x52\xeb\x7c\xa9\x2c\xb8\xa1\x39\x6a\xd1\x85\x40\x3b\x7d\x83\x01\x54\xe8\xac\x89\x3b\x2d\x39\x58\x0f\x8e\x15\x3c\x7e\x50\x06\xa8\xe0\x2b\x32\x36\xb7\x94\x41\x85\x5a\x74\xba\xc1\x22\xfc\x78\x2a\xf3\xe4\xbe\x25\xe8\xff\xe4\xb9\xa4\x08\x82\xb8\xb1\x39\x36\x15\x51\x4d\x66\xaf\xd4\x2a\xe3\x0f\xcb\xe4\x60\xb5\xc8\x04\x0f\x6b\xe7\x15\x43\xdc\xf0\x78\xcd\xbc\x7a\x1f\xa3\xef\x00\x00\x00\xff\xff\xbc\x5c\xb3\x29\x10\x02\x00\x00"

func lockedtokensDelegatorWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_unstaked_tokensCdc,
		"lockedTokens/delegator/withdraw_unstaked_tokens.cdc",
	)
}

func lockedtokensDelegatorWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x6b, 0xcd, 0x92, 0x2d, 0xc7, 0x26, 0xf1, 0x84, 0xdd, 0xbf, 0xe1, 0x63, 0x85, 0x81, 0xc6, 0xbc, 0xb9, 0x4b, 0x27, 0xa4, 0x96, 0xfc, 0xab, 0x2c, 0x32, 0x7a, 0x19, 0xc1, 0xcc, 0xec, 0x30}}
	return a, nil
}

var _lockedtokensStakerGet_node_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\xf9\x72\xf8\x90\x2f\xa1\xe7\xd0\x36\x84\xd8\xd0\x10\x93\x84\x38\x2f\x20\x4b\x6b\x57\x44\xd6\x1a\x59\xa6\x2d\xa5\xef\x5e\x6c\xb7\x69\xfa\x67\x2f\x82\x65\x66\x7e\xda\xb1\x4d\xcb\x21\x22\x67\x7d\x26\x73\xe2\x33\xf9\x0e\x55\xe0\x06\x37\xcf\xf9\x7e\xbd\xcd\xd2\xd3\x7e\x9b\xed\x56\x69\x7a\xcc\x8a\x42\x08\xa5\x35\x75\x9d\x54\xce\x25\xa8\x7a\x8f\x46\x59\x2f\x95\xd6\xdc\xfb\xb8\xc0\xca\x98\x40\x5d\x97\x2c\x50\xc4\x60\x7d\x8d\x57\x21\x00\xc0\x51\x84\x1b\x09\xab\x49\xba\xf1\x15\x1f\xa9\xc2\x1d\x6a\x8a\x1f\xbb\xcf\x98\x64\xb4\x0c\x33\xaf\x29\xae\x55\xab\x4a\xeb\x6c\x7c\xb9\xfd\x7f\xfd\xc9\xf9\xf8\x3c\xb0\x33\x14\xee\xe5\xc5\x32\xcc\x37\x59\xfe\x13\x7b\xe8\x4b\x67\xf5\x41\xc5\xc7\x8b\xe9\x8a\x58\x72\x08\xfc\x24\xbf\x36\xcb\x25\x5a\xe5\xad\x96\xb3\x35\xf7\xce\xc0\x73\xc4\x24\x82\x42\xa0\x8a\x02\x79\x4d\x88\x8c\x76\x0c\xc6\x2f\xe0\x2c\x99\x4a\x08\x14\xfb\xe0\xff\xec\x61\x38\x74\xc7\x86\x36\xa9\x4c\xfe\x89\x37\xf1\x1e\x00\x00\xff\xff\xc4\x5d\x37\x5b\x95\x01\x00\x00"

func lockedtokensStakerGet_node_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerGet_node_idCdc,
		"lockedTokens/staker/get_node_id.cdc",
	)
}

func lockedtokensStakerGet_node_idCdc() (*asset, error) {
	bytes, err := lockedtokensStakerGet_node_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/get_node_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xe, 0x1c, 0xd5, 0x4f, 0x7f, 0x7e, 0xd5, 0xc2, 0x4, 0x7, 0x1e, 0x32, 0x6c, 0xa3, 0x68, 0x2e, 0xda, 0xf7, 0x98, 0x4a, 0xbd, 0x4c, 0xc2, 0xac, 0xa2, 0xc, 0x50, 0x4e, 0x16, 0xd7, 0xac}}
	return a, nil
}

var _lockedtokensStakerGet_staker_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\xa3\x1e\x56\xc9\x25\xdd\x33\xda\xac\x84\x08\xab\x45\x45\x6d\x05\xdc\xaa\x1e\x26\xf1\x04\xbc\x18\x3b\xb2\x27\xea\x56\x88\xff\xbe\x72\x12\x52\x02\x54\x54\xeb\x0b\xc2\x9e\xef\xf9\xf1\x9e\x51\xbb\xca\x3a\x86\x5f\xda\xbe\xcd\xb2\x15\xe6\x9a\x96\x8c\x5b\x65\xd6\x50\x3a\xbb\x83\xbb\xcb\x83\x3b\xd1\x31\x73\x5b\x6c\x49\xae\xec\x96\x8c\x6f\xa7\xbf\xff\x9d\x3f\x4d\x1e\xa6\xd9\xea\xe9\x61\xfa\x38\xce\xb2\xc5\x74\xb9\x14\xe2\xfe\x1e\x16\xc4\xb5\x33\x1e\xd0\x00\x3a\x87\xef\x60\x4b\x78\xb4\x92\x66\xa6\xb4\x60\xf3\x3f\x54\xb0\x07\xde\x20\x03\x6f\x08\xb0\x28\x6c\x6d\x18\x0a\x6b\xd8\x59\xed\x83\x82\x32\xa0\xd8\x83\xb1\x6e\x87\xba\x9f\x40\x23\xc1\x6f\xd0\x91\x3c\x6e\x09\x81\x45\x41\xde\x47\xa8\x75\x0c\x65\x6d\x60\x87\xca\x44\xdd\xe9\x08\xc6\x52\x3a\xf2\x3e\x1e\xc1\xcb\xe5\x4f\x4b\x8e\x9e\x5e\x61\x2f\x04\x00\x80\x26\x06\xd3\x6d\x8e\x83\xf3\x5b\x5c\x0a\x2f\xaf\x1f\x68\x55\xe7\xe3\xce\x6a\x0a\x6b\xe2\xee\xcb\xd1\x4e\x3c\xbc\x24\xa8\x91\x9b\x60\x05\xe9\x09\xd9\x8c\x84\x95\xac\x89\x27\x58\x61\xae\xb4\xe2\xf7\x1f\xdf\xf6\x9f\x18\x69\x65\x9e\xeb\x5c\xab\xe2\xf0\x33\xea\xf9\xb0\xbe\x80\x3c\x23\x6f\x7a\xa6\x73\xa8\xca\x33\x93\x0b\x2a\x21\x1d\x9a\x4e\x72\xeb\x9c\x7d\x8b\x62\xd8\xf7\x78\x80\x54\xe8\x38\xfd\xec\xe6\x90\x5a\xd4\x24\x9c\x8d\x86\xfa\x89\x92\x71\x2f\x34\xe8\x20\xc1\xaa\x22\x23\xa3\xa0\xdc\x8e\x1c\x3e\x82\xd4\xcd\xab\xec\xb2\x0b\xc8\x97\xf3\x3c\x7d\xcf\x49\xf3\xf1\xdb\x6a\x49\xee\x2c\xc2\xc1\xd8\xfc\xfc\xb6\x9b\x19\x5e\xf8\x6b\xa3\xbc\x66\xfb\x5a\xa2\x27\x4d\xcc\xb2\x6b\x5c\x48\x6e\x4d\xdc\x64\x9b\x0d\xd0\xff\x2c\x64\x96\xc5\x03\x89\x1b\x55\xb4\x75\x9c\x94\xe2\x9a\xff\xfe\x10\x13\x07\xf1\x2f\x00\x00\xff\xff\x5f\x5b\xab\xa7\x79\x04\x00\x00"

func lockedtokensStakerGet_staker_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerGet_staker_infoCdc,
		"lockedTokens/staker/get_staker_info.cdc",
	)
}

func lockedtokensStakerGet_staker_infoCdc() (*asset, error) {
	bytes, err := lockedtokensStakerGet_staker_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/get_staker_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xf2, 0x60, 0xf9, 0x29, 0x5d, 0x15, 0x23, 0xff, 0x64, 0x8, 0x90, 0x40, 0xb7, 0x34, 0x11, 0x71, 0x75, 0x88, 0xd7, 0x36, 0x82, 0xcc, 0x59, 0xa7, 0x7a, 0x9b, 0x92, 0xbe, 0xb8, 0xe1, 0xb7}}
	return a, nil
}

var _lockedtokensStakerRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x8f\xda\x30\x10\xbd\xe7\x57\x4c\x73\xa8\x12\x69\x37\xdb\x43\x55\x55\x11\x74\x45\x17\xb6\x45\xac\x00\x11\xb6\x1f\x47\x93\x4c\x12\x0b\x63\x23\xc7\x29\xac\x10\xff\xbd\x72\x9c\x2f\x43\xb7\xea\xa5\x1c\x48\x3c\xf3\x32\xef\xcd\xcb\x0b\xdd\xed\x85\x54\xf0\xc8\xc4\x61\x2d\xb6\xc8\x21\x95\x62\x07\x6e\x7b\x76\x9d\x06\x51\xf2\x8c\x6e\x18\x5a\xa8\x7e\xad\x45\x3e\x89\x78\x8b\x49\x55\x2b\x0c\xf0\xdd\xf1\x69\xf1\x30\x9b\x8c\xd7\x8b\xd9\x64\x3e\x1a\x8f\x57\x93\x28\x6a\xd0\x91\x22\x5b\xca\xb3\xa5\x14\xc7\x97\x06\x1d\xad\x47\xb3\xe9\xfc\xcb\x72\xb5\xf8\xf1\xb3\x81\x3b\x4a\x12\x5e\x90\x58\x51\xc1\x3d\x9a\x84\x10\x29\x49\x79\x76\x03\x52\x30\x0c\xe1\x79\xca\xd5\xc7\x1b\xe0\xa8\x0e\x42\xea\x81\xa3\x24\x91\x58\x14\x1d\xae\x6b\xcd\xf0\xa5\x2b\x17\x86\xdf\xaa\x91\x9d\x28\xb9\x0a\xe1\xf9\x91\x1e\x3f\xbc\xf7\xe1\xe4\x38\x00\x00\x0c\x15\xe4\x82\x25\x28\x57\x98\x86\xf0\xb6\xbf\x68\x50\x5d\xbe\x56\xdd\x0e\xfd\x8b\x94\x4c\x19\x70\xeb\x68\xf0\x4d\x17\x0d\x66\x2f\x71\x4f\x24\x7a\x24\x8e\x0d\xe3\xa8\x54\xf9\xc8\x1c\x34\x2d\xd4\xbf\x02\x59\x1a\xb4\xd4\x30\x84\xfa\x81\x60\x23\xa4\x14\x87\xc1\xab\x52\x3e\x79\xda\xd2\x10\x5e\xeb\x47\x4a\x48\x92\xe1\x92\xa8\xdc\x6f\xd9\xf4\xef\xfe\x1e\xf6\x84\xd3\xd8\x73\x1f\x44\xc9\x12\xe0\x42\x81\x21\x03\x89\x29\x28\x01\xbd\x29\xae\xef\xd8\x52\x9b\xbd\xaf\x95\x92\x52\xe5\x9e\x95\x9b\xe0\x3b\x55\x79\x22\xc9\x81\x6c\x18\xfa\x57\x46\x35\x1b\xdc\x15\x46\xea\x5d\xda\xf4\xab\xf6\x3f\xab\xd6\x8f\x81\xaa\xc2\x5b\xa9\xd3\x6b\xa0\x44\x1e\xa3\x6b\x66\x9c\xcd\x0e\x78\xc4\xb8\x54\xd8\x33\x5f\xbf\x48\x2e\x12\x9c\xf2\x54\xc0\xd0\x0a\x6c\x30\xaf\xeb\x5e\x05\x18\x87\x40\x93\x26\x91\xfa\xff\x8f\x81\xbc\x2a\x5d\x65\xd3\x3a\xda\x11\xed\xee\x7b\x9e\x6b\x85\xac\x7a\xc3\x9f\x09\x23\x3c\x46\x18\x5e\x44\x26\xc8\x50\x99\x0c\xd4\xe9\xaa\x81\x5e\x6f\x0a\x4d\xeb\xe0\xc3\x60\x78\x31\xee\xe4\x58\x36\x5f\xcc\x8e\x25\x12\x85\xda\x0a\xed\x0d\x4a\xaf\x71\x2b\x6c\x7d\xeb\xbe\x29\x73\xed\xd1\x9e\x01\x59\x81\x9a\xdd\xf3\x6a\xfe\x5b\x9b\xde\xd7\x82\xac\x5c\x05\x9b\xa6\xf3\x77\x65\x09\xee\x45\x41\x55\x1d\xa1\xc1\xad\x3d\xe4\x50\x07\xcf\xb3\xb5\x5d\xd1\xfb\xff\x7f\xfb\x93\xc5\x50\x67\x78\x2e\x14\x20\x17\x65\x96\x9b\xe0\x16\xfa\xb3\xd3\x01\xc0\x37\x6e\x97\xfb\x73\x7b\x57\xc7\xf8\xec\xfc\x0e\x00\x00\xff\xff\xd3\xb7\xf8\x70\xd5\x05\x00\x00"

func lockedtokensStakerRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerRegister_nodeCdc,
		"lockedTokens/staker/register_node.cdc",
	)
}

func lockedtokensStakerRegister_nodeCdc() (*asset, error) {
	bytes, err := lockedtokensStakerRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0xc3, 0xb2, 0x63, 0x32, 0x7b, 0x9a, 0xb6, 0x9f, 0x54, 0x7b, 0x8b, 0xab, 0xdb, 0x24, 0xb6, 0xd7, 0xd5, 0x46, 0x31, 0x81, 0x3c, 0xee, 0xc8, 0x3a, 0x6b, 0xcb, 0x68, 0xf0, 0x1f, 0xac, 0x8}}
	return a, nil
}

var _lockedtokensStakerRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4d\x6b\xf2\x40\x10\xc7\xef\xfb\x29\x06\x0f\x0f\xf1\x12\x9e\x43\xe9\x41\x6a\x25\xa8\x7d\x41\x51\x71\x15\xda\xe3\x76\x9d\x68\x48\xdc\x49\x67\x27\x34\xa5\xf8\xdd\x4b\xdc\xf8\x42\xc1\xbd\x0c\xcb\xfc\xe7\x3f\xf3\x9b\xc9\xf6\x25\xb1\xc0\x94\x6c\x8e\x9b\x15\xe5\xe8\x3c\xa4\x4c\x7b\xf8\x5f\x4f\xe7\xc3\xc9\x78\xb4\x9a\x4f\xc6\xb3\x64\x34\x5a\x8e\xb5\x56\xad\x5a\x8b\xc9\x33\xb7\x5d\x30\xd5\xdf\x27\xb5\x5e\x25\x93\xd7\xd9\xf3\x62\x39\x7f\x7b\x3f\xc9\x95\xb0\x71\xde\x58\xc9\xc8\x45\x66\x4f\x95\x93\x1e\xac\x9f\xb2\xfa\xfe\xae\x0b\x3f\x4a\x01\x00\x14\x28\xb0\xa3\x62\x83\xbc\xc4\xb4\x07\xff\xae\x27\x89\x8f\xe1\xe5\x98\x0d\xea\x92\xb1\x34\x8c\x91\xb1\x36\xb8\x25\x95\xec\x92\xf0\x69\x2c\xa1\x7d\x1e\x8b\x34\x3e\xdb\x42\x1f\xda\x82\xf8\x83\x98\xe9\xeb\xe1\x66\x9b\xc7\xa8\xe1\xe9\xc1\xad\xbc\x16\x62\xb3\xc5\x85\x91\x5d\xf7\xdc\xad\x79\x83\x01\x94\xc6\x65\x36\xea\x0c\xa9\x2a\x36\xe0\x48\x20\x34\x03\xc6\x14\x19\x9d\x45\x10\x82\x2b\xaf\x4e\x70\x38\x04\x34\xac\xd1\x56\x82\x57\x10\xcd\x6a\xbc\x98\x1c\x39\x6c\xba\xff\x07\xab\x85\xd1\x47\x49\xd4\x55\x17\xfa\x4b\x51\xcc\xf8\x59\xa1\x97\xb5\xf3\xe1\x68\xe7\x3b\x84\x78\x1a\xe1\xa0\x7e\x03\x00\x00\xff\xff\x5f\x78\x28\xec\x0a\x02\x00\x00"

func lockedtokensStakerRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerRequest_unstakingCdc,
		"lockedTokens/staker/request_unstaking.cdc",
	)
}

func lockedtokensStakerRequest_unstakingCdc() (*asset, error) {
	bytes, err := lockedtokensStakerRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x89, 0x50, 0xca, 0x45, 0x71, 0x4e, 0x85, 0xb7, 0xbe, 0xb5, 0xb7, 0x66, 0xdb, 0x88, 0x48, 0xdf, 0xfa, 0x85, 0x70, 0x19, 0xa4, 0x67, 0x61, 0xc2, 0x33, 0xc, 0xc5, 0x1, 0xea, 0xd4, 0xb9}}
	return a, nil
}

var _lockedtokensStakerStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcb\x8e\xda\x40\x10\xbc\xfb\x2b\x3a\x3e\x44\xf6\x61\xbd\x39\x44\x39\xac\x20\x2b\xb2\xb0\x49\xc4\x0a\x10\x26\xaf\xe3\x60\xda\x0f\x31\xcc\x58\xe3\x76\x20\x42\xfc\x7b\x34\x0f\x1b\xdb\x68\xa5\x28\xbe\xd8\x9e\xae\xe9\xaa\xea\xea\xe2\x50\x4a\x45\xf0\xcc\xe5\x71\x23\xf7\x28\x20\x55\xf2\x00\x7e\xfb\xef\x7b\x0d\xa2\x16\x59\xb1\xe5\xd8\x43\x75\xcf\x7c\xaf\x81\xbe\xc8\x64\x8f\x3b\x73\x58\x59\xe4\xbb\xd3\xcb\xf2\x69\x3e\x9b\x6e\x96\xf3\xd9\x62\x32\x9d\xae\x67\x71\xdc\xa0\x63\x62\xfb\x42\x64\x2b\x25\x4f\x7f\x1a\x74\xbc\x99\xcc\xbf\x2e\x3e\xaf\xd6\xcb\x9f\xbf\x1a\xb8\x47\x8a\x89\x8a\x25\x54\x48\x11\xb0\x83\xac\x05\x3d\xc0\xb7\xe7\xe2\xf4\xe1\x7d\x08\x67\xcf\x03\x00\xe0\x48\x90\x4b\xbe\x43\xb5\xc6\xf4\x01\xde\x76\x95\x44\xe6\xf5\xc5\x54\xaf\xe8\xdf\xac\xe6\x64\xc1\xad\xe7\xe8\xbb\x3e\xb4\x98\x52\x61\xc9\x14\x06\x2c\x49\x2c\xe3\xa4\xa6\x7c\x62\x7f\x34\x2d\xb8\xa7\x42\x9e\x46\x2d\x35\x8c\xc1\x5d\x88\xb6\x52\x29\x79\x1c\xbd\x2a\xe5\x63\xa0\x3d\x3f\xc0\x6b\xf5\x98\xa4\x62\x19\xae\x18\xe5\x61\xcb\xa6\x9f\xc7\x47\x28\x99\x28\x92\xc0\x7f\x92\x35\xdf\x81\x90\x04\x96\x0c\x14\xa6\xa8\x50\x24\x08\x24\xa1\xd3\xcb\x0f\xbd\xbe\xe0\xc6\xfd\xad\x5e\x56\x53\x1e\xf4\xf2\x8d\x7e\x14\x94\xef\x14\x3b\xb2\x2d\xc7\xf0\x66\x5c\x8d\x8f\xfb\xca\x0a\xbe\x4f\x9b\xba\x29\xff\xb3\x76\x7d\x0d\xc8\x2c\x99\x51\x77\x35\xe3\xdb\x1e\x17\xeb\x01\x4f\x98\xd4\x84\x9d\x08\x74\x9c\x15\xb1\x3d\x2a\xbb\x4b\xe3\x41\x28\xce\x5a\x6c\x20\x41\x67\x14\xfa\x22\x37\xe3\xff\xc4\x38\xd3\x63\xbb\xb9\x9a\x21\xd9\x80\x5c\xf4\x0e\xd8\xed\x52\xa4\x60\xb7\x12\x46\xe3\x41\xbb\xb3\xd7\x73\xdf\x11\x19\x99\xef\x05\xda\x49\x55\xed\x5e\xdb\x77\xa7\xfb\x05\x90\x57\xa8\x49\x02\x07\x82\xbb\x3e\x4b\xa8\x79\x7b\xa9\x46\xdb\xa6\x32\x14\xd0\x37\xb7\xc3\x52\x56\x05\xb9\x00\x47\x77\xfd\x26\x47\x17\xfb\x40\xdb\x0d\x7d\xf8\xdf\x26\xbb\xd7\x86\x86\xcf\xbd\xaa\x5b\x9a\x85\x24\x40\x21\xeb\x2c\xb7\x9b\x52\xe9\x3d\x37\x24\x6f\xfc\x6b\xbb\x8b\x5b\x97\x8b\xf7\x37\x00\x00\xff\xff\x52\x07\x6c\x79\xe5\x04\x00\x00"

func lockedtokensStakerStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_new_tokensCdc,
		"lockedTokens/staker/stake_new_tokens.cdc",
	)
}

func lockedtokensStakerStake_new_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x22, 0xd8, 0x60, 0xd7, 0xd4, 0x8d, 0x48, 0x46, 0xff, 0x44, 0xac, 0xfa, 0xbc, 0x9b, 0xd, 0xa9, 0x51, 0x5a, 0xc9, 0xc4, 0x71, 0xeb, 0x81, 0x4b, 0xe8, 0x9f, 0xa0, 0x9b, 0xa2, 0x3c, 0xa2}}
	return a, nil
}

var _lockedtokensStakerStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x6b\xc2\x50\x0c\xc7\xef\xfd\x2b\x82\x87\x51\x2f\x65\x87\xb1\x83\xcc\x49\x51\xf7\x03\x45\xa5\xcf\xc1\x76\x7c\x7b\x4d\xb5\xb4\xbe\x94\x34\xc5\x8e\xe1\xff\x3e\xda\xd7\xaa\x0c\xcc\x25\x2d\xf9\xe6\x9b\x7c\xf2\xd2\x43\x41\x2c\xb0\x24\x93\x61\xbc\xa5\x0c\x6d\x09\x09\xd3\x01\xee\xeb\xe5\x7a\xba\x98\xcf\xb6\xeb\xc5\x7c\x15\xce\x66\xd1\x5c\x29\xaf\x53\x2b\xd1\x59\x6a\x77\x1b\xa6\xfa\xa7\x57\xab\x6d\xb8\x78\x5f\xbd\x6e\xa2\xf5\xe7\x57\x2f\xf7\x84\xb5\x2d\xb5\x91\x94\xac\xaf\x0f\x54\x59\x19\xc1\xc7\x4b\x5a\x3f\x3e\x0c\xe1\xd7\xf3\x00\x00\x72\x14\xd8\x53\x1e\x23\x47\x98\x8c\xe0\xee\x7a\x93\xa0\x4d\x6f\x6d\xd5\xa9\x0b\xc6\x42\x33\xfa\xda\x18\xe7\x16\x56\xb2\x0f\xdd\x4f\x63\x09\x5d\x94\x98\x27\xc1\xd9\x16\xc6\xd0\x35\x04\xdf\xc4\x4c\xc7\xa7\x9b\x63\x9e\xfd\x86\x67\x04\xb7\xea\x4a\x88\xf5\x0e\x37\x5a\xf6\xc3\xf3\xb4\x26\x26\x13\x28\xb4\x4d\x8d\x3f\x98\x52\x95\xc7\x60\x49\xc0\x0d\x03\xc6\x04\x19\xad\x41\x10\x82\x2b\xaf\x81\x73\x38\x39\x34\xac\xd1\x54\x82\x57\x10\xcd\x69\x4a\xd1\x19\xb2\xbb\xf4\xf8\x1f\x56\x07\xa3\x5a\x89\x3f\xf4\x2e\xf4\x97\xa6\xa0\xfd\x8e\xf0\xa8\x39\xee\x79\xce\x4f\xe1\x72\xbf\xc5\xc9\xfb\x0b\x00\x00\xff\xff\x4c\x01\x8a\x3b\x0d\x02\x00\x00"

func lockedtokensStakerStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_rewarded_tokensCdc,
		"lockedTokens/staker/stake_rewarded_tokens.cdc",
	)
}

func lockedtokensStakerStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x5f, 0x47, 0xa5, 0x4b, 0xa0, 0x20, 0x8f, 0xd4, 0xc8, 0xff, 0x36, 0x18, 0xd, 0x76, 0xea, 0x11, 0x69, 0x2a, 0x66, 0x7f, 0xb9, 0xbb, 0xec, 0x61, 0xba, 0x59, 0xc0, 0x50, 0x23, 0xa6, 0x12}}
	return a, nil
}

var _lockedtokensStakerStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x6a\xc2\x40\x10\xc6\xef\xfb\x14\x83\x87\x12\x2f\xa1\x87\xd2\x83\xd4\x4a\x50\xfb\x07\x45\xc5\x55\x68\x8f\xdb\x75\xa2\x21\x71\x27\x4c\x26\x34\xa5\xf8\xee\x25\xd9\xa8\xa1\xe0\x5c\x26\x61\xbe\xf9\x66\x7e\xb3\xc9\x31\x27\x16\x98\x93\x4d\x71\xb7\xa1\x14\x5d\x01\x31\xd3\x11\xee\xab\xf9\x72\x3c\x9b\x4e\x36\xcb\xd9\x74\x11\x4d\x26\xeb\xa9\xd6\xaa\x55\x6b\x31\x69\xe2\xf6\x2b\xa6\xea\xe7\xac\xd6\x9b\x68\xf6\xbe\x78\x5d\xad\x97\x1f\x9f\x67\xb9\x12\x36\xae\x30\x56\x12\x72\x81\x39\x52\xe9\x64\x00\xdb\x97\xa4\x7a\x7c\xe8\xc3\xaf\x52\x00\x00\x19\x0a\x1c\x28\xdb\x21\xaf\x31\x1e\xc0\x5d\x77\x93\xb0\x49\x6f\x4d\xd5\xab\x73\xc6\xdc\x30\x06\xc6\x5a\xef\x16\x95\x72\x88\xfc\x4f\x6d\x09\x6d\x14\x98\xc5\xe1\xc5\x16\x86\xd0\x36\x84\x5f\xc4\x4c\xdf\x4f\x37\xc7\x3c\x07\x35\xcf\x00\x6e\xd5\xb5\x10\x9b\x3d\xae\x8c\x1c\xfa\x97\x69\x75\x8c\x46\x90\x1b\x97\xd8\xa0\x37\xa6\x32\xdb\x81\x23\x01\x3f\x0c\x18\x63\x64\x74\x16\x41\x08\x3a\x5e\x3d\xef\x70\xf2\x68\x58\xa1\x2d\x05\x3b\x10\xf5\x69\x0a\x31\x29\xb2\xbf\xf4\xf0\x1f\x56\x0b\xa3\x1b\x49\xd0\x57\x57\xfa\x6b\x53\xd8\x7c\x6f\x5d\x93\x5a\x9e\xcb\x53\xf8\x7c\xde\xe2\xa4\xfe\x02\x00\x00\xff\xff\x63\x35\x3a\x15\x0d\x02\x00\x00"

func lockedtokensStakerStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_unstaked_tokensCdc,
		"lockedTokens/staker/stake_unstaked_tokens.cdc",
	)
}

func lockedtokensStakerStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x1d, 0x1, 0x11, 0xf9, 0x79, 0xef, 0xb3, 0xce, 0x49, 0x93, 0x62, 0xfc, 0x29, 0x5c, 0xc2, 0x92, 0xc4, 0xa4, 0xc9, 0x40, 0x13, 0x75, 0x6, 0x2a, 0xf, 0x2c, 0x4e, 0x71, 0xae, 0x7e, 0xb2}}
	return a, nil
}

var _lockedtokensStakerUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6b\xfa\x40\x10\xc5\xef\xfb\x29\x06\x0f\x7f\xd6\x4b\xf8\x9f\xa5\x56\x82\x4a\x5b\x14\x15\xd7\x43\x7b\xdc\xae\x13\x0d\x59\x77\xc2\x64\x42\x2d\xc5\xef\x5e\x92\x8d\x1a\x0a\xce\x65\x18\xe6\xcd\x7b\xfc\x26\x3f\x95\xc4\x02\x4b\x72\x05\xee\x77\x54\x60\xa8\x20\x63\x3a\xc1\xff\xf3\x72\x3d\x5d\xcc\x67\xbb\xf5\x62\xbe\x4a\x67\xb3\xed\xdc\x18\xd5\xa9\x8d\xd8\x22\x0f\x87\x0d\xd3\xf9\xfb\xaa\x36\xbb\x74\xf1\xb6\x7a\xd9\x6c\xd7\xef\x1f\x57\xb9\x12\xb6\xa1\xb2\x4e\x72\x0a\x7a\x08\x3f\x4a\x01\x00\x78\x14\x38\x92\xdf\x23\x6f\x31\x1b\xc1\xbf\x7e\x76\xd2\xb6\xd7\x76\x1b\xd5\x25\x63\x69\x19\xb5\x75\x8e\xea\x20\x23\x48\x6b\x39\xa6\x71\x68\x2c\xa1\xab\x0a\x7d\x96\xdc\x6c\x61\x0c\xdd\x41\xf2\x49\xcc\xf4\xf5\xf4\x30\xe6\x59\x37\x04\x23\x78\xb4\x37\x42\x6c\x0f\xb8\xb1\x72\x1c\xde\xd2\x9a\x9a\x4c\xa0\xb4\x21\x77\x7a\x30\xa5\xda\xef\x21\x90\x40\x0c\x03\xc6\x0c\x19\x83\x43\x10\x82\x9e\xd7\x20\x3a\x5c\x22\x1a\x9e\xd1\xd5\x82\x3d\x88\xe6\x35\x95\xd8\x02\x39\xfe\x76\xfc\x07\xab\x83\x31\xad\x44\x0f\xd5\x9d\xfe\x7e\x94\xd4\xa1\x9d\x52\xef\xf5\x35\xee\xa2\x7e\x03\x00\x00\xff\xff\x74\xb5\x4c\x21\xe8\x01\x00\x00"

func lockedtokensStakerUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerUnstake_allCdc,
		"lockedTokens/staker/unstake_all.cdc",
	)
}

func lockedtokensStakerUnstake_allCdc() (*asset, error) {
	bytes, err := lockedtokensStakerUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0xd3, 0x2e, 0xa, 0x8e, 0xd8, 0xe4, 0x82, 0xc3, 0xb4, 0xc9, 0x21, 0x28, 0x8, 0x53, 0xa5, 0x6d, 0xb0, 0xa8, 0x9, 0x45, 0xd8, 0x11, 0xf1, 0x8a, 0x70, 0x2d, 0x4f, 0x79, 0x43, 0x3f, 0x86}}
	return a, nil
}

var _lockedtokensStakerUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4d\x8b\xf2\x40\x0c\x80\xef\xf3\x2b\x82\x87\x97\x7a\x29\xef\xb9\xac\x2b\x45\x85\x05\x45\xc5\xfa\x07\x66\x67\xd2\x0f\x5a\x27\x25\x93\xd2\x2e\x8b\xff\x7d\xe9\xc7\x6a\x59\x30\x97\x61\x48\xf2\x64\x9e\x49\x71\xab\x89\x05\x0e\x64\x4a\xb4\x57\x2a\xd1\x79\x48\x99\x6e\xf0\xbf\x3b\x9c\x36\xfb\xdd\xf6\x7a\xda\xef\x8e\xf1\x76\x7b\xd9\x25\x89\x52\xc2\xda\x79\x6d\xa4\x20\x17\x38\x6c\x63\x6b\x19\xbd\x8f\x20\x11\x2e\x5c\xb6\x84\x6f\xa5\x00\x00\x2a\x14\xc8\xa9\xb2\xc8\x17\x4c\x23\xf8\x37\xc7\x87\xc3\xf1\x31\x64\xc7\xea\x9a\xb1\xd6\x8c\x81\x36\x86\x1a\x27\x11\xc4\x8d\xe4\xf1\x78\xe9\x91\x30\x85\xc7\x2a\x0d\x1f\x58\x58\xc1\xd4\x10\x7e\x12\x33\xb5\x6f\x2f\xc7\xbc\x07\xbd\x52\x04\xaf\xf2\x89\x10\xeb\x0c\xcf\x5a\xf2\xe5\x63\x5a\x1f\xeb\x35\xd4\xda\x15\x26\x58\x6c\xa8\xa9\x2c\x38\x12\x18\x87\x01\x63\x8a\x8c\xce\x20\x08\xc1\x8c\xb5\x18\x09\xf7\x51\x0d\x3b\x34\x8d\xe0\x4c\xa2\xff\x1a\x2f\xba\x44\x3e\x33\x75\x5f\xb0\xfa\xa3\x35\xc9\x24\x43\x49\xb0\x54\x4f\xfb\x67\x53\xd8\xd4\x56\x0b\x1e\x51\x5a\xe2\xb2\x70\xd9\xb4\x87\xd9\x4a\x7e\x5f\x71\x57\x3f\x01\x00\x00\xff\xff\x7e\x1e\x81\xca\xe2\x01\x00\x00"

func lockedtokensStakerUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerUpdate_networking_addressCdc,
		"lockedTokens/staker/update_networking_address.cdc",
	)
}

func lockedtokensStakerUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := lockedtokensStakerUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xe7, 0xc1, 0x75, 0xd6, 0x8e, 0x1a, 0x5c, 0xb2, 0x5f, 0xcd, 0xb3, 0x4f, 0xa6, 0x85, 0x5a, 0xd4, 0x54, 0x29, 0x2c, 0x6f, 0x5d, 0x2a, 0xcd, 0x98, 0x25, 0x64, 0x6c, 0xa3, 0xb7, 0x33, 0x8c}}
	return a, nil
}

var _lockedtokensStakerWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcd\x8e\xa2\x40\x10\xbe\xf3\x14\x15\x0e\x1b\x38\x2c\xee\x61\xb3\x07\xa3\x6b\x8c\x3f\x99\x44\x33\x1a\x71\xe6\xde\x03\xc5\x40\x44\x8a\x14\x85\x30\x99\xf8\xee\x13\x68\x40\x86\xe8\x65\xfa\xd2\x69\xea\xeb\xef\xaf\x89\xce\x29\xb1\xc0\x96\xbc\x13\xfa\x47\x3a\x61\x92\x41\xc0\x74\x86\x3f\xe5\x76\xb7\xd8\xac\x96\xc7\xdd\x66\xf5\x3c\x5f\x2e\x0f\x2b\xd7\x35\x1a\xf4\x3a\xa6\xa2\xc6\x6a\xa8\xd9\x9d\x4d\xc3\x10\x56\x49\xa6\x3c\x89\x28\xb1\xd4\x99\xf2\x44\xc6\xf0\xb2\x8e\xca\x7f\x7f\x6d\xf8\x34\x0c\x00\x80\x18\x05\x42\x8a\x7d\xe4\x03\x06\x63\xf8\xd5\x17\x77\xea\xed\xa9\x9e\x76\xe0\x8b\xca\x63\xd1\xd8\x4e\xca\x79\xad\x3e\x6a\xc2\x94\x31\x55\x8c\x96\xf2\x3c\x2d\x38\xcf\x25\x9c\xeb\x43\xa5\x0a\xcd\xca\x30\x0e\x9c\x4e\x19\xa6\xd0\x5c\x70\xde\x88\x99\x8a\xc9\x43\x27\xff\xad\x2a\xe8\x18\x1e\xcd\x5d\x21\x56\xef\xb8\x57\x12\xda\x9d\x5a\xb5\x66\x33\x48\x55\x12\x79\x96\xb9\xa0\x3c\xf6\x21\x21\x01\x2d\x06\x8c\x01\x32\x26\x1e\x82\x10\xf4\xb8\x4c\xdb\xf8\x6e\xb8\x4d\x7f\xc7\xef\xa0\x8d\xd6\xe6\x28\xd3\x7e\x46\x41\x3b\xaf\xc7\x3f\xb3\x76\x7b\xec\x8b\x8a\x73\x34\x35\xcb\x55\x9b\xc4\x12\xbd\x5c\xb0\xd7\x71\xf5\x5e\x99\xa8\x13\xf2\x9e\xa9\xfc\x80\xe9\xa0\xf5\xc6\xbb\x5b\x43\xac\x7e\xd6\xdb\x25\xa7\x88\x24\xf4\x59\x15\x07\x2c\x14\xfb\x6d\xe3\xdd\xff\xa4\x77\xfb\x7e\x4d\x8e\x8f\x29\x65\x91\x34\x5d\x4c\x7e\x0f\xf4\x5b\xee\x21\x5b\x9b\xeb\x6a\x7c\x05\x00\x00\xff\xff\x4a\x8d\xea\x3c\x14\x03\x00\x00"

func lockedtokensStakerWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_rewarded_tokensCdc,
		"lockedTokens/staker/withdraw_rewarded_tokens.cdc",
	)
}

func lockedtokensStakerWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x5c, 0xca, 0x3e, 0xa9, 0xb8, 0x1a, 0xda, 0x20, 0xf1, 0x6b, 0xf9, 0x15, 0xee, 0xef, 0x9d, 0xf4, 0x4, 0xd7, 0x3f, 0xd7, 0xae, 0x2a, 0xa9, 0xff, 0x12, 0x53, 0x50, 0x98, 0x2a, 0xe0, 0xfb}}
	return a, nil
}

var _lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x6b\xc2\x50\x0c\xc7\xef\xfd\x2b\x82\x87\x51\x2f\x65\x87\xb1\x83\xcc\x49\x51\xf7\x03\x45\xa5\x75\xb0\x1d\xdf\x5e\x53\x5b\x5a\x5f\x4a\x9a\xd2\x8e\xe1\xff\x3e\xea\x6b\xb5\x0c\xcc\x25\x3c\xf2\xcd\x37\xf9\xe4\xa5\xc7\x82\x58\x60\x4d\x3a\xc3\x68\x4f\x19\x9a\x12\x62\xa6\x23\xdc\x37\xeb\xed\x7c\xb5\x5c\xec\xb7\xab\xe5\xc6\x5f\x2c\x82\x65\x18\x3a\x9d\x3a\x14\x95\xa5\xe6\xb0\x63\x6a\x7e\x7a\x75\xb8\xf7\x57\xef\x9b\xd7\x5d\xb0\xfd\xfc\xea\xe5\x8e\xb0\x32\xa5\xd2\x92\x92\x71\xd5\x91\x2a\x23\x13\xf8\x78\x49\x9b\xc7\x87\x31\xfc\x3a\x0e\x00\x40\x8e\x02\x09\xe5\x11\x72\x80\xf1\x04\xee\x86\x9b\x78\xe7\xf4\x76\xae\x5a\x75\xc1\x58\x28\x46\x57\x69\x6d\xdd\xfc\x4a\x12\xdf\x3e\x5a\x4b\xe8\xa2\xc4\x3c\xf6\x2e\xb6\x30\x85\xae\xc1\xfb\x26\x66\xaa\x9f\x6e\x8e\x79\x76\x5b\x9e\x09\xdc\xaa\x87\x42\xac\x0e\xb8\x53\x92\x8c\x2f\xd3\xda\x98\xcd\xa0\x50\x26\xd5\xee\x68\x4e\x55\x1e\x81\x21\x01\x3b\x0c\x18\x63\x64\x34\x1a\x41\x08\x06\x5e\x23\xeb\x70\xb2\x68\xd8\xa0\xae\x04\x07\x10\xed\x69\x4a\x51\x19\xb2\xbd\xf4\xf4\x1f\x56\x07\x13\x9e\x25\xee\xd8\xb9\xd2\x5f\x9b\xbc\x3a\x95\x24\x62\x55\x07\x58\x2b\x8e\x7a\xa4\xcb\x6f\xd8\xdc\x2f\x72\x72\xfe\x02\x00\x00\xff\xff\xd5\xd5\xf1\x96\x10\x02\x00\x00"

func lockedtokensStakerWithdraw_rewarded_tokens_lockedCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc,
		"lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc",
	)
}

func lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_rewarded_tokens_lockedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xae, 0xac, 0xc7, 0x74, 0x93, 0x11, 0x75, 0xd9, 0x15, 0x9f, 0x5d, 0x7e, 0x5d, 0xa1, 0xd1, 0x7b, 0x82, 0x30, 0xf4, 0xb2, 0xda, 0xf6, 0xce, 0x9f, 0x28, 0xd0, 0xa9, 0xa0, 0xd5, 0x91, 0x1b}}
	return a, nil
}

var _lockedtokensStakerWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6b\xf2\x40\x10\xc6\xef\xf9\x14\x83\x87\x97\x78\x09\xef\xa1\xf4\x20\xb5\x12\xd4\xfe\x41\x51\x31\x0a\xed\x71\xbb\x99\x98\x25\x71\x27\x4c\x26\x98\x52\xfc\xee\x25\xd9\xa8\xa1\xe0\x5c\x86\x64\x9e\x79\x66\x7e\xb3\xe6\x58\x10\x0b\x2c\x49\x67\x18\xef\x28\x43\x5b\x42\xc2\x74\x84\xff\xf5\x72\x3d\x5d\xcc\x67\xbb\xf5\x62\xbe\x0a\x67\xb3\xed\x3c\x8a\xbc\x4e\x1d\x89\xca\x8c\x3d\x6c\x98\xea\xef\x8b\x3a\xda\x85\x8b\xf7\xd5\xeb\x66\xbb\xfe\xf8\xbc\xc8\x3d\x61\x65\x4b\xa5\xc5\x90\xf5\xd5\x91\x2a\x2b\x23\xd8\xbf\x98\xfa\xf1\x61\x08\x3f\x9e\x07\x00\x90\xa3\x40\x4a\x79\x8c\xbc\xc5\x64\x04\xff\xfa\x9b\x04\x6d\x7a\x6b\xab\x4e\x5d\x30\x16\x8a\xd1\x57\x5a\x3b\xb7\xb0\x92\x34\x74\x1f\x8d\x25\x74\x51\x62\x9e\x04\x57\x5b\x18\x43\xd7\x10\x7c\x11\x33\x9d\x9e\xee\x8e\x79\xf6\x1b\x9e\x11\xdc\xab\x47\x42\xac\x0e\xb8\x51\x92\x0e\xaf\xd3\x9a\x98\x4c\xa0\x50\xd6\x68\x7f\x30\xa5\x2a\x8f\xc1\x92\x80\x1b\x06\x8c\x09\x32\x5a\x8d\x20\x04\x3d\xaf\x81\x73\x38\x3b\x34\xac\x51\x57\x82\x3d\x88\xe6\x34\xa5\xa8\x0c\xd9\x5d\x7a\xfc\x07\xab\x83\x89\x5a\x89\x3f\xf4\x6e\xf4\xb7\xa6\xe0\x64\x24\x8d\x59\x9d\xf6\xb6\xfd\xdb\x21\x5d\x5f\xc3\xe5\xcb\x22\x67\xef\x37\x00\x00\xff\xff\xfa\xe1\x41\xb8\x10\x02\x00\x00"

func lockedtokensStakerWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_unstaked_tokensCdc,
		"lockedTokens/staker/withdraw_unstaked_tokens.cdc",
	)
}

func lockedtokensStakerWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0xec, 0x5f, 0x9a, 0x23, 0xd5, 0x31, 0x36, 0x95, 0x2c, 0xc0, 0x94, 0x2c, 0x22, 0xb0, 0x1e, 0xdd, 0x3, 0x79, 0xff, 0x8e, 0x9c, 0xf3, 0x37, 0xf, 0xb3, 0xc2, 0x8d, 0xb4, 0x76, 0xaa, 0x4f}}
	return a, nil
}

var _lockedtokensUserDeposit_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x6a\xeb\x30\x10\x85\xf7\x7e\x8a\xc1\x8b\x8b\xbd\xb8\x4e\x17\xa5\x0b\x93\x36\x84\xfc\x50\x48\x68\x4a\x92\xb6\x6b\x45\x1e\xc7\x26\x8a\xc6\xc8\xe3\x3a\x50\xf2\xee\x45\x56\x6c\xe2\x96\x40\xb5\x11\x9e\x39\x9a\xf3\x1d\x59\xf9\xb1\x20\xc3\x30\xaf\xf4\x3e\xdf\x29\xdc\xd2\x01\x35\xa4\x86\x8e\xe0\xf7\x6a\xbe\xd7\x2a\x15\xd5\x3d\x55\xfb\xdd\x29\x96\x24\x0f\x98\x34\xb5\xd2\x89\xee\x4e\xcb\xd5\x64\x31\x9b\x6e\x57\x8b\xd9\xcb\x78\x3a\x5d\xcf\x36\x1b\xcf\x63\x23\x74\x29\x24\xe7\xa4\x03\x71\xa4\x4a\x73\x0c\x6f\xf3\xfc\xf4\x70\x1f\xc2\x97\xe7\x01\x00\x28\x64\xc8\x48\x25\x68\xd6\x98\xc6\xf0\xef\x7a\x74\xd4\x6c\xcf\x4d\xb7\x13\x7f\x8a\x4a\xb1\xd3\x76\x60\xd1\xbb\x2d\xba\x81\x85\xc1\x42\x18\x0c\x84\x94\x1c\xc3\xb8\xe2\x6c\x2c\xa5\xb5\xb6\x96\x70\x59\x25\xaa\x34\xea\x6c\xe1\x11\xac\x3a\xda\x91\x31\x54\x0f\x6f\x32\x3c\x05\x36\x6b\x0c\xb7\xfa\x1b\x26\x23\xf6\xf8\x2a\x38\x0b\x3b\x2b\xbb\x46\x23\x28\x84\xce\x65\xe0\x4f\xa8\x52\x09\x68\x62\x70\x66\x20\xc0\x60\x8a\x06\xb5\x44\x60\x82\xab\x69\x7e\xe8\xf5\x79\xdb\xe4\x3f\x70\x45\xc5\x59\xd0\xfb\x93\xd1\x47\xce\x59\x62\x44\x2d\x76\x0a\xc3\x5f\xf7\xd4\xc6\x18\x94\x8e\x77\x90\xb6\xfd\xa6\xfd\x67\x74\x7b\x0c\xb8\x79\x28\x0d\x9a\x4d\xe2\xbb\xd3\x67\x87\x8e\x27\x94\x15\xe3\xcd\x8b\x8f\x12\x2c\xa8\xcc\xf9\x02\x34\xfc\xdf\xcb\x19\xd5\x97\x18\xdd\xdb\x71\x7b\xd8\x7a\x9c\xbd\xef\x00\x00\x00\xff\xff\x39\x77\xf1\x16\xdc\x02\x00\x00"

func lockedtokensUserDeposit_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserDeposit_tokensCdc,
		"lockedTokens/user/deposit_tokens.cdc",
	)
}

func lockedtokensUserDeposit_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensUserDeposit_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/deposit_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x2f, 0x21, 0x5e, 0x76, 0xce, 0x50, 0x65, 0x5, 0x3e, 0x4, 0xf7, 0x1f, 0xd2, 0x87, 0x2b, 0xaa, 0x17, 0x7a, 0xa7, 0x9b, 0x16, 0x7, 0xcc, 0xb4, 0xb3, 0x85, 0xf5, 0x6e, 0xfd, 0x31, 0x8c}}
	return a, nil
}

var _lockedtokensUserGet_locked_account_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\x51\x0f\xbf\x9c\x4b\xf5\x9f\x11\x50\x45\x49\x24\x50\x23\x5a\xb5\x7d\x01\xc7\xd9\x14\xab\x8e\x37\x72\x6c\x01\x42\xbc\x3b\x4a\x52\x42\x0b\xec\xc5\xd6\x6a\x66\x3e\x7b\x4c\xdb\xb1\x0f\x28\x59\x9f\xa8\x3e\xf0\x89\x5c\x8f\xc6\x73\x8b\xff\xaf\xe5\x26\x5b\x17\xf9\x61\xb3\x2e\x9e\xd2\x3c\xdf\x15\xfb\xbd\x10\x4a\x6b\xea\x7b\xa9\xac\x4d\xd0\x44\x87\x56\x19\x27\x95\xd6\x1c\x5d\xb8\x41\x5a\xd7\x9e\xfa\x3e\x99\x6f\x78\x17\x02\x00\x2c\x05\xd8\x11\x91\x4e\xda\x47\xd7\xf0\x8e\x1a\xdc\xe1\x48\xe1\xbc\xfb\xca\x49\x46\xcb\x30\xcb\x23\x85\x4c\x75\xaa\x32\xd6\x84\xb7\xdb\x7f\x97\xaf\x5c\x8e\xc7\x03\xdb\x9a\xfc\xbd\x9c\x2d\xc3\x5c\xc9\xca\x9f\xd8\x6d\xac\xac\xd1\x5b\x15\x9e\x67\xd3\x05\xb1\x62\xef\xf9\x45\x7e\x6f\x56\x2b\x74\xca\x19\x2d\x17\x19\x47\x5b\xc3\x71\xc0\x24\x82\x82\xa7\x86\x3c\x39\x4d\x08\x8c\x6e\x0c\xc6\x2f\xe0\x22\x99\x4a\xf0\x14\xa2\x77\x7f\xf6\x30\x7c\xf4\xca\x77\xee\x4f\x26\xe2\x43\x7c\x06\x00\x00\xff\xff\xa0\x11\x67\x46\xa3\x01\x00\x00"

func lockedtokensUserGet_locked_account_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_locked_account_addressCdc,
		"lockedTokens/user/get_locked_account_address.cdc",
	)
}

func lockedtokensUserGet_locked_account_addressCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_locked_account_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_locked_account_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xe5, 0x42, 0x1b, 0xc1, 0xd2, 0xf5, 0xa4, 0x36, 0xc6, 0x41, 0x7a, 0xd6, 0x92, 0xbe, 0x83, 0xab, 0x50, 0x13, 0x5a, 0x31, 0x63, 0x23, 0x5c, 0xaa, 0x30, 0xb3, 0xcb, 0xd3, 0x48, 0x27, 0x75}}
	return a, nil
}

var _lockedtokensUserGet_locked_account_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xeb\x30\x10\x45\xf7\xfe\x8a\xab\x2e\x9e\x9c\x4d\xf5\x16\x88\x45\x05\x54\x21\x09\x02\x35\xa2\x55\x5b\x3e\xc0\x71\x26\xc5\xaa\xe3\x89\x1c\x47\x14\x21\xfe\x1d\x25\x81\xd2\x02\xb3\xb1\x34\xba\x67\x8e\x67\x4c\xdd\xb0\x0f\xc8\x59\xef\xa9\xdc\xf2\x9e\x5c\x8b\xca\x73\x8d\xff\x87\x7c\x99\x2c\xb2\x74\xbb\x5c\x64\x8f\x71\x9a\xae\xb3\xcd\x46\x08\xa5\x35\xb5\xad\x54\xd6\x46\xa8\x3a\x87\x5a\x19\x27\x95\xd6\xdc\xb9\x30\x43\x5c\x96\x9e\xda\x36\x9a\xe1\xe9\xce\x1c\x2e\x2f\xf0\x26\x04\x00\x58\x0a\xb0\x83\x21\x1e\xa3\x0f\xae\xe2\x35\x55\xb8\xc6\x8e\xc2\x67\xef\x6b\x4c\x34\x20\x7d\x4d\x77\x14\x12\xd5\xa8\xc2\x58\x13\x5e\xaf\xfe\x9d\x7e\x72\x3a\x3c\xf7\x6c\x4b\xf2\x37\xf2\x88\xf4\x75\x16\xcb\x7f\x6a\x57\x5d\x61\x8d\x5e\xa9\xf0\x7c\x84\x4e\x8c\x05\x7b\xcf\x2f\xf2\xbb\x33\x9f\xa3\x51\xce\x68\x39\x49\xb8\xb3\x25\x1c\x07\x8c\x21\x28\x78\xaa\xc8\x93\xd3\x84\xc0\x68\x86\xc1\xf8\x25\x9c\x44\xe3\x11\x3c\x85\xce\xbb\x3f\xef\xd0\x2f\x7a\xc6\xdd\x2a\xab\x9c\x26\x19\x89\x77\xf1\x11\x00\x00\xff\xff\x39\x43\xf4\x53\xa2\x01\x00\x00"

func lockedtokensUserGet_locked_account_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_locked_account_balanceCdc,
		"lockedTokens/user/get_locked_account_balance.cdc",
	)
}

func lockedtokensUserGet_locked_account_balanceCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_locked_account_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_locked_account_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x2b, 0x3d, 0xb6, 0xfc, 0xc6, 0x5c, 0xb5, 0x4a, 0x8b, 0x5d, 0xd7, 0x1, 0x2c, 0x6, 0x65, 0xcd, 0x96, 0x83, 0xf3, 0xeb, 0x2d, 0x26, 0x7f, 0xeb, 0xfe, 0x97, 0xd2, 0x45, 0x54, 0xe5, 0xef}}
	return a, nil
}

var _lockedtokensUserGet_multiple_unlock_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4d\x4f\xc2\x40\x14\xbc\xef\xaf\x98\x70\x30\xdb\x0b\xf1\x60\x3c\x10\x91\x10\xc0\x68\x68\x84\xf0\x71\x22\x1c\x96\xed\x2b\x6e\xd8\xee\x36\xbb\x5b\xc5\x10\xfe\xbb\x69\x4b\xd5\xa2\xef\xd2\xe6\xcd\xbc\x99\xd9\x51\x59\x6e\x5d\x40\x6c\xe5\x81\x92\x95\x3d\x90\xf1\x48\x9d\xcd\x70\x7b\x8c\x67\xa3\xe9\x64\xbc\x9a\x4d\x27\xaf\xc3\xf1\x78\x31\x59\x2e\x19\x13\x52\x92\xf7\x5c\x68\x1d\x21\x2d\x0c\x32\xa1\x0c\x17\x52\xda\xc2\x04\xdf\xc3\x66\x98\x24\x8e\xbc\xdf\x46\x3d\x6c\xd6\x4f\xea\x78\x7f\xb7\xc5\x89\x31\x00\x78\x17\x0e\x5a\x65\xaa\xe2\x35\x58\x1f\x9b\x6d\x0d\xa7\xd6\xe1\x22\x04\x65\x9a\x5f\x8f\x53\x85\x96\xa3\x29\x40\x57\x39\x87\x35\xf8\x62\x52\xbb\xa0\x14\x7d\xec\x29\x5c\x76\x4d\x98\xe8\xfb\xac\x9c\xee\x9e\xc2\x48\xe4\x62\xa7\xb4\x0a\x9f\x0f\x37\xbf\x9f\xdb\xad\x3e\xcf\x56\x27\xe4\x1e\x79\xeb\xac\x9c\x16\x35\xbe\xb6\x9f\x17\x3b\xad\xe4\x5c\x84\xb7\xd6\xe1\x95\xfb\xce\x3a\x67\x3f\x78\x7b\x3b\x18\x20\x17\x46\x49\xde\x19\xd9\x42\x27\x30\x36\xa0\x26\x42\xc0\x51\x4a\x8e\x8c\x24\x04\x8b\xbc\x32\xc1\x1f\xf3\x4e\xc4\x7e\xca\xa9\x9a\xed\x8a\x3c\x27\x93\xf0\xff\x6a\x2a\x3b\x58\x9b\x12\x89\x4b\x2e\x8f\xea\x38\xe7\x5a\xc3\x51\x28\x9c\xb9\xc8\xb0\x33\xfb\x0a\x00\x00\xff\xff\xd4\x5b\x65\x00\x18\x02\x00\x00"

func lockedtokensUserGet_multiple_unlock_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_multiple_unlock_limitsCdc,
		"lockedTokens/user/get_multiple_unlock_limits.cdc",
	)
}

func lockedtokensUserGet_multiple_unlock_limitsCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_multiple_unlock_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_multiple_unlock_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x8d, 0x8d, 0x25, 0xb4, 0xa6, 0x83, 0x69, 0xa4, 0x27, 0xd7, 0x1d, 0xd7, 0x95, 0x7e, 0xdd, 0x20, 0x2f, 0x7, 0xed, 0x6f, 0xe6, 0x3d, 0x92, 0x95, 0xd7, 0xc5, 0x7d, 0xc6, 0xe9, 0x39, 0x32}}
	return a, nil
}

var _lockedtokensUserGet_total_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4f\x4f\xe3\x3e\x10\xbd\xe7\x53\x8c\x38\xf0\x4b\xf4\xab\x52\x0e\xab\x3d\x54\x14\xa9\x4b\x60\xb7\xa2\xa2\x08\xba\xbb\x67\x37\x71\x5a\x0b\xd7\xae\x6c\x07\x58\xa1\x7e\xf7\x95\xe3\xd8\xb5\xd3\x04\xba\x90\x43\xff\xd8\x6f\x66\x9e\xdf\x1b\x4f\xc8\x66\xcb\x85\x82\xeb\x8a\xad\xc8\x92\xe2\x05\x7f\xc4\x0c\x4a\xc1\x37\x70\x12\xac\x9d\x44\x16\x49\xf9\x73\x80\xb2\xff\x03\xc4\x34\x5b\xa0\x25\xc5\x0f\x0a\x3d\x12\xb6\xf2\xa0\xe1\x86\x8b\x99\xf1\xfc\x11\x17\x75\x1e\x69\xd0\x67\x2f\xb3\xf9\xe5\xcd\x55\xb6\x98\xdf\x5c\xdd\x4e\xb2\xec\xfe\xea\xe1\x21\x8a\x86\x43\x58\xac\x89\x04\x99\x0b\xb2\x55\xb0\xc2\x4a\x82\x5a\x63\x58\xcc\x17\x93\x19\xb0\x6a\xb3\xc4\x02\x78\x09\xd7\xb3\xf9\x6f\x40\x0c\x50\x9e\xf3\x8a\x29\xe0\xcf\x4c\x0e\x00\xe5\x82\x4b\x09\x15\xa3\x75\xb9\x01\xd8\x6f\xc4\x0a\x90\x86\x52\x5a\x17\x99\x14\x85\x84\x6a\xab\x73\x4b\xdc\xe4\x95\xa3\x7a\x4b\x19\x92\x84\x01\xe3\x62\x83\xa8\xad\xf1\xd6\x9e\x4d\xfe\x26\xa6\xc0\x14\xaf\x90\x3a\x80\xc9\x35\x12\xb8\xe8\x2e\x13\xee\x75\x97\x69\x61\xbc\x32\x51\x84\xf2\x1c\x4b\x19\x23\x4a\x13\x28\x2b\x06\x1b\x44\x58\x8c\x8a\x42\x60\x29\x47\x5a\x05\xfd\x23\x19\xc1\xcf\x6b\xf2\xf2\xf5\x0b\xbc\x46\x11\x00\xc0\x13\x12\x20\xab\x0d\x8c\xe1\x2c\x3d\x33\x4b\x14\x2b\x57\x61\xac\x7d\x99\x98\x3f\x36\x59\x62\x60\xa4\xac\x91\x4f\xa8\xa2\xea\x1e\x97\x30\xb6\x41\xe9\x0a\xab\x4b\xb4\x45\x4b\x42\x89\xfa\x13\x0f\xb7\xd5\x92\x92\x7c\x58\xda\xee\xfa\x86\x28\x62\x39\x4e\xea\x2c\xfa\x49\x97\x5c\x08\xfe\x7c\x7e\xea\x1a\x30\xfd\xa5\xb3\x5e\xc4\x09\xd4\xa0\x57\x07\x35\x54\xf5\xe7\xff\xae\x72\xba\x34\x09\x6b\xd0\xce\x90\x1b\x0e\xe1\x3b\x56\x46\x39\x68\xf6\x4d\x33\xea\x16\xb3\x5d\x63\x19\xff\x27\x81\xf1\x02\x5b\xcd\x61\xcb\x39\x95\x4e\x0b\xbd\xa5\x9b\x1c\x8b\x4b\xb4\xdd\x1f\x73\x4f\x3f\x38\xef\xf9\xe9\xeb\xe1\xe5\x48\x6f\x5d\x8e\xbb\x5a\x8d\xdd\x45\xec\xe2\xf5\x73\x44\xc8\x1d\x52\x6b\x17\x13\x7a\xb0\x67\x68\x8c\x08\x18\x37\xea\xc6\x89\x27\xa3\x0d\x9a\xb2\x92\xc3\xb8\xaf\xba\xde\x8d\x6b\x58\x36\x0a\x6b\xa4\xa4\x48\x3a\x3d\xb1\x49\x53\xc5\x15\xa2\x66\x08\x4c\xd9\x3d\xce\xb9\x28\xe2\xe4\x53\x0e\x35\xcd\xce\x45\x8f\x4d\x6e\xff\x73\x2e\x65\x36\x4d\xb7\x51\x7e\x37\x37\x61\x2e\xa2\xc7\x1d\x47\xcc\x98\xe3\xf3\xec\xf3\xc6\x61\xfa\x0d\xca\x7c\x48\xc8\xd1\x5a\xe6\x17\x4e\xcd\xe2\x20\x00\xee\xcb\xb4\xd1\xa4\xf0\x0e\xd3\x65\x74\xc0\xb0\xcf\xed\x2e\xbf\xd7\x18\x42\x6b\xc1\x28\x0a\xb9\x33\xc7\x59\x6a\x80\xcd\xf8\xd1\x85\x8e\xb3\xd6\x7f\x03\xa5\xf5\xd7\x0f\x4e\x0b\x2c\x5a\x56\x06\xb0\x59\xbb\xd4\xbb\x97\xee\x80\x9c\xb1\xb7\x8b\x73\x97\xcd\xe6\xcd\xd4\xa5\x87\x3f\xce\xda\xb2\x77\x15\xd5\xc7\x0f\xe8\x37\x03\x36\x6e\xf8\xb6\xaa\xd9\xbb\xc6\x4b\x40\x94\xd6\x4b\x87\xc3\x6f\x7f\x13\x43\x72\x2e\xa1\x37\x79\xa6\x59\xd7\xb1\x1b\x62\xf5\x1c\xc9\x82\x93\x7f\x62\x00\x4d\xb3\x24\x48\xf3\x8f\xa3\xc7\x6b\xc7\xf7\x45\xe9\x99\x37\xc7\x2a\xe3\xdd\xad\x37\xe4\xd9\xdf\xe2\x43\x8d\x8e\x95\xd8\xe5\xe8\xd1\xfa\xc3\x43\x25\x54\x7e\xd0\x33\x2e\xda\x9e\x7c\x68\x52\x78\xcf\x2e\x0a\x7f\x35\x86\x09\xac\x2a\xc1\x74\xce\x68\x17\xfd\x0d\x00\x00\xff\xff\xb2\x5c\xcd\xf4\xeb\x0a\x00\x00"

func lockedtokensUserGet_total_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_total_balanceCdc,
		"lockedTokens/user/get_total_balance.cdc",
	)
}

func lockedtokensUserGet_total_balanceCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_total_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_total_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xed, 0x18, 0xb0, 0xf0, 0xbb, 0xf6, 0xf7, 0x5d, 0x6f, 0x31, 0x15, 0x6, 0xd0, 0x9f, 0x75, 0xbd, 0xc4, 0xcc, 0xeb, 0x6c, 0x90, 0x92, 0x15, 0x62, 0xe5, 0x72, 0xd2, 0xb0, 0xa5, 0x37, 0x8a}}
	return a, nil
}

var _lockedtokensUserGet_unlock_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x51\x0f\xc8\xb9\x54\x1c\x10\x87\x0a\xa8\xa2\x24\x08\xd4\x88\x56\xfd\x79\x00\xc7\xd9\x14\xab\x8e\x37\x72\x1c\x51\x84\x78\x77\x94\x04\x4a\xf9\xd9\x8b\xa5\xf5\xcc\x7c\xf6\x98\xba\x61\x1f\x90\xb3\x3e\x50\xb9\xe5\x03\xb9\x16\x95\xe7\x1a\x97\xc7\x7c\x99\x2c\xb2\x74\xbb\x5c\x64\x4f\x71\x9a\xae\xb3\xcd\x46\x08\xa5\x35\xb5\xad\x54\xd6\x46\xa8\x3a\x87\x5a\x19\x27\x95\xd6\xdc\xb9\x30\x43\x5c\x96\x9e\xda\x36\x9a\x61\x77\x6f\x8e\xd7\x57\x78\x13\x02\x00\x2c\x05\xd8\x81\x10\x8f\xd2\x47\x57\xf1\x9a\x2a\xdc\x62\x4f\xe1\x73\xf7\x15\x13\x0d\x96\x7e\xa6\x7b\x0a\x89\x6a\x54\x61\xac\x09\xaf\x37\x17\xe7\x8f\x9c\x0e\xc7\x03\xdb\x92\xfc\x9d\x3c\x59\xfa\xf9\x21\xcb\x7f\x63\x57\x5d\x61\x8d\x5e\xa9\xf0\x7c\x32\x9d\x11\x0b\xf6\x9e\x5f\xe4\xf7\x66\x3e\x47\xa3\x9c\xd1\x72\x92\x70\x67\x4b\x38\x0e\x18\x45\x50\xf0\x54\x91\x27\xa7\x09\x81\xd1\x0c\xc1\xf8\x03\x9c\x44\x63\x09\x9e\x42\xe7\xdd\xbf\x3d\xf4\x1f\xdd\xb9\xfe\x26\x37\xb5\x09\x32\x12\xef\xe2\x23\x00\x00\xff\xff\xaf\x95\x66\x0f\x99\x01\x00\x00"

func lockedtokensUserGet_unlock_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_unlock_limitCdc,
		"lockedTokens/user/get_unlock_limit.cdc",
	)
}

func lockedtokensUserGet_unlock_limitCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_unlock_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_unlock_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xfa, 0xf6, 0x2b, 0x29, 0x19, 0x1, 0x20, 0x49, 0x19, 0x1d, 0x8f, 0x49, 0x11, 0x37, 0xab, 0xd0, 0xbb, 0x81, 0x70, 0x62, 0x4e, 0xd0, 0x9, 0x74, 0x39, 0x1f, 0xd1, 0x63, 0xa4, 0xc7, 0x48}}
	return a, nil
}

var _lockedtokensUserWithdraw_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6b\xc2\x40\x10\xc5\xef\xf9\x14\x43\x0e\x25\x39\x34\xf6\x50\x7a\x08\xb6\x22\xfe\xa1\xa0\xd4\xa2\xb6\xf7\x75\x33\x31\xc1\xb8\x13\x36\x93\x46\x28\x7e\xf7\xb2\x59\x37\x18\x41\xe8\x5e\x96\x9d\xf7\x76\xde\x6f\x87\xcd\x8f\x25\x69\x86\x79\xad\xf6\xf9\xae\xc0\x2d\x1d\x50\x41\xaa\xe9\x08\x7e\xaf\xe6\x7b\xce\x59\x50\xd3\x73\xb9\x73\xe7\x58\x92\x3c\x60\xd2\xd6\x2a\x6b\x7a\x3a\x2d\x57\x93\xc5\x6c\xba\x5d\x2d\x66\x1f\xe3\xe9\x74\x3d\xdb\x6c\x3c\x8f\xb5\x50\x95\x90\x9c\x93\x0a\xc4\x91\x6a\xc5\x31\x7c\xcd\xf3\xd3\xcb\x73\x08\xbf\x9e\x07\x00\x50\x20\x43\x46\x45\x82\x7a\x8d\x69\x0c\x0f\xd7\xad\xa3\x76\x7b\x6f\xd5\xce\xfc\x23\xea\x82\xad\xb7\x03\x8b\xbe\x4d\xd1\x36\x2c\x35\x96\x42\x63\x20\xa4\xe4\x18\xc6\x35\x67\x63\x29\x4d\xb4\x89\x84\xcb\xaa\xb0\x48\xa3\x2e\x16\x5e\xc1\xb8\xa3\x1d\x69\x4d\xcd\xf0\x2e\xc3\x5b\x60\xde\x1a\xc3\x3d\x7d\xc3\xa4\xc5\x1e\x3f\x05\x67\x61\x17\x65\xd6\x68\x04\xa5\x50\xb9\x0c\xfc\x09\xd5\x45\x02\x8a\x18\x6c\x18\x08\xd0\x98\xa2\x46\x25\x11\x98\xe0\xaa\x9b\x1f\x7a\x7d\x5e\xf7\xf2\x5b\xdc\x9b\x31\x38\xca\x41\x65\x71\x06\xa9\xd3\x5b\xf9\xdf\x64\xe6\x1a\x70\xfb\x0f\xda\x64\x03\xea\xdb\xdb\x67\x4b\x86\x27\x94\x35\xe3\xed\x5c\x1d\x67\x94\x60\x49\x55\xce\x17\x9e\xe1\x63\x7f\xea\x51\x93\x73\x96\x68\xd1\x74\x5f\xc3\xee\xa1\xcb\x38\x7b\x7f\x01\x00\x00\xff\xff\x3b\x4c\x13\x6e\xbb\x02\x00\x00"

func lockedtokensUserWithdraw_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserWithdraw_tokensCdc,
		"lockedTokens/user/withdraw_tokens.cdc",
	)
}

func lockedtokensUserWithdraw_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensUserWithdraw_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/withdraw_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x42, 0x10, 0x73, 0xfa, 0x74, 0xa3, 0x2c, 0x97, 0x1e, 0x57, 0x98, 0x3f, 0xa5, 0x11, 0xee, 0x3e, 0x8e, 0x41, 0x8a, 0xf4, 0xdd, 0xcb, 0xb1, 0x16, 0x9c, 0xd1, 0x12, 0xce, 0x19, 0x42, 0x8b}}
	return a, nil
}

var _nodeversionbeaconAdminChange_version_freeze_periodCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xc1\x6e\xdb\x4c\x0c\x84\xef\x7a\x8a\x81\x0f\xff\x6f\x5f\xac\x1e\x8a\x1e\x84\xba\x81\x1c\xbb\x40\x2e\x76\x60\x37\xb9\x6f\x77\x29\x6b\x01\x89\x14\x28\xaa\x4e\x5b\xe4\xdd\x0b\x49\x6e\x1b\x44\x75\x8e\x5a\x92\xdf\xcc\x90\x8a\x75\x23\x6a\xd8\x49\xa0\x47\xd2\x36\x0a\xaf\xc9\x79\x61\x14\x2a\x35\xde\x3d\xed\xf6\x9b\xed\xe3\xf6\x70\xbc\xdb\xef\xd6\xdb\xfc\x76\xbf\xcb\x37\x9b\xc3\xf6\x78\x4c\x92\x34\x4d\xf1\x45\x1d\xb7\xce\x5b\x14\x86\x95\xce\xe0\xaa\x4a\xce\xed\x4b\x5c\x1e\xea\xc8\x30\x81\x2f\x1d\x9f\x68\x18\xb3\x92\x10\xa8\x88\x4c\x01\xdf\xc6\xb6\x87\x26\x38\xa3\x75\x57\x14\xa4\x49\x62\x7f\xb9\x73\xa6\xf3\x67\x25\xfa\x41\xf7\xa4\x51\x42\x86\x87\x3b\xb6\x0f\xef\x17\xf8\x99\x24\x40\x45\xff\x30\x3f\x68\x1e\xa8\xc8\xf0\xdf\xa4\xb6\x1c\x8a\xfd\x68\xa3\xd4\x38\xa5\xb9\xf3\xde\x32\xe4\x9d\x95\xb9\xf7\xd2\xb1\xf5\x68\x00\x48\x53\xac\x45\x55\xce\x70\x50\x2a\x48\x89\x3d\xf5\x51\x7a\xff\x93\x88\xb1\x6e\x2a\xaa\x89\x2d\xf2\x09\x4a\xad\x74\xea\x69\xe0\xb4\x54\x15\xcb\xab\x26\xb1\x42\xef\x60\xf9\x75\x90\xfa\x78\xcd\xf1\xa7\x01\x05\xcc\xfb\xc3\x64\xd3\xcc\x63\xd7\xd1\x44\xdd\x89\xee\x9d\x95\x8b\xcb\xc0\xcd\x0d\x1a\xc7\xd1\xcf\x67\xb7\xd2\x55\x81\xff\x37\x8c\x52\xd7\x18\x38\x5c\xcc\xcf\x7a\xc4\x73\xbf\x2a\x7a\x22\xdf\x19\x5d\xf6\xf2\x76\x9e\x65\x4b\xf6\xbb\x20\x1d\x07\xa7\xdf\x5f\xde\x6f\x7a\xcf\x57\x0f\x7f\x44\x1b\x69\x6d\x14\x9c\x1a\x3d\xbd\xad\xb1\xc0\x6a\xf5\x9a\x8b\x0c\xb3\xf1\x1b\xcd\xf8\x70\x76\x2d\x58\x0c\xdd\xf0\xef\x85\xd9\x20\xfc\x9c\xfc\x0a\x00\x00\xff\xff\x20\x17\x63\x91\x13\x03\x00\x00"

func nodeversionbeaconAdminChange_version_freeze_periodCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminChange_version_freeze_periodCdc,
		"nodeVersionBeacon/admin/change_version_freeze_period.cdc",
	)
}

func nodeversionbeaconAdminChange_version_freeze_periodCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminChange_version_freeze_periodCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/change_version_freeze_period.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x64, 0xe7, 0xfd, 0x12, 0xa9, 0xc4, 0xb2, 0xa7, 0x40, 0x45, 0xbd, 0xde, 0xe5, 0xb6, 0xcf, 0x5f, 0xae, 0x29, 0x72, 0xaa, 0x59, 0x3a, 0x38, 0xc, 0xe5, 0xbc, 0xbf, 0xc4, 0x20, 0x97, 0xd9}}
	return a, nil
}

var _nodeversionbeaconAdminDelete_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xd3\x40\x10\xbd\xfb\x2b\x9e\x7a\x80\xf4\x12\x73\x40\x1c\x2c\xa0\x72\xea\x48\xf4\x92\xa0\x24\xf4\x3e\x59\x8f\xe3\x15\xf6\x8e\xb5\x1e\xd3\x22\xd4\x7f\x47\xbb\x76\xda\xa0\x34\xa8\xd7\x7d\xf3\xde\xbe\x79\xf3\x6c\xdb\x89\x57\xac\xa4\xe4\x7b\xf6\xbd\x15\xb7\x60\x32\xe2\x50\x79\x69\xf1\xe1\x71\xb5\x2e\x96\xf7\xcb\xcd\xf6\x6e\xbd\x5a\x2c\xf3\xdb\xf5\x2a\x2f\x8a\xcd\x72\xbb\x4d\x92\x34\x4d\xb1\xf3\xe4\x7a\x32\x6a\xc5\x41\x6b\x52\x50\xd3\xc8\x43\x7f\x2a\x97\x97\xad\x75\x50\x41\xc9\x0d\x2b\x43\x6b\x8e\xd4\x5f\x23\x8c\xbd\x0c\xae\x24\xff\x1b\x2d\x75\x9d\x75\x07\x84\xe9\x9a\x8f\xf8\x8e\xf6\x0d\x83\x34\xbe\xf5\x1d\x1b\x5b\x59\x2e\xa3\xc2\xbe\x11\xf3\x13\x35\xdb\x43\xad\xe8\xc8\x53\xcb\xca\x3e\x49\xf4\xc5\xd4\x2c\xce\x7c\x8b\x23\x8b\xe9\xa3\x9d\x14\xd1\x49\x86\x1f\x77\x4e\x3f\x7d\xbc\xc6\x9f\x24\x01\x1a\x7e\x25\x85\x68\x7e\xc3\x55\x86\x77\x67\xd8\x3c\x82\x81\xda\x79\xee\xc8\xf3\x8c\x8c\xd1\x0c\xf9\xa0\x75\x6e\x8c\x0c\x4e\x83\x34\x00\xa4\x29\x16\xe2\xbd\x3c\x80\xe0\xb9\x62\xcf\xce\x70\xc8\x24\x2c\x75\x96\x95\xe7\x5e\x06\x6f\x38\x52\x7b\x6e\xaa\xf9\x45\x5f\xf8\x82\xf0\xe9\x7c\x1f\xd5\x3f\x5f\x32\xf9\x35\x4a\x01\xb3\x70\xd4\xec\x7c\xcd\x71\x6a\xab\xe2\xe9\xc0\xdf\x49\xeb\xeb\x89\x70\x73\x83\x8e\x9c\x35\xb3\xab\x5b\x19\x9a\xd2\xbd\x57\x8c\x5f\x5d\x88\x0a\x9b\xc9\xfb\x55\x50\x78\x0a\xe1\xf0\x23\x9b\x41\xf9\x25\x89\xe2\xb9\x07\xcf\x1d\x88\x5d\x3b\x7d\xd0\x57\xaf\xfe\xef\xc5\x8f\xc5\x79\x43\x4c\xf3\xb1\x7b\x47\x6c\x22\x9e\x96\x23\xc3\x7f\x9a\x32\xed\xf2\xf4\x37\x00\x00\xff\xff\xfb\x0f\x35\x18\x2c\x03\x00\x00"

func nodeversionbeaconAdminDelete_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminDelete_version_boundaryCdc,
		"nodeVersionBeacon/admin/delete_version_boundary.cdc",
	)
}

func nodeversionbeaconAdminDelete_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminDelete_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/delete_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xc4, 0xca, 0x36, 0x2a, 0xbe, 0xa6, 0xf1, 0x75, 0x8f, 0xd5, 0x82, 0x0, 0x82, 0xf0, 0x4c, 0x1b, 0xa5, 0xf5, 0xc6, 0x85, 0x25, 0xc3, 0x9c, 0xbe, 0xbe, 0xda, 0x83, 0xf4, 0x4d, 0xfe, 0x32}}
	return a, nil
}

var _nodeversionbeaconAdminHeartbeatCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6f\x82\x40\x10\x85\xef\xfc\x8a\x17\x0f\x2d\x5e\xa0\x67\xd3\xd6\xa0\x92\xb4\x17\x6c\x20\xf1\xbe\x2e\x83\xbb\x09\xec\x90\x65\xa8\x26\x8d\xff\xbd\x11\xac\x35\xb1\xb1\x7b\xda\xd9\x9d\x79\xef\x9b\x67\x9b\x96\xbd\x20\xe3\x92\x36\xe4\x3b\xcb\x6e\x41\x4a\xb3\x43\xe5\xb9\xc1\xd3\x21\x5b\xaf\xd2\x4d\x9a\x17\xef\xeb\x6c\x91\x26\xcb\x75\x96\xac\x56\x79\x5a\x14\x41\x10\xc7\x58\xaa\xba\xee\x20\x86\xd0\x90\x18\x2e\x21\x46\x09\xa8\xb1\x32\xbe\x8a\xda\xd6\x84\xbd\x15\x33\x94\xd6\x69\x6e\xac\xdb\xe1\x73\x74\xea\x02\xf1\xca\x75\x4a\x8b\x65\x17\x4e\xf1\x15\x04\x00\x50\xd3\x1f\x3c\x6f\xa4\xbc\x6c\x49\x49\x4e\xd5\x0c\x0f\x37\xff\xd1\xa5\x61\x14\x69\x3d\xb5\xca\x53\xa8\xb4\x96\x19\x92\x5e\x4c\xa2\x35\xf7\x4e\x4e\x36\x38\x9f\x38\xc6\x82\xbd\xe7\x3d\x14\x3c\x55\xe4\xc9\x69\x82\xf0\x40\x7b\x65\x91\x94\x8d\x75\xf0\xd4\x71\xef\x35\x5d\xc6\x3b\xaa\xab\xe8\x2e\x29\x5e\x70\x02\x88\xb6\x83\xcb\xf3\x3d\xec\xd7\x8b\x2c\x10\x9e\xc2\x9f\xdd\x86\xf0\xdb\x5d\x08\x7b\xb5\xa3\x0f\x25\x66\x7a\x35\x38\x9f\xa3\x55\xce\xea\x70\xb2\xe4\xbe\x2e\xdd\xa3\x60\xb4\xbe\xa7\x85\xfc\xbc\xd8\x64\x94\x3a\x02\x18\x2e\x74\x20\xdd\x0b\x5d\x05\xf6\xff\xc6\x91\xf9\x29\xc2\xb3\x5a\x70\xfc\x0e\x00\x00\xff\xff\x54\xf5\x87\x79\x64\x02\x00\x00"

func nodeversionbeaconAdminHeartbeatCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminHeartbeatCdc,
		"nodeVersionBeacon/admin/heartbeat.cdc",
	)
}

func nodeversionbeaconAdminHeartbeatCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminHeartbeatCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/heartbeat.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x8d, 0x70, 0x49, 0x14, 0x1, 0xa9, 0x56, 0x3d, 0xde, 0xa3, 0xc4, 0xf6, 0xfa, 0x14, 0x16, 0x9a, 0xdc, 0xc3, 0x9d, 0x56, 0xff, 0xb5, 0x96, 0x96, 0xf9, 0xba, 0x4c, 0x8b, 0x8c, 0xb4, 0xb0}}
	return a, nil
}

var _nodeversionbeaconAdminSet_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\x22\x87\xcd\x01\x02\x7b\x87\x61\x18\x8c\x75\x85\xd3\x06\x58\x0f\x4b\x8b\xa4\xeb\x9d\x91\xe9\x44\x9b\x2d\x79\x12\x9d\x74\x18\xfa\xee\x83\x64\x3b\x71\xec\x04\xd8\xa9\x28\x49\x91\x3f\x3f\xfe\xb1\x2c\x2b\x6d\x18\x96\x3a\xa3\x17\x32\x56\x6a\x35\x27\x14\x5a\x41\x6e\x74\x09\x1f\x5e\x97\x8f\xf7\x8b\x97\xc5\x6a\xfd\xf0\xb8\x9c\x2f\xd2\xbb\xc7\x65\x7a\x7f\xbf\x5a\xac\xd7\x41\x10\xc7\x31\x3c\x1b\x54\x16\x05\x4b\xad\x80\x77\xc8\x80\x45\xa1\x0f\xb6\xdf\x2e\xcd\x4a\xa9\x80\x35\x60\x96\x01\x82\xa2\x03\xec\x9b\x8c\x0b\xf2\x8e\x7c\xa3\x63\x08\x37\x05\x41\x46\xb9\x54\x52\x6d\x01\x8f\x89\x8d\xae\x55\x86\xe6\x0f\x20\xbb\x47\xc0\x68\xb6\xc4\xf3\x42\x8b\x5f\xdf\x48\x6e\x77\x1c\x04\x7c\x12\x13\x06\xe0\x26\x7d\xc7\x9f\xda\x24\xf0\xe3\x41\xf1\xe7\x59\x1b\x92\x6a\x18\x7a\x42\x16\xbb\x41\xc8\xd0\x8a\x0a\x42\x4b\x09\xac\xd9\x48\xb5\xbd\x75\x99\xcd\x69\x5c\x53\xff\xe9\x63\x30\x85\xbf\x41\x00\x50\xd0\x05\x88\x7e\xf7\x15\xe5\x09\xbc\x1b\xe5\x22\x9f\x6c\x5f\x2a\x3a\x74\xc9\x76\xcf\x64\xdc\x2d\x1a\x94\xb8\xb1\x95\xa1\x0a\x0d\x85\x28\x04\x27\x90\xd6\xbc\x4b\x85\xd0\xb5\x62\x27\x0b\x00\x20\x8e\xe1\xce\x10\x32\x79\x6a\x7d\xfa\xfe\xc0\x2e\x58\xa1\xb5\x94\x41\x85\x06\x4b\x62\x32\xd6\x3f\x3c\x97\x05\x37\x17\xf4\xac\xa9\xdc\x93\x09\x7d\x39\x40\xd9\xc0\xee\xb0\xcf\xa0\x6c\x50\x77\xd0\x67\x50\x35\xa0\x3b\xe4\x33\xa7\xfe\x88\xf9\x8c\xba\x6f\x39\x0d\xfc\x1f\x4b\x45\x1e\x8d\x01\x5d\x54\x34\xa8\x09\xcf\x0e\xd6\xfb\x67\xd6\x51\x48\x7a\x3b\xb6\xf3\xe2\x18\xe6\xda\x18\x7d\x00\x04\x43\x39\x19\x52\x82\x5a\xaf\x8e\x8d\x6d\xc8\xea\xda\x08\x3a\x49\xbd\xea\x02\xb8\x01\x77\xa6\x68\xe3\xbb\x7f\xb9\x66\x89\xaf\x2d\xcf\xd0\x1d\xe8\x92\x0d\x7c\xd5\x9a\xb5\xc1\x2d\x3d\x21\xef\xa6\xed\x83\xdb\x5b\xa8\x50\x49\x11\x4e\xee\x74\x5d\x64\xea\x3d\x43\x33\xea\x5a\x0f\x58\xb5\xe2\x27\xae\xc5\x9b\x5b\x9f\x5e\x49\xd4\x4c\x27\xf3\xa4\x59\x36\x72\x4e\xcb\xe2\xec\x37\xfb\x1f\xfb\x47\x96\x78\x78\xa0\xfd\xd0\xf5\x57\xae\x7d\x14\x58\x69\xcb\x8d\xb8\xf1\x52\xdb\x71\x7f\xca\x73\x12\x2c\xf7\x94\xf6\xbf\x15\x67\x5e\x98\x46\xad\x88\xc8\xb2\x91\x82\x17\xbf\x6b\x2c\x9e\x75\x78\x45\x49\x57\xdd\x52\x4f\x60\xb2\xec\xa1\x39\xa0\x05\xa5\xd9\x7d\xec\x28\x1b\x80\x7a\x76\x9c\x26\x7e\x91\xb7\xe0\x5f\x00\x00\x00\xff\xff\x6f\x29\x85\xa7\x78\x05\x00\x00"

func nodeversionbeaconAdminSet_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminSet_version_boundaryCdc,
		"nodeVersionBeacon/admin/set_version_boundary.cdc",
	)
}

func nodeversionbeaconAdminSet_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminSet_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/set_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x49, 0x35, 0xe6, 0xaf, 0x28, 0x5e, 0xc9, 0x5b, 0x35, 0xf1, 0x3, 0x12, 0x28, 0xdd, 0x59, 0xcb, 0x3b, 0xdf, 0x46, 0xd5, 0xa8, 0x3, 0x78, 0x65, 0xe5, 0xcf, 0xd4, 0x1e, 0xb, 0xa1, 0x5d}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_current_node_versionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\x74\x24\xcd\x85\x9a\xee\xee\x12\x21\x1a\x47\x3a\xa3\xeb\x8d\xbd\x01\x4b\xf1\x1a\xad\xd7\x27\x10\xe2\xdf\x29\x42\x2a\x68\x67\x9e\x66\x5e\xca\xef\x45\x14\xb6\x44\xba\x92\xd4\x54\xf8\x44\x3e\x14\xc6\x22\x25\xe3\xfe\xc3\xce\xe3\x74\x9d\x2e\xee\x69\xb6\xa7\xe9\x78\x9e\xed\x71\x1c\x2f\x93\x73\xc6\x0c\xc3\x80\x47\xd2\x0a\x7d\x23\x84\x26\x42\xac\xb8\x6d\x1b\x88\xb4\x24\xa6\x88\xc4\x5b\x5d\x58\xc5\x07\xbd\xab\x3b\xf1\xec\x5f\x56\x32\x3e\x04\xaa\xb5\xf3\xeb\xda\x63\x69\x8c\xec\x13\x77\xfd\xc3\x5f\x9d\x83\xa3\x7c\x23\xc1\x97\x01\x00\x21\x6d\xc2\xff\x50\xaf\xa4\xe7\xcd\x64\xcf\x4b\xe3\xe8\xe5\xb3\xeb\x0f\xbf\xc7\xe6\xdb\xfc\x04\x00\x00\xff\xff\x47\x41\x59\xb1\xf4\x00\x00\x00"

func nodeversionbeaconScriptsGet_current_node_versionCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_current_node_versionCdc,
		"nodeVersionBeacon/scripts/get_current_node_version.cdc",
	)
}

func nodeversionbeaconScriptsGet_current_node_versionCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_current_node_versionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_current_node_version.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xda, 0xbd, 0xd1, 0x7e, 0x56, 0x32, 0x8f, 0x92, 0x35, 0xa8, 0x28, 0x92, 0xb9, 0xd0, 0xf, 0x32, 0xf6, 0x4a, 0xfa, 0x60, 0x0, 0xe4, 0xd2, 0xf0, 0xc5, 0x29, 0x96, 0xb3, 0xb, 0xc0, 0x5f}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_current_node_version_as_stringCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x4f\x84\x40\x10\x85\xfb\xfd\x15\xaf\x84\x06\xac\x4d\x2c\xee\x0e\x62\x6c\x20\x39\xcc\xf5\x73\x30\x9c\x9b\xc0\xac\x99\x9d\x35\x1a\xe3\x7f\x37\x81\xd5\xe6\xda\xf7\x66\xbe\xf7\xf9\xf5\x3d\xa8\xa1\x0b\x13\x5f\x58\xa3\x0f\x72\x64\x1a\x83\x60\xd6\xb0\xe2\xe1\xb3\xeb\x9b\xf6\xd2\x9e\x87\x97\xbe\x3b\xb6\x87\x53\xdf\x1d\x9a\xe6\xdc\x0e\x83\x73\x75\x5d\xe3\x99\x2d\xc2\xde\x18\x63\x52\x65\x31\x7c\xec\x0c\x4c\x3c\x7b\xe1\x09\x5e\xb6\x3a\xc7\xaf\x74\x5d\x78\x7b\xa4\x08\xc2\x60\xea\xe5\x56\x39\x1a\x47\x8e\xb1\xa0\x65\x29\x31\x27\xc1\x4a\x5e\x8a\xf2\x31\xf7\xf8\x76\x00\xb0\xb0\xe1\x1a\x92\x4c\xa4\x5f\x78\xba\x17\xae\x6e\x6c\xa7\xdd\xe2\x2f\xcf\xd7\x45\xb9\x01\x94\x2d\xa9\xfc\x33\xaa\xec\x54\x59\xd8\x77\x8a\xd2\xfd\xb8\xdf\x00\x00\x00\xff\xff\x35\x6a\x96\x0b\x0f\x01\x00\x00"

func nodeversionbeaconScriptsGet_current_node_version_as_stringCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_current_node_version_as_stringCdc,
		"nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc",
	)
}

func nodeversionbeaconScriptsGet_current_node_version_as_stringCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_current_node_version_as_stringCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xe6, 0x27, 0x42, 0x24, 0xcc, 0xd6, 0xfd, 0x7f, 0xbb, 0xf3, 0xf8, 0xbd, 0x9d, 0x60, 0x8a, 0xa8, 0x84, 0x6c, 0x5a, 0x7b, 0xd6, 0x71, 0x7e, 0x30, 0x72, 0x58, 0xfd, 0x22, 0xe4, 0xa7, 0x7}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_next_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3d\x6b\xc3\x40\x10\x44\xfb\xfb\x15\x53\x4a\x4d\x94\x3a\x4d\xb0\x23\x15\x69\x4e\x20\x81\xfb\x8b\xb4\x72\x16\x74\xbb\x66\xef\xce\x28\x84\xfc\xf7\x90\xaf\x26\x72\x39\xf0\xde\x63\x38\x5e\xd4\x32\xbc\xce\x74\x22\x4b\xac\x72\xa4\x30\xa9\x60\x31\x8d\xb8\xdf\x7c\xdf\x76\xa7\x6e\x18\x9f\x7b\x7f\xec\x0e\x4f\xbd\x3f\xb4\xed\xd0\x8d\xa3\x73\x4d\xd3\x60\xa0\x6c\x4c\x57\x4a\xc8\xaf\x04\xa1\x2d\xe3\xfa\x53\xc1\x8b\x16\x99\x83\xbd\x41\x0d\xc2\xeb\x37\xce\xcb\x17\x67\x04\x4e\x10\x45\xb9\x4c\x1a\x59\xce\x7b\x67\xa6\x85\x85\x66\x17\xa6\x89\x52\xaa\xc2\xba\xd6\x58\x8a\x20\x06\x96\xaa\x7e\xd8\xdf\xbd\xfb\x5b\xbf\x85\x47\xbc\x3b\x00\x30\xca\xc5\xe4\x06\x7f\xa6\xec\x69\xcb\xff\xb4\xaa\x76\x1f\xee\x33\x00\x00\xff\xff\x89\xa3\xee\xcb\x13\x01\x00\x00"

func nodeversionbeaconScriptsGet_next_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_next_version_boundaryCdc,
		"nodeVersionBeacon/scripts/get_next_version_boundary.cdc",
	)
}

func nodeversionbeaconScriptsGet_next_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_next_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_next_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xa3, 0x70, 0xc8, 0x50, 0x45, 0x45, 0xf5, 0x2f, 0x3d, 0xf5, 0x1c, 0x62, 0x1f, 0xfd, 0xb6, 0x13, 0xb, 0xdc, 0xec, 0x0, 0x9, 0xb0, 0x42, 0x65, 0x91, 0xed, 0x4b, 0xb8, 0xcd, 0xd4, 0x5f}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_next_version_update_sequenceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x4e\xc3\x30\x18\x06\x77\x3f\xc5\x37\x26\x0b\x61\x40\x0c\x6c\x2d\x89\x50\x17\x47\xaa\x45\x77\xd7\xf9\x02\x91\xe2\xdf\xc1\xfe\x8d\x22\x21\xde\x1d\x09\xb1\xa0\xae\x77\xc3\xdd\x12\xb7\x94\x15\x36\x4d\xbc\x30\x97\x25\xc9\x91\x3e\x24\xc1\x9c\x53\xc4\xfd\x6e\xc7\x7e\xb8\x0c\x67\x77\x1a\xed\x71\x38\x3c\x8f\xf6\xd0\xf7\xe7\xc1\x39\x63\xba\xae\xc3\x0b\xb5\x40\xdf\x09\xe1\xae\x28\xfc\xa8\x94\x40\x48\x8d\x57\x66\xcc\x29\xff\x4a\xf5\xd7\x95\xa8\xdb\xe4\x95\x13\xf8\x49\x51\xe3\x43\x60\x29\x8d\x5f\xd7\x16\x73\x15\x44\xbf\x48\xd3\x3e\xe1\xf5\x24\xfa\xf8\x80\x2f\x03\x00\x99\x5a\xb3\xdc\xce\xdd\xbd\x51\x2d\x77\xfd\x07\xdd\x5f\xbd\x69\xcd\xf7\x4f\x00\x00\x00\xff\xff\x7b\x67\x35\x0d\xd6\x00\x00\x00"

func nodeversionbeaconScriptsGet_next_version_update_sequenceCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_next_version_update_sequenceCdc,
		"nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc",
	)
}

func nodeversionbeaconScriptsGet_next_version_update_sequenceCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_next_version_update_sequenceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xd8, 0x13, 0x8d, 0x9d, 0x9, 0x9c, 0xb1, 0x35, 0x73, 0xc3, 0xac, 0xd9, 0x26, 0x60, 0xbf, 0xb5, 0x3c, 0x63, 0x5d, 0xd3, 0x22, 0xca, 0xc5, 0x1f, 0xb7, 0xba, 0x6a, 0xe2, 0x88, 0xf1, 0x7a}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_version_boundariesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4f\x6b\x84\x30\x10\xc5\xef\xf9\x14\xef\xb8\x42\x59\x7b\xde\xdb\x6e\xf5\xb0\x17\x2d\x0a\xde\x07\x1d\xd3\xc0\x3a\x91\x49\x94\x96\xd2\xef\x5e\x62\x2d\xf4\xcf\x5e\x42\x66\xe6\x3d\x7e\x3f\x37\xcd\x5e\x23\x2a\x3f\x70\xc7\x1a\x9c\x97\x0b\x53\xef\x05\xa3\xfa\x09\x8f\xaf\x55\x5d\x94\x5d\xd9\xb4\xd7\xba\xba\x94\xe7\xa7\xba\x3a\x17\x45\x53\xb6\xad\x31\x79\x9e\xa3\xe1\xb8\xa8\x04\xc4\x17\xc6\xba\xd7\xfd\x22\x03\xa9\xe3\x80\x99\x2c\x63\xf4\xba\x9d\xad\x5b\x59\xbe\x56\x24\x03\x66\xd6\x67\xb2\x7c\x34\xd4\xf7\x1c\xc2\x81\x6e\xb7\x0c\xe3\x22\x98\xc8\xc9\x21\xc5\x4e\xb8\x4a\x7c\xf8\x0e\x6e\x53\x76\xfa\x2f\x7a\xec\x7e\x71\xdf\x52\x18\xef\x06\x00\x74\xb3\xbb\x53\xb1\x1c\xbb\xbf\xb6\xa9\xb7\x73\xd3\xfb\x03\xbc\x7f\x32\xf3\xf1\x19\x00\x00\xff\xff\xd8\x87\x25\x09\x2d\x01\x00\x00"

func nodeversionbeaconScriptsGet_version_boundariesCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_version_boundariesCdc,
		"nodeVersionBeacon/scripts/get_version_boundaries.cdc",
	)
}

func nodeversionbeaconScriptsGet_version_boundariesCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_version_boundariesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_version_boundaries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x6e, 0xe3, 0xa1, 0x72, 0x53, 0xfd, 0x7f, 0x89, 0xab, 0xac, 0xcd, 0x72, 0x9c, 0xcf, 0x8c, 0xa9, 0x53, 0x25, 0x7c, 0x6d, 0x65, 0x67, 0x8, 0x6f, 0x5f, 0x64, 0xa4, 0x76, 0x27, 0x25, 0x5a}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x3f\x4f\x84\x40\x10\x05\xf0\x9e\x4f\xf1\xca\xa3\x11\x0b\x63\x61\x77\x27\x98\x5c\x03\x06\x22\xfd\xc2\x0e\xec\x46\x76\x96\xec\xce\x7a\xfe\x89\xdf\xdd\x84\xc3\xca\xd8\xcf\xfc\x66\xde\xb3\x6e\xf5\x41\x50\x7b\x4d\x3d\x85\x68\x3d\x9f\x48\x8d\x9e\x31\x05\xef\x70\xfb\x5e\x37\x65\xd5\x57\x6d\x77\x6e\xea\x53\x75\x7c\x6c\xea\x63\x59\xb6\x55\xd7\x65\x59\x51\x14\x68\x49\x52\xe0\x08\x31\x84\xb7\x7d\xdd\x27\xd6\x2a\x7c\x3c\x05\xa2\x4f\x7a\xa6\x60\xbd\xc6\xc5\xd8\xd1\x40\xd3\x64\x99\xae\xd3\xce\xb2\x75\xc9\x81\x93\x1b\x28\xc0\x4f\x18\x16\x3f\xbe\xc6\x8d\x15\xa3\x04\x2e\x45\xc1\xaa\x62\xc4\x40\x72\x21\x62\xa4\x55\x2b\xb1\x3c\x43\xfd\x1e\x83\x62\x0d\x2b\x71\xa7\xf5\x15\x81\x21\x3b\x1b\xd9\xa8\x61\x7f\x27\x53\xe3\x48\x31\x1e\xd4\xb2\xe4\x98\x12\xc3\x29\xcb\x87\xfc\x01\x2f\x67\x96\xfb\x3b\x7c\x65\x00\x10\xb6\x3c\x7f\xdb\xb8\x99\x49\xfa\xff\xf3\x1d\xf2\xec\xfb\x27\x00\x00\xff\xff\xb5\x6c\x77\xbf\x49\x01\x00\x00"

func nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc,
		"nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc",
	)
}

func nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0xf5, 0x7b, 0xf6, 0x9, 0x90, 0x24, 0x7d, 0x58, 0xd, 0x5a, 0x95, 0x8d, 0x78, 0xa3, 0x31, 0xed, 0xb1, 0x7c, 0xca, 0x9a, 0x88, 0x77, 0x8f, 0x5a, 0x5, 0x9e, 0x5b, 0xb5, 0x29, 0x49, 0xa8}}
	return a, nil
}

var _quorumcertificateAdminPublish_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\x39\xa1\x56\x42\x0d\xe7\x0a\x21\x45\x2e\x9c\x09\xe5\x07\x96\xb0\x89\x2d\x1c\x6f\xb4\xde\xb4\x48\x55\xff\x1d\x39\xbd\x80\xc4\x5e\x77\x66\xde\x4c\x9c\x66\x51\xc3\x4b\x92\xb3\x4f\x4b\x31\xd6\xce\x63\x50\x99\xf0\xf0\xdd\xf9\xf6\x70\x78\x7b\x3e\x1e\x9d\x6b\x1a\xbc\x73\x31\x98\x52\x2e\xd4\x5b\x94\x8c\x41\x14\x16\x18\x9d\x07\x7d\x4e\x31\xc3\x04\xf3\xf2\x91\x62\x09\x20\x28\x0f\xac\x9c\x7b\xae\x5e\x0b\x64\xa0\x94\xe4\x5c\x40\x7d\x2f\x4b\xb6\x52\xe5\xca\x63\xac\xcc\x35\xab\xf3\x38\x89\xc5\x3c\x3a\xf7\x1b\x73\x71\x0e\x00\x66\xe5\x99\x94\x37\x25\x8e\x99\x75\x8f\x76\xb1\xd0\xde\xa2\xb6\xb8\xac\x92\x7a\xb7\xf7\x2e\xc5\xfc\xf5\x78\xf7\x67\xd5\xae\xad\x25\x9f\x36\xcd\xda\xb1\x6f\x4e\x62\xac\x5e\x99\x4c\xf4\x1e\x46\x3a\xb2\xed\xf1\x8f\xe5\x68\xa2\x34\xf2\x2b\x59\xd8\xae\x9c\xab\xbb\xfe\x04\x00\x00\xff\xff\x97\xf7\x08\x84\x37\x01\x00\x00"

func quorumcertificateAdminPublish_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminPublish_voterCdc,
		"quorumCertificate/admin/publish_voter.cdc",
	)
}

func quorumcertificateAdminPublish_voterCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminPublish_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/publish_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x25, 0xcd, 0x7f, 0xbf, 0x92, 0xcd, 0x55, 0x37, 0x4c, 0xbc, 0x66, 0x88, 0x88, 0x9, 0x48, 0xe5, 0x38, 0x46, 0x33, 0xac, 0x31, 0x40, 0x2c, 0x65, 0x1f, 0x77, 0x1, 0x34, 0x4, 0x5b, 0x37}}
	return a, nil
}

var _quorumcertificateAdminStart_votingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x06\x39\x7c\x9f\x8d\x06\x76\x02\x14\x39\x08\x75\x03\xd7\x6e\x01\x5f\x8a\x3a\xee\xcf\x41\xd0\x81\xa1\x68\x89\x85\x4c\xaa\xe4\x2a\x4e\x60\xf8\xdd\x0b\x92\x92\x23\xc6\xae\x00\x03\xb2\x38\xb3\x3b\xbb\x3b\x5c\xb9\x6b\xb4\x21\x7c\xa9\xf5\x7e\x51\xb7\x96\x84\x59\x2f\xb0\x35\x7a\x87\x9b\xe7\xf5\x62\xbe\x5c\x3e\x7c\xde\x6c\x92\x64\x3a\xc5\x77\x61\x09\x64\x98\xb2\x8c\x93\xd4\x0a\x5b\x6d\x40\x95\xc0\x7a\x01\x56\xec\xa4\x02\x69\x58\x62\x86\xfa\xaf\x4f\x9a\xa4\x2a\xd1\x08\x23\x75\xe1\x42\xec\x25\x55\x60\x60\xc6\xb0\x17\xe8\x2d\xb8\xae\x6b\xc1\x49\x1b\x28\x5d\x08\xf0\x20\xc0\xfa\x74\x73\x53\xb6\x3b\xa1\xc8\xa6\xee\x9f\xfb\x49\x55\x48\x2e\x6c\x8a\xb9\x1a\x84\x08\x9c\xfe\xd0\xe1\xba\x4f\x5f\x75\x21\x56\x4b\x07\xef\xb1\x9e\x64\xfd\x5b\x5d\x7b\x91\x3e\xed\x6a\x69\x21\x15\x04\xe3\x55\xcf\x75\x61\xdc\xd9\x2f\x21\xcb\x8a\x2e\xc7\xf0\xdc\x7d\x00\x9c\xf1\x93\x41\xa3\x46\x27\xe1\xd9\x8f\x95\xa2\xdb\xbb\xfc\xfa\x4c\x63\x96\x6d\xc8\x48\x55\xe6\xf9\x75\x9c\x38\xf3\x9c\xbb\xf7\x79\x3e\xc6\x21\x49\x00\xa0\x31\xa2\x61\x46\x8c\xac\x2c\x95\x30\x29\xe6\x2d\x55\x73\xce\x75\xab\xe8\x84\x71\xcf\x74\x8a\x4f\xda\x18\xbd\x07\x83\x11\x5b\x61\x84\xe2\xc2\x0d\x29\x1a\x9a\x7e\xfc\x2d\x38\x9d\x48\xb5\xa0\x70\xf0\x20\xb6\x98\x21\xe4\x98\x3c\xfa\x38\x1f\xfe\x8b\x6c\x32\x99\x3b\xdc\xc7\x91\x73\x4b\x8a\x0b\x47\x1b\xd2\x86\x95\xe2\x1b\xa3\x6a\x7c\x4a\xe0\x9e\xfb\x7b\x34\x4c\x49\x3e\xba\x5a\xe8\xb6\x2e\xa0\x34\x21\xa4\x88\x85\xfe\xe1\x41\xcb\xd5\x38\x89\x04\xf6\x46\x49\x91\xc5\x69\xbb\xb7\x1c\x33\x64\xf9\x89\x32\xec\xc8\x8a\x84\x61\x24\x40\x95\xd1\x6d\x59\x45\x53\x03\x53\x05\xb8\x56\x96\x4c\xcb\x09\x0c\x5d\xb8\xb7\x3d\x72\xc6\x97\xaa\x10\xcf\x6e\xec\xdd\x70\x87\x8d\xef\x65\x0e\x06\xb9\x94\xde\x0a\xcc\xbc\xa4\x38\x84\x51\xa7\x08\x93\x3d\x62\x86\xc3\x31\x22\x3f\x31\x03\x89\x19\x6e\xe2\x98\xd3\x29\x36\x82\x82\x64\x17\xfb\x7f\x0b\x59\x78\xd1\xc1\x86\x6f\xc1\x0b\x56\xf3\xb6\x0e\xd5\xba\x7e\x12\xab\x3b\xa4\x2f\x21\x32\xec\x90\xba\xed\x2e\xe4\x6a\xe9\x0a\x8c\xad\x9a\xf9\xc2\x73\x1c\x22\xc6\xb0\x62\x8b\xd9\xb0\xf2\x8e\xf0\x4f\x78\x80\x75\x1c\x9b\xc9\x3c\x39\x83\x5e\xec\x63\x16\x14\xe6\x51\xb6\x73\xae\x6b\xa3\xc4\x3b\xdc\x46\x27\xc7\x18\xd8\xfb\x69\xc2\x9a\x46\xa8\x62\x74\xd1\x54\x23\x5f\x48\x1a\x26\xff\xe6\x96\x5e\x54\x38\x7e\x35\xfd\x31\xba\x95\x1b\xbf\x24\xd7\x0b\xfc\x0c\x0b\xd2\xaf\x45\x37\x22\xdb\x36\x4d\x2d\x45\xf1\xba\x09\x7b\x56\x7f\x25\x27\x7e\xc1\x06\xde\xe8\xf5\x1a\xf4\x6f\x21\xe3\x31\x39\xfe\x0d\x00\x00\xff\xff\x34\x89\x6e\x08\xd7\x05\x00\x00"

func quorumcertificateAdminStart_votingCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminStart_votingCdc,
		"quorumCertificate/admin/start_voting.cdc",
	)
}

func quorumcertificateAdminStart_votingCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminStart_votingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/start_voting.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x37, 0xb6, 0x46, 0xc9, 0xb7, 0x82, 0xbe, 0x4d, 0x32, 0x73, 0x50, 0x5, 0xcc, 0x34, 0x71, 0xdc, 0xa8, 0x85, 0xc1, 0x15, 0x8e, 0x4d, 0x2e, 0x95, 0x28, 0x22, 0x7c, 0x35, 0x6e, 0x5f, 0x44}}
	return a, nil
}

var _quorumcertificateAdminStop_votingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\x51\x0f\xbf\xd2\x4b\xfa\x9f\x2b\xa0\x8a\x52\x38\x93\x06\x71\x37\xce\x26\xb1\x94\x78\xcd\x66\x43\x91\xaa\xbe\x3b\x72\x22\x2a\x90\x98\xa3\x3d\xb3\x33\x9f\x1f\x23\x8b\xe2\x69\xe0\x73\x39\xcc\x93\x92\x54\x25\x5a\xe1\x11\xff\x3f\xab\xb2\x38\x1e\x4f\x8f\x75\x6d\xcc\x6e\x87\x17\x9a\x14\x2a\x36\x4c\xd6\xa9\xe7\x80\x96\x05\xda\x13\xaa\x12\x8e\x83\x8a\x75\x0a\x65\x4c\xca\x71\x79\xff\x60\xf5\xa1\x43\x24\xf1\xdc\x18\xf3\x33\x7a\x31\x06\x00\xa2\x50\xb4\x42\xd9\xe4\xbb\x40\xb2\x47\x31\x6b\x5f\x38\xc7\x73\xd0\x2d\x2e\x8b\x25\x69\x20\x85\x6d\x46\x1f\x4e\xd4\xe2\x1e\xab\x3b\x7f\x63\x11\x3e\xdf\xfd\xfb\x35\x3d\x2f\x92\xef\x21\x4b\x04\x7b\xfc\xf1\x55\x2b\x8b\xed\xe8\xd9\x6a\xbf\xbd\x15\x24\x1d\x0e\x88\x36\x78\x97\x6d\x4a\x9e\x87\x06\x81\x15\x6b\x05\x84\x5a\x12\x0a\x8e\x12\xde\xbb\x5b\xb7\x6c\xb6\xe6\x96\xff\x1e\x97\x27\xf6\xd7\x05\x3b\x5b\xaf\x5f\xcd\xf5\x2b\x00\x00\xff\xff\x4d\x7d\x7c\x39\x62\x01\x00\x00"

func quorumcertificateAdminStop_votingCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminStop_votingCdc,
		"quorumCertificate/admin/stop_voting.cdc",
	)
}

func quorumcertificateAdminStop_votingCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminStop_votingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/stop_voting.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xa0, 0xd9, 0x1d, 0x55, 0xa2, 0xfc, 0xf1, 0x23, 0x3d, 0xa6, 0xbd, 0xe5, 0xdd, 0xa2, 0x17, 0xc9, 0xeb, 0x3f, 0x53, 0xe2, 0x30, 0x9c, 0x47, 0x65, 0x66, 0xad, 0xd9, 0x55, 0xca, 0x9b, 0x79}}
	return a, nil
}

var _quorumcertificateCreate_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x70\x3d\x0c\x0e\xd0\x26\x3b\x07\xed\x8a\xc0\xdd\x86\x61\x87\x35\x4d\xb1\x9d\x15\x99\xb6\xb5\x2a\xa2\x47\xd1\xc9\x82\xa1\xff\x7d\xa0\xe4\x3a\x31\x26\x20\x88\x3e\xc8\x47\xbe\xc7\x07\xbb\x7d\x47\x2c\xf0\xd9\xd3\xb1\xf4\x7d\x14\xe4\x4d\x09\x35\xd3\x1e\x3e\xfc\xd9\x94\xeb\x87\x87\xa7\x4f\xdb\xed\x6c\xb6\x5c\xc2\x33\x46\x81\x67\x36\x21\x1a\x2b\x8e\x02\xd4\xc4\x60\x20\x50\x85\x20\x04\x8c\xbf\x7b\x8d\x30\xb0\x29\xe1\x07\x09\x32\x7c\xdf\xfd\x42\x2b\x19\x4d\x5a\x04\x4b\x41\xd8\x58\x51\xb4\x9f\xce\x7b\xd8\x21\xf4\x5d\x65\x04\x2b\x45\xe8\x23\xa6\x30\xec\xc8\xb6\x63\x30\x1c\x5b\x0c\x20\xad\x11\x70\x11\x2c\xed\x3b\x8f\x82\x55\xea\xa8\x45\x38\xa4\x4a\x94\x2b\x51\xf0\x27\x08\x88\x55\x54\xbc\x1d\x82\x65\x4c\xe8\x14\x2c\x82\x09\x95\x42\x1c\x8c\x77\x55\x6a\x1e\x0f\xc8\x27\xa8\x7b\xe9\x79\xa8\xaa\xa8\xc7\x16\x39\x37\x92\xa8\xb9\x08\x66\xc8\x89\x62\x5e\xb0\x4a\xd7\x49\x91\x47\xc3\x66\x8f\x82\x1c\x57\x7a\xd4\x9f\xa9\xf6\x2e\xac\xab\x8a\x31\xc6\x55\x02\x31\xf9\x00\x54\xa7\xe3\xa6\xcc\x31\x97\x92\xe9\x7d\x56\x4c\xa5\x52\x18\x2d\xf1\xf5\x21\x03\xb8\xea\x2d\x37\x4b\xad\x4a\x24\x60\x6b\xa9\x0f\x49\x15\xea\x90\x8d\xb8\xd0\x68\xae\x76\xe9\x42\xf3\x0d\x4f\xab\xa4\xd0\x70\x86\x17\x3c\x25\xd6\x79\x12\xde\xa3\x15\xe2\x81\x8c\x9c\xc7\x5a\x4c\x29\x0c\x9b\xeb\xb1\xa5\xad\xb0\x0b\xcd\xf5\xa4\x4c\xbe\x9b\xc3\xdf\xd9\x0c\x00\xa0\x63\xec\x0c\x63\x11\x5d\x13\x90\x57\xb0\xee\xa5\x5d\xe7\x6e\xc7\x18\x5d\xcb\x25\x7c\xc1\x81\x4c\xd2\x84\xb1\x46\x46\x9d\xd5\xe8\x99\xfc\x30\x70\x1d\x33\x3d\xca\xf0\x72\x07\x0d\xca\x00\x3e\x69\x7d\xfe\x7f\xf0\x13\xd6\x70\x97\xb7\x8b\x06\xa5\x34\x9d\xd9\x39\xef\xe4\x74\xfb\x7e\xe2\xff\xc5\x5a\x43\x3e\x16\xcb\xae\xdf\x79\x67\x97\xc9\x63\xa5\x5a\x89\x78\xfe\x6e\xc4\xd5\xb5\xd8\x11\x33\x1d\x8b\x39\xdc\xdf\x43\x67\x82\xb3\xc5\x55\x49\xbd\x57\x97\x08\xe4\x47\x30\x17\xc4\x84\xce\xb4\xae\xe6\x13\x2d\x52\x05\x54\xb7\x5d\x7a\x5a\x5d\x1b\xcd\x01\xc1\x89\x26\x47\x21\x36\x0d\x4e\xc8\xe5\xf8\xdb\x9b\x91\xe5\x22\xfb\x3e\x79\xaa\x78\x1b\x5c\xfe\x9f\x0e\xee\xbc\xbf\x68\x25\x8f\x6d\xa1\x45\x8b\xdb\x9b\x04\x7e\x0d\x42\xab\xe9\x47\x62\x91\xd0\xb7\xb9\x9d\x47\x23\x6d\x16\xfc\x75\xf6\xfa\x2f\x00\x00\xff\xff\xd3\x11\xd1\x52\x53\x04\x00\x00"

func quorumcertificateCreate_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateCreate_voterCdc,
		"quorumCertificate/create_voter.cdc",
	)
}

func quorumcertificateCreate_voterCdc() (*asset, error) {
	bytes, err := quorumcertificateCreate_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/create_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xaa, 0x8c, 0x53, 0x14, 0x61, 0xae, 0x77, 0x43, 0x9f, 0x9b, 0xf7, 0x46, 0x21, 0xfd, 0x67, 0xd2, 0x64, 0xf8, 0xc6, 0x4a, 0x8a, 0x4e, 0x63, 0x7f, 0xd7, 0xfe, 0x20, 0xb2, 0x2b, 0x8e, 0x28}}
	return a, nil
}

var _quorumcertificateScriptsGenerate_quorum_certificateCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x31\x4b\x43\x31\x14\x46\xf7\xfc\x8a\x8f\x2e\x26\x4b\xab\x8b\x43\x41\x8a\xa4\x2a\x1d\x9f\xc5\x49\x1c\x42\x7a\x5f\x0d\xe4\xdd\xd4\xdc\x1b\x2c\x88\xff\x5d\x6c\x5f\xad\x9a\x2d\x70\x0e\xe7\xbb\x69\xd8\x95\xaa\xb8\xcf\xe5\xdd\xe7\x26\x4a\xb5\xf3\xe8\x6b\x19\x70\xb9\xef\xfc\xed\x72\xf9\x78\xb7\x5e\x1b\x33\x9b\xe1\x81\x54\xa0\xaf\x04\xd1\xa0\x4d\x50\x7a\x04\xc4\xa3\x73\x21\xe8\x3c\xb6\xc4\x54\x83\xa6\xc2\xc6\x84\x18\x49\xc4\x86\x9c\x1d\xfa\xc6\x18\x42\x62\x3b\xd2\x2b\xde\xd0\x7e\x8e\xa7\x15\xeb\xd5\xb5\x9b\xff\x8d\x4f\xcf\x33\x3e\x8c\x01\x80\x4c\x7a\xea\x08\x6e\xfe\xd1\x5b\xd2\xf1\x23\xd6\x1d\xf9\x4a\xda\x2a\xff\x28\xcf\xbf\xab\x2f\xd3\x71\x24\x75\xad\xd4\x36\x78\xaa\x9a\xfa\x14\x83\x92\x75\x07\xfb\xfb\x2d\x16\xd8\x05\x4e\xd1\x4e\x7c\x69\x79\x03\x2e\x7a\x3a\x8e\xf0\x76\x10\x11\xcf\xe6\xc4\x19\xf3\xf9\x15\x00\x00\xff\xff\x89\x80\x11\x90\x49\x01\x00\x00"

func quorumcertificateScriptsGenerate_quorum_certificateCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGenerate_quorum_certificateCdc,
		"quorumCertificate/scripts/generate_quorum_certificate.cdc",
	)
}

func quorumcertificateScriptsGenerate_quorum_certificateCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGenerate_quorum_certificateCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/generate_quorum_certificate.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x22, 0x2c, 0xc9, 0x96, 0x79, 0xd0, 0x1e, 0x97, 0xfc, 0x77, 0xb, 0xa7, 0xe9, 0xdc, 0xcb, 0x79, 0x40, 0x96, 0xad, 0x14, 0x84, 0x2e, 0x5e, 0xe0, 0xbc, 0xd6, 0xb2, 0xf, 0x1e, 0x9, 0xc5}}
	return a, nil
}

var _quorumcertificateScriptsGet_clusterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcb\xc9\x2f\x77\xce\x29\x2d\x2e\x49\x2d\x0a\x74\x56\x48\x2b\xca\xcf\x55\x30\xa8\x08\x74\x76\x74\x71\x09\x72\x0d\x0e\xe6\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x86\x68\xf0\xcc\x4b\x49\xad\xb0\x52\x08\xf5\xcc\x2b\x31\x34\xd3\xb4\x42\x35\x4b\x0f\xca\x52\xa8\xe6\xe2\x52\x50\x50\x50\xc8\x49\x2d\x51\x80\xea\x2b\x56\xb0\x45\x53\x9b\x9e\x5a\x02\xe5\x14\x6b\x68\x42\xd4\x17\xa5\x96\x94\x16\xe5\xc1\xb5\x44\x23\xdb\x19\xcb\xc5\x55\x0b\x08\x00\x00\xff\xff\x03\x73\xf2\x7e\xc0\x00\x00\x00"

func quorumcertificateScriptsGet_clusterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_clusterCdc,
		"quorumCertificate/scripts/get_cluster.cdc",
	)
}

func quorumcertificateScriptsGet_clusterCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_clusterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0xfb, 0x4c, 0x6f, 0xc7, 0xd1, 0x51, 0x95, 0xef, 0xad, 0x6e, 0x4f, 0x9, 0x54, 0x1b, 0x66, 0xa4, 0x35, 0x9b, 0xf2, 0xd7, 0x77, 0xbb, 0x39, 0xa9, 0xbe, 0x75, 0xb, 0x4d, 0xf2, 0x68, 0x74}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_completeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x4b\x03\x41\x10\x85\xfb\xf9\x15\xcf\xca\xbb\x26\xd1\xc6\x22\x90\x42\x37\x2a\x29\xcf\x60\x25\x16\xcb\x39\x17\x17\xe6\x66\xc2\xce\x2c\x06\xc4\xff\x6e\x91\x28\x5a\x3e\xf8\xbe\xf7\x5e\x99\x0f\x56\x03\x0f\x62\x1f\x49\x9a\x07\xd7\x21\x61\xaa\x36\xe3\xea\x38\xa4\xdb\xcd\xe6\xe9\x7e\xb7\x23\x5a\x2e\xf1\xc8\xe1\x88\x77\x86\x47\x8e\xe6\xb0\x09\x19\xe3\xc9\xb9\x74\x0c\x09\x7b\x56\xae\x39\x8a\x29\x51\x1e\x47\x76\xef\xb2\x48\x8f\xa9\x29\xe6\x5c\xb4\x3b\xd3\x5b\x7d\xe3\xe3\x0a\xcf\x5b\x8d\xeb\x9b\x7e\x85\x3b\x33\xc1\x27\x11\x00\x08\xc7\x4f\xa9\x63\xfd\xff\xd7\x62\xcf\x71\x0e\xde\xf5\x27\xbe\x72\xb4\xaa\xbf\xca\xcb\xdf\x89\xd7\x45\xf1\x64\xf3\x41\x38\xb8\xeb\x71\xb1\x86\x16\x21\xfa\xfa\x0e\x00\x00\xff\xff\x4c\xba\x16\xcd\xf4\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_completeCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_completeCdc,
		"quorumCertificate/scripts/get_cluster_complete.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_completeCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_completeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_complete.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x6a, 0x87, 0xb9, 0x21, 0x3c, 0xce, 0x6f, 0xaa, 0x69, 0xff, 0x1f, 0x8e, 0x92, 0xfa, 0x95, 0x1f, 0x72, 0x87, 0x80, 0xe6, 0x83, 0xe3, 0x60, 0xc2, 0xb8, 0x39, 0x84, 0xe0, 0xbb, 0x6c, 0x71}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_node_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xb1\xaa\x83\x40\x10\x85\xe1\x7e\x9f\xe2\x94\xda\xc8\xbd\x10\x2c\x84\x14\x41\x13\xb0\x34\x12\x52\x84\x14\xa2\xa3\x59\x58\x67\xc3\xee\x48\x04\xf1\xdd\x53\xac\x84\xa4\x9c\xe1\x7c\xfc\x7a\x7c\x5a\x27\x38\x19\xfb\xca\xcd\xe4\x85\x5c\x95\xa3\x77\x76\xc4\xdf\x5c\xe5\x87\xa2\x38\x1f\xeb\x5a\xa9\xa6\x6d\xc9\xfb\xa8\x31\x26\x46\x3f\x31\xc6\x46\x73\xd4\x06\x50\x72\x47\x73\x86\x4b\xc9\xf2\x9f\xc6\x19\x96\x5a\x9c\xe6\x21\x7c\xd2\xdd\x8a\x45\x29\x00\x30\x24\xd8\x88\xc7\xfe\x37\x99\x0c\x24\xdb\xe1\xa3\x38\xec\x1d\xc9\xe4\xf8\x43\x6e\xdf\xb9\x7b\xc2\xb6\xa3\x2b\xe9\xe1\x21\x5e\xa9\xf5\x1d\x00\x00\xff\xff\x18\xc7\x43\xd0\xc7\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_node_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_node_weightsCdc,
		"quorumCertificate/scripts/get_cluster_node_weights.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_node_weightsCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_node_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_node_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x9d, 0xc0, 0x2a, 0x9c, 0x34, 0xb, 0xc5, 0x43, 0x3d, 0xa, 0x57, 0x8, 0x63, 0x2c, 0xce, 0xe6, 0xa9, 0x9d, 0xb7, 0xc7, 0x13, 0x37, 0xe6, 0xc6, 0x3a, 0xe8, 0xf, 0x65, 0x94, 0xa6, 0x25}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_vote_thresholdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x31\x0b\x82\x50\x14\x85\xf7\xf7\x2b\xce\xa8\x8b\x14\x84\x43\xd0\x10\x5a\xe0\x68\xd6\x14\x0d\xa2\xd7\x14\x9e\xef\xc5\xbd\xd7\x12\xa2\xff\x1e\xa1\x44\x6d\xe7\xc0\xf7\xf1\x75\xfd\xcd\xb3\x62\x6f\xfd\x23\xb1\x83\x28\x71\x9e\xa0\x61\xdf\x63\x31\xe6\xc9\x36\x4d\x0f\xbb\xa2\x30\xa6\xac\x2a\x12\x09\x4a\x6b\x43\x34\x83\x43\x5f\x76\x2e\xa8\x26\x21\x73\x35\x8d\x6b\x9c\x32\xa7\xcb\x38\x9c\x46\xbc\xc2\xd3\x18\x00\xb0\xa4\x98\x41\xc1\xe6\x3f\x14\x5d\x49\xe7\x23\x41\x38\xf1\x4c\x3a\xb0\xfb\x2a\xe7\xdf\xc8\x25\xba\x7b\xa5\x63\xcb\x24\xad\xb7\xf5\x47\x79\xbd\x03\x00\x00\xff\xff\x25\xf2\x70\xe5\xc1\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_vote_thresholdCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_vote_thresholdCdc,
		"quorumCertificate/scripts/get_cluster_vote_threshold.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_vote_thresholdCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_vote_thresholdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_vote_threshold.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x85, 0xb, 0xfb, 0x48, 0x6f, 0x59, 0x3b, 0x72, 0xcd, 0x94, 0x9, 0x31, 0xb9, 0xb6, 0x1e, 0x2, 0xf0, 0xe3, 0x7b, 0xc6, 0x6b, 0xee, 0xb4, 0xb0, 0x14, 0x17, 0x99, 0x35, 0xaa, 0x66, 0xc1}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_votesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x4e\xc3\x40\x10\x44\xfb\xfd\x8a\x29\xed\xc6\x81\x86\x22\x12\x05\x72\x40\x4a\x99\x44\xd0\x44\x29\x4e\x97\x3d\x38\xe9\x7c\x17\xed\xae\xc1\x08\xf1\xef\xc8\xd8\xa0\xb8\x5c\xed\xcc\x9b\x17\xbb\x4b\x11\xc3\x53\x2a\x1f\x6d\xea\xd5\x58\x76\x2d\x82\x94\x0e\x37\xc3\xae\x7d\xd8\x6c\xf6\x8f\x87\x03\xd1\x6a\x85\x3d\x5b\x2f\x59\xe1\x32\x9c\x88\xfb\x44\x09\x78\x29\xc6\x8a\x50\x04\xf6\xc6\xd0\x0b\xfb\x18\x22\x9f\xe1\x27\x14\x91\xf3\x9e\x55\x2b\x97\x52\x8d\xd0\x67\x74\x2e\xe6\x6a\xfe\x6e\xf3\x99\x87\x35\x9e\xb7\xd9\x6e\xef\xea\x35\x8e\x0b\x89\x66\x64\x9f\xf0\x45\x04\x00\x89\xed\x0f\xaa\xb8\x5f\xea\x36\xaf\x6c\xf3\xa1\x55\x3d\xe5\xe5\x57\xf6\xbf\x72\xbc\x9e\x3c\x35\xef\xa3\x36\xd1\xf7\x4f\x00\x00\x00\xff\xff\x8d\xd6\x4b\xbd\xfd\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_votesCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_votesCdc,
		"quorumCertificate/scripts/get_cluster_votes.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_votesCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_votesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_votes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x38, 0x54, 0xe3, 0xf6, 0x3b, 0xb4, 0x8b, 0x51, 0x8a, 0xfd, 0x54, 0x1b, 0x41, 0x4f, 0xe1, 0x79, 0x4a, 0xc8, 0x46, 0xc9, 0x29, 0xed, 0xbb, 0x9b, 0xb, 0xdb, 0x8e, 0x6c, 0xee, 0xd2, 0xc8}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xb1\xaa\xc2\x40\x10\x45\xfb\xf9\x8a\x5b\x26\x4d\x78\x0f\x24\x85\x60\x21\x89\x42\xca\x18\xc4\x42\x2c\x96\x38\x89\x81\xc9\xae\xec\x4e\x30\x20\xfe\xbb\xc5\x06\xd1\xee\x5e\x38\x87\x33\x8c\x77\xe7\x15\x7b\x71\x8f\x42\xa6\xa0\xec\xeb\x02\x9d\x77\x23\xfe\xe6\xba\xd8\x96\xe5\x61\xd7\x34\x44\xa6\x6d\x39\x84\xc4\x88\xa4\xe8\x26\x8b\xd1\x0c\x36\x69\xa3\x50\xd9\x2b\xcf\x6b\x1c\x2b\xab\xff\x79\x1a\x47\xbe\xc2\x93\x08\x00\x84\x15\x0b\x18\xb0\xf9\x0d\x65\x3d\xeb\x72\x42\x92\x46\xde\xb3\x4e\xde\x7e\x94\xf3\x77\xe4\x92\xa9\x53\x23\x27\x1e\xfa\x9b\x12\xbd\xde\x01\x00\x00\xff\xff\xd7\x12\x87\x05\xbd\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_weightCdc,
		"quorumCertificate/scripts/get_cluster_weight.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_weightCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xcc, 0x4b, 0x39, 0xb0, 0xf0, 0xf0, 0x4b, 0x31, 0xde, 0xcb, 0x4e, 0xa3, 0x3f, 0x27, 0xe7, 0xbc, 0xf9, 0x75, 0x85, 0xff, 0x90, 0x67, 0x4f, 0x84, 0x61, 0x2f, 0xe, 0xbb, 0x8, 0x20, 0x26}}
	return a, nil
}

var _quorumcertificateScriptsGet_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6b\xc3\x40\x0c\x85\x77\xfd\x8a\x37\xda\x4b\xd2\x2e\x1d\x02\x1d\x8a\xd3\x42\xc6\xd4\x74\x0a\x19\xc4\x45\x6e\x0e\x74\x77\x41\x27\x93\x94\xd2\xff\x5e\x4a\x6c\xa8\x37\x81\xf4\xf4\x7d\x2f\xa6\x4b\x31\xc7\x9b\x96\x6b\xa7\x63\x75\xb1\x7d\x87\xc1\x4a\xc2\xc3\x6d\xdf\xbd\x6c\xb7\xef\xaf\x7d\x4f\xb4\x5e\xa3\x0f\x16\x2f\x0e\x2f\x30\xf1\xd1\x32\x38\x83\xcd\xf8\x0b\x65\x40\x57\x54\x25\x78\x31\x4c\x5f\x2a\xae\xd1\xcf\x60\xd5\xbf\xb5\x9f\x25\x1a\x92\x38\x9f\xd8\x99\x88\x43\x90\x5a\x1b\x56\x6d\x31\x8c\x19\x89\x63\x6e\xc2\x3d\xb9\xcb\x27\xb9\x6d\xf0\xb1\xcb\xfe\xf8\xd4\x6e\x70\x58\xb8\xad\xa6\xe9\x88\x6f\x22\x00\x50\x71\x84\x99\xf9\xbc\x2c\xb2\xfa\x14\x9f\x7d\x9a\xf6\x7e\x3f\xc9\xcf\x91\xc3\x7f\xea\x91\xe8\xe7\x37\x00\x00\xff\xff\xc0\x0e\x28\x76\x11\x01\x00\x00"

func quorumcertificateScriptsGet_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_clustersCdc,
		"quorumCertificate/scripts/get_clusters.cdc",
	)
}

func quorumcertificateScriptsGet_clustersCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x48, 0xd8, 0xc7, 0x4d, 0x2d, 0x1b, 0xe2, 0x53, 0xed, 0x2e, 0xeb, 0x53, 0x68, 0x55, 0xf5, 0x45, 0x85, 0xb3, 0xc3, 0xcb, 0x4c, 0x91, 0xf7, 0xd5, 0x35, 0xad, 0x9a, 0x60, 0x5b, 0xcb, 0x89}}
	return a, nil
}

var _quorumcertificateScriptsGet_node_has_votedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x6f\xd3\x40\x10\x85\xef\xfb\x2b\xde\xa9\x4a\xa4\x2a\xe1\xdc\x1b\x24\x45\xf4\x82\x68\x5c\xb8\x4f\xed\x71\x76\xd5\xf5\x8c\xb5\x33\x8e\x41\x88\xff\x8e\xd6\x4e\x24\xe8\xd9\x9e\xf7\xbe\xf7\x6d\x1a\x46\x2d\x8e\xcf\x59\xe7\x43\x9e\xcc\xb9\x3c\x1f\xd0\x17\x1d\xf0\xe1\xe7\xf3\xe1\xe3\xf1\x78\x7a\x6c\x9a\x10\xf6\x7b\x9c\xd8\xa7\x22\x06\xc2\xab\x6a\x66\x12\x24\xe9\x52\x4b\x9e\xe4\x8c\xd4\x83\x20\xda\x31\x22\x19\x6c\x7a\x1d\x92\x3b\x77\x20\x5c\xd4\x19\xbd\x16\x78\x4c\x06\x1e\xb5\x8d\x21\x50\xdb\xb2\xd9\x86\x72\xde\xa2\x9f\x04\x03\x25\xd9\xd4\xf3\xa7\xe3\x03\x1a\x2f\x49\xce\xdb\x07\x7c\x52\xcd\xf8\x1d\x02\x00\xec\xf7\x78\xea\x31\x33\xa8\x30\x92\xc0\x23\xc3\x9c\xde\x6a\x39\x4d\xad\x27\x15\x8c\x91\x8c\xb1\xb9\xe8\x82\x24\xea\xf5\xc7\xb1\xe8\xb9\xb0\xd9\xf6\x7e\xb9\xa9\x38\x76\x4b\x5c\x76\x66\x32\x5f\xb9\x96\x6c\xf3\x94\x33\xcc\xb5\x54\x7c\xe9\x96\x55\x5f\xc8\x7e\x68\xdd\x53\xb8\xea\x32\xbc\x94\x89\x77\x68\x92\xb4\x8c\x99\x6f\x79\x2a\xf9\x17\x66\x12\x87\x2b\xde\x44\x67\xcc\x91\x3d\x72\xa9\xe0\x91\x2e\x6b\x7d\x77\xd5\xc1\x38\x7c\x3f\x9d\x1e\xbf\xbe\xac\xed\xf7\xd0\x21\xf9\xaa\xa9\x25\xe3\xdd\x92\x5a\x16\xeb\xff\xbf\xcf\x2e\xc9\xb7\xeb\x2a\xdc\xdd\xbd\xfb\xf6\x2f\xee\x55\xe9\x36\x84\x3f\x7f\x03\x00\x00\xff\xff\xf4\xed\x7f\xae\xe8\x01\x00\x00"

func quorumcertificateScriptsGet_node_has_votedCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_node_has_votedCdc,
		"quorumCertificate/scripts/get_node_has_voted.cdc",
	)
}

func quorumcertificateScriptsGet_node_has_votedCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_node_has_votedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_node_has_voted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x1a, 0x33, 0x57, 0xd0, 0x60, 0xe9, 0xde, 0xa1, 0x2a, 0x25, 0x87, 0x6c, 0x9, 0xfe, 0x8d, 0x8c, 0x10, 0x40, 0x41, 0x74, 0x7b, 0xc8, 0x3d, 0x1b, 0x1, 0xfb, 0x9a, 0xe4, 0x4e, 0x61, 0x94}}
	return a, nil
}

var _quorumcertificateScriptsGet_node_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x5e\x6f\x09\x48\xa9\x20\x3d\x14\x7a\x90\x44\x21\xc7\x1a\xc4\x43\xe9\x61\x49\x27\x71\x61\x33\x2b\x3b\x13\x2c\x84\xfc\x77\x49\x36\x88\xe2\xc9\xb9\x0d\xf3\xbe\xf7\x31\xae\xff\x08\x51\xf1\xec\xc3\x67\xe1\x07\x51\x8a\xa7\x02\x6d\x0c\x3d\x76\xb7\x53\xf1\x58\x96\x2f\x4f\x75\x6d\x8c\x6d\x1a\x12\xc9\xac\xf7\x39\xda\x81\xd1\x5b\xc7\x59\x93\x80\x8a\xaf\x74\x3b\xe0\xb5\x62\xbd\xdf\xdf\x81\xc3\x95\xaa\xf2\x80\x5a\xa3\xe3\x2e\x4f\x87\xfd\x03\x46\x63\x00\xc0\x93\x62\x05\x05\xc7\xdf\xe2\x6d\x47\xba\x2e\x92\xe5\x29\xef\xda\xef\xf8\xf9\xa7\xf0\xb2\x9d\x45\x6f\xe4\xba\x77\x95\x73\x92\x5e\xb0\x39\x82\x9d\xc7\xb8\xa0\xf3\x44\xd2\x21\xf2\x3f\x2a\x36\x0b\x3a\x81\xbc\xd0\xdf\x9e\x1d\xac\xac\x0f\xa5\x9c\x31\xd3\x57\x00\x00\x00\xff\xff\xe0\x8f\x48\xf8\x43\x01\x00\x00"

func quorumcertificateScriptsGet_node_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_node_weightCdc,
		"quorumCertificate/scripts/get_node_weight.cdc",
	)
}

func quorumcertificateScriptsGet_node_weightCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_node_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_node_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0xbc, 0xc8, 0xca, 0x86, 0x57, 0x6c, 0xe8, 0xd3, 0xaf, 0x8c, 0xa, 0x39, 0xc9, 0x48, 0x9b, 0xb4, 0xf6, 0x81, 0x54, 0x5a, 0xcc, 0x8f, 0x4a, 0xc8, 0xcc, 0x5e, 0x54, 0x10, 0xec, 0xe1, 0x27}}
	return a, nil
}

var _quorumcertificateScriptsGet_qc_enabledCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x63\xbb\x20\x66\x36\x48\x61\xa6\xf4\x04\x51\xe5\xa2\x48\x8e\x8d\xec\x44\x20\x21\xee\xce\xdc\x0b\xbc\x52\x5f\xe6\x0d\x37\xb1\x77\x92\x1e\x8d\x7d\x4e\xd8\xdc\x2a\x8e\x9f\x39\x9d\xa7\xe9\x71\x5d\x16\xa2\xbc\xae\x1c\x31\x64\x91\x11\x5b\x57\xd4\x5c\x74\x18\x4f\xb8\x98\x09\xbe\x44\x00\xe0\xdc\xba\xeb\x9e\x3a\x14\xbd\xbb\x3d\x9d\x23\x88\x7e\xff\x00\x00\x00\xff\xff\xf9\xab\x7c\xd5\x6d\x00\x00\x00"

func quorumcertificateScriptsGet_qc_enabledCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_qc_enabledCdc,
		"quorumCertificate/scripts/get_qc_enabled.cdc",
	)
}

func quorumcertificateScriptsGet_qc_enabledCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_qc_enabledCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_qc_enabled.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xcd, 0xad, 0xd, 0x7, 0x98, 0x9e, 0xfe, 0xa3, 0xe1, 0x47, 0x98, 0x92, 0xb9, 0x63, 0x1e, 0xb, 0x3b, 0x3d, 0xf3, 0x6b, 0x5c, 0x5e, 0x33, 0x8a, 0xa9, 0x32, 0xc4, 0x22, 0xbd, 0x99, 0x7a}}
	return a, nil
}

var _quorumcertificateScriptsGet_voter_is_registeredCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x4e\x85\x40\x10\x45\xfb\xf9\x8a\x5b\x42\x23\xd6\x74\x0a\x9a\x50\x02\x5f\xb0\xc2\x2c\x99\x64\x99\x31\xb3\x0b\x9a\x18\xff\xdd\x60\x5e\x5e\xf2\xfa\x7b\xcf\x39\xb2\x7f\x9a\x17\xbc\x27\xfb\xea\xd2\x91\x0b\xfb\xd8\x21\xba\xed\x78\xfe\x1e\xbb\x97\xbe\x9f\xde\xe6\x99\xa8\x69\x30\x71\x39\x5c\x33\x02\x3e\xcc\x12\x07\x85\xe8\x2a\x4b\x28\xa2\x1b\x24\x22\x40\x6d\x65\x48\x86\xf3\x26\x17\x89\x57\x44\x73\x9c\x76\x4d\x88\xc2\xb2\x70\xce\x55\x48\xa9\x46\x3c\x14\x7b\x10\xad\xae\xcf\xd0\xb7\x98\x8b\x8b\x6e\x75\x8b\x57\xb3\x84\x1f\x22\x00\xf0\x7f\xe5\x63\xdc\xd3\x69\x85\x7d\xc8\xd3\x5d\x72\x63\xd4\x44\xbf\x7f\x01\x00\x00\xff\xff\x41\x14\xef\x9c\xce\x00\x00\x00"

func quorumcertificateScriptsGet_voter_is_registeredCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_voter_is_registeredCdc,
		"quorumCertificate/scripts/get_voter_is_registered.cdc",
	)
}

func quorumcertificateScriptsGet_voter_is_registeredCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_voter_is_registeredCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_voter_is_registered.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x82, 0xb4, 0x6f, 0x91, 0xac, 0xd, 0xe4, 0x8b, 0xbd, 0xea, 0xe9, 0xc5, 0xc5, 0x77, 0xff, 0xb7, 0x10, 0x20, 0xa5, 0x2d, 0xa1, 0x47, 0xc9, 0x5d, 0x95, 0xe8, 0xbe, 0x41, 0xbb, 0xa1, 0x9e}}
	return a, nil
}

var _quorumcertificateScriptsGet_voting_completedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\x4e\x03\x31\x10\x05\xd0\x7e\x4e\xf1\xcb\xdd\x86\x50\xd3\x81\x03\x7d\x92\x13\x4c\xec\x31\x3b\x92\xed\x59\xd9\xe3\x05\x09\x71\x77\x04\x1d\x27\x78\x4f\xeb\x6e\xdd\xf1\x56\xec\x23\x94\x39\x5c\xfa\x25\x20\x77\xab\x78\xfc\xbc\x84\xe7\xf3\xf9\xfa\x7a\xbb\x11\x9d\x4e\xb8\x8a\xcf\xde\x06\x18\x77\xb3\x22\xdc\xa0\x2d\x69\x64\xd7\xf6\x0e\xcd\x60\x34\x4b\x82\x8d\x07\xc6\xbc\x57\x75\x97\x04\xc6\x61\x2e\xc8\xd6\xe1\x9b\x0e\xc8\x6e\x71\x23\xe2\x18\x65\x8c\x85\x4b\x59\x91\x67\x43\x65\x6d\xcb\xfa\x84\x17\xb3\x82\x2f\x22\x00\xe8\x7f\xde\xff\xd9\xc3\x61\xbf\x5c\xb0\xba\x17\x71\x49\xcb\x4a\xf4\xfd\x13\x00\x00\xff\xff\xad\x10\x1a\xa5\xc3\x00\x00\x00"

func quorumcertificateScriptsGet_voting_completedCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_voting_completedCdc,
		"quorumCertificate/scripts/get_voting_completed.cdc",
	)
}

func quorumcertificateScriptsGet_voting_completedCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_voting_completedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_voting_completed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x73, 0xa6, 0xe8, 0x90, 0xf, 0x17, 0xcf, 0xf6, 0xd5, 0x87, 0xb5, 0xa1, 0x17, 0x17, 0xdb, 0x32, 0x50, 0xb1, 0x43, 0x64, 0xaa, 0xb0, 0x2c, 0xf7, 0xaf, 0x3c, 0xdc, 0xce, 0x6e, 0x4d, 0x70}}
	return a, nil
}

var _quorumcertificateSubmit_voteCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x51\xcf\x93\x40\x10\x7c\xbf\x5f\x31\xf9\x1e\x94\x26\x5a\x7c\x26\xea\x17\x42\xf5\xcd\xa4\x2d\xc6\xf7\x2b\x2c\x70\x29\xdc\xe1\xde\x9e\xad\x31\xfd\xef\xe6\x38\xdb\xb4\x8d\x9b\x90\xb0\xbb\x33\xb3\xc3\x60\xa6\xd9\xb1\xe0\xeb\xe8\x4e\xd5\x18\xbc\x10\xef\x2a\x74\xec\x26\x7c\x38\xef\xaa\x72\xb3\xd9\x7f\xa9\x6b\xa5\xf2\x1c\x25\xac\x6b\x09\xbf\x9c\x10\x23\x78\xf2\x90\xc1\x78\x08\x6b\xeb\x75\x23\xc6\x59\x88\x83\x0f\x87\xc9\x08\x34\x76\xd5\x02\x55\x79\x1e\xc9\x5b\xcd\x7a\x22\x21\xf6\x45\x6c\xe3\x13\xb7\xb5\xe9\xad\x96\xc0\x54\xe0\xfb\x40\xf0\xa6\xb7\xd4\x62\x22\xef\x75\x4f\x08\xde\xd8\x1e\x32\xd0\x72\xf9\xad\x87\x17\x7d\x8c\xa3\x23\xfd\xbe\x2a\x7c\x4b\xd8\xc4\x1f\xe8\xfc\x9e\x6c\xe3\x5a\x6a\xe1\x85\x23\xd4\x75\x8b\x00\xeb\xd3\x55\x56\xa9\x3b\xcb\xd9\x93\x8b\x7a\x61\xbd\x7b\x94\x4e\xc3\x15\xfe\x28\x05\x00\x33\xd3\xac\x99\xb2\xc5\x2d\x17\x28\x83\x0c\x65\xd3\xb8\x60\x25\x62\xf0\xaf\x46\x92\x14\xd6\x9e\x3a\x7c\x4a\xdf\xc6\xeb\x83\x63\x76\xa7\x8f\x6f\x1e\x02\x5f\xff\x88\xb8\xcf\x59\xcc\xbd\xc0\x7f\x56\xb5\x38\xd6\x3d\x6d\xb5\x0c\xab\xdb\x81\x58\xaf\xaf\x98\xb5\x35\x4d\xf6\x52\xb9\x30\xb6\xb0\x4e\x90\x4e\x80\xa9\x23\x26\xdb\x50\xfc\x2d\x3f\x9b\xe4\xe5\x65\xa5\x6e\xfc\xab\xb9\x75\x7c\x79\x0e\xe2\xa1\x7d\xca\xe3\xae\x49\x6e\x2e\xea\xf2\x37\x00\x00\xff\xff\x81\x4d\x6f\x1c\x48\x02\x00\x00"

func quorumcertificateSubmit_voteCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateSubmit_voteCdc,
		"quorumCertificate/submit_vote.cdc",
	)
}

func quorumcertificateSubmit_voteCdc() (*asset, error) {
	bytes, err := quorumcertificateSubmit_voteCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/submit_vote.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x97, 0xf6, 0x2f, 0x9, 0xa3, 0xbc, 0x7e, 0x74, 0xb2, 0xa3, 0xe, 0xf0, 0x38, 0x14, 0x3e, 0x45, 0xca, 0xa1, 0xa1, 0x7f, 0xa4, 0x86, 0x99, 0x91, 0x81, 0xb3, 0x63, 0x6d, 0x75, 0x3b, 0xe}}
	return a, nil
}

var _stakingcollectionClose_stakeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xd4\x40\x0c\xbd\xe7\x2b\xac\x1e\xd0\x56\xaa\xb6\x08\x6e\x11\xb0\x8a\xb2\x05\x45\x54\x2d\x6a\x96\x0f\x70\x26\x4e\x32\x30\x19\x47\x33\x4e\x5b\x84\xfa\xef\x68\x66\x48\x40\xdd\x3d\xac\x0f\x89\xfc\x64\xbf\xf7\x6c\x8f\x1e\x27\x76\x02\x9f\x0d\x3f\xd5\x82\x3f\xb5\xed\x4b\x36\x86\x94\x68\xb6\xd0\x39\x1e\xe1\xed\x73\x7d\x28\xbe\x56\x77\x5f\xca\xfb\xdb\xdb\x9b\xf2\x50\xdd\xdf\x15\xfb\xfd\xc3\x4d\x5d\x67\xd9\xf5\x35\x94\x86\x3d\x79\xe0\x59\x00\xc1\x27\x0a\xe0\xe6\x07\x29\x01\x6d\x41\x06\x5a\x51\xb5\x32\x87\xc6\xc3\xa0\x3d\xb4\x4c\x1e\x2c\x0b\x38\x1a\xf9\x91\x62\xb9\x23\xc5\xae\x4d\xe2\x21\xd7\x2d\x59\xd1\xf2\x0b\x04\x1b\x43\x57\xa1\xb7\x99\x05\xb4\xa4\xee\x91\x30\xc8\xa0\xc4\x62\x54\x8a\x67\x2b\x09\x50\xc9\x9b\x16\x50\x68\x83\x0a\x3d\x92\x0b\x25\xe4\x23\x8a\x3d\x6a\x9b\x65\xe2\xd0\x7a\x8c\xc6\x36\x96\x5b\xaa\xf6\x39\xd4\xe2\xb4\xed\xaf\xa0\x25\x43\x3d\x0a\xbb\x00\x7e\xaf\xac\xbc\x7f\xb7\xbb\x84\xdf\x19\x00\x40\xfc\x18\x92\x65\xc0\x7f\x9b\x7b\xa0\x2e\x87\x37\x27\x97\xba\x3d\x42\xb2\xc8\x33\x39\x9a\xd0\xd1\xe6\xef\x00\x39\x14\xb3\x0c\x45\x4a\x16\xc1\x10\x9e\x4c\xb7\x3d\x25\x08\x1f\x97\xe1\xb7\x0d\x3b\xc7\x4f\x1f\xce\x35\xf0\x69\x13\x76\x9d\x9f\x7e\x04\xc7\xe5\xb5\xb0\xc3\x9e\xbe\xa1\x0c\x97\xab\xad\x10\xbb\x1d\x4c\x68\xb5\xda\x5c\x94\x3c\x9b\x36\xde\x35\x59\x01\x47\x1d\x08\xc3\x11\xd7\x45\x62\x78\x49\x3b\xa0\x67\x52\xb3\xd0\x39\xd3\x6e\xe3\x6d\x03\x1f\xad\x37\x4b\xff\x57\x37\xfb\x2f\x59\xb4\x5e\xb2\x3f\x01\x00\x00\xff\xff\x6e\x12\x74\xdf\xf6\x02\x00\x00"

func stakingcollectionClose_stakeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionClose_stakeCdc,
		"stakingCollection/close_stake.cdc",
	)
}

func stakingcollectionClose_stakeCdc() (*asset, error) {
	bytes, err := stakingcollectionClose_stakeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/close_stake.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x59, 0x8d, 0x88, 0x8f, 0x9d, 0x2f, 0x9b, 0x93, 0x92, 0x8c, 0x12, 0x2b, 0xb, 0x67, 0x85, 0x23, 0x87, 0x27, 0x5b, 0x5f, 0x46, 0x81, 0x35, 0x3e, 0x3d, 0x28, 0xbf, 0xd8, 0x89, 0xc8, 0x19}}
	return a, nil
}

var _stakingcollectionCreate_machine_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x5e\x73\xa8\x1c\xc9\x22\x39\xa3\xba\x91\x85\x9d\xca\xb2\xeb\x54\x21\xb7\xaa\x87\x0d\x0c\xb0\xf2\x7a\x17\xed\x8e\xeb\xd0\xc6\xff\xbd\x5a\xc0\xc4\x9f\x52\xf7\x00\xcc\x2e\x33\xef\xcd\x9b\xb7\x72\x5d\x19\xcb\x88\x6d\x5d\xb1\x09\xba\xe8\x51\x99\x6d\xc2\x62\x25\x75\x11\x1b\xa5\x28\x65\x69\x34\x72\x6b\xd6\xb8\x7f\x4b\x5e\xc6\xf3\xd9\xf2\x5b\xfc\xb4\x58\x4c\xe3\x97\xd9\xd3\x72\x3c\x99\x3c\x4f\x93\x24\x08\xee\xee\xee\x10\x5b\x12\x4c\x0e\x02\x6b\x91\x96\x52\x13\x44\x9a\x9a\x8d\x66\xe4\xc6\x42\x40\x9b\x8c\xc0\xa5\x60\x48\x07\xa1\x2c\x89\xac\x86\xd4\xe0\x92\xe0\x5a\x48\xa4\x3d\x66\x53\x52\xe8\x0c\x22\xcb\x1c\xaa\xcd\xab\x92\x29\x56\x54\x3b\xb0\x69\x52\x34\x6d\xf7\x00\x41\xc0\x56\x68\x27\x9a\xc4\x81\xc7\x99\x4d\x22\x24\x6c\xa5\x2e\x86\x5d\xee\x9c\x6a\x17\xe1\x67\xdb\x6d\x38\xa7\x7a\x21\x1d\x4f\x35\xdb\xfa\xd7\x2d\xfe\x06\x00\xd0\x3c\x14\xf1\x9e\xcd\x87\x00\xcf\x94\x47\xf8\x7c\x51\x9b\xf0\x6c\x27\x68\xea\x54\x96\x2a\x61\x69\xd0\x51\x8c\x30\xde\x70\x39\x6e\x83\x3d\xa0\x5f\x8e\x54\x1e\x5e\x02\xc4\x68\xdf\x5e\xf8\x6a\xac\x35\xdb\x2f\xff\x4b\xe0\xeb\xc0\xcf\x2b\xba\x3c\xcb\xf3\xdf\x13\x36\x56\x14\xf4\x43\x70\x79\xdb\xd3\xf2\xeb\xe1\x01\x95\xd0\x32\x1d\xdc\xc4\x66\xa3\x32\x68\xc3\x68\xa9\xc0\x52\xee\xe7\x70\x56\xeb\xe6\x36\xe8\x4b\xc8\xbc\x11\xb3\x33\x43\xd7\x3a\x46\xd7\x3b\x0e\xd3\xc6\x41\xdf\x8f\x12\x1e\x8d\x9d\xbe\x49\xc7\x52\x17\x4b\x93\x51\x3f\xdd\xf6\x3d\x44\x25\x6a\xb2\xd1\x5e\xaa\x43\x65\x3b\x0e\x1f\xe3\xc7\x68\x04\x2d\x15\xde\xdf\x0f\x36\x3f\x85\x8a\x74\xc1\xa5\x3f\xbc\x3f\xc9\x6e\xe6\xd8\x29\x20\xb4\x6f\xbf\xb2\xe6\xb7\xcc\x08\x7f\xc8\x9a\xd6\x8d\xde\xdb\xde\x8e\x27\x9e\xbf\x39\x96\x72\x77\x14\xf9\x9c\x15\x35\xe6\x3f\x60\x77\x8e\x7d\x2c\x5d\xe8\xf1\x42\x91\x65\x83\x3e\x29\xf2\x65\xc2\x3e\x1c\xa2\x14\xae\x1c\xab\xc2\x58\xc9\xe5\xba\x3d\x3d\xda\x1a\x62\x4b\xb2\x28\xb9\x3d\x6a\xbf\xaf\x31\xdd\x81\x94\xa3\x13\x5a\x67\x86\x68\x67\x76\xe5\xd2\x37\xf7\xd4\x64\x74\xa0\x46\x5b\x7f\x17\xec\x82\x7f\x01\x00\x00\xff\xff\x33\xed\x36\xa1\x80\x04\x00\x00"

func stakingcollectionCreate_machine_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionCreate_machine_accountCdc,
		"stakingCollection/create_machine_account.cdc",
	)
}

func stakingcollectionCreate_machine_accountCdc() (*asset, error) {
	bytes, err := stakingcollectionCreate_machine_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/create_machine_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xa9, 0xbc, 0xef, 0x3, 0x1e, 0x98, 0xd6, 0x4d, 0xb8, 0xc3, 0xa3, 0x9c, 0x38, 0x31, 0xcb, 0x72, 0x80, 0xa, 0x1, 0xee, 0xd9, 0x6, 0xe8, 0xc7, 0xe8, 0x77, 0x86, 0xd5, 0xd5, 0xae, 0x7f}}
	return a, nil
}

var _stakingcollectionCreate_new_tokenholder_acctCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdf\x6f\x22\x37\x10\x7e\xe7\xaf\x98\xde\x43\x05\x12\x81\x3e\xa3\xe4\x24\x44\xe8\x35\x82\x5e\xa2\x42\xfb\x52\xf5\xc1\x59\x0f\xac\x8b\xb1\x57\xf6\x40\x0e\x45\xf9\xdf\x2b\xff\xd8\x5d\x1b\x16\x5d\x22\x55\x3a\x5e\x12\xaf\x67\xbe\xf9\xbe\xf9\xb5\x2b\xf6\x95\x36\x04\x33\x73\xaa\x48\xf7\xe2\xe9\x57\xa9\x5f\xd6\x7a\x87\x0a\x36\x46\xef\xe1\x53\x73\xfe\x54\x5b\x2c\x75\xb1\x43\xee\x9f\xd9\x60\xf4\xcb\xb7\xe5\xe3\x6c\x31\xbf\x5f\x3f\x2e\xe6\x5f\xa7\xf7\xf7\x7f\xcc\x57\xab\x14\x6f\x45\x6c\x27\xd4\x76\xa6\xa5\xc4\x82\x84\x56\xb5\xdb\x6a\x3d\x5d\x3c\x7c\xfd\x32\x7b\x5c\x2e\xe7\xb3\xf5\xc3\x63\xe3\xdc\x1b\x8f\x61\x5d\x0a\x0b\x64\x98\xb2\x2c\x38\x31\x29\xf5\x8b\x05\x2a\x11\x0a\xad\xc8\x38\x38\x03\x7a\xe3\x9f\x48\xcf\x0a\x58\x51\xe8\x83\x22\xe7\x4f\x1a\x0a\x83\x8c\x10\x18\x28\x7c\xc9\x78\x8f\xfc\x9f\xdf\xb4\xe4\x0e\xe1\xf9\x5f\x2c\x08\x98\xe2\x60\x49\x1b\x04\x41\x20\x54\xf4\x4a\x00\x99\xb4\x1a\x18\xe7\x42\x6d\x81\x81\x0d\xa2\xa0\x68\x55\x45\x20\xd2\x9e\x51\xea\xed\xdc\x17\x88\x95\xc3\xdd\x0b\xc5\x81\x4a\x46\x40\x4e\x21\xd7\x68\x41\x69\x17\xf2\xc8\xa4\xe0\x8e\xb0\x73\xc7\x6f\xc2\x92\x0b\x90\x52\x4d\xd8\xac\x75\xee\xc1\xa8\xbe\x1d\xc2\x49\x1f\x40\x21\x72\x47\x05\x05\x95\x68\x80\xa3\xc4\x88\x9c\x02\x1a\xb4\xfa\x60\x0a\x74\x88\xda\x1d\x8f\x7a\x87\x2e\xd3\xb0\xc3\x53\x2c\x6f\x8a\xdd\xeb\x25\x15\xe9\x57\x87\x67\x29\x8a\x05\x9e\xec\x04\xfe\x0e\x7d\x34\x5a\xe0\x69\x29\x2c\xcd\x15\x99\xd3\x3f\x03\x78\xed\x01\x00\x54\x06\x2b\x66\xb0\x6f\xc5\x56\xa1\x99\xc0\xf4\x40\xe5\x34\x20\x3a\x13\x6f\xe3\x7e\xe3\x31\xcc\x42\xcd\xce\x32\xe8\xab\xc3\x38\x87\x10\xd2\xb3\x6b\xbc\x24\x92\xb3\x8d\x80\x70\x97\xc2\xf7\x2b\x76\x72\x11\x43\xe4\x41\xe3\xb3\xd1\xc6\x81\xb8\x82\xb4\x2a\x22\xdb\xfa\xd7\x62\x8e\x5c\xbc\x11\xe3\xbc\x95\x3c\x71\xee\xa3\xe6\x38\x84\x92\xd9\x72\x2a\xb7\xda\x08\x2a\xf7\xe1\x36\x7b\x34\x84\x17\x14\xdb\x92\xc2\x55\xf8\xbf\xe5\xf3\x96\x25\xe1\x0b\x52\x5b\xaa\xdf\x99\x62\x5b\x34\x30\x63\x15\x7b\x16\x52\xd0\xa9\xae\xcb\x45\xdb\xa7\x19\xa1\xc4\x37\x71\xbd\x8b\xa9\xc8\x94\x8e\xb6\x48\xad\xcd\xed\xcf\xd9\xac\x24\x87\x08\xf7\xb9\x9f\x79\x7f\xc7\xfa\xc9\x88\x23\x23\x7c\x62\x54\x0e\x32\x95\x7f\xda\x50\xe7\x7d\x14\x58\xb4\x2c\xcf\x87\x37\xe9\xd9\x4b\x91\xb1\x97\x6f\x6f\x72\x26\x01\x20\xf1\xcc\x59\x87\xd4\x4d\x39\x37\x68\x6d\xdd\x20\xae\xc6\xee\x3c\xcc\x4c\xd3\x54\x4e\xae\x24\xb6\x71\xc8\x35\xae\xd8\xf1\xfa\xd4\x75\xac\x0a\xdf\xe8\x8d\xf4\xd8\xed\xc5\x65\x94\xa4\x37\x2d\x3b\x62\x2e\xed\xf6\x26\xc9\xcb\xb9\x94\xc9\xd5\x4d\xb8\x22\x6d\xd8\xd6\x17\x6a\xd8\x25\x27\x89\x29\x85\xda\x9d\xb5\x49\x02\xf4\xda\xd1\x11\xd1\xf3\x41\x6d\xf4\xdb\xf7\xfb\x27\xb1\x7e\xf2\x39\xc8\x49\x79\x25\xcc\x6c\x91\xde\xa5\x26\x15\xd3\xb1\x6b\xaa\xd0\xa0\x6d\x9a\x05\x5a\xbf\x20\x5c\x6d\x7c\x26\xa1\x8c\xfb\x57\x71\x38\xa8\x38\x74\x47\x76\x90\xf9\xc8\x85\x8b\x58\xe4\xbb\xf7\xe7\xeb\x73\x7f\x1c\x39\x8c\x37\xf5\xfb\x36\x16\xef\x23\x32\x07\x3f\x65\x6c\x1a\xa8\x2e\x2a\xcd\x7b\x7d\xf4\x97\x93\xd1\xc5\xc0\x5f\xb4\x04\xc6\x36\x44\x3a\x33\x48\x82\x76\xa4\x36\x4c\x6f\xfc\x00\x80\xe4\x0b\xc0\x65\xb2\x3a\x50\x7c\xd7\x46\xe8\x06\x40\x6c\xb2\x5c\x8e\x8a\x12\x8b\x5d\x7f\x70\x7d\x3f\xfb\x19\xb8\xbd\xe9\xfc\xda\x88\x8b\xe0\xe2\x79\xbf\xae\xa4\xd7\x31\x69\xf3\x35\x4c\xd7\xca\x24\x63\x32\x18\xfa\x09\xea\x8e\x73\xf1\x24\xad\x4d\xbb\xe9\x01\xa5\xc5\x1f\x23\x45\x09\xf9\x7f\x28\xe8\x1a\xa2\x66\x59\xb9\xfe\xaa\x17\xdb\xe5\x47\xd2\xf5\x65\xf2\x4e\x46\xaf\xef\xb4\x0b\x6b\xe3\x7c\xd5\x7c\xc8\xf9\xfa\xce\xf9\x78\xf6\x92\x15\x14\x52\xf8\xf6\x5f\x00\x00\x00\xff\xff\xd8\x77\x7b\x1b\x7f\x0b\x00\x00"

func stakingcollectionCreate_new_tokenholder_acctCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionCreate_new_tokenholder_acctCdc,
		"stakingCollection/create_new_tokenholder_acct.cdc",
	)
}

func stakingcollectionCreate_new_tokenholder_acctCdc() (*asset, error) {
	bytes, err := stakingcollectionCreate_new_tokenholder_acctCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/create_new_tokenholder_acct.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x5d, 0x78, 0x54, 0x9e, 0xa6, 0x98, 0x89, 0xca, 0x2a, 0xa0, 0x9a, 0xef, 0x95, 0x0, 0x7a, 0x23, 0x19, 0x27, 0x22, 0xd4, 0xba, 0x1f, 0x5b, 0xf5, 0xf, 0x2, 0x7, 0xc6, 0x61, 0x83, 0xaa}}
	return a, nil
}

var _stakingcollectionDeploy_collection_contractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xb1\x6a\xc4\x40\x0c\x44\xfb\xfd\x8a\x29\x6d\x08\x76\x7f\xdd\x41\x8a\x54\x69\x42\x3e\x40\x68\xc5\x9d\xb1\x2d\x99\x5d\x1d\x24\x84\xfb\xf7\xb0\x0a\x6b\xb2\x85\x16\x8d\x66\xe6\xcd\x33\x5e\xe5\xd8\xec\xbb\x82\xc0\xa6\x5e\x88\x1d\x6e\x20\x05\x31\xdb\x43\x3d\xcd\x33\x3e\xab\xe4\xa6\xe6\xf0\xc2\xef\x82\xea\xb4\x2e\x7a\x03\xdb\xb6\x09\xfb\x62\xda\x0c\x71\xa1\x5d\x7a\x18\x54\x43\xdb\x8c\xd7\xa8\x58\x45\xeb\x09\x4a\xc9\x0b\x69\xa5\x88\x0f\x5d\x7d\xa7\x5d\x2e\xf8\xf0\xb2\xe8\xed\x05\x6c\xf9\xdc\x46\xfc\x24\x00\x88\x71\x14\x39\xa8\xc8\x40\x79\x5f\xf4\x82\xeb\xc3\xef\xd7\x3f\x68\xb7\xb5\x17\xd7\xa9\x57\xd7\x89\x72\x1e\x34\x00\xff\x71\x1d\xd3\xe6\x94\xa5\x7d\x6f\xf2\x35\x8c\x63\xf4\x3c\xd3\x33\xfd\x06\x00\x00\xff\xff\xa7\x5f\x56\xfd\x29\x01\x00\x00"

func stakingcollectionDeploy_collection_contractCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionDeploy_collection_contractCdc,
		"stakingCollection/deploy_collection_contract.cdc",
	)
}

func stakingcollectionDeploy_collection_contractCdc() (*asset, error) {
	bytes, err := stakingcollectionDeploy_collection_contractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/deploy_collection_contract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x3e, 0xf2, 0xcf, 0xfd, 0x65, 0x3, 0xfc, 0xc1, 0x73, 0xff, 0x84, 0x1f, 0xad, 0xc6, 0xe3, 0x57, 0x8d, 0x57, 0x22, 0x89, 0xc2, 0x14, 0x62, 0x4d, 0x1f, 0x9d, 0xae, 0xb6, 0x6b, 0xe4, 0x55}}
	return a, nil
}

var _stakingcollectionRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\x82\x40\x10\xbd\xf3\x15\x13\x0f\x0d\x26\x0d\xf6\xd0\xf4\x40\xda\x1a\x02\xda\x98\x1a\x6d\xc4\x7e\xc0\x76\x19\x70\x23\xec\x90\x61\x88\x26\x8d\xff\xde\xc0\x62\x3d\xe8\xc1\x3d\x40\x60\x67\xde\x7b\xf3\xde\x98\xaa\x26\x16\x98\x97\x74\x48\x45\xed\x8d\x2d\x62\x2a\x4b\xd4\x62\xc8\x42\xce\x54\xc1\xd3\x31\xdd\x46\x9f\x8b\xd5\x47\xbc\x5e\x2e\x67\xf1\x76\xb1\x5e\x45\x49\xb2\x99\xa5\xa9\xe7\x4d\x26\x13\xd8\x60\x61\x1a\x41\x6e\x40\x41\x86\x25\x16\x4a\x88\xc1\x58\x90\x1d\x42\xe3\x30\x41\x5f\x40\x19\x1b\x6a\x59\x63\xdf\x9c\x13\xbb\xba\x1a\xb5\xc9\x0d\x66\x60\x29\xc3\x45\x02\xca\x66\xfd\x85\xaa\xa8\xb5\x02\x94\x83\xd0\x1e\x6d\x03\x42\xa0\xa9\xaa\x8c\x78\x9e\xb0\xb2\x8d\xea\x51\x7d\x93\x85\x90\x0a\x1b\x5b\x3c\x0e\x3d\x21\x7c\xcf\xcd\xf1\xe5\x79\x0c\xbf\x1e\x00\x40\xff\x28\x51\xce\x9a\x2e\x73\x6e\x30\x0f\xe1\xe1\xa6\x05\xc1\xd5\x1f\xaf\xc7\xa9\x19\x6b\xc5\xe8\x2b\xad\x1d\x57\xd4\xca\x2e\x72\x1f\x67\xc2\xee\x34\x58\xe6\xc1\x2d\x42\x78\x83\xa1\x37\xf8\x21\x66\x3a\xbc\xde\x2b\xe0\xdd\xef\x62\x09\x6f\x47\x76\x5d\x9e\x0a\xb1\x2a\xf0\x4b\xc9\x6e\xfc\x2f\xab\x3b\xd3\x29\xd4\xca\x1a\xed\x8f\x62\x6a\xcb\xce\x78\x01\x27\x05\x18\x3b\xbb\xe1\x0a\x6b\xe4\x10\x4e\xce\x03\x3c\xa2\x6e\x05\xef\x99\x36\xe0\x61\x49\x92\xf3\x82\xf8\x2e\xe7\x10\x4c\x76\x09\xcc\xbd\xc7\x0e\x6c\xa0\x3a\x79\x7f\x01\x00\x00\xff\xff\xdd\x5f\xdf\x77\xa3\x02\x00\x00"

func stakingcollectionRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_delegatorCdc,
		"stakingCollection/register_delegator.cdc",
	)
}

func stakingcollectionRegister_delegatorCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x18, 0x59, 0x73, 0x8c, 0xe4, 0x18, 0x5c, 0xc3, 0x6a, 0x63, 0xba, 0xf1, 0x3a, 0x2f, 0x4c, 0x28, 0x93, 0x6e, 0x5a, 0x61, 0x2f, 0xfc, 0x43, 0xe1, 0x29, 0x1a, 0xec, 0xc8, 0xdf, 0x45, 0x55}}
	return a, nil
}

var _stakingcollectionRegister_multiple_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xdb\x4e\x10\xc5\xef\xfa\x14\x8f\x1c\xfe\xc8\xfc\x8b\x9d\x42\xe9\x41\x34\x0d\xc6\x4e\x8a\x69\x48\x8a\x95\x9e\x82\x0f\x5b\x69\x24\x0f\x59\xed\x88\xdd\x51\x63\x28\xfe\xee\x65\x25\xcb\x49\xb1\x29\xdd\x83\x40\xc3\xec\x6f\xde\xbe\x37\xdc\xb4\xe2\x15\xb7\x56\x5e\x72\x35\xcf\xec\xea\x85\x58\x4b\x85\xb2\x38\x54\x5e\x1a\x5c\xee\xf2\xc7\xf9\xd7\xd5\xfd\x97\xc5\xc3\xdd\xdd\xcd\xe2\x71\xf5\x70\x3f\x5f\x2e\xd7\x37\x79\x9e\x24\xb3\xd9\x0c\x6b\xaa\x39\x28\xf9\x80\xa6\xb3\xca\xad\x25\x94\x64\xa9\x36\x2a\x3e\x80\x1d\x74\x4b\x08\x03\x1b\xc5\x2b\xdc\x53\x90\xce\x17\xd4\x43\x2a\xf1\x43\x5f\x4b\x05\x57\x4c\x25\x9c\x94\xb4\x5a\x06\x18\x57\xc2\x34\xd2\x39\x85\x54\x50\x79\x26\x17\xa0\x82\x42\x9a\x86\x35\x49\xd4\x1b\x17\x4c\x8f\x4c\xb9\x0c\x19\x9e\x72\xf5\xec\xea\xcd\xbb\xc3\xb5\x58\xfa\x7e\xcb\xbb\x8f\x1f\x36\x13\xfc\x4a\x00\xa0\xff\x58\xd2\x51\xd6\xeb\x93\xd7\x54\x65\xf8\xef\xac\x1b\xd3\x93\x4a\xd2\x73\x5a\x4f\xad\xf1\x94\x9a\xa2\x88\xe3\x32\xcc\x3b\xdd\xce\x87\x9f\x71\x60\x3c\x81\x6c\x35\x3d\x37\x10\x57\x38\xdc\x9d\xfe\x10\xef\xe5\xe5\xd3\xbf\x0a\xf8\x9c\xc6\x84\xb2\xf3\xe9\x9d\xb6\xe7\x2a\xde\xd4\xf4\xcd\xe8\x76\x72\x94\x15\xcf\xf5\x35\x5a\xe3\xb8\x48\x2f\x16\xd2\xd9\xe8\xbd\x62\x90\x02\x4f\xd1\x74\x9c\xb0\x2e\x06\xc2\x7e\xf0\x80\x76\x54\x74\x4a\x6f\x5e\xfb\xd3\x78\x30\xae\x70\x79\xac\xc4\x88\xb9\x8c\x0b\xc1\x65\x78\xd3\xf9\x57\x6f\xa6\xfe\xb0\x5d\xcb\x71\xa5\xd2\x61\x31\x32\x70\x39\x26\x9c\x8d\x49\x3f\xf1\x66\xd2\xe7\xfb\x07\x3c\xca\x60\xfc\x8f\xf7\xc7\xea\xfe\xa0\x7d\x9f\xfc\x0e\x00\x00\xff\xff\x07\x6b\xf3\x42\xff\x02\x00\x00"

func stakingcollectionRegister_multiple_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_multiple_delegatorsCdc,
		"stakingCollection/register_multiple_delegators.cdc",
	)
}

func stakingcollectionRegister_multiple_delegatorsCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_multiple_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_multiple_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x31, 0xb5, 0x31, 0x72, 0x2e, 0x40, 0x1a, 0xe0, 0xb2, 0x95, 0xdc, 0x95, 0xd2, 0xb2, 0xa6, 0xa4, 0x49, 0x7a, 0x4d, 0x6a, 0xfb, 0x84, 0x73, 0x52, 0x39, 0x78, 0xa8, 0xe1, 0x99, 0x65, 0x2e}}
	return a, nil
}

var _stakingcollectionRegister_multiple_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x5d\x4f\xdb\x30\x14\x86\xef\xf3\x2b\xce\xb8\x98\x5a\xad\x0a\x4c\x9a\xa6\x29\x5a\x87\xaa\x02\x13\x2a\x82\x89\xb2\xab\xaa\x17\x26\x3e\x49\x8e\x70\xec\xe8\xd8\xa5\x64\xc0\x7f\x9f\x9c\xa4\x1f\x21\xe9\x58\x2e\xaa\xfa\x7c\xbc\x7e\x73\xfc\x38\x94\x17\x86\x1d\x4c\xb9\x2c\x9c\x09\x9a\xd5\x85\x32\xeb\xb9\x13\x0f\xa4\xd3\xa9\x51\x0a\x63\x47\x46\x43\xc2\x26\x87\x93\xa7\xf9\xdd\x64\x76\x79\xfd\x73\x7a\x73\x75\x75\x3e\xbd\xbb\xbc\xb9\x9e\x9c\x9d\xdd\x9e\xcf\xe7\x41\x70\x7c\x7c\x0c\xb7\x98\x92\x75\xc8\x16\xf2\x95\x72\x54\x28\x04\x6d\x24\x5a\x20\x0d\x2e\x43\xb0\xb5\x2c\xc4\x3b\x5d\x46\x6b\x56\x1c\x63\xd5\x9f\x18\xae\xeb\x0a\x8c\x29\x21\x94\x55\x3b\x90\x4e\x0c\xe7\xc2\xd7\x07\x81\x63\xa1\xad\xa8\x9a\x07\x24\x6d\x04\x8b\xb9\x63\xd2\xe9\x72\x14\xc0\xde\xc3\x46\xa1\x4f\xfe\xbe\xd4\xee\xdb\x9b\x9c\x46\xb7\x36\xec\x9d\x4c\xa4\x64\xb4\x16\x0f\xca\xec\x4a\x67\x58\x1e\xac\x6a\xde\xeb\x5f\x25\x22\x37\x2b\xed\x2a\x47\x17\xf4\xf4\xf5\xcb\x9b\x74\xb1\xba\x57\x14\x37\x02\x8b\xfa\x40\xc2\x19\x96\x57\x64\xdd\xb9\x76\x5c\x2e\x4f\x97\x43\x78\xae\x7a\xaa\x1f\x85\x6e\xb3\xed\xee\x94\x6e\x31\x89\xe0\x63\xef\x01\x86\x9d\x48\x50\xe9\x14\x8c\x85\x60\x1c\x88\x38\xf6\x06\x23\x98\xac\x5c\x36\xa9\x17\x9b\x0d\xab\x57\x44\x95\x84\x7d\x1b\xc2\x18\x9a\xde\xf0\xde\x30\x9b\xf5\xf7\xff\x35\xf0\x63\xe0\xa1\x8a\xfa\x81\xeb\x96\xcf\x9d\x61\x91\xe2\x2f\xe1\xb2\x61\x6b\x76\xa7\xa7\x50\x08\x4d\xf1\xe0\x68\x6a\x56\xca\x33\xe3\xa0\xb6\x02\x8c\x09\x38\x03\x1d\xad\xa3\x61\xb0\x95\x78\x14\x0c\x04\x63\x38\xd9\x85\x3c\x87\x24\x3d\xb5\x24\xed\xde\x10\xfc\x43\x49\x35\xfb\x5c\xc4\x19\x69\x6c\x26\x05\xe3\xc3\x03\x0a\xb9\xb9\x15\xd7\x46\xe2\xa0\xa5\x55\xe9\xc9\x08\x48\x8e\x3a\x71\x0f\x70\x54\x63\xbc\xa0\x65\x37\xdf\x81\x38\xea\xe3\xfa\x9d\xd6\x19\x96\xd1\x1b\xc6\x7b\x3b\x76\x80\x47\xfb\xb0\xf7\xd6\xd6\xa4\x47\x1b\xe2\x7b\x6b\x0a\x51\x22\x47\x1b\x70\x86\xd0\x2a\x78\xee\xce\x28\xd9\xbb\x20\x0b\x5a\xc2\x78\x0c\x9a\x14\xbc\xbc\xb4\xe3\x1f\x42\x85\x3a\x75\x99\xcf\x9f\xf4\xe8\xd4\x5b\xd7\xa8\x08\xed\x39\x29\xd8\x3c\x92\x44\xf8\x83\x6c\xe0\x01\x4b\xbb\xfd\x06\x35\x07\xbc\xf1\x78\x34\xec\xa8\xbd\x76\x22\xbe\xf7\x01\x4b\x0f\x4e\xdb\xd7\x01\x2f\x6d\x88\x42\xbf\x7f\x28\xa4\x1c\x6c\x9b\x23\x2f\x17\x6e\x97\x23\xc8\x84\xcd\x26\x2a\x35\x4c\x2e\xcb\xeb\x6c\x2b\x34\x82\x35\x52\x9a\xb9\x3a\x55\xff\x7f\xcf\x79\x7b\xe5\xaf\x02\xc1\x27\xf8\x1c\xb4\xf3\xaf\xc1\x6b\xf0\x37\x00\x00\xff\xff\x09\x34\xd7\xde\x30\x06\x00\x00"

func stakingcollectionRegister_multiple_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_multiple_nodesCdc,
		"stakingCollection/register_multiple_nodes.cdc",
	)
}

func stakingcollectionRegister_multiple_nodesCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_multiple_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_multiple_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x8b, 0xd4, 0xe0, 0x9f, 0x32, 0x52, 0xb9, 0xc9, 0x8, 0x23, 0x5, 0x79, 0x81, 0x7e, 0x42, 0xcd, 0x96, 0x39, 0x91, 0x58, 0x2c, 0xf3, 0x42, 0x51, 0x86, 0x4b, 0xb9, 0x33, 0xf4, 0xff, 0x3a}}
	return a, nil
}

var _stakingcollectionRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xdb\x4e\x10\xbd\xfb\x53\xcc\x8f\xc3\x4f\x89\x84\x0c\x87\xaa\xaa\xac\xa6\x28\x0a\x50\xa1\x20\xa8\x08\x9c\xaa\x1e\x16\xef\xd8\x5e\x65\xbd\x63\x8d\x27\x0d\x2e\xe4\xbb\x57\xeb\xcd\x3f\x13\xa7\x6d\x0e\xce\xce\xce\xcc\x9b\x37\x7e\x4f\x36\x65\x45\x2c\x30\xe1\xa6\x12\x8a\xd6\xd1\xb5\xa5\xe5\x4c\xd4\xdc\xb8\x7c\x42\xd6\x62\x2a\x86\x1c\x64\x4c\x25\x9c\xbf\xcc\x1e\xc7\xd3\x9b\xbb\xaf\x93\xfb\xdb\xdb\xab\xc9\xe3\xcd\xfd\xdd\xf8\xf2\xf2\xe1\x6a\x36\x8b\xa2\xb3\xb3\x33\x78\xc0\xdc\xd4\x82\x5c\x83\x02\x8d\x16\x73\x25\xc4\x60\x1c\x48\x81\x50\x07\x4c\x48\x77\xa0\x8c\x35\x2d\x38\xc5\xb6\x39\x23\x0e\x75\x15\xa6\x26\x33\xa8\xc1\x91\x46\x30\x2e\x23\x2e\x55\x5b\xaf\x9c\x6e\x4b\x54\x49\x0b\x27\x40\x19\x08\xcd\xd1\xd5\x20\x04\x29\x95\xa5\x91\x28\x12\x56\xae\x56\x2d\xfe\xc0\xe8\x04\x66\xc2\xc6\xe5\xa7\x11\xec\xfd\x98\x2c\x26\xf0\x74\xe3\xe4\x53\x37\xe1\x50\x96\xc4\x9e\xe6\x58\x6b\xc6\xba\xee\xef\xdf\x95\x4d\xb1\xe9\x2f\x59\x6f\x7b\x34\x1f\x56\x48\xe0\xe9\xda\xbc\x7c\xfc\xd0\xcd\x55\x8b\x67\x6b\xd2\x29\x36\x75\x02\xdf\x83\x38\xf1\x14\x9b\x5b\x53\xcb\x95\x13\x6e\x7e\x5c\x0c\xe1\xb5\xed\x68\x1f\x16\x65\x33\x6e\x27\xd8\x03\x66\x09\xfc\xdf\xab\x65\x7c\x70\x13\xb5\x38\x15\x63\xa5\x18\x07\x2a\x4d\x03\xb7\xf1\x42\x8a\x71\x08\x36\x03\xdb\xd5\xd0\x66\x71\xdf\x40\x18\xc1\xba\x37\x7e\x26\x66\x5a\x7e\xfe\x57\x02\x5f\x06\xde\x5f\x49\xbf\xf7\x0e\xcb\x67\x42\xac\x72\xfc\xa6\xa4\x18\x76\xde\xdc\xc5\x05\x54\xca\x99\x74\x70\x32\xa1\x85\xf5\x0e\x12\x08\x54\x80\xd1\xbb\x05\x0e\xb0\x4e\x86\xd1\x16\xc2\x64\xed\xcb\x2c\x55\x5a\x18\x87\xeb\xd5\x61\x74\x7c\xe3\x98\xd7\x8e\xbf\x23\x8d\x83\x0e\x15\xef\x3d\xa3\xfb\x7c\xe7\x9f\x7f\xb5\xdd\xc1\xd5\x1f\x1d\xd8\x09\x8f\x1b\x71\x77\xee\x37\x63\xf8\x7f\x67\x46\xd5\x20\x27\x1b\x61\x87\xb0\x4d\xbe\x76\xd7\xcd\xf6\x6c\x0b\xa3\x11\x38\x63\xe1\xed\x6d\xef\xf2\xbf\xd8\xa2\xcb\xa5\xf0\xc9\xf3\x77\xdd\x61\x50\x10\x4e\x39\xaf\x5a\xc5\xf4\xd3\x68\x84\x5f\xc8\x04\x73\x8f\xb9\xf9\x3e\xac\xd5\xd9\x30\x3a\xe9\x3a\x60\xd5\x89\x7c\xcf\x1c\x1b\xff\x09\xda\x23\xd2\x33\xbc\x2b\x79\xec\x07\xc6\x4a\xeb\xc1\xb6\x2b\xf1\x38\xf1\x36\x3c\x85\x42\xd5\xc5\xd8\xe6\xc4\x46\x8a\x32\x64\x3b\x57\xa7\xb0\x44\x93\x17\x12\x52\xe1\x7c\x8c\x6a\x38\xad\xa2\x55\xf4\x3b\x00\x00\xff\xff\x67\xfb\x69\x9e\x92\x05\x00\x00"

func stakingcollectionRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_nodeCdc,
		"stakingCollection/register_node.cdc",
	)
}

func stakingcollectionRegister_nodeCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x5, 0x7e, 0x2a, 0xe2, 0xbe, 0x17, 0x25, 0x72, 0xa9, 0x5, 0x40, 0x5, 0xe3, 0xe4, 0xf8, 0x12, 0xf2, 0xe1, 0xd6, 0x2f, 0x88, 0x6e, 0xb6, 0xcd, 0xf8, 0x53, 0xe7, 0x20, 0x35, 0xfc, 0x3}}
	return a, nil
}

var _stakingcollectionRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x6b\xf2\x50\x0c\x7d\xef\xaf\x08\x3e\x7c\x54\x90\xfa\xb1\x8d\x3d\x94\x6d\x52\xaa\x8e\x32\xd1\x61\xf5\x07\xdc\xd5\xb4\x5e\x76\xbd\xe9\xd2\x14\x85\xe1\x7f\x1f\xf5\x5a\x1d\xd3\x07\xef\x43\x43\x42\x72\xce\x49\x4f\xf4\xa6\x24\x16\x18\x1b\xda\xa6\xa2\x3e\xb5\x2d\x62\x32\x06\x33\xd1\x64\x21\x67\xda\xc0\xff\x5d\xba\x88\xde\x92\xe9\x6b\x3c\x9b\x4c\x46\xf1\x22\x99\x4d\xa3\xe1\x70\x3e\x4a\x53\xcf\xeb\xf7\xfb\x30\xc7\xaf\x1a\x2b\xa9\xa0\xb6\x95\x43\x80\x9c\x18\x64\x8d\x50\x95\x98\xe9\x5c\xe3\x0a\x2c\xad\x10\x88\x61\x85\x06\x0b\x25\xc4\xa0\xad\x6b\x39\x8e\x64\x27\x56\xcf\x13\x56\xb6\x52\x87\xc4\x6f\x06\x93\x61\x08\xa9\xb0\xb6\x45\xef\x0c\xd0\x14\x97\x89\x95\xfb\xbb\x41\x0f\xd4\x86\x6a\x2b\x21\x2c\xc7\x7a\xf7\xf8\xd0\x85\x6f\x0f\x00\xe0\xf0\x31\x28\x2d\xc9\x79\xb3\x39\xe6\x21\xfc\xbb\xba\x74\x70\x51\xf1\x0e\x38\x25\x63\xa9\x18\x7d\x95\x65\x8e\x2b\xaa\x65\x1d\xb9\xa4\x25\x6c\x5e\x85\x26\x0f\xae\x11\xc2\x33\x1c\x67\x83\x0f\x62\xa6\xed\xd3\xad\x02\x5e\xfc\xc6\x88\xf0\xba\x49\x97\xed\xa9\x10\xab\x02\xdf\x95\xac\xbb\x27\x59\xcd\x1b\x0c\xa0\x54\x56\x67\x7e\x27\xa6\xda\x34\xa6\x08\x38\x29\xc0\x98\x83\x10\x5c\x60\x75\x1c\xc2\xde\xfd\x03\xdc\x61\x56\x0b\xde\xb2\x6d\xc0\xee\x2c\x96\xed\x51\x9c\x9c\x74\xf1\x8f\x93\xbf\x92\xb3\x9b\x2e\xb6\x0a\xf6\xde\x4f\x00\x00\x00\xff\xff\x78\x58\xc1\x42\xac\x02\x00\x00"

func stakingcollectionRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRequest_unstakingCdc,
		"stakingCollection/request_unstaking.cdc",
	)
}

func stakingcollectionRequest_unstakingCdc() (*asset, error) {
	bytes, err := stakingcollectionRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0xea, 0x1c, 0x7d, 0xa0, 0xfd, 0x94, 0xf6, 0x62, 0xff, 0xe2, 0x56, 0x30, 0xb4, 0x51, 0x60, 0x6f, 0x63, 0xec, 0x73, 0xb9, 0x24, 0x10, 0xba, 0xd2, 0x4e, 0xda, 0x1f, 0x16, 0xf4, 0xe2, 0xd}}
	return a, nil
}

var _stakingcollectionRestake_all_stakersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xd1\x8a\xdb\x30\x10\x7c\xd7\x57\x2c\x79\x28\x0e\x1c\x4e\x9f\x43\xd3\x23\xd8\xd7\x12\x7a\xf8\x4a\x9c\x1f\xd0\xd9\xeb\x9c\x89\xac\x0d\xf2\x86\x1c\x1c\xf9\xf7\x22\xcb\x91\xed\xd8\x69\x0b\xad\x1f\x44\x22\xed\xce\xce\xce\x4c\x59\x1d\xc9\x30\x7c\x53\x74\x4e\x59\x1e\x4a\xbd\x8f\x48\x29\xcc\xb8\x24\x0d\x85\xa1\x0a\x3e\xbf\xa7\xbb\xf5\x8f\x4d\xf2\x3d\x7a\x79\x7e\x7e\x8a\x76\x9b\x97\x64\x1d\xc7\xdb\xa7\x34\x15\xbd\xe6\x4d\xbc\x93\xaf\x0a\x5b\x0c\xd7\x39\x1b\x3f\xcc\x84\x58\x2c\x16\x10\x51\x55\x95\x5c\x83\xc1\xb3\x34\x39\xe6\xc0\x74\x40\x5d\x03\x13\xd4\x2c\x0f\x08\x05\x19\x90\x4a\x81\xa6\x1c\x6b\x90\x3a\x87\x1c\x15\xee\x25\x93\xa9\xa1\xd4\x20\x21\xf3\x34\x85\x60\x23\x75\x2d\x1d\xe7\x0f\x01\x00\xd0\x1c\x0a\xb9\x81\x1b\x2c\xb5\xc5\x62\x09\x9f\x26\xf7\x0d\x47\x37\xa2\xc1\x39\x1a\x3c\x4a\x83\x81\xcc\x32\x3a\x69\x5e\xc2\xfa\xc4\x6f\x6b\xf7\x67\xde\x0e\xb4\x5f\x8d\xaa\x08\xa7\x06\xc2\x0a\xda\xde\xf0\x95\x8c\xa1\xf3\x97\xbf\x25\xf0\x35\xb0\x4a\x2e\xa7\xfd\x19\x97\xa7\x4c\x46\xee\xf1\xa7\xe4\xb7\xb9\xa7\x65\xbf\xc7\x47\x38\x4a\x5d\x66\xc1\x2c\xa2\x93\xca\x41\x13\x83\xa3\x02\x06\x0b\xab\xfb\x08\x6b\xe6\x10\x2e\x4e\x03\x7c\xc7\xec\xc4\xd8\xdb\xd6\xaa\x6b\xed\xd9\xc4\x35\xac\xee\xef\x1e\xee\x91\x13\x57\x16\xcc\x85\xef\xb6\x06\xbb\x6e\x6b\xe7\x15\xe7\x63\x40\xda\x4f\xd0\x05\xc1\x6a\x22\x66\x61\xd2\xbe\x06\x0e\x60\xd9\x02\x0d\x77\xbf\x4f\xad\xc9\xda\xb6\xcd\xe0\xae\x89\xe0\x0d\xd2\x43\x97\xbb\xe6\xb2\x54\x0f\x20\x2b\x97\x82\x2b\xb5\xd0\x85\xf7\x8a\xd3\x0d\xbf\x88\x81\x58\xbd\x04\xff\x41\xaf\xb8\x9b\x39\x12\xcd\xa3\x58\xdd\x7a\x90\x63\xe9\x3a\xe6\x77\xf5\x8b\xfb\x25\x7e\x75\xdf\x18\xfa\x5f\xc9\x94\x1a\x13\x75\xb7\xda\xff\x07\x23\xfe\x89\x4d\xe7\xd6\x40\x8d\xdf\x58\xe6\xce\x8b\xf8\x15\x00\x00\xff\xff\xff\x0b\xcb\xe8\x19\x05\x00\x00"

func stakingcollectionRestake_all_stakersCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRestake_all_stakersCdc,
		"stakingCollection/restake_all_stakers.cdc",
	)
}

func stakingcollectionRestake_all_stakersCdc() (*asset, error) {
	bytes, err := stakingcollectionRestake_all_stakersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/restake_all_stakers.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x71, 0x6b, 0x3, 0x8a, 0x5, 0xcb, 0xf0, 0xfd, 0x79, 0xbf, 0xac, 0x93, 0x8, 0x38, 0xcf, 0x4d, 0x15, 0x7f, 0x13, 0x56, 0xac, 0xd7, 0x72, 0x7d, 0x9a, 0xd1, 0x36, 0x15, 0x49, 0x33, 0xa8}}
	return a, nil
}

var _stakingcollectionScriptsDoes_account_have_staking_collectionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4e\xc3\x40\x10\x45\xfb\x3d\xc5\x2f\xe3\x06\x53\xa7\x33\x76\x80\x88\x28\x91\x70\x2e\x30\x5a\x8f\x61\xc5\x7a\x26\xda\x99\x25\x48\x88\xbb\x53\x24\x52\x0a\xe8\x5e\xf1\xf5\xdf\x4b\xcb\x49\x8b\xe3\x31\xeb\x79\x74\xfa\x48\xf2\xd6\x6b\xce\x1c\x3d\xa9\x60\x2e\xba\xe0\xfe\x6b\x3c\x76\x2f\xdb\xfd\x53\x7f\xd8\xed\x36\xfd\x71\x7b\xd8\x77\xc3\xf0\xba\x19\xc7\x10\xda\xb6\xc5\xc0\xce\x65\x49\xc2\x86\x34\x83\x04\x14\xa3\x56\x71\x24\x83\xb1\xa3\x9e\x70\x4e\xfe\x0e\xc2\x55\x80\x9b\x21\x04\x8a\x91\xcd\x56\x94\x73\x83\xb9\x0a\x16\x4a\xb2\xa2\x69\x2a\x6c\xb6\x46\x77\x81\x66\x8d\x07\xd5\x8c\xef\x00\x00\x85\xbd\x16\xf9\x3f\xf9\x6e\x52\xb6\xee\x12\xf0\x4c\x9f\xfc\x67\x70\xfb\xbe\x42\x13\x7e\x7e\x03\x00\x00\xff\xff\x22\xf7\x5f\x71\x04\x01\x00\x00"

func stakingcollectionScriptsDoes_account_have_staking_collectionCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsDoes_account_have_staking_collectionCdc,
		"stakingCollection/scripts/does_account_have_staking_collection.cdc",
	)
}

func stakingcollectionScriptsDoes_account_have_staking_collectionCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsDoes_account_have_staking_collectionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/does_account_have_staking_collection.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xa8, 0x71, 0xb0, 0x74, 0x2b, 0xe7, 0xf6, 0x22, 0x19, 0xad, 0x8, 0x16, 0xff, 0xe6, 0xf3, 0xa8, 0x0, 0x53, 0x43, 0x63, 0x5e, 0x29, 0xad, 0x82, 0x3, 0x6f, 0x87, 0x48, 0xf5, 0xa3, 0xf1}}
	return a, nil
}

var _stakingcollectionScriptsGet_all_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\x35\x97\xc6\x73\x6f\x21\xa9\x25\x58\x5a\x30\xb9\x89\x87\x31\x99\xc4\xc5\xc9\xae\xcc\x4e\x51\x11\xff\xbb\x60\xa3\x55\xea\xed\xb1\x3b\xdf\x7c\x8f\xf1\xd3\x73\x54\xc3\xb5\xc4\x97\xc6\xe8\xc9\x87\xb1\x8c\x22\xdc\x99\x8f\x01\x83\xc6\x09\x57\xaf\x4d\x5b\xdc\xd4\xfb\x6d\x79\xd8\xed\x36\x65\x5b\x1f\xf6\x45\x55\xdd\x6e\x9a\xc6\xfd\x82\xeb\xaa\xa5\x07\xe1\x79\xc7\x89\x5c\x5c\x7e\x2c\x9c\xcb\xf3\x1c\x5b\xb6\x04\x0a\x20\x55\x7a\x43\x1c\x40\x22\xb0\x47\x46\xcf\xc2\x23\x59\x54\x4c\x6c\xd4\x93\x11\x86\xa8\xe7\xe7\x84\x64\x51\xb9\x87\x0f\x5f\xf3\x69\xf6\x75\x3f\xa5\x9d\xa3\xae\xe3\x94\x96\x24\x92\x61\x38\x06\x4c\xe4\xc3\x92\xfa\x5e\x39\xa5\x35\x8a\x53\xc8\xd6\xb8\xbb\xac\xb7\xaa\xbe\x45\x75\x18\xe2\x3d\xde\x1d\x00\x28\xdb\x51\xc3\xff\x37\x5a\x8d\x6c\x85\xc8\x1f\xee\x2c\x9b\x43\xe6\x3e\x3e\x03\x00\x00\xff\xff\x8b\xe6\xbd\x01\x68\x01\x00\x00"

func stakingcollectionScriptsGet_all_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_all_delegator_infoCdc,
		"stakingCollection/scripts/get_all_delegator_info.cdc",
	)
}

func stakingcollectionScriptsGet_all_delegator_infoCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_all_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_all_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x70, 0xf7, 0xc4, 0xee, 0x69, 0xb6, 0x5e, 0xd0, 0x74, 0x7b, 0xb9, 0xbf, 0x6e, 0x95, 0x73, 0x5e, 0x75, 0xf4, 0xbe, 0x3, 0x26, 0xde, 0x54, 0x17, 0x4d, 0xab, 0x0, 0xd3, 0xec, 0x10, 0x78}}
	return a, nil
}

var _stakingcollectionScriptsGet_all_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6a\xc3\x40\x0c\x84\xef\xfb\x14\x43\x4e\xf1\x25\xee\x39\x37\x63\xa7\xc1\x34\x38\x50\xfb\x56\x7a\x50\xbd\x72\x6a\x2a\xaf\xca\xae\x42\x5b\x4a\xdf\xbd\x90\xb8\x3f\x90\xdc\x06\x49\x9f\x66\x98\x71\x7a\xd5\x68\xb8\x15\x7d\x6b\x8d\x5e\xc6\x70\x28\x55\x84\x7b\x1b\x35\x60\x88\x3a\xe1\xe6\xbd\xed\x8a\xbb\xba\xd9\x96\xfb\xdd\x6e\x53\x76\xf5\xbe\x29\xaa\xea\x7e\xd3\xb6\xee\x1f\x5c\x57\x1d\x3d\x09\xcf\x3f\xce\xe4\xe2\x72\xb1\x70\x2e\xcf\x73\x6c\xd9\x12\x28\x80\x62\xa4\x0f\xe8\x00\x12\x81\x3d\x33\x82\x7a\xc6\xc4\x46\x9e\x8c\x30\x68\x3c\x4d\x12\x92\x69\x64\x8f\x31\x9c\xae\xd2\xec\xd2\xff\x46\x75\x8e\xfa\x9e\x53\x5a\x92\x48\x86\xe1\x18\x30\xd1\x18\x96\xe4\x7d\xe4\x94\xd6\x28\xce\x22\x5b\xe3\xe1\x32\xd4\xaa\x51\xcf\x75\x18\xf4\x11\x9f\x0e\x00\x22\xdb\x31\x86\xeb\xa5\xac\x0e\x6c\x85\xc8\x0f\xf2\x67\x31\x8b\xcc\x7d\x7d\x07\x00\x00\xff\xff\x6d\x35\x31\x49\x54\x01\x00\x00"

func stakingcollectionScriptsGet_all_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_all_node_infoCdc,
		"stakingCollection/scripts/get_all_node_info.cdc",
	)
}

func stakingcollectionScriptsGet_all_node_infoCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_all_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_all_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x65, 0xfc, 0xb1, 0xf6, 0xf3, 0xe1, 0x26, 0xe8, 0x32, 0x38, 0x81, 0xb0, 0x52, 0x6c, 0x49, 0x9b, 0x28, 0x28, 0x3e, 0x26, 0xf1, 0xac, 0x9c, 0xcc, 0xdd, 0x8e, 0x1e, 0x36, 0x5, 0x9, 0xdb}}
	return a, nil
}

var _stakingcollectionScriptsGet_delegator_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xbd\x6a\xc3\x40\x10\x04\xe0\xfe\x9e\x62\x4a\xab\xb1\x52\xbb\x13\x3a\x27\x88\x18\x1b\x2c\x77\x21\xc5\xa2\x5b\x29\x47\x4e\x77\x61\x77\x4d\x12\x42\xde\x3d\x60\xe7\xaf\x50\x37\xb0\x2c\xdf\x4c\x9c\x5f\x8a\x18\x6e\x53\x79\xed\x8d\x9e\x63\x9e\xda\x92\x12\x0f\x16\x4b\xc6\x28\x65\xc6\xcd\x5b\x7f\x6a\xee\xbb\xfd\x5d\x7b\xd8\xed\xb6\xed\xa9\x3b\xec\x1b\xef\x8f\xdb\xbe\x77\xae\xae\x6b\x1c\xd9\xce\x92\x15\x94\x41\x22\xf4\x8e\x32\x82\x52\x82\x3d\x31\x02\x27\x9e\xc8\x8a\xa0\xf3\x0a\xb5\x22\x1c\x10\xf3\xe5\xa6\x57\x0e\xc3\xaf\xe7\x1c\x0d\x03\xab\xae\x28\xa5\x0a\xe3\x39\x63\xa6\x98\x57\x14\x82\xb0\xea\x06\xcd\x35\x54\x1b\x3c\x2c\xf6\x5d\xfb\x1f\xae\xf3\xfa\x88\x0f\x07\x00\x72\xa9\xb7\x3c\x70\x3d\xb1\xfd\xff\xf9\xa3\xbe\x43\xe5\x3e\xbf\x02\x00\x00\xff\xff\x8d\xf2\x13\x88\x21\x01\x00\x00"

func stakingcollectionScriptsGet_delegator_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_delegator_idsCdc,
		"stakingCollection/scripts/get_delegator_ids.cdc",
	)
}

func stakingcollectionScriptsGet_delegator_idsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_delegator_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_delegator_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0x3c, 0xc3, 0x2f, 0xf7, 0xd4, 0x15, 0x36, 0xaa, 0x4d, 0x8, 0x2e, 0xc1, 0x6, 0x5b, 0x41, 0xbc, 0x5f, 0x9b, 0x97, 0xea, 0xb7, 0x11, 0x93, 0xfd, 0x12, 0xd0, 0xc8, 0xfe, 0xbd, 0x20, 0x8f}}
	return a, nil
}

var _stakingcollectionScriptsGet_does_stake_existCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xd1\x4a\xc3\x30\x14\x86\xef\xf3\x14\x3f\xbb\xda\x60\x58\xd1\xbb\xde\x48\x6d\xab\x14\xc7\x06\xb6\x3e\x40\x6c\x4e\x6a\x30\xcd\x19\x49\x86\x03\xf1\xdd\xa5\x6b\xa1\xa3\x7a\x95\xe4\x9c\x9c\xef\xfb\x39\xa6\x3f\xb2\x8f\x78\xb2\xfc\x55\x47\xf9\x69\x5c\x97\xb3\xb5\xd4\x46\xc3\x0e\xda\x73\x8f\xdb\x73\xdd\x64\x2f\xd5\xfe\x39\x3f\xec\x76\x65\xde\x54\x87\x7d\x56\x14\xaf\x65\x5d\x8b\xab\xe1\xaa\x68\xe4\xbb\xa5\x89\x31\x4e\xae\xfe\x36\x56\x42\x24\x49\x82\x86\xac\x0d\x30\x1a\xf1\x83\x10\x8e\xd4\x1a\x6d\x48\xc1\xb1\x22\xb0\x87\x22\x4b\x9d\x8c\xec\x41\x67\x13\x62\x80\x71\xe3\xcf\x89\xde\xce\x11\x2f\x38\xcd\x7e\x41\x92\x4a\x79\x0a\x41\x08\xd9\xb6\x14\xc2\x5a\x5a\xbb\x81\x3e\x39\xf4\xd2\xb8\xf5\xd4\x4d\x91\x8d\x97\xed\xc5\x5c\x15\x29\xea\xe8\x8d\xeb\xb6\x73\x82\xa1\xf8\x56\xb9\x78\x7f\xf7\xb0\x49\xf1\xc8\x6c\xf1\x2d\x00\xc0\x53\x3c\x79\xf7\xff\xe2\x6e\x14\x53\x18\xaa\x54\x0e\xf9\x67\x9f\x5c\xfa\xc6\x73\xe1\xbb\x7a\x6c\xc4\xcf\x6f\x00\x00\x00\xff\xff\xc7\xd8\xe3\x24\xa2\x01\x00\x00"

func stakingcollectionScriptsGet_does_stake_existCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_does_stake_existCdc,
		"stakingCollection/scripts/get_does_stake_exist.cdc",
	)
}

func stakingcollectionScriptsGet_does_stake_existCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_does_stake_existCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_does_stake_exist.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0xd5, 0xb, 0xb6, 0xe7, 0xd, 0xc3, 0xda, 0x5a, 0x2c, 0x1, 0x38, 0x11, 0x37, 0xb5, 0xaa, 0xd3, 0xbe, 0x7c, 0x49, 0x28, 0x4e, 0xe8, 0x23, 0xf3, 0xea, 0x3b, 0x8f, 0x10, 0x1b, 0x76, 0xb2}}
	return a, nil
}

var _stakingcollectionScriptsGet_locked_tokens_usedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x6a\xeb\x40\x10\x45\xfb\xfd\x8a\x5b\x5a\xcd\xd3\x2b\x42\x0a\x75\x42\xb6\x82\x89\xb0\x21\x92\x3f\x60\xd9\x1d\xcb\x8b\x56\x33\x61\x67\x85\x1d\x42\xfe\x3d\x44\x4e\x48\x93\x7a\x98\x73\xce\x0d\xf3\xab\xa4\x8c\x36\xca\xb5\xcf\x76\x0a\x3c\x36\x12\x23\xb9\x1c\x84\x71\x4e\x32\xe3\xff\xad\x1f\xea\xe7\xfd\xe1\xa9\x39\x76\xdd\xae\x19\xf6\xc7\x43\xbd\xdd\xbe\xec\xfa\xde\x98\xb2\x2c\x31\x50\x8c\x8a\x8b\x5c\x31\x5b\x7e\x43\x14\x37\x91\x47\x96\x89\x58\x91\x2f\x04\xeb\x9c\x2c\x9c\x11\x14\x8b\x06\x1e\xd7\xaf\x56\xd2\xd7\x31\x11\xf4\xae\x85\xfb\xf5\xb2\x78\x52\x58\xf6\xf0\x14\x69\xb4\x59\x92\x1a\x63\x9d\x23\xd5\x8d\x8d\xb1\xc0\x79\x61\xcc\x36\xf0\xe6\x1b\x5e\xa1\xf6\x3e\x91\x6a\x51\xe1\xd4\x86\xdb\xe3\x03\xde\x0d\x00\x24\xca\x4b\xe2\xbf\xf7\xfd\x1b\x29\x77\x6b\xee\xb0\xd6\x9e\x94\xfc\xc6\xde\x39\xd5\x4f\x76\x61\x3e\x3e\x03\x00\x00\xff\xff\xbc\xf0\x27\x66\x24\x01\x00\x00"

func stakingcollectionScriptsGet_locked_tokens_usedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_locked_tokens_usedCdc,
		"stakingCollection/scripts/get_locked_tokens_used.cdc",
	)
}

func stakingcollectionScriptsGet_locked_tokens_usedCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_locked_tokens_usedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_locked_tokens_used.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x55, 0x1c, 0x5d, 0x49, 0x92, 0x47, 0x87, 0x1, 0x4f, 0xf1, 0x59, 0x54, 0x19, 0x4, 0xfd, 0x3e, 0xad, 0x96, 0xb8, 0x56, 0xac, 0xbe, 0xb, 0x44, 0xcf, 0xd1, 0xd, 0x52, 0xd3, 0x7b, 0xc7}}
	return a, nil
}

var _stakingcollectionScriptsGet_machine_account_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcb\x6a\xf3\x30\x10\x85\xf7\x7a\x8a\xb3\xfb\x6d\xf8\xa9\xbb\x36\x84\x62\xec\x34\x98\xa6\x09\xd4\xd9\x95\x2e\x84\x3c\x72\x44\xe5\x51\x90\x64\x5a\x28\x79\xf7\x12\x5f\x42\x6f\x5a\x6a\xe6\x3b\xe7\x1b\xd3\x9f\x9c\x8f\xb8\xb7\xee\xad\x89\xf2\xd5\x70\x57\x3a\x6b\x49\x45\xe3\x18\xda\xbb\x1e\xb7\xef\xcd\xa1\x78\xa8\x77\x9b\x72\xbf\xdd\xae\xcb\x43\xbd\xdf\x15\x55\xf5\xb4\x6e\x1a\x21\xb2\x2c\xc3\x86\x62\x40\x3c\x12\x7a\xa9\x8e\x86\x09\x52\x29\x37\x70\x84\x6c\x5b\x4f\x21\x40\x3b\x0f\x89\x70\x22\x65\xb4\x51\x60\xd7\xd2\x08\x1a\x86\xe4\x65\xfb\x5f\x40\x98\xfa\xa1\xae\x02\x42\x48\xa5\x28\x84\x44\x5a\x9b\x42\x0f\x8c\x5e\x1a\x4e\x66\x24\x47\x31\x35\xfc\x1f\x33\xeb\x2a\x47\x13\xbd\xe1\x2e\xbd\x4e\xee\xf0\x21\x00\xc0\x52\x5c\xf4\x8a\x09\x0e\x58\xfd\x7d\xf4\x4d\x47\xf1\xf1\xfb\x6a\x32\x5f\x92\x2f\xb2\xa9\x18\x53\x8d\x1e\x83\xe7\xcf\x9a\xb5\xc3\xea\x67\xcd\xf3\xa4\xf6\x32\x8b\x5c\x9e\xa7\x38\x78\xfe\x8a\x5d\x3a\x67\xe3\x24\x1d\xf7\xce\x20\x1b\xe8\x37\xc4\xc6\x4e\x73\x71\x16\x9f\x01\x00\x00\xff\xff\x9d\xb0\x2b\xec\xbb\x01\x00\x00"

func stakingcollectionScriptsGet_machine_account_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_machine_account_addressCdc,
		"stakingCollection/scripts/get_machine_account_address.cdc",
	)
}

func stakingcollectionScriptsGet_machine_account_addressCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_machine_account_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_machine_account_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x8f, 0x46, 0xba, 0x65, 0x46, 0x78, 0xb3, 0x99, 0x41, 0x98, 0xc1, 0xf, 0xfc, 0x98, 0xff, 0x5e, 0x5f, 0xb5, 0x7, 0xfa, 0x87, 0xfb, 0xa2, 0xc, 0x78, 0xc4, 0x32, 0x64, 0xf8, 0x72, 0x93}}
	return a, nil
}

var _stakingcollectionScriptsGet_machine_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\x41\x4b\xc3\x40\x10\x05\xe0\xfb\xfe\x8a\x77\x33\xb9\x18\xcf\xb9\x85\xb4\x96\x60\x6d\xc1\xed\x1f\x58\x36\x93\x74\x71\x33\x2b\x3b\x13\x14\x4a\xff\xbb\xd0\x44\x41\xb0\xf7\xf9\xe6\xbd\x17\xa6\x8f\x94\x15\xcf\x31\x7d\x5a\x75\xef\x81\xc7\x36\xc5\x48\x5e\x43\x62\x0c\x39\x4d\x78\xfa\xb2\xa7\xe6\xa5\x3b\xec\xda\xe3\x7e\xbf\x6d\x4f\xdd\xf1\xd0\x6c\x36\x6f\x5b\x6b\x8d\xa9\xaa\x0a\x3b\x52\x81\x8b\x11\x7a\x26\x4c\xce\x9f\x03\x13\x9c\xf7\x69\x66\x85\xeb\xfb\x4c\x22\x24\x18\x52\x06\xa7\x9e\xe4\x86\x02\xdf\xce\xd7\xb3\x07\x81\x2c\xe1\xf0\xbf\xe9\xc6\x38\xef\x49\xa4\x70\x31\x96\x18\x66\xc6\xe4\x02\x17\x2b\xa9\xd1\x2c\xaf\xcb\x1a\x17\xab\x39\xf0\x58\xff\xbf\xe2\xf1\x75\xe9\xd4\x2c\xb0\xe3\x21\x5d\x71\x31\x00\x90\x49\xe7\xcc\x77\xd8\x48\xfa\x57\x4a\xb1\xae\xa9\x7f\x7a\x97\xe6\x6a\xbe\x03\x00\x00\xff\xff\xff\x6b\xed\x8a\x41\x01\x00\x00"

func stakingcollectionScriptsGet_machine_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_machine_accountsCdc,
		"stakingCollection/scripts/get_machine_accounts.cdc",
	)
}

func stakingcollectionScriptsGet_machine_accountsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_machine_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_machine_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x6a, 0xbe, 0x29, 0xa6, 0xa0, 0x51, 0x4a, 0x89, 0x9a, 0x12, 0xc, 0xa3, 0xfa, 0xf4, 0xa0, 0xde, 0x2b, 0xea, 0x41, 0x35, 0xba, 0xaa, 0x3b, 0x8c, 0xed, 0xa3, 0xe5, 0x3a, 0x7c, 0xb4, 0xf2}}
	return a, nil
}

var _stakingcollectionScriptsGet_node_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x1b\x9b\x85\x30\x77\x8b\x92\x82\x22\xaa\x54\x6a\xba\x21\x06\x2b\xe7\x84\x13\x17\x1b\xd9\x57\x01\x42\xbc\x3b\x52\x8b\x60\x61\xfb\xcb\x83\x7f\x5f\x5a\x5f\xd5\x0a\xee\xb2\xbe\x8d\x85\x5e\x92\x2c\xad\xe6\xcc\x53\x49\x2a\x98\x4d\x57\xdc\xbe\x8f\xa7\xe6\xa1\x1f\xee\xdb\xc3\x7e\xbf\x6b\x4f\xfd\x61\x68\xba\xee\xb8\x1b\xc7\x10\xea\xba\xc6\x91\xcb\xd9\xc4\x41\x02\x32\xa3\x0f\xe8\x0c\xca\x19\xe5\x99\x21\x1a\x19\x7d\xe7\xf0\xa2\xc6\x11\x49\x2e\x67\xbf\x4a\x98\x7e\xa9\x10\x68\x9a\xd8\x7d\x43\x39\x57\x98\xcf\x82\x95\x92\x6c\x28\x46\x63\xf7\x2d\x9a\x6b\x54\x5b\x3c\x8e\xc5\x92\x2c\x4f\xf8\x0c\x00\x60\x17\xfd\xff\xfd\x37\x0b\x97\x41\x23\xf7\x9d\xff\x7d\xfa\x89\x2a\x7c\x7d\x07\x00\x00\xff\xff\xf5\x67\xa5\x8f\xfb\x00\x00\x00"

func stakingcollectionScriptsGet_node_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_node_idsCdc,
		"stakingCollection/scripts/get_node_ids.cdc",
	)
}

func stakingcollectionScriptsGet_node_idsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_node_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_node_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xfd, 0x4f, 0x8d, 0xf6, 0x55, 0xfd, 0x4f, 0xd3, 0x4f, 0x3f, 0xdb, 0xa5, 0xe6, 0x88, 0x9c, 0x1e, 0x89, 0x5a, 0x40, 0x58, 0x4, 0xb6, 0x29, 0x7d, 0xfe, 0x9a, 0x0, 0x29, 0x77, 0x34, 0x6b}}
	return a, nil
}

var _stakingcollectionScriptsGet_unlocked_tokens_usedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\xff\xb1\xb9\x18\x0f\xe2\x21\xb7\x90\x36\x52\x2c\x2d\x98\xe4\x01\x96\xdd\x69\xba\x64\x33\x23\x3b\x1b\x5a\x11\xdf\x5d\x6c\x2b\x5e\x3c\x0f\xf3\x7d\xdf\x1f\xe6\x77\x49\x19\x6d\x94\x73\x97\xed\x14\x78\x6c\x24\x46\x72\x39\x08\xe3\x98\x64\xc6\xe3\xa5\xeb\xeb\xd7\xed\xfe\xa5\x39\xec\x76\x9b\xa6\xdf\x1e\xf6\xf5\x7a\xfd\xb6\xe9\x3a\x63\xca\xb2\x44\x4f\x31\x2a\x4e\x72\xc6\x6c\xf9\x03\x0b\x47\x71\x13\x79\x64\x99\x88\x15\xf9\x44\xb0\xce\xc9\xc2\x19\x41\xb1\x68\xe0\xf1\xfa\xd7\x4a\xfa\x39\x26\x82\xde\xc4\x70\x7f\x66\x16\x4f\x0a\xcb\x1e\x9e\x22\x8d\x36\x4b\x52\x63\xac\x73\xa4\xba\xb2\x31\x16\x38\x2e\x8c\xd9\x06\x5e\xdd\xe1\x15\x6a\xef\x13\xa9\x16\x15\x86\x36\x5c\x9e\x9f\xf0\x69\x00\x20\x51\x5e\x12\xff\xbf\xf0\x61\xa4\x3c\xdc\x83\xfb\x6b\xef\xa0\xe4\x57\xf6\x46\xaa\x7e\xc3\x0b\xf3\x65\xbe\x03\x00\x00\xff\xff\x5a\xed\xf9\x46\x29\x01\x00\x00"

func stakingcollectionScriptsGet_unlocked_tokens_usedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_unlocked_tokens_usedCdc,
		"stakingCollection/scripts/get_unlocked_tokens_used.cdc",
	)
}

func stakingcollectionScriptsGet_unlocked_tokens_usedCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_unlocked_tokens_usedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_unlocked_tokens_used.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x34, 0x15, 0x3b, 0xc2, 0x85, 0xed, 0x99, 0x3, 0xda, 0x7d, 0x70, 0xad, 0x34, 0x1f, 0x5a, 0xcb, 0xe5, 0x52, 0xa3, 0x85, 0x9b, 0xc7, 0x8d, 0x9a, 0xed, 0xcf, 0x24, 0xd0, 0xb5, 0x3c, 0xda}}
	return a, nil
}

var _stakingcollectionSetup_staking_collectionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4f\x6f\xfa\x38\x10\xbd\xf3\x29\xa6\x1c\xba\x41\xe2\xcf\x9e\x11\x6d\x17\x01\xbb\x8b\x8a\x4a\x55\xd0\xde\x4d\x32\x49\xbc\xb8\x76\x64\x3b\xb0\x55\xc5\x77\x5f\x39\x8e\x93\xb8\x40\x4b\xab\xaa\x3f\x0e\xa5\xc4\xf3\xe7\xbd\x37\xe3\x99\xd0\xe7\x4c\x48\x0d\x7f\xe6\x3c\xa1\x1b\x86\x6b\xb1\x45\x0e\xb1\x14\xcf\xd0\xf6\x9e\xb5\x5b\xce\x92\x89\xbd\x67\xe5\x7e\x7b\x16\xf3\xe9\x9a\x6c\x18\xae\x34\xd9\x52\x9e\x34\x4c\xfd\x83\xca\x67\x21\xc2\x2d\x46\x45\x1c\x65\xad\x7f\xff\x6f\xb1\x9c\xdc\xcf\xa6\xeb\xe5\xfd\xec\x61\x3c\x9d\x3e\xcd\x56\xab\x66\x86\x32\xc2\x44\x30\x86\xa1\xa6\x82\x3b\xb7\xd5\x7a\x7c\x3f\x7f\xf8\x6b\xb2\x5c\x2c\x66\x93\xf5\x7c\x59\x39\xb7\x06\x83\x01\xac\x53\xaa\x40\x4b\xc2\x15\xb1\x5e\x0a\xb5\x82\x3c\x03\xc2\x81\x84\xa1\xc8\xb9\x06\x2d\x20\x57\x08\x04\x54\x09\x3f\xac\x92\x14\x31\xe6\x1a\xf6\x94\x31\xd8\x0b\xb9\x05\x89\x09\x91\x11\x43\xa5\x40\xc4\xb0\x4f\x51\xa7\x28\x41\xa7\xf8\x02\x29\xd9\x99\x28\x12\x93\x9c\x11\xe9\xc2\x77\x81\x80\xde\x8b\x9e\xcb\xc6\x0a\xea\xa0\x2d\x77\x85\x3a\xcf\xba\x45\x1a\x21\x2b\x00\x62\xf3\x2f\x86\x5a\x81\xd2\x42\x62\x04\x94\x9b\x04\x90\xf3\xd2\xb7\x0c\xd5\x6a\x35\x89\xbd\xb6\x00\x00\x32\x89\x19\x91\x18\x28\x9a\x70\x94\x43\x18\xe7\x3a\x1d\x5b\xf3\x0e\xbc\xb6\x0a\x1b\xf3\x31\xb4\x62\x13\x55\x22\x50\xc5\x7f\xd3\x40\x98\x44\x12\xbd\x9c\x96\xc1\xb9\xd1\x18\x6c\xe4\xfe\x46\x48\x29\xf6\xa3\xeb\x93\xb5\xe9\x1f\x3d\xb9\x0d\x4c\xb9\x86\xa7\x4b\x79\x6c\xbe\xd2\x42\x92\x04\x1f\x89\x4e\x3b\x70\x73\x03\x9c\xb2\x26\xfa\x92\xc1\x44\x22\xd1\x08\x99\xa4\x3b\xf3\x1d\x92\x8c\x6c\x28\xa3\x9a\xa2\x82\x58\x14\x55\xb1\x3a\x43\x2a\x58\x84\x12\x08\x8f\x6a\x15\x77\x24\x67\xda\x0b\xc9\xd0\x95\xe7\x6f\x6b\x7f\xe3\xd8\x32\xca\xb7\xa3\xeb\x66\xd7\xf6\x8b\x2f\x6b\x77\x1b\x0c\x4a\x0c\x83\xd8\x5d\x0f\x7b\xd2\x05\x4d\x64\x82\x7a\x08\xe7\x7c\x9b\x4c\xaf\x8e\xd0\x54\xe1\xde\x42\xa9\xae\x61\xff\x1f\x43\xe3\x14\x82\xe2\xa0\x06\x30\x50\x36\xd3\x1b\x83\x37\x49\xcf\x48\x4c\x80\xe3\x1e\xdc\xf5\x6e\x5c\x42\xa3\x68\x96\x6b\xa0\xda\x74\x69\x99\xc2\x0b\x42\x63\x4f\xd3\x7e\x98\x62\xb8\x0d\x3a\x65\xbf\x36\x3f\x25\x41\x45\x76\x18\x8c\x7a\xa7\x3b\x25\x2c\xf0\x1c\x3d\x0f\x5c\x55\x0b\x4e\xc3\x5a\xb7\xae\x6d\x00\x9b\x7b\xe8\x21\xe9\x98\xb3\x2f\x75\xa4\x87\xfc\x00\xc8\x14\xfe\x1a\x3a\x9c\xb2\xef\x62\x71\xee\x72\x11\xc8\xf2\x0d\xa3\x21\x98\xbe\x33\xa3\xd2\x5c\xaa\x77\x26\x44\x83\x79\xdd\xa9\x17\x20\x7b\xbd\xd0\xee\xb1\x40\x73\xb8\x0d\x8e\xf4\xfe\x54\x00\xa3\x40\xf7\x28\x84\xbb\x2b\x9f\x57\xd3\x0b\x55\x4b\x7b\xf0\x26\xae\x9d\x99\xc5\x8a\x88\x51\x22\x0f\xf1\x02\x41\xcd\x18\xa8\x1f\x3f\x61\x5c\x8f\x82\x9f\x9b\xc1\x1e\xbd\xbb\x3b\xc8\x08\xa7\x61\xd0\x9e\x88\x9c\x45\xc0\x85\x76\xd4\x8e\x79\xd4\x5c\xdb\x9d\x73\xeb\xc7\x8c\x17\x11\x59\x15\x50\x96\xdb\xcf\x6d\xbd\x6a\x8d\xd6\x63\xe6\x03\xc5\x4e\x2f\x29\xff\x4d\xa4\xff\x20\xa2\xe2\x7f\x33\xbd\x6b\x59\xce\x1a\x79\x0b\xe9\xca\x2d\xa4\xa6\x2a\xa6\x4e\x05\x8b\x51\xaf\xba\x00\x82\x44\xa3\x3f\xbe\x37\xb9\x3f\xae\xbd\xc6\xe8\x93\x28\x32\x4e\xcb\x42\xbf\x60\xd4\x33\x70\xba\xf0\x4c\xc2\x94\x72\x2c\xdf\x02\xe6\x3c\x16\x76\x70\x9c\x69\x52\xbf\x2e\x11\x32\x4c\x88\x16\x3f\x58\x95\xa9\x4b\xf9\x8e\x36\x95\xcd\x65\x75\xa9\x59\x5c\x58\x9c\x2f\x63\xf8\xa0\x3c\x95\x4f\x55\xa3\x0a\x5a\xb3\x1e\xf6\xef\xa1\xf5\x7f\x00\x00\x00\xff\xff\xcc\xf4\x53\x3b\xae\x0b\x00\x00"

func stakingcollectionSetup_staking_collectionCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionSetup_staking_collectionCdc,
		"stakingCollection/setup_staking_collection.cdc",
	)
}

func stakingcollectionSetup_staking_collectionCdc() (*asset, error) {
	bytes, err := stakingcollectionSetup_staking_collectionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/setup_staking_collection.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xb3, 0x3c, 0x8d, 0x5e, 0x2b, 0xf5, 0xf1, 0xf, 0x0, 0x56, 0xad, 0xa3, 0x6b, 0xdc, 0x90, 0xb2, 0xe8, 0x7a, 0x21, 0x16, 0x99, 0x26, 0x66, 0xa8, 0x9e, 0x57, 0x5c, 0x25, 0x4e, 0x2d, 0x9c}}
	return a, nil
}

var _stakingcollectionStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6a\x1b\x31\x10\x86\xef\xfb\x14\x3f\x39\x14\x07\x8c\x5d\xda\xd2\x83\x69\x6b\xcc\x3a\x29\xa6\xc1\x29\x59\xe7\x01\x94\xdd\x91\x2d\xac\xd5\x2c\xd2\x6c\xd7\xa5\xe4\xdd\xcb\x4a\x59\x3b\xc4\x3e\x44\x07\x09\x0d\xa3\xef\xff\x35\x33\xa6\x6e\xd8\x0b\x6e\x2d\x77\x85\xa8\xbd\x71\xdb\x9c\xad\xa5\x52\x0c\x3b\x68\xcf\x35\x3e\x1e\x8a\xcd\xe2\xd7\x6a\xfd\x33\xbf\xbf\xbb\xbb\xc9\x37\xab\xfb\xf5\x62\xb9\x7c\xb8\x29\x8a\x2c\x9b\x4e\xa7\xc8\xb9\xae\x8d\x04\x38\xea\x20\xbc\x27\x17\x20\x8c\x20\x6a\x4f\xd0\xec\x21\x3b\x42\x68\xa8\x34\xda\x50\x05\xc7\x15\x81\x3d\x2a\xb2\xb4\x55\xc2\x1e\xc6\xa5\x94\xa4\x8e\xf2\x28\x1f\xe9\x9b\x1d\x0d\xd4\xe8\xa6\x4f\xb5\x5c\xee\xa9\xc2\x1f\xd5\x5a\x81\xf2\x84\x36\x50\x05\x6d\x7c\x90\x31\x8c\x86\x11\xd0\xc1\x04\x09\x91\xa0\xd9\x5a\xee\xa8\xc2\xd3\xdf\xf8\xfa\x2d\xad\x75\xaf\x79\x59\x26\x5e\xb9\xa0\xa2\x83\x51\xef\x76\xb5\x9c\xa1\x10\x6f\xdc\x76\x7c\x72\xdd\x07\x1f\x57\x4e\x3e\x7f\x9a\x8f\xa1\x6a\x6e\x9d\xcc\xf0\x78\x6b\x0e\x5f\xbf\x5c\xe3\x5f\x06\x00\x71\xb3\x24\xc3\xcf\x4e\x75\x7d\x20\x3d\xc3\x87\x8b\x25\x9f\x9c\x45\xb2\xc8\x69\x3c\x35\xca\xd3\x48\x95\x65\xd2\x5a\xb4\xb2\x5b\xa4\xcb\x20\xd8\xaf\x40\x56\x4f\x2e\x09\xe2\x3b\x5e\xde\x4e\x9e\xd8\x7b\xee\xbe\xbd\xd7\xc0\x8f\x51\x5f\xaa\xd9\xe5\x11\x39\x4f\x2f\x84\xbd\xda\xd2\x6f\x25\xbb\xeb\xa3\xad\x7e\xcd\xe7\x68\x94\x33\xe5\xe8\x2a\xe7\xd6\xf6\x93\x20\x48\x56\xe0\x49\xf7\x33\x73\xc6\xba\x4a\x84\xe7\x54\x03\x3a\x50\xd9\x0a\xbd\xe7\xb7\x31\x48\x6b\xea\x36\xb1\xd9\xc7\x3e\xa6\xf3\x4d\x1f\x5f\x5d\x4e\xbd\x4c\xe7\xa0\xff\x9c\xfd\x0f\x00\x00\xff\xff\xec\x54\xa2\x45\x28\x03\x00\x00"

func stakingcollectionStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_new_tokensCdc,
		"stakingCollection/stake_new_tokens.cdc",
	)
}

func stakingcollectionStake_new_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x83, 0x37, 0x9f, 0xaa, 0xc4, 0x87, 0xda, 0x7e, 0xaf, 0x41, 0x49, 0xd3, 0xe, 0xac, 0xd, 0xa9, 0xb8, 0x16, 0xce, 0xbc, 0x57, 0xa0, 0x71, 0x8c, 0xf3, 0x87, 0x9c, 0x2e, 0xdc, 0x1e, 0x31}}
	return a, nil
}

var _stakingcollectionStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdd\xca\xda\x40\x10\xbd\xcf\x53\x1c\xbc\x28\x11\x44\x4b\x5b\x7a\x11\xda\x4a\x88\x5a\x42\x45\x8b\xd1\x07\xd8\x26\x93\xb8\x98\xec\x84\xcd\x04\x85\xe2\xbb\x7f\x24\xeb\xcf\xc7\xa7\x17\xee\xc5\x2e\x33\xec\x9c\x73\x66\xce\xe8\xaa\x66\x2b\x58\x94\x7c\x4c\x44\x1d\xb4\x29\x22\x2e\x4b\x4a\x45\xb3\x41\x6e\xb9\xc2\xe7\x53\xb2\x0d\xff\xc4\xab\xdf\xd1\x7a\xb9\x9c\x47\xdb\x78\xbd\x0a\x67\xb3\xcd\x3c\x49\x3c\x6f\x32\x99\x20\xe2\xaa\xd2\xd2\xc0\xd2\x51\xd9\x8c\x32\x08\x1f\xc8\x34\x10\x46\x23\xea\x40\xc8\xd9\x42\xf6\x84\xa6\xa6\x54\xe7\x9a\x32\x18\xce\x08\x6c\x91\x51\x49\x85\x12\xb6\xd0\xc6\x7d\x71\x12\x90\xde\x34\x78\x9e\x58\x65\x1a\xd5\x07\x7e\x57\x18\xcf\x02\x24\x62\xb5\x29\x46\x77\x80\x2e\xb9\x8b\x8d\x7c\xfd\x32\x1d\x41\x55\xdc\x1a\x09\xb0\x5b\xe8\xd3\xf7\x6f\x43\xfc\xf7\x00\xa0\xbf\x4a\x92\x2b\xc9\xbd\xcf\x0d\xe5\x01\x3e\x3d\x1d\xc1\xf8\x21\xe3\xf5\x38\xb5\xa5\x5a\x59\xf2\x55\x9a\x3a\xae\xb0\x95\x7d\xe8\x82\x2b\x61\x77\x1a\x2a\xf3\xf1\x33\x42\xfc\xc4\xa5\x76\xfc\x8f\xad\xe5\xe3\x8f\x57\x05\xfc\xf2\x3b\x5b\x82\xe7\x96\x3d\x7e\x4f\x84\xad\x2a\xe8\xaf\x92\xfd\xf0\x26\xab\x3b\xd3\x29\x6a\x65\x74\xea\x0f\x22\x6e\xcb\xce\x14\x81\x93\x02\x4b\x79\x67\xdf\x03\xd6\xc0\x21\x9c\xdd\x0c\xe8\x44\x69\x2b\xf4\x4a\xb7\x7d\x92\x36\x97\x0d\xd9\xf6\x0b\x72\x33\xd3\xbd\x1f\xcc\x7c\x17\xdc\x0d\x75\xef\x55\xc4\xd9\x7b\x0b\x00\x00\xff\xff\xa8\x2e\xa8\x04\xbd\x02\x00\x00"

func stakingcollectionStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_rewarded_tokensCdc,
		"stakingCollection/stake_rewarded_tokens.cdc",
	)
}

func stakingcollectionStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x8e, 0x32, 0xe0, 0x5e, 0x34, 0x11, 0x60, 0x2d, 0xf1, 0x4f, 0xad, 0x4e, 0x59, 0x3e, 0x2e, 0x5d, 0x31, 0xfd, 0x3d, 0x36, 0x15, 0xf8, 0x38, 0x97, 0x41, 0x38, 0xf, 0xdd, 0x44, 0xc6, 0x7a}}
	return a, nil
}

var _stakingcollectionStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdd\xca\xda\x40\x10\xbd\xcf\x53\x1c\xbc\x28\x11\x44\x4b\x5b\x7a\x11\xda\x4a\x88\x5a\x42\x45\x8b\xd1\x07\xd8\x26\x93\xb8\x98\xec\x84\xcd\x04\x85\xe2\xbb\x7f\x24\xeb\xcf\xc7\xa7\x17\xee\xc5\x2e\x73\xd8\x3d\xe7\xec\x9c\xd1\x55\xcd\x56\xb0\x28\xf9\x98\x88\x3a\x68\x53\x44\x5c\x96\x94\x8a\x66\x83\xdc\x72\x85\xcf\xa7\x64\x1b\xfe\x89\x57\xbf\xa3\xf5\x72\x39\x8f\xb6\xf1\x7a\x15\xce\x66\x9b\x79\x92\x78\xde\x64\x32\x41\xc4\x55\xa5\xa5\x41\x6b\x1a\x51\x07\xca\x20\x7c\x20\xd3\x40\x18\x3d\x80\x9c\x2d\x64\x4f\x68\x6a\x4a\x75\xae\x29\x83\xe1\x8c\xc0\x16\x19\x95\x54\x28\x61\x0b\x6d\xdc\x15\x67\x01\xe9\xcd\x83\xe7\x89\x55\xa6\x51\x7d\xe1\x77\x0f\xe3\x59\x80\x44\xac\x36\xc5\xe8\x4e\xd0\x81\xbb\xd8\xc8\xd7\x2f\xd3\x11\x54\xc5\xad\x91\x00\xbb\x85\x3e\x7d\xff\x36\xc4\x7f\x0f\x00\xfa\xad\x24\xb9\x8a\xdc\xff\xb9\xa1\x3c\xc0\xa7\xa7\x2d\x18\x3f\x20\x5e\xcf\x53\x5b\xaa\x95\x25\x5f\xa5\xa9\xd3\x0a\x5b\xd9\x87\xae\xb8\x0a\x76\xab\xa1\x32\x1f\x3f\x13\xc4\x4f\x5c\xde\x8e\xff\xb1\xb5\x7c\xfc\xf1\xaa\x81\x5f\x7e\x17\x4b\xf0\x3c\xb2\xc7\xeb\x89\xb0\x55\x05\xfd\x55\xb2\x1f\xde\x6c\x75\x6b\x3a\x45\xad\x8c\x4e\xfd\x41\xc4\x6d\xd9\x85\x22\x70\x56\x60\x29\xef\xe2\x7b\xe0\x1a\x38\x86\xb3\xeb\x01\x9d\x28\x6d\x85\x5e\xf9\x6d\x0f\xd2\xee\x32\x21\xdb\x7e\x40\x6e\x61\xba\xf3\x43\x98\xef\x8a\x7b\xa0\xee\xbc\x9a\x38\x7b\x6f\x01\x00\x00\xff\xff\x3a\x54\x8d\x83\xbd\x02\x00\x00"

func stakingcollectionStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_unstaked_tokensCdc,
		"stakingCollection/stake_unstaked_tokens.cdc",
	)
}

func stakingcollectionStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xa8, 0x7b, 0xe7, 0xd6, 0xdb, 0x84, 0x37, 0x16, 0xe4, 0x35, 0x22, 0x17, 0xe6, 0x1a, 0xc, 0x64, 0xda, 0x5a, 0x5a, 0xd1, 0x7a, 0x73, 0x9c, 0x6e, 0x62, 0xd, 0x8d, 0xab, 0x32, 0x7d, 0x4d}}
	return a, nil
}

var _stakingcollectionTestDeposit_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\x9b\x40\x0c\xbd\xf3\x15\x56\x0e\x15\x39\x2c\xf4\x50\xf5\x10\xa5\x5d\x21\x42\xaa\x55\xd0\x52\x2d\x6c\x7b\x9e\x05\x43\x46\x99\x8c\xd1\x8c\xd1\x6e\x55\xed\xbf\x57\x30\xc9\x28\x34\xa9\x54\x2e\x68\xec\xf7\xec\xf7\x6c\xcb\x63\x4f\x86\x61\xab\xe8\xb5\x64\x71\x90\xba\x4b\x49\x29\xac\x59\x92\x86\xd6\xd0\x11\x3e\xbe\x95\x55\xb2\x7b\x78\xfc\x96\x16\x79\x9e\xa5\xd5\x43\xf1\x98\x6c\x36\x4f\x59\x59\x06\x17\xe4\x8a\x0e\x78\x22\x2c\xfc\x7b\xe1\x11\x83\xee\xe4\x8b\xc2\x19\xea\x32\xe6\x91\x39\xd5\x07\x6c\xa6\x98\x3d\xf7\xcf\x8b\x74\x97\x6d\xaa\x62\x97\xf9\xce\x41\x1c\xc3\xb3\xc5\x06\x48\xab\x5f\xd0\x92\x01\x46\xcb\xd0\x0f\xa6\x27\x8b\x16\x98\x5c\x80\xf7\x08\x0d\xf6\x64\x25\x03\xbb\xe6\x83\x76\xe6\xa4\x9e\xb2\xd6\xb9\x86\xda\xdb\x0e\x02\x36\x42\x5b\x31\x3d\x42\x71\xa4\x41\xf3\x0a\x9e\xb7\xf2\xed\xf3\xa7\x25\xfc\x0e\x02\x00\x80\xde\x60\x2f\x0c\x86\x56\x76\x1a\xcd\x0a\x92\x81\xf7\x49\x5d\x8f\x58\x8f\x19\x3f\x85\x7c\x51\xfa\x09\x5b\xf8\x02\x8e\x13\xbd\x90\x31\xf4\xba\xfe\x70\x73\xf6\xd1\x55\xe4\x6b\x38\x8e\x63\x75\x7b\x55\xd7\xf0\x92\xc9\x88\x0e\xbf\x0b\xde\x2f\xbd\x9a\xf1\xbb\xbf\x87\x5e\x68\x59\x87\x8b\x94\x06\xd5\x80\x26\x06\x27\x05\x04\x18\x6c\xd1\xa0\xae\x71\x9a\xe0\xcd\xf1\x2c\x96\x73\x77\xed\x79\xdb\xff\x34\x37\x65\xa3\x1f\x62\x50\x7c\x36\x11\x5b\x27\x2f\xf6\xec\x29\xfd\xdf\x4a\x67\x3a\xb7\x79\xf1\x13\x26\xfe\xdf\xda\xd8\xdd\xd1\xfa\x6e\xbe\x83\xa8\x43\x76\x27\xe6\xd7\xeb\xfe\xf3\xfe\xfe\x31\x27\x9f\xee\xe9\x54\xc0\xf9\x59\xdf\xb9\x56\xae\xc0\x7b\xf0\xfe\x27\x00\x00\xff\xff\xf0\x15\xfa\x02\x58\x03\x00\x00"

func stakingcollectionTestDeposit_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTestDeposit_tokensCdc,
		"stakingCollection/test/deposit_tokens.cdc",
	)
}

func stakingcollectionTestDeposit_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionTestDeposit_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/test/deposit_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xc5, 0x20, 0x7d, 0xb3, 0xdb, 0xdc, 0x38, 0x2d, 0x78, 0xd7, 0x9c, 0xb9, 0xb9, 0x51, 0xb, 0x50, 0x6e, 0x9f, 0x8c, 0x96, 0x92, 0xc8, 0xa4, 0x28, 0xc3, 0xac, 0xb8, 0xf8, 0x50, 0x30, 0xb8}}
	return a, nil
}

var _stakingcollectionTestGet_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x5d\xaf\x9a\x40\x10\x7d\xdf\x5f\x31\xe1\xa1\xc1\x87\x7a\xfb\xd0\xf4\xc1\xdc\xf6\x86\x20\x36\x46\x22\x8d\xe0\x0f\x58\x61\xc0\x8d\xb8\x43\x76\x87\xa8\x69\xfc\xef\x0d\x1f\xdd\x2b\xd1\x7d\x21\x73\x38\x73\x66\xce\x19\x75\x6e\xc8\x30\xac\x6a\xba\xa4\x2c\x4f\x4a\x57\x21\xd5\x35\xe6\xac\x48\x43\x69\xe8\x0c\xdf\xae\x69\x16\x6c\xd6\xdb\xdf\x61\x12\xc7\x51\x98\xad\x93\x6d\xb0\x5c\xee\xa2\x34\x15\x0f\xcd\x19\x9d\x70\x6c\xf0\x5c\xed\x39\x46\xab\x2b\x75\xa8\x71\xc2\x7a\xc4\x1c\x33\xa6\xfc\x84\x45\x8f\xd9\xff\xf3\xe3\x24\xdc\x44\xcb\x2c\xd9\x44\x6e\xb2\x78\x7b\x83\xbd\xc5\x02\x48\xd7\x37\x28\xc9\x00\xa3\x65\x68\x5a\xd3\x90\x45\x0b\x4c\x03\xc0\x47\x84\x0a\x19\x78\x14\x6c\xf5\xe0\x4c\xe9\xfe\x97\x1d\x2c\x43\xee\x3c\x0b\xc1\x46\x6a\x2b\xfb\xc2\x97\x67\x6a\x35\x2f\x60\xbf\x52\xd7\x1f\xdf\x67\xf0\x57\x08\x00\x80\xc6\x60\x23\x0d\xfa\x56\x55\x1a\xcd\x02\x82\x96\x8f\x41\x9e\x77\x5c\xc7\xe9\x5e\x8d\xfc\x20\xbd\xc3\x12\x7e\xc2\xd0\x33\x3f\x90\x31\x74\x79\xff\xf2\x32\xf8\xf9\x13\xf2\xcb\xef\xb2\x58\xbc\xbe\xd3\x33\x3d\x65\x32\xb2\xc2\x3f\x92\x8f\x33\xb7\x4d\xf7\x3e\x3e\xa0\x91\x5a\xe5\xbe\x17\x52\x5b\x17\xa0\x89\x61\x58\x05\x24\x18\x2c\xd1\xa0\xce\xb1\x8f\xef\x65\x3c\xde\x54\x6e\xe2\x74\xcc\xf8\xfd\xeb\xd4\xf3\xbc\x42\x1e\xee\xe9\xe2\x1c\xbe\xb3\xcf\xa0\x0a\xb4\x6c\xe8\x36\x4a\xf4\xf0\x5d\xdc\x05\xfc\x0b\x00\x00\xff\xff\xc7\xea\x46\x26\x9e\x02\x00\x00"

func stakingcollectionTestGet_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTestGet_tokensCdc,
		"stakingCollection/test/get_tokens.cdc",
	)
}

func stakingcollectionTestGet_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionTestGet_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/test/get_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0x3c, 0x3c, 0x18, 0x89, 0xc7, 0xbd, 0x6, 0x3, 0xe, 0x33, 0x90, 0x3, 0x9f, 0x9b, 0x7, 0x29, 0xc1, 0x6c, 0x55, 0xde, 0xfa, 0xa, 0xc4, 0xe3, 0x97, 0x57, 0xb9, 0x10, 0x92, 0xa, 0x52}}
	return a, nil
}

var _stakingcollectionTransfer_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x4f\xdb\x40\x10\x7c\xcf\xaf\x58\x78\xa8\x1c\x09\x4c\xd5\xbe\x45\x7c\x28\x4d\x28\x8d\x8a\x00\x11\xfa\x03\x36\xbe\xb5\x7d\xad\x73\x6b\x9d\xd7\x01\x8a\xf8\xef\xd5\x9d\x3f\x88\xb1\xdb\x06\x89\xbc\x44\x67\xef\xcd\xcd\xce\xcc\xfa\xf4\x3a\x67\x2b\xf0\x35\xe3\xfb\xa5\xe0\x2f\x6d\x92\x19\x67\x19\x45\xa2\xd9\x40\x6c\x79\x0d\x1f\x1f\x96\x77\xd3\xef\x8b\xab\x8b\xd9\xf5\xe5\xe5\xf9\xec\x6e\x71\x7d\x35\x9d\xcf\x6f\xcf\x97\xcb\xd1\xe8\xe8\x08\xee\x2c\x9a\x22\x26\x5b\x00\xc2\x15\x2b\x9a\x53\x46\x09\x0a\x5b\xe0\xd5\x4f\x8a\xa4\x02\x41\x03\x58\x4a\xca\x56\xff\xf6\xa5\x51\xc4\x5c\x1a\x71\x00\x68\x14\xa0\x52\x05\x48\x4a\xaf\x10\x84\x01\x0d\x4b\x4a\xd6\xef\x28\x8d\x14\x50\xb3\x84\x17\x9a\x0e\x44\x2b\x32\xa2\x63\x4d\x0a\x56\x8f\x1e\x49\x18\xa6\x4a\x59\x2a\x8a\x70\x34\x12\x47\x12\x7d\x75\x60\x58\xd1\x62\x3e\x81\xa5\x58\x6d\x92\x03\x50\xcd\x71\xee\xe1\x8f\x85\x91\xcf\x9f\x0e\x40\x78\xd2\x6c\x1f\xc3\xd3\x08\x00\x20\xa3\xaa\x97\x9e\x4c\xb7\x14\x4f\xe0\xc3\xa0\x82\x61\xef\x49\x0b\x25\xdc\x7b\x37\xc3\x7c\x77\xa0\xa7\x1d\xeb\x6e\xca\x55\xa6\xa3\xe7\x91\x3f\x38\xb7\x94\xa3\xa5\xa0\x56\x73\x02\xd3\x52\xd2\x69\xb5\x68\xfa\x74\x3f\xe7\x6b\x4a\x8d\xe8\x4e\x4b\xa9\x6d\x1e\x70\xa9\xf6\x59\x18\xd6\x65\x21\x90\xe2\x86\x00\x61\x83\x99\x56\x03\x6e\x81\x36\xc0\x56\x91\x77\xd7\x52\x44\x7a\x43\x7d\xd0\xb0\xa5\xa2\x63\x08\xf6\x86\x7b\x55\x4c\x45\x4d\xfe\x1b\x6e\xa8\x57\x10\x60\xe5\xe0\x04\x84\xc7\xdb\xed\x79\x29\xd0\xe8\x28\xd8\x9f\x53\x21\xda\xa0\x67\xd6\xb4\xbb\xdd\xc6\x40\x03\x05\x09\x94\x79\xb8\x3f\x6e\xf1\x6a\x75\x6b\xe5\x2e\x48\x00\xc1\x52\x4c\x96\x4c\xe4\x93\xe8\xfa\xdb\xce\xff\x70\x2c\xdc\xaf\xa0\x2c\x0e\xff\x16\x33\x38\x69\x38\x86\x2b\xb6\x96\xef\x8f\x77\x4d\xcb\x69\xe0\x30\x27\xc3\x73\xde\x2f\x5f\x0a\x5b\x4c\xe8\x06\x25\x1d\x77\x54\x3b\x3b\x6b\x84\x9b\x71\x99\x29\x30\x2c\x50\x51\x71\x0d\xbb\x56\x7b\x58\xfb\xe3\x9e\x3a\x4e\x8e\x2a\x97\xb5\x7d\xc0\x71\xa5\xd1\x4e\x81\x13\x0e\xa1\x85\xac\x66\xa9\xc1\x39\x81\x84\xa4\x5e\x04\xc2\xdd\xa3\xbf\x54\x44\x11\x22\xcc\x71\xa5\x33\x2d\x8f\x8d\x39\xb9\x67\x03\x6b\x92\x94\x55\x01\xb8\x41\x9d\xe1\x2a\x23\x60\xe3\xdf\xd7\x41\x1d\xb2\x2e\xec\x7a\x37\x3c\xd7\x70\xf2\x42\x32\x4c\x48\x66\x2d\x83\x9d\x2d\x7c\xe3\xc0\x9f\x06\x6f\xaa\xf7\x56\xd7\xa9\x0a\xde\xc3\xf3\xad\xb9\xa0\x07\x8a\x4a\xa1\xee\xf7\xe5\x96\xd6\x3c\x34\xf9\xd5\x7d\xf1\xdf\x81\x09\x3b\x01\x30\x1d\x84\xe3\xc3\x7f\x8f\x51\x68\xfd\xd9\xed\x86\xf6\x4a\xa8\xfe\x5f\x5d\x09\x5b\x8b\x6e\x9c\xe6\x94\x73\xa1\x65\xf8\xde\x7a\x8f\xd0\x84\xa8\x54\x0b\x7a\xed\xbf\xb2\xc1\xf1\x61\xb7\xd9\xbd\x46\xe9\xe7\x3f\x01\x00\x00\xff\xff\xe4\x62\x1c\xe8\xca\x07\x00\x00"

func stakingcollectionTransfer_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTransfer_delegatorCdc,
		"stakingCollection/transfer_delegator.cdc",
	)
}

func stakingcollectionTransfer_delegatorCdc() (*asset, error) {
	bytes, err := stakingcollectionTransfer_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/transfer_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x7, 0xf, 0xbf, 0x6b, 0x6b, 0x4f, 0xdf, 0xea, 0x50, 0x55, 0xed, 0xb8, 0x6b, 0x3a, 0x3b, 0xeb, 0xff, 0x95, 0xda, 0x97, 0x68, 0x16, 0xce, 0x1e, 0xbb, 0x3e, 0x85, 0x63, 0xa5, 0x36, 0x63}}
	return a, nil
}

var _stakingcollectionTransfer_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x4f\xdb\x4a\x10\x7d\xcf\xaf\x18\x78\xb8\x72\x24\x30\xf7\x39\x22\xa0\xdc\x84\x4b\xa3\x52\x40\x84\xb7\xaa\x0f\x13\xef\x38\xde\xd6\xd9\xb1\x76\xc7\xa1\x14\xf1\xdf\xab\xf5\xda\xf9\xc0\x6e\x13\x24\xf2\x12\xd9\x9e\x3d\x73\xe6\x9c\xb3\xbb\x7a\x59\xb0\x15\xf8\x3f\xe7\xa7\x99\xe0\x0f\x6d\x16\x63\xce\x73\x4a\x44\xb3\x81\xd4\xf2\x12\xfe\xfd\x39\x7b\x1c\x7d\x9e\xde\x5e\x8f\xef\x6e\x6e\xae\xc6\x8f\xd3\xbb\xdb\xd1\x64\xf2\x70\x35\x9b\xf5\x7a\x67\x67\xf0\x68\xd1\xb8\x94\xac\x03\x84\x5b\x56\xe4\x51\xc8\x02\xcf\xbf\x53\x22\x01\x01\x0d\x60\x29\x19\x5b\xfd\xab\xaa\x4b\x12\xe6\xd2\x88\x5f\x8d\x46\x01\x2a\xe5\x40\x32\xda\x5e\x2e\x0c\x68\x58\x32\xb2\x55\x79\x69\xc4\x41\xcd\x0f\x36\x04\x3d\x82\x56\x64\x44\xa7\x9a\x14\xcc\x9f\x2b\x18\x61\x18\x29\x65\xc9\xb9\xb8\xd7\x13\x4f\x0f\xab\xea\xc8\xb0\xa2\xe9\x64\x00\x33\xb1\xda\x2c\x4e\x40\x78\xd0\x54\xf6\xe1\xa5\x07\x00\x90\x53\xe0\xdc\xd2\xe2\x81\xd2\x01\xfc\xd3\x29\x53\xdc\x7a\xb3\x86\x12\x6e\x7d\x1b\x63\x71\x38\xd0\xcb\x81\x75\xf7\xe5\x3c\xd7\xc9\x6b\xaf\x6a\x5c\x58\x2a\xd0\x52\x54\x0b\x37\x80\x51\x29\xd9\x28\x3c\x34\x73\xfa\x9f\x37\x2f\xa3\x46\x5f\x2f\x9b\xd4\x5e\xbe\x75\xa3\x36\x53\x18\x96\xa5\x13\xc8\x70\x45\x80\xb0\xc2\x5c\xab\x0e\x57\x40\x1b\x60\xab\x82\x8b\x96\x12\xd2\x2b\x7a\x83\x18\xaf\x49\xe8\x14\xa2\xa3\xee\x29\x15\x93\xab\x69\x7f\xc2\x15\xb5\x0a\x22\x0c\xde\x0d\x40\xb8\xbf\x3d\x58\x25\x02\x1a\x9d\x44\xc7\x13\x72\xa2\x0d\x56\xb4\x9a\x41\xb7\x67\xe8\x60\xef\x48\xa0\x2c\xe2\xe3\xfe\x1a\xaf\xd6\xb5\xd6\xec\x9a\x04\x10\x2c\xa5\x64\xc9\x24\x55\xdc\xfc\x70\xdb\x09\xef\x0e\x84\xff\x39\xca\xd3\xf8\x4f\x01\x83\x61\xc3\x31\x9e\xb3\xb5\xfc\x74\x7e\x68\x4e\x2e\x22\x8f\x39\xe8\xde\xc6\xed\xf2\x99\xb0\xc5\x05\xdd\xa3\x64\xfd\x1d\xd5\x2e\x2f\x1b\xe1\xc6\x5c\xe6\x0a\x0c\x0b\x04\x2a\x7e\x60\x3f\x6a\x0b\xeb\xb8\xdf\x52\xc7\xcb\x11\x12\x59\xdb\x07\x9c\x06\x8d\xf6\x47\x4d\x38\x86\x35\x5e\xd8\x42\x0d\xc8\x10\x16\x24\xf5\x43\x24\xbc\xdb\xf7\xbf\xc0\x12\x21\xc1\x02\xe7\x3a\xd7\xf2\xdc\x38\x53\x54\x54\x60\x49\x92\xb1\x72\x80\x2b\xd4\x39\xce\x73\x02\x36\xd5\xf7\x3a\xa2\x5d\xbe\xc5\xbb\xc6\x75\x6f\x67\x18\x6e\x48\xc6\x0b\x92\xf1\x9a\xc1\xc1\xfe\xbd\x73\x9f\x5f\x44\xef\xaa\xaf\x7c\xae\x23\x15\x7d\xa8\xe1\xde\xa0\x25\x26\x99\x36\x54\x0b\x30\x35\x29\xc3\xf0\xef\x39\xf7\x22\x7d\xd9\x59\xe5\xa2\xfe\xd7\x70\x3a\x7f\xdb\x4b\x6f\xb1\xe9\xb9\x0e\x94\xf6\x5d\x53\x0e\x69\x72\x05\x25\xe1\x42\xf0\x90\x30\x9d\xbc\x89\xe8\x03\x2d\xb9\x75\x22\x85\x9b\x6a\xef\x46\x8e\x77\x46\x37\x9b\xe5\xe7\xa7\x7b\x66\xb6\x55\x57\xdf\x70\x7d\x0f\x85\xff\x5d\x72\x13\x2a\xd8\x69\xe9\xb8\x0f\x3f\x22\xaa\x31\x2a\xe5\x51\xef\xaa\x03\x3d\x3a\x3f\xdd\x1a\xe1\xe8\xa4\xc3\xca\x41\xc7\xbb\x90\xa0\xd7\xde\xeb\xef\x00\x00\x00\xff\xff\x96\xaa\xe3\x77\x3c\x08\x00\x00"

func stakingcollectionTransfer_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTransfer_nodeCdc,
		"stakingCollection/transfer_node.cdc",
	)
}

func stakingcollectionTransfer_nodeCdc() (*asset, error) {
	bytes, err := stakingcollectionTransfer_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/transfer_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x67, 0x83, 0xba, 0x26, 0xad, 0xc, 0x4e, 0xfe, 0xb7, 0x94, 0x11, 0x42, 0x42, 0xdc, 0x83, 0x93, 0x25, 0x10, 0x37, 0x21, 0xa1, 0x8f, 0xec, 0x4e, 0xf6, 0xfb, 0xed, 0x96, 0x5e, 0x71, 0x29}}
	return a, nil
}

var _stakingcollectionUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x6e\xc2\x30\x0c\x86\xef\x7d\x8a\x5f\x1c\xa6\x72\x29\x3b\x57\xdb\x50\x55\xd8\x84\x56\xc1\x44\x79\x81\xac\xb8\x25\x22\xc4\x5d\xe2\x0a\xa4\x89\x77\x9f\x4a\x80\x1d\xe0\x80\x0f\xad\x1c\xd9\xbf\x3f\xfb\xd7\xbb\x96\x9d\xe0\xdd\xf0\xbe\x14\xb5\xd5\xb6\xc9\xd9\x18\xaa\x44\xb3\x45\xed\x78\x87\xe7\x43\xb9\xca\x3e\x67\xf3\x8f\x7c\x51\x14\xd3\x7c\x35\x5b\xcc\xb3\xc9\x64\x39\x2d\xcb\x28\x1a\x8d\x46\x58\xd2\x4f\x47\x5e\x3c\x84\xd1\x59\x2f\x6a\x4b\xc8\x8a\x02\xc2\x5b\xb2\x1e\x35\x3b\xc8\x86\xe0\x5b\xaa\x74\xad\x69\x0d\xcb\x6b\x02\x3b\xac\xc9\x50\xa3\x84\x1d\xb4\x0d\x25\x01\x00\xd5\x95\x20\x8a\xc4\x29\xeb\xd5\x29\x89\xfb\xc6\xd9\x24\x45\x29\x4e\xdb\x66\x88\xdf\x08\x00\x4e\x1f\x43\x72\x69\xff\xe7\x5f\x52\x9d\xe2\xe9\xee\x6a\xc9\xcd\x4b\x74\xd2\x69\x1d\xb5\xca\x51\xac\xaa\x8a\x3b\x2b\x29\xb2\x4e\x36\x59\x48\x2e\x03\xfb\xf0\x64\xea\xe4\xde\x40\xbc\xe2\xdc\x9b\x7c\xb3\x73\xbc\x7f\x79\x14\xe0\x2d\xee\xcf\x9d\xde\xb7\xe2\xb6\xbc\x14\x76\xaa\xa1\x2f\x25\x9b\xe1\x15\xab\x8f\xf1\x18\xad\xb2\xba\x8a\x07\x39\x77\xa6\x3f\xb7\x20\xa0\xc0\x51\xdd\xbb\x74\xa3\x35\x08\x0a\xc7\x70\x03\x3a\x50\xd5\x09\x3d\xb2\x6d\x72\x36\x3c\x33\xe6\xea\x4e\xf8\x5f\x14\x8f\xd1\x5f\x00\x00\x00\xff\xff\x92\xff\xa2\x70\x62\x02\x00\x00"

func stakingcollectionUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionUnstake_allCdc,
		"stakingCollection/unstake_all.cdc",
	)
}

func stakingcollectionUnstake_allCdc() (*asset, error) {
	bytes, err := stakingcollectionUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0xba, 0xb4, 0x65, 0xa5, 0xa4, 0x6, 0xf6, 0x67, 0x0, 0x75, 0x3a, 0x4f, 0x78, 0x89, 0xab, 0x9a, 0x3c, 0x83, 0xba, 0x1c, 0xf5, 0xe8, 0xae, 0xe7, 0x92, 0xc8, 0xa, 0xea, 0x9e, 0xd7, 0xc1}}
	return a, nil
}

var _stakingcollectionUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5d\x8b\xe2\x40\x10\x7c\x9f\x5f\x51\xf8\x70\x44\x38\xe2\x3d\x87\xbb\x93\x10\xdd\x45\x56\x74\x31\xfe\x81\xd9\xa4\x93\x0c\x1b\xa7\xc3\x4c\x87\x08\x8b\xff\x7d\x49\xa2\x2e\xbb\xfa\x60\x3f\xe4\xa3\x67\xba\xaa\xba\xca\x1c\x1a\x76\x82\xa7\x9a\xbb\x54\xf4\xbb\xb1\x65\xc2\x75\x4d\x99\x18\xb6\x28\x1c\x1f\xf0\xe7\x98\xee\xe3\x97\xd5\xe6\x39\xd9\xae\xd7\xcb\x64\xbf\xda\x6e\xe2\xc5\x62\xb7\x4c\x53\xa5\x66\xb3\x19\x92\x4a\xdb\x92\x3c\xa4\x22\x58\x92\x8e\x5d\x8f\x02\x9d\xe7\x8e\xbc\x47\xc1\x6e\x38\xf2\x0d\x65\xa6\x30\x94\xc3\x72\x4e\x4a\x89\xd3\xd6\xeb\x81\x27\xe8\x3b\xab\x45\x84\x54\x9c\xb1\xe5\x6f\x58\xea\xe2\x71\xfc\xd2\x9b\xe2\x43\x01\xc0\xf0\xa8\x49\xe0\x7f\x8a\xdd\x51\x11\xe1\xd7\xdd\x3d\xc2\x9b\x8e\x1a\x70\x1a\x47\x8d\x76\x14\xe8\x2c\xe3\xd6\x4a\x84\xb8\x95\x2a\x1e\x7f\x2e\x84\x7d\x79\xaa\x8b\xf0\x1e\x21\xfe\xe1\x3c\x1b\xbe\xb1\x73\xdc\xfd\x7d\x54\xc0\xff\xa0\xf7\x36\xba\xef\xfb\xed\xf5\x54\xd8\xe9\x92\x5e\xb5\x54\xd3\xab\xac\xbe\xe6\x73\x34\xda\x9a\x2c\x98\x24\xdc\xd6\xbd\xb7\x82\x51\x0a\x1c\x15\x10\xc6\x0d\xd6\x64\x44\x38\x8d\x1e\xd0\x91\xb2\x56\xe8\x91\x6d\xc3\xb6\xc9\xb5\xd0\xe6\x9a\xf1\x39\xa3\x6b\x7c\xe3\xfb\x7b\x7c\x5f\xdf\x17\xda\x93\xfa\x0c\x00\x00\xff\xff\xa5\x85\x44\xd5\x74\x02\x00\x00"

func stakingcollectionUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionUpdate_networking_addressCdc,
		"stakingCollection/update_networking_address.cdc",
	)
}

func stakingcollectionUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := stakingcollectionUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0xff, 0x7b, 0x7f, 0xd9, 0x90, 0x89, 0x51, 0x97, 0x22, 0x0, 0x42, 0x8d, 0x15, 0xe0, 0x7, 0xb8, 0x63, 0x93, 0x9e, 0x61, 0xf, 0x72, 0x10, 0xf7, 0xf8, 0x90, 0x99, 0xf9, 0x47, 0x7a, 0x14}}
	return a, nil
}

var _stakingcollectionWithdraw_from_machine_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\xd3\x40\x0c\xbd\xe7\x2b\xac\x3d\xa0\xac\x84\x52\x0e\x88\x43\x04\xac\xa2\xb4\x45\x15\xa5\x45\x4d\xf9\x00\x33\x71\x9a\x51\x27\xe3\x30\xf1\x90\x22\xd4\x7f\x47\xc9\x34\x45\xda\xf6\x50\x1f\x62\x65\x64\x3f\x3f\xbf\x67\xdd\xb4\xec\x04\x96\x86\xfb\x42\xf0\xa8\xed\x21\x67\x63\x48\x89\x66\x0b\x95\xe3\x06\xde\x9d\x8a\x7d\xf6\x75\xb5\xf9\x92\x6f\xd7\xeb\x45\xbe\x5f\x6d\x37\xd9\x7c\xbe\x5b\x14\x45\x14\xcd\x66\x33\xd8\xd1\x2f\x4f\x9d\x80\x30\xf4\x5a\xea\xd2\x61\x0f\xc2\x47\xb2\x5d\xe8\x97\x9a\xa0\x41\x55\x6b\x4b\x80\x4a\xb1\xb7\x32\xf6\xed\x6b\x9a\xea\xd0\x11\xa0\x17\x6e\x50\xb4\x42\x63\xfe\x40\x49\x2d\x77\x5a\xa8\x1c\x60\x07\x04\x6f\x0d\xab\x23\x95\x13\x04\xfc\x46\x6f\x24\x8a\xc4\xa1\xed\x70\xa4\x1b\x5b\x2e\x69\x35\x4f\xa1\x10\xa7\xed\xe1\x2d\x60\x33\x54\xa6\xf0\x63\xa9\x4f\x1f\xde\x3f\xc3\xdf\x08\x00\x60\xfc\x18\x12\xe8\x5e\xef\xbb\xa3\x2a\x85\x37\x77\xa5\x48\x6e\x5e\xa2\x11\xa7\x75\xd4\xa2\xa3\xf8\xc2\x2a\x85\xcc\x4b\x9d\x85\x9f\x69\xe0\x10\x1d\x99\x2a\xb9\x37\x10\x3e\x4d\x1b\x25\x3f\xd9\x39\xee\x3f\x3e\x4a\xe0\x73\x3c\xc8\x9b\xde\xb7\xee\xb6\xbc\x10\x76\x78\xa0\xef\x28\xf5\xf3\x95\xd6\x10\x2f\x2f\xd0\xa2\xd5\x2a\x7e\xca\xd9\x9b\x12\x2c\x0b\x04\x2a\xe0\xa8\x1a\xf4\xbf\xc1\x7a\x0a\x08\xe7\xa0\x01\x9d\x48\x79\xa1\x47\xb6\x4d\xa6\x0b\x59\x3a\x6e\xbe\x85\xa3\xb8\xa8\x75\x75\x2f\xe4\xff\xee\x85\x3c\x4d\x3c\x47\xff\x02\x00\x00\xff\xff\xdb\xab\x20\x8d\xb2\x02\x00\x00"

func stakingcollectionWithdraw_from_machine_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_from_machine_accountCdc,
		"stakingCollection/withdraw_from_machine_account.cdc",
	)
}

func stakingcollectionWithdraw_from_machine_accountCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_from_machine_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_from_machine_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0x7c, 0xe3, 0xa9, 0xe3, 0x68, 0x1a, 0x64, 0x88, 0xe, 0xc6, 0xc4, 0xa4, 0x9b, 0x35, 0x9f, 0xa1, 0x43, 0xf2, 0x57, 0x79, 0xca, 0x6d, 0xa4, 0x6e, 0x57, 0xfe, 0xbe, 0x2f, 0x2e, 0x1f, 0xef}}
	return a, nil
}

var _stakingcollectionWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x8f\x1c\x8a\x03\xc6\x2e\x6d\xe9\x41\xb4\x35\xc2\x4e\x8a\x69\x48\x8a\xe5\xfc\x80\xad\x34\xb2\x16\xaf\x77\xd4\xd1\xa8\x72\x28\xf9\xef\x65\x25\xcb\x0e\xb5\x0f\xde\x83\x96\x5d\x46\xdf\xbc\xd9\xf7\xec\xae\x62\x51\xdc\x3b\x6e\x53\x35\x5b\xeb\x37\x73\x76\x8e\x32\xb5\xec\x51\x08\xef\xf0\x7e\x9f\xae\x93\x1f\xcb\xc7\xef\xf3\xa7\x87\x87\xbb\xf9\x7a\xf9\xf4\x98\x2c\x16\xab\xbb\x34\x8d\xa2\xe9\x74\x8a\x15\xfd\x6e\xa8\x56\x28\xa3\xb5\x5a\xe6\x62\x5a\x08\xb5\x46\x72\xca\xa1\xbc\x25\x5f\xa3\x60\x81\x96\x84\xba\xa2\xcc\x16\x96\x72\x78\xce\x09\x2c\xc8\xc9\xd1\xc6\x28\x0b\xac\xef\x4b\x7a\x15\xc8\x8e\x32\xba\x2e\xeb\x92\x06\x98\x11\x82\x69\x94\x77\x46\x6d\x66\x9c\x7b\x41\x4e\x15\xd7\x56\xbb\x7e\x1d\xa4\xf1\x8e\xb3\x2d\xe5\x30\x59\xc6\x8d\x57\xfc\x31\x8d\x53\x14\x56\x6a\x1d\x77\xbc\xc4\xe7\xa1\xd2\xc3\xf8\x17\x1c\x8a\xdf\xf0\x4f\x44\xeb\x0f\xcc\x4b\xc4\x28\x52\x31\xbe\x36\x9d\xce\x51\x98\x69\xb9\x88\x91\xaa\x58\xbf\x19\x9f\x66\x0b\x97\xcf\x4b\xaf\x1f\x3f\xcc\xc6\x30\xbb\xf0\x7f\x8c\xe7\x7b\xbb\xff\xfc\xe9\x16\x7f\x23\x00\xe8\x3e\x8e\x74\x98\xff\xe4\xc2\x8a\x8a\x18\xef\x2e\x1a\x34\x39\xbb\x89\x3a\x4e\x25\x54\x19\xa1\xd1\x41\x6b\x8c\xa4\xd1\x32\xe9\x0f\x43\xc3\xb0\x6a\x72\xc5\xe4\x52\x43\x7c\x1d\xe6\x9c\xfc\x62\x11\x6e\xbf\x5c\x2b\xe0\xdb\x28\x84\x26\xbe\x1c\xa8\xf3\xf2\x54\x59\xcc\x86\x7e\x1a\x2d\x6f\x8f\xb2\xc2\x9a\xcd\x50\x19\x6f\xb3\xd1\xcd\x9c\x1b\x17\xf2\xa2\xe8\xa5\x40\xa8\x08\x3e\x9f\xb1\x6e\x7a\xc2\x6b\xff\x06\xb4\xa7\xac\x51\xba\x66\xda\xc9\x90\xdb\xd5\x21\xb6\xeb\x2e\x08\x47\x3f\xfb\xfd\x3f\x3f\xdf\x1c\x4e\x9e\xf6\xfb\xa0\xe3\x35\xfa\x17\x00\x00\xff\xff\x64\xbf\x03\x75\x5e\x03\x00\x00"

func stakingcollectionWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_rewarded_tokensCdc,
		"stakingCollection/withdraw_rewarded_tokens.cdc",
	)
}

func stakingcollectionWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x49, 0x8d, 0xd0, 0x5b, 0x42, 0x21, 0x6d, 0xfa, 0xef, 0x43, 0x36, 0x96, 0xc0, 0x98, 0x8f, 0x63, 0x76, 0xd0, 0x1a, 0xda, 0xbb, 0x68, 0x23, 0x3d, 0x88, 0x97, 0xea, 0xba, 0x59, 0x73, 0xd7}}
	return a, nil
}

var _stakingcollectionWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\x4f\x7b\xa8\x58\x09\x41\xd5\x56\x3d\xa0\xb6\x28\x82\xdd\x0a\x75\xb5\x5b\x11\xf8\x01\xd3\x64\x42\x2c\x8c\x27\x75\xc6\x85\x55\xb5\xff\xbd\x72\x42\x60\x55\x38\xac\x0f\xb6\x6c\x8d\xbe\x79\xe3\xf7\xcc\xae\x16\xaf\xb8\xb7\xb2\xcf\x94\xb6\xc6\x6d\x66\x62\x2d\xe7\x6a\xc4\xa1\xf4\xb2\xc3\xfb\x43\xb6\x4a\x7f\x2c\x1e\xbf\xcf\x9e\x1e\x1e\xee\x66\xab\xc5\xd3\x63\x3a\x9f\x2f\xef\xb2\x2c\x49\xc6\xe3\x31\x96\xfc\x3b\x70\xa3\x50\xc1\xde\x68\x55\x78\xda\x23\xb8\x46\x69\xcb\x05\x54\xb6\xec\x1a\x94\xe2\xa1\x15\xa3\xa9\x39\x37\xa5\xe1\x02\x4e\x0a\x86\x78\x14\x6c\x79\x43\x2a\x1e\xc6\x75\x25\x9d\x0a\xe4\x27\x19\x6d\x97\x55\xc5\x3d\x8c\x3c\x83\x82\xca\x8e\xd4\xe4\x64\xed\x33\x0a\xae\xa5\x31\xda\xf6\x6b\x21\xc1\x59\xc9\x63\x7f\xca\x73\x09\x4e\xf1\x87\x82\x55\x94\xc6\x37\x3a\x6c\x79\xa9\x2b\x62\xa5\x03\xb9\x67\x1c\x8b\x5f\xf1\xcf\x44\xe3\x8e\xcc\xab\x44\x53\xc2\x28\x4c\x13\x2b\x3c\x27\x89\x7a\x72\x0d\xb5\xb2\x07\x71\xc4\xc5\x7c\x82\x4c\xbd\x71\x9b\xe1\x79\xd4\xf8\xb8\x5e\x38\xfd\xf8\x61\x3a\x04\xed\x22\x6e\x82\xf5\xbd\x39\x7c\xfe\x74\x8b\xbf\x09\x00\xb4\x9b\x65\xed\xbf\xe3\x6c\xca\x92\xcb\x09\xde\x5d\xf5\x6b\x74\xf1\x92\xb4\x9c\xda\x73\x4d\x9e\x07\x47\xe9\x13\xa4\x41\xab\xb4\xbb\xf4\x0d\xe3\x6a\xd8\x96\xa3\x6b\x0d\xf1\xb5\x1f\x7b\xf4\x4b\xbc\x97\xfd\x97\xb7\x0a\xf8\x36\x88\x19\x9a\x5c\xcf\xd7\x65\x79\xa6\xe2\x69\xc3\x3f\x49\xab\xdb\x93\xac\xb8\xa6\x53\xd4\xe4\x4c\x3e\xb8\x99\x49\xb0\x31\x3e\x8a\x4e\x0a\x3c\x97\xd1\xf6\x0b\xd6\x4d\x47\x78\xe9\xfe\x80\x0f\x9c\x07\xe5\xb7\x4c\x3b\xea\x63\xbc\x3e\xa6\x78\xd5\xe6\xe2\xe4\x67\x77\xfe\xe7\xe7\xab\xcb\xd9\xd3\xee\xec\x75\xbc\x24\xff\x02\x00\x00\xff\xff\x02\xba\xdf\x67\x6d\x03\x00\x00"

func stakingcollectionWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_unstaked_tokensCdc,
		"stakingCollection/withdraw_unstaked_tokens.cdc",
	)
}

func stakingcollectionWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0x94, 0x7f, 0x6f, 0xf0, 0xe4, 0x28, 0x27, 0x2d, 0x99, 0x6, 0xd7, 0xff, 0xf1, 0xff, 0xa5, 0x7, 0x3a, 0x22, 0x3c, 0xba, 0x2f, 0xff, 0x40, 0x14, 0xdd, 0xe2, 0x43, 0x68, 0x43, 0xb0, 0x64}}
	return a, nil
}

var _stakingproxyAdd_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xc2\x40\x10\x85\xef\xf9\x15\x83\x87\x12\x41\xa4\xc7\x12\x6a\x25\x68\x69\x45\xd0\x60\x5a\x68\x8f\x6b\x76\xa2\x4b\xe3\xce\x32\x19\x51\x29\xfe\xf7\xb2\x46\x4d\x42\xba\x87\x90\x7d\x79\x9b\xfd\xde\x3c\xb3\x73\xc4\x02\xa9\xa8\x1f\x63\x37\x09\xd3\xf1\x04\x39\xd3\x0e\x1e\x8f\xe9\x47\x3c\x9f\x2d\xde\x92\xd5\xf2\xeb\x3b\x9e\x4e\x57\xaf\x69\x1a\x04\xc2\xca\x96\x2a\x13\x43\x36\x34\x3a\x82\x54\xd8\xd8\xcd\x00\x98\x0a\x8c\xe0\x73\x66\xe5\x69\x00\x16\xe5\x40\xec\x7f\x18\x6b\xcd\x58\x96\xb5\xaf\xfe\x34\xc7\x53\x2d\x97\xd5\xfd\x0d\xad\x0f\xbf\x41\x00\x00\xe0\x18\x9d\x62\x0c\x55\x96\xd1\xde\x4a\x04\xf1\x5e\xb6\x71\xb5\xf1\x26\xb8\xae\x02\x05\x9c\xe7\x7f\xa7\x42\x23\xc3\x08\xae\x27\x86\x6b\x62\xa6\xc3\xf3\x43\x33\xe4\x70\x41\x1a\xbd\x80\x9c\xd4\x87\x5e\x42\x9f\x3d\x82\x8e\x73\xe9\x90\x95\x10\x4f\x94\x53\x6b\x53\x18\x39\xa5\x42\xac\x36\x98\x28\xd9\xf6\xef\x0c\x7e\x8d\xc7\xe0\x94\x35\x59\xd8\x9b\xd0\xbe\xd0\x60\x49\xa0\x22\x00\xc6\x1c\x19\x6d\x86\x20\x74\x8b\x5c\x31\xc3\xf6\x72\x7f\xaf\x1f\xb4\xf2\x58\xd2\x38\xb3\x39\xc1\xa8\x8b\xe4\xf5\xf0\x62\x98\x46\x60\xf4\xad\x02\xff\xfc\xb7\x81\x8e\xd4\x29\xa3\xb5\x6d\x77\x52\xbf\x37\x08\x1b\xd3\x1e\x2a\xad\xdb\x50\x36\xa7\xe8\xce\x5f\x4d\xe8\x1c\x9c\x83\xbf\x00\x00\x00\xff\xff\x31\xc4\x60\xc0\x70\x02\x00\x00"

func stakingproxyAdd_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyAdd_node_infoCdc,
		"stakingProxy/add_node_info.cdc",
	)
}

func stakingproxyAdd_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyAdd_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/add_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0xf2, 0xa0, 0xe3, 0xb7, 0x7c, 0x79, 0xbd, 0xee, 0x11, 0x1e, 0x31, 0xf2, 0x7a, 0xdc, 0xa2, 0xf, 0xae, 0xba, 0x2a, 0x46, 0x9a, 0xf3, 0x65, 0xd9, 0xb4, 0x2d, 0xd1, 0x43, 0x7c, 0x8, 0xf6}}
	return a, nil
}

var _stakingproxyGet_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xc2\x40\x10\x85\xef\xf9\x15\x53\x0f\x25\x81\x22\x3d\x4b\xad\x04\x2d\xad\x14\x34\x98\x1e\xda\xe3\xba\x99\xa4\x4b\xd7\x9d\x65\x32\xa1\x8a\xf8\xdf\xcb\xba\xd5\x50\x3d\x74\x2e\x21\x3b\x6f\xde\xb7\x6f\xd6\x6c\x3c\xb1\x40\x29\xea\xcb\xb8\xa6\x60\xda\xee\xa0\x66\xda\xc0\xfd\xb6\x7c\xcb\x5f\xe7\x8b\xe7\x62\xb5\x7c\xff\xc8\x67\xb3\xd5\x53\x59\x26\x89\xd2\x1a\xdb\x36\x55\xd6\x66\x50\x77\x0e\x36\xca\xb8\x54\x69\x4d\x9d\x93\x11\xe4\x55\xc5\xd8\xb6\x77\xe0\xa8\xc2\xf9\x6c\x04\xa5\xb0\x71\x4d\x36\xfa\x03\x18\x2e\x42\xd7\xd5\x04\xfb\x24\x01\x00\xb0\x28\xe0\x43\x67\xaa\xbc\x5a\x1b\x6b\x64\x07\x63\x68\x50\xf2\x68\x7c\x02\x64\x47\x75\xa8\x61\x83\xd2\x8b\x1f\x6e\xaf\xec\xc3\x01\xf2\xf1\xff\x85\x6c\x85\xbc\xff\x5f\x52\x74\x6b\x6b\xf4\xe1\x31\x3d\x63\x42\x5d\xcd\x2d\x3d\xb2\x12\xe2\x9e\x1f\x07\x0b\x25\x9f\xe7\xc9\xec\x22\xd9\x0a\x6b\x18\x5f\x86\x1c\xae\x89\x99\xbe\xd3\x3e\xd7\x64\x02\x5e\x39\xa3\xd3\xc1\x94\x3a\x5b\x81\x23\x81\x28\x02\x7f\x84\x00\x63\x8d\x8c\x4e\x23\x08\x41\x1b\xef\x16\x7d\x07\xbf\x4c\x46\xe9\xd8\x9d\xb1\x61\x55\xa7\x85\xa7\xa7\x77\x89\xdf\xec\x26\x39\x24\x3f\x01\x00\x00\xff\xff\xb5\x20\x40\x9d\x02\x02\x00\x00"

func stakingproxyGet_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyGet_node_infoCdc,
		"stakingProxy/get_node_info.cdc",
	)
}

func stakingproxyGet_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyGet_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/get_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x30, 0x23, 0x9a, 0x54, 0x69, 0x99, 0xc9, 0xf2, 0x30, 0xe0, 0xed, 0x81, 0x19, 0x11, 0xd6, 0xbe, 0x6f, 0x9d, 0x36, 0xfa, 0x50, 0x2b, 0xa6, 0xf6, 0x68, 0x34, 0x6f, 0x9e, 0xcd, 0x24, 0x49}}
	return a, nil
}

var _stakingproxyRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x8f\xda\x3c\x10\xbd\xe7\x57\xcc\xc7\x61\xbf\x44\x42\x51\x0f\x55\x0f\xd1\xb2\x2b\x04\xb4\x5d\xb1\x02\x44\xa8\xd4\x1e\x8d\x3d\x01\x8b\xe0\x89\x9c\x89\xca\x6a\xc5\x7f\xaf\x1c\x27\x21\xb0\xdd\xb6\xbe\x38\xce\xcc\xbc\x79\xef\x8d\xad\x8f\x05\x59\x86\x67\x92\x07\x54\x1b\x3a\xa0\x29\x21\xb3\x74\x84\x0f\xa7\xe7\xe5\x64\x3e\x9b\x6e\x96\xf3\xd9\x62\x3c\x9d\xae\x67\x69\x1a\x34\xd9\x29\x8b\x83\x36\xbb\x95\xa5\xd3\x4b\x9b\x9d\x6e\xc6\xf3\xa7\xc5\x97\xd5\x7a\xf9\xfd\x47\x9b\x1e\xb0\x15\xa6\x14\x92\x35\x99\x50\x28\x65\xb1\x2c\x13\x18\xfb\x8f\x21\x68\x95\x40\xca\x56\x9b\xdd\x10\xc4\x91\x2a\xc3\x09\x7c\xfb\xac\x4f\x9f\x3e\x46\xf0\x1a\x04\x00\x00\x39\x32\xec\x29\x57\x68\xd7\x98\x25\x70\xd7\xe7\x19\xd7\xdb\xd7\x3a\xea\xb3\x0b\x8b\x85\xb0\x18\x0a\x29\x3d\xda\xb8\xe2\xfd\xd8\x1f\x1c\x24\x34\xab\xc4\x3c\x8b\x3b\x58\x18\x41\x53\x10\x6f\xc9\x5a\xfa\x79\xff\x6e\x9b\x87\xd0\xa9\x4d\xe0\xbd\x78\xca\x64\xc5\x0e\x57\x82\xf7\x51\xd7\xcd\xad\xc7\x47\x28\x84\xd1\x32\x1c\x4c\xa8\xca\x15\x18\x62\xf0\xcd\xc0\x62\x86\x16\x8d\x44\x60\x82\x1e\xd6\xc0\x23\x9c\xbd\x34\x3c\xa1\xac\x18\x7b\x22\x9c\x35\x86\x14\x2e\x0b\xb4\x82\xa9\x51\xb2\x43\x6e\x04\xb7\x86\x47\xf1\x0e\x79\x22\x0a\xb1\xd5\xb9\xe6\x97\x2b\x5a\xf7\x77\xfd\x51\xc6\x0b\x52\xe8\x7e\xa0\xad\xcf\x9e\xc7\xeb\xdf\x53\x56\xd5\x36\xd7\xf2\xfc\x70\x85\x1d\xbe\xa9\x6b\x99\x5e\xc8\xf8\xc2\xda\xae\xff\x1a\xf3\xc3\x08\xfe\xd5\x39\xa7\x1e\xa8\x01\x85\xa2\xc6\x02\xd9\x81\x0f\xa2\xe0\x8d\x59\x4f\x26\x23\x18\xdd\xfa\xe6\x1c\x5a\x34\xd1\xb0\x4e\x9b\x26\xa0\xd5\x1f\x47\x68\xfe\x67\x67\x36\x68\x87\x98\x91\xf5\xf0\xd3\xd1\x20\x96\x64\xa4\xe0\x50\xab\xa8\x47\xe0\xfa\xca\xc5\xd2\xa2\x60\xbc\x98\x19\xb6\xe4\x92\x8e\xe6\xe5\x4d\xf8\xfd\x37\x6a\x7a\x83\x80\xd1\x6d\x0b\x6f\x52\x03\xdf\x2b\xbe\xd5\x2e\x94\xea\x4f\xaa\xd3\xdf\xf2\x88\xb5\x1a\x42\xe1\x42\xc9\x6d\xd3\xf6\x86\x9e\x83\x5f\x01\x00\x00\xff\xff\xa1\xc8\xc2\x7d\x47\x04\x00\x00"

func stakingproxyRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRegister_nodeCdc,
		"stakingProxy/register_node.cdc",
	)
}

func stakingproxyRegister_nodeCdc() (*asset, error) {
	bytes, err := stakingproxyRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xa8, 0x7a, 0xb4, 0x24, 0xcc, 0x6b, 0x8d, 0x67, 0xfe, 0xdd, 0x4c, 0xad, 0x2d, 0x6b, 0x86, 0x24, 0x5c, 0xfd, 0x26, 0x3e, 0x97, 0xdd, 0xeb, 0xd3, 0xd7, 0x4b, 0x36, 0xc8, 0xb5, 0xe2, 0x5c}}
	return a, nil
}

var _stakingproxyRemove_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x51\x4b\xc3\x40\x0c\xc7\xdf\xef\x53\xe4\x49\xda\x97\xe2\x73\x51\xe1\xb0\xa2\x45\xd8\x8e\x9d\x0f\xfa\x98\xb5\x59\x77\xd8\x5e\x8e\x98\xe9\x86\xec\xbb\xcb\xb9\x31\x0b\xe6\x25\x24\xfc\x7f\xe4\x97\x30\x25\x16\x05\xaf\xf8\x1e\xe2\xe0\x84\xf7\x07\xd8\x08\x4f\x70\xbd\xf7\x2f\xf6\xb9\x5d\x3c\xba\xd5\xf2\xf5\xcd\x36\xcd\xea\xc1\x7b\x63\x54\x30\x7e\x60\xa7\x81\x63\x11\xb9\xa7\xb6\xa9\xc1\xab\x84\x38\x94\xf0\x6d\x0c\x00\x40\x12\x4a\x28\x54\x60\xd7\xf1\x2e\x6a\x0d\x76\xa7\x5b\x7b\x1a\x72\x08\xce\x35\x92\x42\xca\x07\x9f\x78\xec\x49\xe0\x16\xce\x44\xb5\x66\x11\xfe\xba\xb9\x9a\x5b\x55\x0b\xee\x29\x2f\x48\xdc\x1f\x74\x57\x64\xd9\x1a\xfe\x25\x97\x89\x04\x95\xe5\x1e\x13\xae\xc3\x18\xf4\xe0\x95\x05\x07\x72\xa8\xdb\xd2\x5c\x24\x66\x02\x95\xd0\xc4\x9f\x94\xe9\x36\x6e\xf8\xf2\xde\xa9\x97\xbf\xc8\xd1\x1c\xcd\x4f\x00\x00\x00\xff\xff\x64\x64\x88\xd5\x33\x01\x00\x00"

func stakingproxyRemove_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRemove_node_infoCdc,
		"stakingProxy/remove_node_info.cdc",
	)
}

func stakingproxyRemove_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyRemove_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/remove_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x54, 0xc1, 0x59, 0xe, 0x14, 0xb4, 0xd3, 0xf1, 0xd2, 0xef, 0x53, 0xff, 0x63, 0xb9, 0x6d, 0x1c, 0x93, 0xfc, 0x57, 0x6, 0xae, 0xa4, 0x12, 0x64, 0x2f, 0xc5, 0x89, 0x83, 0xfe, 0x93, 0x46}}
	return a, nil
}

var _stakingproxyRemove_staking_proxyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\x73\x92\xe4\x12\x3c\x07\x15\x16\x23\x5a\x84\x76\xe9\x7a\xd0\xe3\x34\x19\x93\xc5\x64\x67\x19\xa7\xda\x22\x7d\x77\x59\x5b\x6a\xa0\x7b\x59\x66\xf8\xbf\x99\x6f\xc2\x94\x58\x14\xbc\xe2\x47\x88\xbd\x13\xde\xed\xe1\x5d\x78\x82\xeb\x9d\x7f\xb1\xcf\x8b\xe5\xa3\x5b\xaf\x5e\xdf\x6c\xd3\xac\x1f\xbc\x37\x46\x05\xe3\x27\xb6\x1a\x38\x16\x91\x3b\x5a\x34\x35\x78\x95\x10\xfb\x12\x7e\x8c\x01\x00\x48\x42\x09\x85\x0a\x6c\x5b\xde\x46\xad\xc1\x6e\x75\xb0\xc7\x22\x87\xe0\xf4\x46\x52\x48\x79\xe1\x13\x8f\x1d\x09\xdc\xc2\x89\xa8\x36\x2c\xc2\xdf\x37\x57\x73\xab\x6a\xc9\x1d\xe5\x06\x89\xfb\x87\xee\x8a\x2c\x5b\x43\xc2\x8b\xec\x2a\x91\xa0\xb2\xdc\x63\xc2\x4d\x18\x83\xee\xbd\xb2\x60\x4f\x0e\x75\xd0\xa1\x34\x67\x91\x99\x44\x25\x34\xf1\x17\xcd\x87\x9d\xcf\x3c\xfe\xe5\x1f\x76\x30\x07\xf3\x1b\x00\x00\xff\xff\x4f\x9f\x84\x5d\x3b\x01\x00\x00"

func stakingproxyRemove_staking_proxyCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRemove_staking_proxyCdc,
		"stakingProxy/remove_staking_proxy.cdc",
	)
}

func stakingproxyRemove_staking_proxyCdc() (*asset, error) {
	bytes, err := stakingproxyRemove_staking_proxyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/remove_staking_proxy.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xb7, 0xb8, 0xff, 0xfc, 0x1e, 0x9f, 0xd3, 0x1a, 0x76, 0xac, 0x78, 0xe0, 0x9c, 0xf6, 0x9e, 0xd9, 0xed, 0x85, 0xd4, 0x2b, 0xa4, 0x7e, 0xed, 0xc5, 0xbf, 0x38, 0x7c, 0x76, 0xe6, 0x74, 0x14}}
	return a, nil
}

var _stakingproxyRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xf2\x40\x10\xc7\xef\xfb\x29\xe6\xf1\xf0\x90\x40\x91\x1e\x4a\x0f\x52\x2b\x41\xfb\x22\x05\x0d\xa6\x42\x7b\x1c\x93\x51\x97\xc6\x9d\xed\x64\x42\x95\xe2\x77\x2f\xe9\xa6\x9a\xd2\xb9\x0c\x3b\x3b\x2f\xbf\xff\xdf\xee\x3c\x8b\x42\xa6\xf8\x66\xdd\x26\x15\xde\x1f\x60\x2d\xbc\x83\xcb\x7d\xf6\x9c\x3c\x4d\x67\x0f\xe9\x62\xfe\xf2\x9a\x4c\x26\x8b\xbb\x2c\x33\x46\x05\x5d\x85\xb9\x5a\x76\x91\xe3\x82\xa6\x93\x01\x64\x2a\xd6\x6d\x2e\x00\x77\x5c\x3b\x1d\xc0\xf2\xde\xee\xaf\xaf\x62\xf8\x34\x06\x00\xc0\x0b\x79\x14\x8a\x30\xcf\xc3\x7f\x52\xeb\x36\x09\x8f\xa6\x09\xda\x28\x49\xc1\x37\x00\x8f\x5c\x16\x24\x30\x84\x76\xa2\xbf\x62\x11\xfe\xb8\xf9\xdf\xa5\xec\xcf\xb8\xa0\xa6\x40\x92\x9e\x87\x6e\xa3\x06\x7e\x00\x7f\x3a\xe7\x9e\x04\x95\x65\x8c\x1e\x57\xb6\xb4\x7a\xc8\x94\x05\x37\x94\xa2\x6e\xe3\x13\x43\x13\xa3\x11\x78\x74\x36\x8f\x7a\x63\xae\xcb\x02\x1c\x2b\x04\x02\x10\x5a\x93\x90\xcb\x09\x94\xa1\x0a\x37\x02\x33\x6c\xbf\xef\xf7\x62\xf3\x4b\x4f\xd5\xf5\x75\xd8\x95\xd7\x8a\xea\x82\x9e\x0c\x0d\x39\xfe\x77\xde\xd5\xdd\xd3\x17\x7a\xaf\xa9\xd2\xa5\x6b\xab\xd1\x8f\xf1\x21\x07\x35\x47\x73\x34\x5f\x01\x00\x00\xff\xff\x09\x50\xee\xd5\xdd\x01\x00\x00"

func stakingproxyRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRequest_unstakingCdc,
		"stakingProxy/request_unstaking.cdc",
	)
}

func stakingproxyRequest_unstakingCdc() (*asset, error) {
	bytes, err := stakingproxyRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x4, 0xb5, 0x6d, 0xd4, 0x43, 0x6a, 0x62, 0x66, 0x8f, 0xf8, 0x22, 0x3c, 0x0, 0xa1, 0xef, 0x32, 0x6c, 0x7a, 0x1, 0xa5, 0x6b, 0x83, 0x30, 0xa, 0x8d, 0x29, 0x5a, 0xdd, 0xda, 0x77, 0x79}}
	return a, nil
}

var _stakingproxySetup_node_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\xe6\x24\x29\xb4\xc5\x73\x09\x42\xb0\xa2\x22\xb4\xa1\xf1\xa0\xc7\xe9\x76\x4c\x97\x6e\x77\x96\xe9\x44\x5a\x4a\xfe\xbb\xac\x4a\x4c\x10\x51\xdf\x69\x59\xde\xfb\xde\x1b\xb7\x8f\x2c\x0a\x95\xe2\xce\x85\xba\x14\x3e\x9e\xe0\x45\x78\x0f\x97\xc7\xea\xb1\x78\xb8\x5f\xdc\x96\xab\xe5\xd3\x73\x31\x9f\xaf\x6e\xaa\xca\x18\x15\x0c\x07\xb4\xea\x38\x64\x23\x38\x1b\x03\x00\x10\x85\x22\x0a\x65\x81\x37\xb4\x8c\x24\xa8\x2c\x33\x28\x1a\xdd\x16\xd6\x72\x13\x34\x39\xe1\x53\x9e\x14\x62\xea\xb9\x63\xbf\x21\x81\x7c\x32\x68\x9f\x5a\x21\x54\x2a\xbf\x1c\xd9\xc8\x74\xe1\x7e\xc3\xf4\x80\xaf\x94\xe5\x93\x1e\x6c\x0c\xca\xb3\x21\x6e\xd1\x4b\x5c\x63\xc4\xb5\xf3\x4e\x4f\x95\xb2\x60\x4d\x25\xea\xf6\x27\xba\x77\x61\x97\x5f\x7c\x63\xa5\x0f\x92\xde\xbc\xf3\xef\x96\xb2\x59\x7b\x67\xdb\xab\xac\x6b\x4a\xfa\xc3\xcc\x8f\x60\x5a\x39\x1e\x44\x15\xa5\x26\xfd\xef\xa5\x1d\x62\xf4\xfe\x6a\x4d\x6b\xde\x02\x00\x00\xff\xff\xf8\x08\x93\x28\xff\x01\x00\x00"

func stakingproxySetup_node_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxySetup_node_accountCdc,
		"stakingProxy/setup_node_account.cdc",
	)
}

func stakingproxySetup_node_accountCdc() (*asset, error) {
	bytes, err := stakingproxySetup_node_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/setup_node_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0x0, 0x84, 0x96, 0x15, 0xf1, 0x23, 0x27, 0xca, 0xa4, 0x4, 0xe3, 0xc0, 0x8c, 0xc9, 0x59, 0x5e, 0x1e, 0x11, 0x6b, 0xd7, 0xe2, 0x9f, 0x69, 0x3c, 0xf0, 0x3a, 0xc6, 0xb8, 0x32, 0x46, 0x24}}
	return a, nil
}

var _stakingproxyStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xc2\x40\x10\x86\xef\xfb\x2b\xa6\x1e\x4a\x02\x45\x7a\x28\x3d\x48\xad\x04\xed\x87\x14\x34\x18\x0b\xed\x71\x4c\x46\x5d\x8c\x3b\xcb\x64\x44\xa5\xf8\xdf\x4b\xba\xa9\xa6\x74\x2e\xc3\xec\xce\xc7\xf3\xbe\x76\xeb\x59\x14\x32\xc5\x8d\x75\xab\x54\xf8\x70\x84\xa5\xf0\x16\x6e\x0f\xd9\x3c\x79\x1b\x4f\x5e\xd2\xd9\xf4\xe3\x33\x19\x8d\x66\x4f\x59\x66\x8c\x0a\xba\x0a\x73\xb5\xec\x22\xc7\x05\x8d\x47\x3d\xc8\x54\xac\x5b\xdd\x00\x6e\x79\xe7\xb4\x07\xef\xcf\xf6\x70\x7f\x17\xc3\x97\x31\x00\x00\x5e\xc8\xa3\x50\x84\x79\x1e\xfe\x93\x9d\xae\x93\x50\xd4\x4d\xd0\x44\x49\x0a\xbe\x06\x78\xe5\xb2\x20\x81\x3e\x34\x13\xdd\x05\x8b\xf0\xfe\xe1\xba\x4d\xd9\x9d\x70\x41\xf5\x03\x49\x7a\x19\x7a\x8c\x6a\xf8\x1e\xfc\xeb\x9c\x7a\x12\x54\x96\x21\x7a\x5c\xd8\xd2\xea\x31\x53\x16\x5c\x51\x8a\xba\x8e\xcf\x0c\x75\x0c\x06\xe0\xd1\xd9\x3c\xea\x0c\x79\x57\x16\xe0\x58\x21\x10\x80\xd0\x92\x84\x5c\x4e\xa0\x0c\x55\xb8\x11\x98\x61\xfd\x73\xbf\x13\x9b\x3f\x7a\xaa\xb6\xaf\xfd\xb6\xbc\x46\x54\x1b\xf4\x6c\x68\xc8\xf1\xd5\x65\x57\x7b\x4f\xb7\x2e\x68\x42\xfb\x39\x6f\xc8\x55\xd1\xaf\xed\x21\x07\x2d\x27\x73\x32\xdf\x01\x00\x00\xff\xff\x05\x52\x1c\xe7\xdb\x01\x00\x00"

func stakingproxyStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyStake_new_tokensCdc,
		"stakingProxy/stake_new_tokens.cdc",
	)
}

func stakingproxyStake_new_tokensCdc() (*asset, error) {
	bytes, err := stakingproxyStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0xf5, 0xa3, 0x7d, 0x2b, 0xd5, 0x34, 0x68, 0x9, 0xf5, 0x8c, 0xe, 0x3c, 0x2a, 0x21, 0xf4, 0x5c, 0x52, 0x32, 0x7, 0x34, 0x9e, 0xa7, 0x2d, 0x55, 0x9, 0x63, 0x5d, 0x22, 0xc2, 0x25, 0xd0}}
	return a, nil
}

var _stakingproxyStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xf2\x40\x10\xc7\xef\xfb\x29\xe6\xf1\xf0\x90\x40\x91\x1e\x4a\x0f\x52\x2b\x41\xfb\x22\x05\x0d\x46\xa1\x3d\x8e\xc9\xa8\x8b\x71\x67\x99\x8c\x54\x29\x7e\xf7\x12\x37\xd5\x94\xce\x65\x98\xdd\x79\xf9\xfd\xff\x76\xe7\x59\x14\x32\xc5\xad\x75\xeb\x54\xf8\x70\x84\x95\xf0\x0e\x6e\x0f\xd9\x3c\x79\x1b\x4f\x5e\xd2\xd9\xf4\xfd\x23\x19\x8d\x66\x4f\x59\x66\x8c\x0a\xba\x0a\x73\xb5\xec\x22\xc7\x05\x8d\x47\x3d\xc8\x54\xac\x5b\xdf\x00\xee\x78\xef\xb4\x07\x8b\x67\x7b\xb8\xbf\x8b\xe1\xcb\x18\x00\x00\x2f\xe4\x51\x28\xc2\x3c\x0f\xff\xc9\x5e\x37\x49\x28\xea\x26\x68\xa2\x24\x05\x5f\x03\xbc\x72\x59\x90\x40\x1f\x9a\x89\xee\x92\x45\xf8\xf3\xe1\x7f\x9b\xb2\x3b\xe1\x82\xea\x07\x92\xf4\x3a\xf4\x18\xd5\xf0\x3d\xf8\xd3\x39\xf5\x24\xa8\x2c\x43\xf4\xb8\xb4\xa5\xd5\x63\xa6\x2c\xb8\xa6\x14\x75\x13\x5f\x18\xea\x18\x0c\xc0\xa3\xb3\x79\xd4\x19\xf2\xbe\x2c\xc0\xb1\x42\x20\x00\xa1\x15\x09\xb9\x9c\x40\x19\xaa\x70\x23\x30\xc3\xe6\x7c\xbf\x13\x9b\x5f\x7a\xaa\xb6\xaf\xfd\xb6\xbc\x46\x54\x1b\xf4\x62\x68\xc8\xf1\xbf\xeb\xae\xf6\x9e\x6e\x5d\xd0\xc2\x9d\x53\x31\xe7\x2d\xb9\x2a\xfa\xf1\x3e\xe4\x20\xe8\x64\x4e\xe6\x3b\x00\x00\xff\xff\x77\xae\x51\x52\xe0\x01\x00\x00"

func stakingproxyStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyStake_unstaked_tokensCdc,
		"stakingProxy/stake_unstaked_tokens.cdc",
	)
}

func stakingproxyStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingproxyStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x15, 0xbf, 0xec, 0x2c, 0xa1, 0xf, 0x8f, 0x26, 0xb9, 0x7f, 0x27, 0xf9, 0xf2, 0x13, 0xbe, 0xa, 0x44, 0x5f, 0x7f, 0x6b, 0x19, 0x18, 0xb2, 0xf7, 0x7, 0x6e, 0x41, 0x39, 0xf2, 0x8e, 0xf9}}
	return a, nil
}

var _stakingproxyUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x6b\xfb\x30\x0c\xc5\xef\xfe\x14\xfa\xf7\xf0\x27\xb9\x94\x9d\xcb\xba\x12\xda\xb1\x95\x41\x1b\xea\x1d\xb6\xa3\x9b\xa8\x89\x99\x6b\x19\x45\x61\x2d\xa3\xdf\x7d\x78\x0e\x6d\xc6\x74\x31\x32\x92\xde\xef\x3d\x7b\x0c\xc4\x02\x5a\xcc\x87\xf5\x4d\xc9\x74\x3a\xc3\x81\xe9\x08\x77\x27\xfd\x5a\xbc\xac\x37\x4f\xe5\x6e\xfb\xf6\x5e\xac\x56\xbb\x47\xad\x95\x12\x36\xbe\x33\x95\x58\xf2\x99\xa7\x1a\xd7\xab\x19\x68\x61\xeb\x9b\x1c\xbe\x94\x02\x00\x08\x8c\xc1\x30\x66\xa6\xaa\xa8\xf7\x32\x83\xa2\x97\xb6\x48\x4d\x1c\x82\xa1\x1c\x0a\x84\x28\xf8\x4c\xae\x46\x86\x39\x0c\x1b\xd3\x3d\x31\xd3\xe7\xfd\xff\x31\xd5\x74\x43\x35\xc6\x0f\xe4\xf2\xb6\xf4\x90\x45\xd8\x19\xfc\x99\xdc\x06\x64\x23\xc4\x4b\x13\xcc\xde\x3a\x2b\x67\x2d\xc4\xa6\xc1\xd2\x48\x9b\x5f\x19\x62\x2d\x16\x10\x8c\xb7\x55\x36\x59\x52\xef\x6a\xf0\x24\x90\x08\x80\xf1\x80\x8c\xbe\x42\x10\x82\x2e\x69\x24\x66\x68\x7f\xf4\x27\xb9\xfa\xe5\xa7\x1b\xe7\x38\x1f\xdb\x1b\x4c\x8d\x41\xaf\x01\xa6\x37\xff\x77\xbb\x35\xbe\x33\xed\x7d\x6c\xb1\x70\x2e\x4b\xe4\x17\x75\x51\xdf\x01\x00\x00\xff\xff\x44\x15\xbb\x2b\xb9\x01\x00\x00"

func stakingproxyUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyUnstake_allCdc,
		"stakingProxy/unstake_all.cdc",
	)
}

func stakingproxyUnstake_allCdc() (*asset, error) {
	bytes, err := stakingproxyUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0x22, 0xbf, 0xdd, 0x5d, 0x32, 0xc7, 0xd6, 0xbb, 0x36, 0xf6, 0xe, 0xd0, 0x40, 0xd0, 0xa2, 0x2c, 0x84, 0x49, 0xdd, 0x16, 0xbf, 0x84, 0xa3, 0xa0, 0xb1, 0x4a, 0xc8, 0x33, 0x23, 0xef, 0xa9}}
	return a, nil
}

var _stakingproxyWithdraw_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x5d\x6b\xea\x40\x10\x86\xef\xf3\x2b\xe6\x78\x71\x48\xe0\x20\xe7\xa2\xf4\x42\x6a\x25\x68\x3f\xa4\xa0\xc1\x58\x68\x2f\xc7\xec\x68\x16\xe3\xce\x32\x19\x89\x52\xfc\xef\x25\x5d\xab\x29\x9d\x9b\x61\x77\xbe\x9e\xf7\xb5\x3b\xcf\xa2\x90\x2b\x6e\xad\xdb\x64\xc2\x87\x23\xac\x85\x77\xf0\xff\x90\x2f\xd3\x97\xe9\xec\x29\x5b\xcc\xdf\xde\xd3\xc9\x64\xf1\x90\xe7\x51\xa4\x82\xae\xc6\x42\x2d\xbb\xd8\xb1\xa1\xe9\x64\x00\xb9\x8a\x75\x9b\x7f\x80\x3b\xde\x3b\x1d\xc0\xeb\xa3\x3d\xdc\xde\x24\xf0\x11\x45\x00\x00\x5e\xc8\xa3\x50\x8c\x45\x11\xea\xe9\x5e\xcb\x34\x3c\xda\x26\x38\x47\x45\x0a\xbe\x05\x78\xe6\xca\x90\xc0\x10\xce\x13\xfd\x15\x8b\x70\x73\xf7\xb7\x4b\xd9\x9f\xb1\xa1\xf6\x83\x24\xbb\x0e\xdd\xc7\x2d\xfc\x00\x7e\x75\xce\x3d\x09\x2a\xcb\x18\x3d\xae\x6c\x65\xf5\x98\x2b\x0b\x6e\x28\x43\x2d\x93\x0b\x43\x1b\xa3\x11\x78\x74\xb6\x88\x7b\x63\xde\x57\x06\x1c\x2b\x04\x02\x10\x5a\x93\x90\x2b\x08\x94\xa1\x0e\x37\x02\x33\x94\x5f\xf7\x7b\x49\xf4\x43\x4f\xdd\xf5\x75\xd8\x95\x77\x16\xd5\x05\xbd\x18\x1a\x72\xf2\xe7\xba\xab\xbb\xa7\xdf\x58\x2d\x8d\x60\xb3\xa0\x06\xc5\x90\x59\xf2\x96\x5c\x1d\x7f\xdb\x1f\x72\xd0\x74\x8a\x4e\xd1\x67\x00\x00\x00\xff\xff\x3f\x35\x0b\xc5\xe3\x01\x00\x00"

func stakingproxyWithdraw_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyWithdraw_rewardsCdc,
		"stakingProxy/withdraw_rewards.cdc",
	)
}

func stakingproxyWithdraw_rewardsCdc() (*asset, error) {
	bytes, err := stakingproxyWithdraw_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/withdraw_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0xb1, 0xc7, 0x2c, 0xab, 0x3c, 0x5b, 0xe5, 0xb1, 0xa4, 0x2e, 0xb, 0x7, 0xa6, 0x21, 0xff, 0x71, 0x28, 0x8f, 0x68, 0xb5, 0x96, 0x7, 0xf5, 0x2e, 0x1c, 0xf5, 0xc2, 0xcf, 0x22, 0xdb, 0xd3}}
	return a, nil
}

var _stakingproxyWithdraw_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xf2\x40\x10\xc7\xef\xfb\x29\xe6\xf1\xf0\x90\x40\x91\x1e\x4a\x0f\x52\x2b\x41\xfb\x22\x05\x0d\x46\xa1\x3d\x8e\xc9\x68\x16\xe3\xce\x32\x19\x51\x29\x7e\xf7\x92\xae\xd5\x94\xce\x65\xd8\xd9\x79\xf9\xfd\xff\x76\xeb\x59\x14\x32\xc5\x8d\x75\xeb\x54\xf8\x70\x84\x95\xf0\x16\x6e\x0f\xd9\x3c\x79\x1b\x4f\x5e\xd2\xd9\xf4\xfd\x23\x19\x8d\x66\x4f\x59\x66\x8c\x0a\xba\x1a\x73\xb5\xec\x22\xc7\x05\x8d\x47\x3d\xc8\x54\xac\x5b\xdf\x00\x6e\x79\xe7\xb4\x07\x8b\x67\x7b\xb8\xbf\x8b\xe1\xd3\x18\x00\x00\x2f\xe4\x51\x28\xc2\x3c\x0f\xff\xc9\x4e\xcb\x24\x3c\x9a\x26\x38\x47\x45\x0a\xbe\x01\x78\xe5\xaa\x20\x81\x3e\x9c\x27\xba\x4b\x16\xe1\xfd\xc3\xff\x36\x65\x77\xc2\x05\x35\x05\x92\xf4\x3a\xf4\x18\x35\xf0\x3d\xf8\xd3\x39\xf5\x24\xa8\x2c\x43\xf4\xb8\xb4\x95\xd5\x63\xa6\x2c\xb8\xa6\x14\xb5\x8c\x2f\x0c\x4d\x0c\x06\xe0\xd1\xd9\x3c\xea\x0c\x79\x57\x15\xe0\x58\x21\x10\x80\xd0\x8a\x84\x5c\x4e\xa0\x0c\x75\xb8\x11\x98\xa1\xfc\xbe\xdf\x89\xcd\x2f\x3d\x75\xdb\xd7\x7e\x5b\xde\x59\x54\x1b\xf4\x62\x68\xc8\xf1\xbf\xeb\xae\xf6\x9e\xee\xde\x6a\x59\x08\xee\x17\xae\x29\x53\x31\xe7\x0d\xb9\x3a\xfa\xb1\x3f\xe4\xa0\xe9\x64\x4e\xe6\x2b\x00\x00\xff\xff\x10\x01\xbb\xeb\xe3\x01\x00\x00"

func stakingproxyWithdraw_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyWithdraw_unstakedCdc,
		"stakingProxy/withdraw_unstaked.cdc",
	)
}

func stakingproxyWithdraw_unstakedCdc() (*asset, error) {
	bytes, err := stakingproxyWithdraw_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/withdraw_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xf, 0x29, 0xf5, 0x62, 0x4a, 0xb5, 0x57, 0xd8, 0x30, 0x56, 0xc8, 0xbd, 0xe9, 0x8c, 0x9d, 0x40, 0x3, 0xa3, 0x63, 0xca, 0xca, 0x56, 0x54, 0x8d, 0x6c, 0x8c, 0x8b, 0x40, 0x53, 0xa1, 0xe3}}
	return a, nil
}

var _storagefeesAdminSet_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\xaf\x3d\x20\x57\x42\x31\x07\xc4\x21\xa2\x44\x86\xc6\x5c\xa8\x8a\xe2\x22\xce\xdb\xcd\x38\x5e\x64\xef\x5a\xb3\x63\x12\x84\xfc\xdd\xd1\xfa\x4f\x70\x09\x89\xba\x87\xe4\xe0\xf7\xde\xfc\xde\xce\x9a\xba\x71\x2c\xc8\x2a\xb7\xcf\xc5\xb1\xda\x51\x46\xe4\x51\xb0\xab\xf1\xe6\x90\x7d\x79\xf8\x9e\x3f\x3e\x6c\xd2\xcf\xeb\x6c\xbd\xce\xd3\xbb\xbb\xcd\x3a\xcf\xa3\x28\x49\xf0\x58\x1a\x0f\x61\x65\xbd\xd2\x62\x9c\x85\x2e\x95\xdd\x91\x87\x94\x84\xa2\x72\x7b\xf8\x21\x0f\x45\x08\x6c\x14\xab\x9a\x84\xd8\x47\x33\x53\x3c\x6a\x3e\xfe\x12\xf2\x5f\x89\x37\xe4\x89\x7f\xd2\x36\xcc\x5d\xe2\x5b\x66\x0e\xef\xde\xae\x5e\xa3\x36\xd6\xd4\x6d\x3d\x02\x0e\x22\x15\xfc\x47\xcd\x0d\x7e\x47\x00\xd0\xff\x54\x24\x50\xdb\xda\xd8\x0d\x15\x4b\xbc\xfa\xa7\xdb\x22\x0d\x9f\x8c\x17\x56\xe2\x38\xea\x1d\x0d\x53\xa3\x98\x62\xa5\xb5\x2c\x91\xb6\x52\xa6\x5a\xbb\xd6\xca\x94\x1b\x4e\x92\xe0\xc9\x31\xbb\x3d\x14\x98\x0a\x62\xb2\x9a\x20\xae\x6f\xdc\xcf\x83\x7b\xfa\x41\x5a\x8e\x0e\x4f\x55\xb1\x98\x48\x70\x8b\x10\xbf\x18\x32\xde\x5f\xc6\xfa\x10\x87\x0d\x2c\x91\x8c\x17\x34\xfd\x07\x65\x2f\xbc\x39\x0e\x09\x67\xb5\x42\xa3\xac\xd1\xf1\xf5\x27\xd7\x56\x5b\x58\x27\x13\xeb\x33\xd2\x67\x2b\xe9\xc1\xae\x87\xa0\x6e\xb8\x07\x3a\x90\x6e\x85\x66\xa5\x4d\x81\x0b\x3b\xc2\xd5\x2d\xac\xa9\x66\xfa\x93\xda\x0b\x4f\x32\xd6\xbc\xa7\x9d\xfa\x5f\xca\xa5\x57\x70\xf5\xb7\x68\x37\x87\x3a\xfb\x24\x5e\x88\x74\x7f\xce\x1f\x9f\x4d\x3e\x41\xe9\xa2\xee\x4f\x00\x00\x00\xff\xff\xec\x9d\x5e\x73\x3f\x03\x00\x00"

func storagefeesAdminSet_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesAdminSet_parametersCdc,
		"storageFees/admin/set_parameters.cdc",
	)
}

func storagefeesAdminSet_parametersCdc() (*asset, error) {
	bytes, err := storagefeesAdminSet_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/admin/set_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xa3, 0x32, 0x6, 0x3f, 0x4f, 0xeb, 0xc7, 0xce, 0x3b, 0x61, 0xd9, 0x69, 0x36, 0x97, 0xdd, 0xaf, 0xd5, 0xa1, 0x25, 0x5d, 0xda, 0xa7, 0x27, 0x20, 0xcd, 0x26, 0x35, 0xa6, 0xb4, 0x82, 0xd1}}
	return a, nil
}

var _storagefeesScriptsGet_account_available_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x3f\xcb\xc2\x30\x10\x80\xf1\x3d\x9f\xe2\xc6\x76\x79\x79\x07\x71\xe8\x16\x69\xe2\x22\x14\x9a\x8a\xf3\x99\x5e\x25\x78\x49\x24\x7f\xb4\x20\x7e\x77\x17\xa7\x6e\xcf\xf4\xfc\x9c\x7f\xc4\x54\x40\x73\x7c\x99\x12\x13\xde\x48\x13\x65\x58\x52\xf4\xf0\xbf\xea\xd3\x70\x31\xd3\x30\xca\xa3\xd2\x4a\x19\xd9\xf7\xa3\x32\x46\x08\xb4\x96\x72\x6e\x90\xb9\x85\xa5\x06\xf0\xe8\x42\x83\xd6\xc6\x1a\x8a\x9c\xe7\x44\x39\x77\xf0\x8b\xb6\x83\xb3\x76\xeb\x7e\x07\x6f\x01\x00\x90\xa8\xd4\x14\xb6\xe2\xdf\x4c\x0b\x56\x2e\x53\xbc\x53\x90\x4f\x74\x8c\x57\xa6\x03\x32\x06\x4b\x9b\x75\x2b\x3e\x42\x7c\x03\x00\x00\xff\xff\x9c\xbd\x6d\xad\xb9\x00\x00\x00"

func storagefeesScriptsGet_account_available_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_account_available_balanceCdc,
		"storageFees/scripts/get_account_available_balance.cdc",
	)
}

func storagefeesScriptsGet_account_available_balanceCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_account_available_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_account_available_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x19, 0x75, 0x61, 0xa0, 0xbc, 0xea, 0xac, 0x1c, 0xc4, 0xc8, 0x8c, 0x33, 0x92, 0xcc, 0x1f, 0x8d, 0x26, 0x58, 0x7c, 0x63, 0xee, 0xc2, 0x27, 0x3b, 0x4f, 0xad, 0x90, 0xac, 0x1e, 0xf8, 0x56}}
	return a, nil
}

var _storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6b\xc3\x30\x10\x85\x77\xff\x8a\x37\xda\x60\x4a\x87\xd2\xc1\x9b\x49\xac\x2e\x85\x40\xe4\xd2\x21\x64\x38\x94\x4b\x2a\x6a\x4b\xe6\x4e\xa6\x0e\xa5\xff\xbd\x24\x31\x21\x24\x5a\xf4\xf8\x78\xdc\xfb\x7c\x3f\x44\x49\x30\x5d\xfc\xb1\x29\x0a\x1d\xd8\x30\x2b\xf6\x12\x7b\x3c\x4f\xe6\x7d\xf5\x69\xdb\xd5\xba\x7e\x6b\x4c\xd3\xd8\x7a\xb9\x5c\x37\xd6\x66\x19\x39\xc7\xaa\x39\x75\x5d\x81\xfd\x18\xd0\x93\x0f\x39\x39\x17\xc7\x90\xea\xdd\x4e\x58\x95\xb5\xc2\x66\xce\xdb\x12\x03\x1d\x59\x2a\xcc\xa0\x44\x4f\x53\x3b\x9d\xa6\x2a\x7c\x18\x3f\xbd\xbe\x14\x15\x36\x97\xb4\xc5\x6f\x06\x00\xc2\x69\x94\x70\xaf\xf6\x74\xe0\x54\x5f\x96\x74\x41\x03\x39\x9f\x8e\x26\x4a\x2b\x14\x94\x5c\xf2\x31\xcc\xe5\xc5\x17\xbb\xef\xfc\x7c\xe9\xf4\x1e\xed\xee\x49\x89\x6b\x79\xb6\x3d\x7f\x37\xf8\x46\xfa\x1a\x8b\xec\xef\x3f\x00\x00\xff\xff\x60\xc0\x2a\x19\x44\x01\x00\x00"

func storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc,
		"storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc",
	)
}

func storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xe7, 0x9a, 0xeb, 0xbc, 0x63, 0x67, 0x64, 0x79, 0x7f, 0x85, 0x54, 0x38, 0xeb, 0xe4, 0xec, 0xac, 0x16, 0xfe, 0x9e, 0x8d, 0x5c, 0xe6, 0xeb, 0x20, 0x7d, 0x5f, 0x1b, 0x59, 0x21, 0xf5, 0xe0}}
	return a, nil
}

var _storagefeesScriptsGet_storage_capacityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x3d\x0b\xc2\x30\x10\x80\xe1\x3d\xbf\xe2\xc6\x76\x11\x07\x71\xe8\x16\x6c\xe2\x22\x14\x1a\xc5\xf9\xb8\x5e\x25\x90\x8f\x92\x0f\xac\x88\xff\xdd\x41\xa7\x6e\xef\xf4\xbc\xd6\x2f\x31\x15\xd0\x2e\x3e\x4d\x89\x09\x1f\xac\x99\x33\xcc\x29\x7a\xd8\xaf\xfa\x32\xdc\xcd\x75\x18\xe5\x59\x69\xa5\x8c\xec\xfb\x51\x19\x23\x04\x12\x71\xce\x0d\x3a\xd7\xc2\x5c\x03\x78\xb4\xa1\x41\xa2\x58\x43\x91\xd3\x94\x38\xe7\x0e\xfe\xd1\x76\x70\xd3\x76\x3d\x1e\xe0\x2d\x00\x00\x12\x97\x9a\xc2\xf6\xb8\x23\x74\x54\x1d\x16\x96\x3f\xe6\x84\x0b\x92\x2d\xaf\x0d\xdb\x8a\x8f\x10\xdf\x00\x00\x00\xff\xff\xeb\xdb\x30\x0f\xb5\x00\x00\x00"

func storagefeesScriptsGet_storage_capacityCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_capacityCdc,
		"storageFees/scripts/get_storage_capacity.cdc",
	)
}

func storagefeesScriptsGet_storage_capacityCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_capacityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_capacity.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x54, 0xd, 0xa8, 0xab, 0x2b, 0xe6, 0x94, 0x7, 0xfc, 0x0, 0xcc, 0xe2, 0x2c, 0x81, 0x79, 0xfd, 0xd1, 0x6d, 0x2d, 0x80, 0xfb, 0xaa, 0x6d, 0xc7, 0xe3, 0x92, 0xd1, 0x25, 0xbe, 0xa7, 0x58}}
	return a, nil
}

var _storagefeesScriptsGet_storage_fee_conversionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\xbf\x0a\xc2\x30\x10\x80\xf1\xfd\x9e\xe2\xc6\x76\x11\x07\x71\x70\xab\x34\x71\x51\x2a\x89\xe2\x1c\xea\xb5\x04\xf2\x47\xee\x52\xad\x88\xef\x2e\xe2\xe6\xf6\x4d\xdf\xcf\xc7\x5b\xe6\x82\x3a\xe4\x87\x2d\x99\xdd\x48\x9a\x48\x70\xe0\x1c\x71\x39\xeb\x7d\x77\xb1\xa7\xce\x34\x3b\xa5\x95\xb2\x4d\xdb\x1a\x65\x2d\x80\xeb\x7b\x12\xa9\x5c\x08\x35\x0e\x53\xc2\xe8\x7c\xaa\xea\x0d\x9e\xb5\x9f\xd7\x2b\x7c\x01\x22\x22\x53\x99\x38\xfd\xaf\x17\xf2\xeb\x03\x8d\x6e\xfb\x2c\x24\x47\x62\x43\x42\x7c\xa7\xeb\x97\x83\x37\xc0\x27\x00\x00\xff\xff\xc0\x2c\xcd\xf6\x95\x00\x00\x00"

func storagefeesScriptsGet_storage_fee_conversionCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_fee_conversionCdc,
		"storageFees/scripts/get_storage_fee_conversion.cdc",
	)
}

func storagefeesScriptsGet_storage_fee_conversionCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_fee_conversionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_fee_conversion.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x1f, 0x42, 0x90, 0x62, 0x9f, 0x28, 0x22, 0x6d, 0x5b, 0xb1, 0x53, 0x2f, 0xf8, 0x5e, 0x10, 0xf8, 0xbe, 0x9d, 0x50, 0x3, 0x3f, 0x9e, 0x92, 0xc1, 0x92, 0x5c, 0xcb, 0xd2, 0x12, 0x6a, 0x56}}
	return a, nil
}

var _storagefeesScriptsGet_storage_fee_minCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x0a\xc2\x30\x10\x00\xd0\xfd\xbe\xe2\xc6\x76\x11\x07\x71\x70\x2b\x34\x71\x11\x0a\x89\xe2\x1c\xca\x55\x0e\x72\x89\x5c\x12\x2d\x88\xff\xee\xe2\xd4\xf5\x0d\x8f\xe5\x99\xb5\xa2\x8d\xf9\xed\x6b\xd6\xf0\x20\x4b\x54\x70\xd1\x2c\xb8\x5f\xed\x65\xba\xfb\xeb\xe4\x86\xb3\xb1\xc6\xf8\x61\x1c\x9d\xf1\x1e\x20\xcc\x33\x95\xd2\x85\x18\x7b\x5c\x5a\x42\x09\x9c\xba\xfe\x84\x37\xcb\xeb\xf1\x80\x1f\x40\x44\x54\xaa\x4d\xd3\xb6\xde\x09\x27\x96\x26\x7f\x72\x54\x48\x5f\xa1\x72\x4e\xf0\x05\xf8\x05\x00\x00\xff\xff\xa5\xb7\x5f\x7e\x8f\x00\x00\x00"

func storagefeesScriptsGet_storage_fee_minCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_fee_minCdc,
		"storageFees/scripts/get_storage_fee_min.cdc",
	)
}

func storagefeesScriptsGet_storage_fee_minCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_fee_minCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_fee_min.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x76, 0xf, 0x44, 0x9, 0xe, 0xac, 0x1d, 0x61, 0x30, 0x83, 0xe7, 0xec, 0x6b, 0xb4, 0xd2, 0xba, 0x9e, 0xef, 0x3f, 0xae, 0xf, 0xc1, 0x81, 0xd1, 0x47, 0x52, 0x9a, 0xec, 0xae, 0xaf, 0xd9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FlowServiceAccount/add_account_creator.cdc":                                  flowserviceaccountAdd_account_creatorCdc,
	"FlowServiceAccount/deposit_fees.cdc":                                         flowserviceaccountDeposit_feesCdc,
	"FlowServiceAccount/remove_account_creator.cdc":                               flowserviceaccountRemove_account_creatorCdc,
	"FlowServiceAccount/scripts/get_account_creators.cdc":                         flowserviceaccountScriptsGet_account_creatorsCdc,
	"FlowServiceAccount/scripts/get_account_fee.cdc":                              flowserviceaccountScriptsGet_account_feeCdc,
	"FlowServiceAccount/scripts/get_execution_effort_weights.cdc":                 flowserviceaccountScriptsGet_execution_effort_weightsCdc,
	"FlowServiceAccount/scripts/get_execution_memory_limit.cdc":                   flowserviceaccountScriptsGet_execution_memory_limitCdc,
	"FlowServiceAccount/scripts/get_execution_memory_weights.cdc":                 flowserviceaccountScriptsGet_execution_memory_weightsCdc,
	"FlowServiceAccount/scripts/get_fees_balance.cdc":                             flowserviceaccountScriptsGet_fees_balanceCdc,
	"FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc":           flowserviceaccountScriptsGet_is_account_creation_restrictedCdc,
	"FlowServiceAccount/scripts/get_is_account_creator.cdc":                       flowserviceaccountScriptsGet_is_account_creatorCdc,
	"FlowServiceAccount/scripts/get_tx_fee_parameters.cdc":                        flowserviceaccountScriptsGet_tx_fee_parametersCdc,
	"FlowServiceAccount/set_execution_effort_weights.cdc":                         flowserviceaccountSet_execution_effort_weightsCdc,
	"FlowServiceAccount/set_execution_memory_limit.cdc":                           flowserviceaccountSet_execution_memory_limitCdc,
	"FlowServiceAccount/set_execution_memory_weights.cdc":                         flowserviceaccountSet_execution_memory_weightsCdc,
	"FlowServiceAccount/set_is_account_creation_restricted.cdc":                   flowserviceaccountSet_is_account_creation_restrictedCdc,
	"FlowServiceAccount/set_tx_fee_parameters.cdc":                                flowserviceaccountSet_tx_fee_parametersCdc,
	"FlowServiceAccount/set_tx_fee_surge_factor.cdc":                              flowserviceaccountSet_tx_fee_surge_factorCdc,
	"dkg/admin/force_stop_dkg.cdc":                                                dkgAdminForce_stop_dkgCdc,
	"dkg/admin/publish_participant.cdc":                                           dkgAdminPublish_participantCdc,
	"dkg/admin/set_safe_threshold.cdc":                                            dkgAdminSet_safe_thresholdCdc,
	"dkg/admin/start_dkg.cdc":                                                     dkgAdminStart_dkgCdc,
	"dkg/admin/stop_dkg.cdc":                                                      dkgAdminStop_dkgCdc,
	"dkg/create_participant.cdc":                                                  dkgCreate_participantCdc,
	"dkg/scripts/get_consensus_nodes.cdc":                                         dkgScriptsGet_consensus_nodesCdc,
	"dkg/scripts/get_dkg_canonical_final_submission.cdc":                          dkgScriptsGet_dkg_canonical_final_submissionCdc,
	"dkg/scripts/get_dkg_completed.cdc":                                           dkgScriptsGet_dkg_completedCdc,
	"dkg/scripts/get_dkg_enabled.cdc":                                             dkgScriptsGet_dkg_enabledCdc,
	"dkg/scripts/get_final_submissions.cdc":                                       dkgScriptsGet_final_submissionsCdc,
	"dkg/scripts/get_latest_whiteboard_messages.cdc":                              dkgScriptsGet_latest_whiteboard_messagesCdc,
	"dkg/scripts/get_node_final_submission.cdc":                                   dkgScriptsGet_node_final_submissionCdc,
	"dkg/scripts/get_node_has_submitted.cdc":                                      dkgScriptsGet_node_has_submittedCdc,
	"dkg/scripts/get_node_is_claimed.cdc":                                         dkgScriptsGet_node_is_claimedCdc,
	"dkg/scripts/get_node_is_registered.cdc":                                      dkgScriptsGet_node_is_registeredCdc,
	"dkg/scripts/get_thresholds.cdc":                                              dkgScriptsGet_thresholdsCdc,
	"dkg/scripts/get_whiteboard_messages.cdc":                                     dkgScriptsGet_whiteboard_messagesCdc,
	"dkg/send_final_submission.cdc":                                               dkgSend_final_submissionCdc,
	"dkg/send_whiteboard_message.cdc":                                             dkgSend_whiteboard_messageCdc,
	"epoch/admin/advance_view.cdc":                                                epochAdminAdvance_viewCdc,
	"epoch/admin/calculate_rewards.cdc":                                           epochAdminCalculate_rewardsCdc,
	"epoch/admin/deploy_epoch.cdc":                                                epochAdminDeploy_epochCdc,
	"epoch/admin/deploy_qc_dkg.cdc":                                               epochAdminDeploy_qc_dkgCdc,
	"epoch/admin/pay_rewards.cdc":                                                 epochAdminPay_rewardsCdc,
	"epoch/admin/reset_epoch.cdc":                                                 epochAdminReset_epochCdc,
	"epoch/admin/set_automatic_rewards.cdc":                                       epochAdminSet_automatic_rewardsCdc,
	"epoch/admin/set_bonus_tokens.cdc":                                            epochAdminSet_bonus_tokensCdc,
	"epoch/admin/update_clusters.cdc":                                             epochAdminUpdate_clustersCdc,
	"epoch/admin/update_dkg_phase_views.cdc":                                      epochAdminUpdate_dkg_phase_viewsCdc,
	"epoch/admin/update_epoch_config.cdc":                                         epochAdminUpdate_epoch_configCdc,
	"epoch/admin/update_epoch_views.cdc":                                          epochAdminUpdate_epoch_viewsCdc,
	"epoch/admin/update_reward.cdc":                                               epochAdminUpdate_rewardCdc,
	"epoch/admin/update_staking_views.cdc":                                        epochAdminUpdate_staking_viewsCdc,
	"epoch/node/register_dkg_participant.cdc":                                     epochNodeRegister_dkg_participantCdc,
	"epoch/node/register_node.cdc":                                                epochNodeRegister_nodeCdc,
	"epoch/node/register_qc_voter.cdc":                                            epochNodeRegister_qc_voterCdc,
	"epoch/scripts/get_bonus_tokens.cdc":                                          epochScriptsGet_bonus_tokensCdc,
	"epoch/scripts/get_config_metadata.cdc":                                       epochScriptsGet_config_metadataCdc,
	"epoch/scripts/get_create_clusters.cdc":                                       epochScriptsGet_create_clustersCdc,
	"epoch/scripts/get_current_view.cdc":                                          epochScriptsGet_current_viewCdc,
	"epoch/scripts/get_epoch_counter.cdc":                                         epochScriptsGet_epoch_counterCdc,
	"epoch/scripts/get_epoch_metadata.cdc":                                        epochScriptsGet_epoch_metadataCdc,
	"epoch/scripts/get_epoch_phase.cdc":                                           epochScriptsGet_epoch_phaseCdc,
	"epoch/scripts/get_proposed_counter.cdc":                                      epochScriptsGet_proposed_counterCdc,
	"epoch/scripts/get_randomize.cdc":                                             epochScriptsGet_randomizeCdc,
	"flowToken/burn_tokens.cdc":                                                   flowtokenBurn_tokensCdc,
	"flowToken/create_forwarder.cdc":                                              flowtokenCreate_forwarderCdc,
	"flowToken/mint_tokens.cdc":                                                   flowtokenMint_tokensCdc,
	"flowToken/scripts/get_balance.cdc":                                           flowtokenScriptsGet_balanceCdc,
	"flowToken/scripts/get_supply.cdc":                                            flowtokenScriptsGet_supplyCdc,
	"flowToken/setup_account.cdc":                                                 flowtokenSetup_accountCdc,
	"flowToken/transfer_tokens.cdc":                                               flowtokenTransfer_tokensCdc,
	"idTableStaking/admin/add_approved_and_limits.cdc":                            idtablestakingAdminAdd_approved_and_limitsCdc,
	"idTableStaking/admin/add_approved_nodes.cdc":                                 idtablestakingAdminAdd_approved_nodesCdc,
	"idTableStaking/admin/capability_end_epoch.cdc":                               idtablestakingAdminCapability_end_epochCdc,
	"idTableStaking/admin/change_candidate_limits.cdc":                            idtablestakingAdminChange_candidate_limitsCdc,
	"idTableStaking/admin/change_cut.cdc":                                         idtablestakingAdminChange_cutCdc,
	"idTableStaking/admin/change_del_minimums.cdc":                                idtablestakingAdminChange_del_minimumsCdc,
	"idTableStaking/admin/change_minimums.cdc":                                    idtablestakingAdminChange_minimumsCdc,
	"idTableStaking/admin/change_payout.cdc":                                      idtablestakingAdminChange_payoutCdc,
	"idTableStaking/admin/end_epoch.cdc":                                          idtablestakingAdminEnd_epochCdc,
	"idTableStaking/admin/end_epoch_change_payout.cdc":                            idtablestakingAdminEnd_epoch_change_payoutCdc,
	"idTableStaking/admin/end_staking.cdc":                                        idtablestakingAdminEnd_stakingCdc,
	"idTableStaking/admin/move_tokens.cdc":                                        idtablestakingAdminMove_tokensCdc,
	"idTableStaking/admin/pay_rewards.cdc":                                        idtablestakingAdminPay_rewardsCdc,
	"idTableStaking/admin/remove_approved_nodes.cdc":                              idtablestakingAdminRemove_approved_nodesCdc,
	"idTableStaking/admin/remove_invalid_nodes.cdc":                               idtablestakingAdminRemove_invalid_nodesCdc,
	"idTableStaking/admin/remove_node.cdc":                                        idtablestakingAdminRemove_nodeCdc,
	"idTableStaking/admin/scale_rewards_test.cdc":                                 idtablestakingAdminScale_rewards_testCdc,
	"idTableStaking/admin/set_approved_nodes.cdc":                                 idtablestakingAdminSet_approved_nodesCdc,
	"idTableStaking/admin/set_claimed.cdc":                                        idtablestakingAdminSet_claimedCdc,
	"idTableStaking/admin/set_node_weight.cdc":                                    idtablestakingAdminSet_node_weightCdc,
	"idTableStaking/admin/set_non_operational.cdc":                                idtablestakingAdminSet_non_operationalCdc,
	"idTableStaking/admin/set_slot_limits.cdc":                                    idtablestakingAdminSet_slot_limitsCdc,
	"idTableStaking/admin/start_staking.cdc":                                      idtablestakingAdminStart_stakingCdc,
	"idTableStaking/admin/transfer_admin.cdc":                                     idtablestakingAdminTransfer_adminCdc,
	"idTableStaking/admin/transfer_fees_admin.cdc":                                idtablestakingAdminTransfer_fees_adminCdc,
	"idTableStaking/admin/transfer_minter_deploy.cdc":                             idtablestakingAdminTransfer_minter_deployCdc,
	"idTableStaking/admin/upgrade_set_claimed.cdc":                                idtablestakingAdminUpgrade_set_claimedCdc,
	"idTableStaking/admin/upgrade_staking.cdc":                                    idtablestakingAdminUpgrade_stakingCdc,
	"idTableStaking/delegation/del_request_unstaking.cdc":                         idtablestakingDelegationDel_request_unstakingCdc,
	"idTableStaking/delegation/del_stake_new_tokens.cdc":                          idtablestakingDelegationDel_stake_new_tokensCdc,
	"idTableStaking/delegation/del_stake_rewarded.cdc":                            idtablestakingDelegationDel_stake_rewardedCdc,
	"idTableStaking/delegation/del_stake_unstaked.cdc":                            idtablestakingDelegationDel_stake_unstakedCdc,
	"idTableStaking/delegation/del_withdraw_reward_tokens.cdc":                    idtablestakingDelegationDel_withdraw_reward_tokensCdc,
	"idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc":                  idtablestakingDelegationDel_withdraw_unstaked_tokensCdc,
	"idTableStaking/delegation/delegator_add_capability.cdc":                      idtablestakingDelegationDelegator_add_capabilityCdc,
	"idTableStaking/delegation/get_delegator_committed.cdc":                       idtablestakingDelegationGet_delegator_committedCdc,
	"idTableStaking/delegation/get_delegator_info.cdc":                            idtablestakingDelegationGet_delegator_infoCdc,
	"idTableStaking/delegation/get_delegator_info_from_address.cdc":               idtablestakingDelegationGet_delegator_info_from_addressCdc,
	"idTableStaking/delegation/get_delegator_request.cdc":                         idtablestakingDelegationGet_delegator_requestCdc,
	"idTableStaking/delegation/get_delegator_rewarded.cdc":                        idtablestakingDelegationGet_delegator_rewardedCdc,
	"idTableStaking/delegation/get_delegator_staked.cdc":                          idtablestakingDelegationGet_delegator_stakedCdc,
	"idTableStaking/delegation/get_delegator_unstaked.cdc":                        idtablestakingDelegationGet_delegator_unstakedCdc,
	"idTableStaking/delegation/get_delegator_unstaking.cdc":                       idtablestakingDelegationGet_delegator_unstakingCdc,
	"idTableStaking/delegation/get_delegator_unstaking_request.cdc":               idtablestakingDelegationGet_delegator_unstaking_requestCdc,
	"idTableStaking/delegation/register_delegator.cdc":                            idtablestakingDelegationRegister_delegatorCdc,
	"idTableStaking/delegation/register_many_delegators.cdc":                      idtablestakingDelegationRegister_many_delegatorsCdc,
	"idTableStaking/node/node_add_capability.cdc":                                 idtablestakingNodeNode_add_capabilityCdc,
	"idTableStaking/node/register_many_nodes.cdc":                                 idtablestakingNodeRegister_many_nodesCdc,
	"idTableStaking/node/register_node.cdc":                                       idtablestakingNodeRegister_nodeCdc,
	"idTableStaking/node/request_unstake.cdc":                                     idtablestakingNodeRequest_unstakeCdc,
	"idTableStaking/node/stake_new_tokens.cdc":                                    idtablestakingNodeStake_new_tokensCdc,
	"idTableStaking/node/stake_rewarded_tokens.cdc":                               idtablestakingNodeStake_rewarded_tokensCdc,
	"idTableStaking/node/stake_unstaked_tokens.cdc":                               idtablestakingNodeStake_unstaked_tokensCdc,
	"idTableStaking/node/unstake_all.cdc":                                         idtablestakingNodeUnstake_allCdc,
	"idTableStaking/node/update_networking_address.cdc":                           idtablestakingNodeUpdate_networking_addressCdc,
	"idTableStaking/node/withdraw_reward_tokens.cdc":                              idtablestakingNodeWithdraw_reward_tokensCdc,
	"idTableStaking/node/withdraw_unstaked_tokens.cdc":                            idtablestakingNodeWithdraw_unstaked_tokensCdc,
	"idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc":                idtablestakingScriptsGet_approved_but_not_staked_nodesCdc,
	"idTableStaking/scripts/get_approved_nodes.cdc":                               idtablestakingScriptsGet_approved_nodesCdc,
	"idTableStaking/scripts/get_candidate_limits.cdc":                             idtablestakingScriptsGet_candidate_limitsCdc,
	"idTableStaking/scripts/get_candidate_nodes.cdc":                              idtablestakingScriptsGet_candidate_nodesCdc,
	"idTableStaking/scripts/get_current_table.cdc":                                idtablestakingScriptsGet_current_tableCdc,
	"idTableStaking/scripts/get_cut_percentage.cdc":                               idtablestakingScriptsGet_cut_percentageCdc,
	"idTableStaking/scripts/get_del_stake_requirements.cdc":                       idtablestakingScriptsGet_del_stake_requirementsCdc,
	"idTableStaking/scripts/get_delegators_below_min.cdc":                         idtablestakingScriptsGet_delegators_below_minCdc,
	"idTableStaking/scripts/get_node_committed_tokens.cdc":                        idtablestakingScriptsGet_node_committed_tokensCdc,
	"idTableStaking/scripts/get_node_info.cdc":                                    idtablestakingScriptsGet_node_infoCdc,
	"idTableStaking/scripts/get_node_info_from_address.cdc":                       idtablestakingScriptsGet_node_info_from_addressCdc,
	"idTableStaking/scripts/get_node_initial_weight.cdc":                          idtablestakingScriptsGet_node_initial_weightCdc,
	"idTableStaking/scripts/get_node_networking_addr.cdc":                         idtablestakingScriptsGet_node_networking_addrCdc,
	"idTableStaking/scripts/get_node_networking_key.cdc":                          idtablestakingScriptsGet_node_networking_keyCdc,
	"idTableStaking/scripts/get_node_rewarded_tokens.cdc":                         idtablestakingScriptsGet_node_rewarded_tokensCdc,
	"idTableStaking/scripts/get_node_role.cdc":                                    idtablestakingScriptsGet_node_roleCdc,
	"idTableStaking/scripts/get_node_staked_tokens.cdc":                           idtablestakingScriptsGet_node_staked_tokensCdc,
	"idTableStaking/scripts/get_node_staking_key.cdc":                             idtablestakingScriptsGet_node_staking_keyCdc,
	"idTableStaking/scripts/get_node_total_commitment.cdc":                        idtablestakingScriptsGet_node_total_commitmentCdc,
	"idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc":     idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc,
	"idTableStaking/scripts/get_node_type_ratio.cdc":                              idtablestakingScriptsGet_node_type_ratioCdc,
	"idTableStaking/scripts/get_node_unstaked_tokens.cdc":                         idtablestakingScriptsGet_node_unstaked_tokensCdc,
	"idTableStaking/scripts/get_node_unstaking_request.cdc":                       idtablestakingScriptsGet_node_unstaking_requestCdc,
	"idTableStaking/scripts/get_node_unstaking_tokens.cdc":                        idtablestakingScriptsGet_node_unstaking_tokensCdc,
	"idTableStaking/scripts/get_non_operational.cdc":                              idtablestakingScriptsGet_non_operationalCdc,
	"idTableStaking/scripts/get_proposed_table.cdc":                               idtablestakingScriptsGet_proposed_tableCdc,
	"idTableStaking/scripts/get_role_counts.cdc":                                  idtablestakingScriptsGet_role_countsCdc,
	"idTableStaking/scripts/get_slot_limits.cdc":                                  idtablestakingScriptsGet_slot_limitsCdc,
	"idTableStaking/scripts/get_stake_requirements.cdc":                           idtablestakingScriptsGet_stake_requirementsCdc,
	"idTableStaking/scripts/get_table.cdc":                                        idtablestakingScriptsGet_tableCdc,
	"idTableStaking/scripts/get_total_staked.cdc":                                 idtablestakingScriptsGet_total_stakedCdc,
	"idTableStaking/scripts/get_total_staked_by_type.cdc":                         idtablestakingScriptsGet_total_staked_by_typeCdc,
	"idTableStaking/scripts/get_weekly_payout.cdc":                                idtablestakingScriptsGet_weekly_payoutCdc,
	"inspect_field.cdc":                                                           inspect_fieldCdc,
	"lockedTokens/admin/admin_create_shared_accounts.cdc":                         lockedtokensAdminAdmin_create_shared_accountsCdc,
	"lockedTokens/admin/admin_deploy_contract.cdc":                                lockedtokensAdminAdmin_deploy_contractCdc,
	"lockedTokens/admin/admin_deposit_account_creator.cdc":                        lockedtokensAdminAdmin_deposit_account_creatorCdc,
	"lockedTokens/admin/admin_remove_delegator.cdc":                               lockedtokensAdminAdmin_remove_delegatorCdc,
	"lockedTokens/admin/check_main_registration.cdc":                              lockedtokensAdminCheck_main_registrationCdc,
	"lockedTokens/admin/check_shared_registration.cdc":                            lockedtokensAdminCheck_shared_registrationCdc,
	"lockedTokens/admin/custody_create_account_with_lease_account.cdc":            lockedtokensAdminCustody_create_account_with_lease_accountCdc,
	"lockedTokens/admin/custody_create_only_lease_account.cdc":                    lockedtokensAdminCustody_create_only_lease_accountCdc,
	"lockedTokens/admin/custody_create_only_shared_account.cdc":                   lockedtokensAdminCustody_create_only_shared_accountCdc,
	"lockedTokens/admin/custody_create_shared_accounts.cdc":                       lockedtokensAdminCustody_create_shared_accountsCdc,
	"lockedTokens/admin/custody_setup_account_creator.cdc":                        lockedtokensAdminCustody_setup_account_creatorCdc,
	"lockedTokens/admin/deposit_locked_tokens.cdc":                                lockedtokensAdminDeposit_locked_tokensCdc,
	"lockedTokens/admin/get_unlocking_bad_accounts.cdc":                           lockedtokensAdminGet_unlocking_bad_accountsCdc,
	"lockedTokens/admin/unlock_tokens.cdc":                                        lockedtokensAdminUnlock_tokensCdc,
	"lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc":                  lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc,
	"lockedTokens/delegator/delegate_new_tokens.cdc":                              lockedtokensDelegatorDelegate_new_tokensCdc,
	"lockedTokens/delegator/delegate_rewarded_tokens.cdc":                         lockedtokensDelegatorDelegate_rewarded_tokensCdc,
	"lockedTokens/delegator/delegate_unstaked_tokens.cdc":                         lockedtokensDelegatorDelegate_unstaked_tokensCdc,
	"lockedTokens/delegator/get_delegator_id.cdc":                                 lockedtokensDelegatorGet_delegator_idCdc,
	"lockedTokens/delegator/get_delegator_info.cdc":                               lockedtokensDelegatorGet_delegator_infoCdc,
	"lockedTokens/delegator/get_delegator_node_id.cdc":                            lockedtokensDelegatorGet_delegator_node_idCdc,
	"lockedTokens/delegator/register_delegator.cdc":                               lockedtokensDelegatorRegister_delegatorCdc,
	"lockedTokens/delegator/request_unstaking.cdc":                                lockedtokensDelegatorRequest_unstakingCdc,
	"lockedTokens/delegator/withdraw_rewarded_tokens.cdc":                         lockedtokensDelegatorWithdraw_rewarded_tokensCdc,
	"lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc":                  lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc,
	"lockedTokens/delegator/withdraw_unstaked_tokens.cdc":                         lockedtokensDelegatorWithdraw_unstaked_tokensCdc,
	"lockedTokens/staker/get_node_id.cdc":                                         lockedtokensStakerGet_node_idCdc,
	"lockedTokens/staker/get_staker_info.cdc":                                     lockedtokensStakerGet_staker_infoCdc,
	"lockedTokens/staker/register_node.cdc":                                       lockedtokensStakerRegister_nodeCdc,
	"lockedTokens/staker/request_unstaking.cdc":                                   lockedtokensStakerRequest_unstakingCdc,
	"lockedTokens/staker/stake_new_tokens.cdc":                                    lockedtokensStakerStake_new_tokensCdc,
	"lockedTokens/staker/stake_rewarded_tokens.cdc":                               lockedtokensStakerStake_rewarded_tokensCdc,
	"lockedTokens/staker/stake_unstaked_tokens.cdc":                               lockedtokensStakerStake_unstaked_tokensCdc,
	"lockedTokens/staker/unstake_all.cdc":                                         lockedtokensStakerUnstake_allCdc,
	"lockedTokens/staker/update_networking_address.cdc":                           lockedtokensStakerUpdate_networking_addressCdc,
	"lockedTokens/staker/withdraw_rewarded_tokens.cdc":                            lockedtokensStakerWithdraw_rewarded_tokensCdc,
	"lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc":                     lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc,
	"lockedTokens/staker/withdraw_unstaked_tokens.cdc":                            lockedtokensStakerWithdraw_unstaked_tokensCdc,
	"lockedTokens/user/deposit_tokens.cdc":                                        lockedtokensUserDeposit_tokensCdc,
	"lockedTokens/user/get_locked_account_address.cdc":                            lockedtokensUserGet_locked_account_addressCdc,
	"lockedTokens/user/get_locked_account_balance.cdc":                            lockedtokensUserGet_locked_account_balanceCdc,
	"lockedTokens/user/get_multiple_unlock_limits.cdc":                            lockedtokensUserGet_multiple_unlock_limitsCdc,
	"lockedTokens/user/get_total_balance.cdc":                                     lockedtokensUserGet_total_balanceCdc,
	"lockedTokens/user/get_unlock_limit.cdc":                                      lockedtokensUserGet_unlock_limitCdc,
	"lockedTokens/user/withdraw_tokens.cdc":                                       lockedtokensUserWithdraw_tokensCdc,
	"nodeVersionBeacon/admin/change_version_freeze_period.cdc":                    nodeversionbeaconAdminChange_version_freeze_periodCdc,
	"nodeVersionBeacon/admin/delete_version_boundary.cdc":                         nodeversionbeaconAdminDelete_version_boundaryCdc,
	"nodeVersionBeacon/admin/heartbeat.cdc":                                       nodeversionbeaconAdminHeartbeatCdc,
	"nodeVersionBeacon/admin/set_version_boundary.cdc":                            nodeversionbeaconAdminSet_version_boundaryCdc,
	"nodeVersionBeacon/scripts/get_current_node_version.cdc":                      nodeversionbeaconScriptsGet_current_node_versionCdc,
	"nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc":            nodeversionbeaconScriptsGet_current_node_version_as_stringCdc,
	"nodeVersionBeacon/scripts/get_next_version_boundary.cdc":                     nodeversionbeaconScriptsGet_next_version_boundaryCdc,
	"nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc":              nodeversionbeaconScriptsGet_next_version_update_sequenceCdc,
	"nodeVersionBeacon/scripts/get_version_boundaries.cdc":                        nodeversionbeaconScriptsGet_version_boundariesCdc,
	"nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc":            nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc,
	"quorumCertificate/admin/publish_voter.cdc":                                   quorumcertificateAdminPublish_voterCdc,
	"quorumCertificate/admin/start_voting.cdc":                                    quorumcertificateAdminStart_votingCdc,
	"quorumCertificate/admin/stop_voting.cdc":                                     quorumcertificateAdminStop_votingCdc,
	"quorumCertificate/create_voter.cdc":                                          quorumcertificateCreate_voterCdc,
	"quorumCertificate/scripts/generate_quorum_certificate.cdc":                   quorumcertificateScriptsGenerate_quorum_certificateCdc,
	"quorumCertificate/scripts/get_cluster.cdc":                                   quorumcertificateScriptsGet_clusterCdc,
	"quorumCertificate/scripts/get_cluster_complete.cdc":                          quorumcertificateScriptsGet_cluster_completeCdc,
	"quorumCertificate/scripts/get_cluster_node_weights.cdc":                      quorumcertificateScriptsGet_cluster_node_weightsCdc,
	"quorumCertificate/scripts/get_cluster_vote_threshold.cdc":                    quorumcertificateScriptsGet_cluster_vote_thresholdCdc,
	"quorumCertificate/scripts/get_cluster_votes.cdc":                             quorumcertificateScriptsGet_cluster_votesCdc,
	"quorumCertificate/scripts/get_cluster_weight.cdc":                            quorumcertificateScriptsGet_cluster_weightCdc,
	"quorumCertificate/scripts/get_clusters.cdc":                                  quorumcertificateScriptsGet_clustersCdc,
	"quorumCertificate/scripts/get_node_has_voted.cdc":                            quorumcertificateScriptsGet_node_has_votedCdc,
	"quorumCertificate/scripts/get_node_weight.cdc":                               quorumcertificateScriptsGet_node_weightCdc,
	"quorumCertificate/scripts/get_qc_enabled.cdc":                                quorumcertificateScriptsGet_qc_enabledCdc,
	"quorumCertificate/scripts/get_voter_is_registered.cdc":                       quorumcertificateScriptsGet_voter_is_registeredCdc,
	"quorumCertificate/scripts/get_voting_completed.cdc":                          quorumcertificateScriptsGet_voting_completedCdc,
	"quorumCertificate/submit_vote.cdc":                                           quorumcertificateSubmit_voteCdc,
	"stakingCollection/close_stake.cdc":                                           stakingcollectionClose_stakeCdc,
	"stakingCollection/create_machine_account.cdc":                                stakingcollectionCreate_machine_accountCdc,
	"stakingCollection/create_new_tokenholder_acct.cdc":                           stakingcollectionCreate_new_tokenholder_acctCdc,
	"stakingCollection/deploy_collection_contract.cdc":                            stakingcollectionDeploy_collection_contractCdc,
	"stakingCollection/register_delegator.cdc":                                    stakingcollectionRegister_delegatorCdc,
	"stakingCollection/register_multiple_delegators.cdc":                          stakingcollectionRegister_multiple_delegatorsCdc,
	"stakingCollection/register_multiple_nodes.cdc":                               stakingcollectionRegister_multiple_nodesCdc,
	"stakingCollection/register_node.cdc":                                         stakingcollectionRegister_nodeCdc,
	"stakingCollection/request_unstaking.cdc":                                     stakingcollectionRequest_unstakingCdc,
	"stakingCollection/restake_all_stakers.cdc":                                   stakingcollectionRestake_all_stakersCdc,
	"stakingCollection/scripts/does_account_have_staking_collection.cdc":          stakingcollectionScriptsDoes_account_have_staking_collectionCdc,
	"stakingCollection/scripts/get_all_delegator_info.cdc":                        stakingcollectionScriptsGet_all_delegator_infoCdc,
	"stakingCollection/scripts/get_all_node_info.cdc":                             stakingcollectionScriptsGet_all_node_infoCdc,
	"stakingCollection/scripts/get_delegator_ids.cdc":                             stakingcollectionScriptsGet_delegator_idsCdc,
	"stakingCollection/scripts/get_does_stake_exist.cdc":                          stakingcollectionScriptsGet_does_stake_existCdc,
	"stakingCollection/scripts/get_locked_tokens_used.cdc":                        stakingcollectionScriptsGet_locked_tokens_usedCdc,
	"stakingCollection/scripts/get_machine_account_address.cdc":                   stakingcollectionScriptsGet_machine_account_addressCdc,
	"stakingCollection/scripts/get_machine_accounts.cdc":                          stakingcollectionScriptsGet_machine_accountsCdc,
	"stakingCollection/scripts/get_node_ids.cdc":                                  stakingcollectionScriptsGet_node_idsCdc,
	"stakingCollection/scripts/get_unlocked_tokens_used.cdc":                      stakingcollectionScriptsGet_unlocked_tokens_usedCdc,
	"stakingCollection/setup_staking_collection.cdc":                              stakingcollectionSetup_staking_collectionCdc,
	"stakingCollection/stake_new_tokens.cdc":                                      stakingcollectionStake_new_tokensCdc,
	"stakingCollection/stake_rewarded_tokens.cdc":                                 stakingcollectionStake_rewarded_tokensCdc,
	"stakingCollection/stake_unstaked_tokens.cdc":                                 stakingcollectionStake_unstaked_tokensCdc,
	"stakingCollection/test/deposit_tokens.cdc":                                   stakingcollectionTestDeposit_tokensCdc,
	"stakingCollection/test/get_tokens.cdc":                                       stakingcollectionTestGet_tokensCdc,
	"stakingCollection/transfer_delegator.cdc":                                    stakingcollectionTransfer_delegatorCdc,
	"stakingCollection/transfer_node.cdc":                                         stakingcollectionTransfer_nodeCdc,
	"stakingCollection/unstake_all.cdc":                                           stakingcollectionUnstake_allCdc,
	"stakingCollection/update_networking_address.cdc":                             stakingcollectionUpdate_networking_addressCdc,
	"stakingCollection/withdraw_from_machine_account.cdc":                         stakingcollectionWithdraw_from_machine_accountCdc,
	"stakingCollection/withdraw_rewarded_tokens.cdc":                              stakingcollectionWithdraw_rewarded_tokensCdc,
	"stakingCollection/withdraw_unstaked_tokens.cdc":                              stakingcollectionWithdraw_unstaked_tokensCdc,
	"stakingProxy/add_node_info.cdc":                                              stakingproxyAdd_node_infoCdc,
	"stakingProxy/get_node_info.cdc":                                              stakingproxyGet_node_infoCdc,
	"stakingProxy/register_node.cdc":                                              stakingproxyRegister_nodeCdc,
	"stakingProxy/remove_node_info.cdc":                                           stakingproxyRemove_node_infoCdc,
	"stakingProxy/remove_staking_proxy.cdc":                                       stakingproxyRemove_staking_proxyCdc,
	"stakingProxy/request_unstaking.cdc":                                          stakingproxyRequest_unstakingCdc,
	"stakingProxy/setup_node_account.cdc":                                         stakingproxySetup_node_accountCdc,
	"stakingProxy/stake_new_tokens.cdc":                                           stakingproxyStake_new_tokensCdc,
	"stakingProxy/stake_unstaked_tokens.cdc":                                      stakingproxyStake_unstaked_tokensCdc,
	"stakingProxy/unstake_all.cdc":                                                stakingproxyUnstake_allCdc,
	"stakingProxy/withdraw_rewards.cdc":                                           stakingproxyWithdraw_rewardsCdc,
	"stakingProxy/withdraw_unstaked.cdc":                                          stakingproxyWithdraw_unstakedCdc,
	"storageFees/admin/set_parameters.cdc":                                        storagefeesAdminSet_parametersCdc,
	"storageFees/scripts/get_account_available_balance.cdc":                       storagefeesScriptsGet_account_available_balanceCdc,
	"storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc": storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc,
	"storageFees/scripts/get_storage_capacity.cdc":                                storagefeesScriptsGet_storage_capacityCdc,
	"storageFees/scripts/get_storage_fee_conversion.cdc":                          storagefeesScriptsGet_storage_fee_conversionCdc,
	"storageFees/scripts/get_storage_fee_min.cdc":                                 storagefeesScriptsGet_storage_fee_minCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FlowServiceAccount": {nil, map[string]*bintree{
		"add_account_creator.cdc": {flowserviceaccountAdd_account_creatorCdc, map[string]*bintree{}},
		"deposit_fees.cdc": {flowserviceaccountDeposit_feesCdc, map[string]*bintree{}},
		"remove_account_creator.cdc": {flowserviceaccountRemove_account_creatorCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_account_creators.cdc": {flowserviceaccountScriptsGet_account_creatorsCdc, map[string]*bintree{}},
			"get_account_fee.cdc": {flowserviceaccountScriptsGet_account_feeCdc, map[string]*bintree{}},
			"get_execution_effort_weights.cdc": {flowserviceaccountScriptsGet_execution_effort_weightsCdc, map[string]*bintree{}},
			"get_execution_memory_limit.cdc": {flowserviceaccountScriptsGet_execution_memory_limitCdc, map[string]*bintree{}},
			"get_execution_memory_weights.cdc": {flowserviceaccountScriptsGet_execution_memory_weightsCdc, map[string]*bintree{}},
			"get_fees_balance.cdc": {flowserviceaccountScriptsGet_fees_balanceCdc, map[string]*bintree{}},
			"get_is_account_creation_restricted.cdc": {flowserviceaccountScriptsGet_is_account_creation_restrictedCdc, map[string]*bintree{}},
			"get_is_account_creator.cdc": {flowserviceaccountScriptsGet_is_account_creatorCdc, map[string]*bintree{}},
			"get_tx_fee_parameters.cdc": {flowserviceaccountScriptsGet_tx_fee_parametersCdc, map[string]*bintree{}},
		}},
		"set_execution_effort_weights.cdc": {flowserviceaccountSet_execution_effort_weightsCdc, map[string]*bintree{}},
		"set_execution_memory_limit.cdc": {flowserviceaccountSet_execution_memory_limitCdc, map[string]*bintree{}},
		"set_execution_memory_weights.cdc": {flowserviceaccountSet_execution_memory_weightsCdc, map[string]*bintree{}},
		"set_is_account_creation_restricted.cdc": {flowserviceaccountSet_is_account_creation_restrictedCdc, map[string]*bintree{}},
		"set_tx_fee_parameters.cdc": {flowserviceaccountSet_tx_fee_parametersCdc, map[string]*bintree{}},
		"set_tx_fee_surge_factor.cdc": {flowserviceaccountSet_tx_fee_surge_factorCdc, map[string]*bintree{}},
	}},
	"dkg": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"force_stop_dkg.cdc": {dkgAdminForce_stop_dkgCdc, map[string]*bintree{}},
			"publish_participant.cdc": {dkgAdminPublish_participantCdc, map[string]*bintree{}},
			"set_safe_threshold.cdc": {dkgAdminSet_safe_thresholdCdc, map[string]*bintree{}},
			"start_dkg.cdc": {dkgAdminStart_dkgCdc, map[string]*bintree{}},
			"stop_dkg.cdc": {dkgAdminStop_dkgCdc, map[string]*bintree{}},
		}},
		"create_participant.cdc": {dkgCreate_participantCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_consensus_nodes.cdc": {dkgScriptsGet_consensus_nodesCdc, map[string]*bintree{}},
			"get_dkg_canonical_final_submission.cdc": {dkgScriptsGet_dkg_canonical_final_submissionCdc, map[string]*bintree{}},
			"get_dkg_completed.cdc": {dkgScriptsGet_dkg_completedCdc, map[string]*bintree{}},
			"get_dkg_enabled.cdc": {dkgScriptsGet_dkg_enabledCdc, map[string]*bintree{}},
			"get_final_submissions.cdc": {dkgScriptsGet_final_submissionsCdc, map[string]*bintree{}},
			"get_latest_whiteboard_messages.cdc": {dkgScriptsGet_latest_whiteboard_messagesCdc, map[string]*bintree{}},
			"get_node_final_submission.cdc": {dkgScriptsGet_node_final_submissionCdc, map[string]*bintree{}},
			"get_node_has_submitted.cdc": {dkgScriptsGet_node_has_submittedCdc, map[string]*bintree{}},
			"get_node_is_claimed.cdc": {dkgScriptsGet_node_is_claimedCdc, map[string]*bintree{}},
			"get_node_is_registered.cdc": {dkgScriptsGet_node_is_registeredCdc, map[string]*bintree{}},
			"get_thresholds.cdc": {dkgScriptsGet_thresholdsCdc, map[string]*bintree{}},
			"get_whiteboard_messages.cdc": {dkgScriptsGet_whiteboard_messagesCdc, map[string]*bintree{}},
		}},
		"send_final_submission.cdc": {dkgSend_final_submissionCdc, map[string]*bintree{}},
		"send_whiteboard_message.cdc": {dkgSend_whiteboard_messageCdc, map[string]*bintree{}},
	}},
	"epoch": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"advance_view.cdc": {epochAdminAdvance_viewCdc, map[string]*bintree{}},
			"calculate_rewards.cdc": {epochAdminCalculate_rewardsCdc, map[string]*bintree{}},
			"deploy_epoch.cdc": {epochAdminDeploy_epochCdc, map[string]*bintree{}},
			"deploy_qc_dkg.cdc": {epochAdminDeploy_qc_dkgCdc, map[string]*bintree{}},
			"pay_rewards.cdc": {epochAdminPay_rewardsCdc, map[string]*bintree{}},
			"reset_epoch.cdc": {epochAdminReset_epochCdc, map[string]*bintree{}},
			"set_automatic_rewards.cdc": {epochAdminSet_automatic_rewardsCdc, map[string]*bintree{}},
			"set_bonus_tokens.cdc": {epochAdminSet_bonus_tokensCdc, map[string]*bintree{}},
			"update_clusters.cdc": {epochAdminUpdate_clustersCdc, map[string]*bintree{}},
			"update_dkg_phase_views.cdc": {epochAdminUpdate_dkg_phase_viewsCdc, map[string]*bintree{}},
			"update_epoch_config.cdc": {epochAdminUpdate_epoch_configCdc, map[string]*bintree{}},
			"update_epoch_views.cdc": {epochAdminUpdate_epoch_viewsCdc, map[string]*bintree{}},
			"update_reward.cdc": {epochAdminUpdate_rewardCdc, map[string]*bintree{}},
			"update_staking_views.cdc": {epochAdminUpdate_staking_viewsCdc, map[string]*bintree{}},
		}},
		"node": {nil, map[string]*bintree{
			"register_dkg_participant.cdc": {epochNodeRegister_dkg_participantCdc, map[string]*bintree{}},
			"register_node.cdc": {epochNodeRegister_nodeCdc, map[string]*bintree{}},
			"register_qc_voter.cdc": {epochNodeRegister_qc_voterCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_bonus_tokens.cdc": {epochScriptsGet_bonus_tokensCdc, map[string]*bintree{}},
			"get_config_metadata.cdc": {epochScriptsGet_config_metadataCdc, map[string]*bintree{}},
			"get_create_clusters.cdc": {epochScriptsGet_create_clustersCdc, map[string]*bintree{}},
			"get_current_view.cdc": {epochScriptsGet_current_viewCdc, map[string]*bintree{}},
			"get_epoch_counter.cdc": {epochScriptsGet_epoch_counterCdc, map[string]*bintree{}},
			"get_epoch_metadata.cdc": {epochScriptsGet_epoch_metadataCdc, map[string]*bintree{}},
			"get_epoch_phase.cdc": {epochScriptsGet_epoch_phaseCdc, map[string]*bintree{}},
			"get_proposed_counter.cdc": {epochScriptsGet_proposed_counterCdc, map[string]*bintree{}},
			"get_randomize.cdc": {epochScriptsGet_randomizeCdc, map[string]*bintree{}},
		}},
	}},
	"flowToken": {nil, map[string]*bintree{
		"burn_tokens.cdc": {flowtokenBurn_tokensCdc, map[string]*bintree{}},
		"create_forwarder.cdc": {flowtokenCreate_forwarderCdc, map[string]*bintree{}},
		"mint_tokens.cdc": {flowtokenMint_tokensCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_balance.cdc": {flowtokenScriptsGet_balanceCdc, map[string]*bintree{}},
			"get_supply.cdc": {flowtokenScriptsGet_supplyCdc, map[string]*bintree{}},
		}},
		"setup_account.cdc": {flowtokenSetup_accountCdc, map[string]*bintree{}},
		"transfer_tokens.cdc": {flowtokenTransfer_tokensCdc, map[string]*bintree{}},
	}},
	"idTableStaking": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"add_approved_and_limits.cdc": {idtablestakingAdminAdd_approved_and_limitsCdc, map[string]*bintree{}},
			"add_approved_nodes.cdc": {idtablestakingAdminAdd_approved_nodesCdc, map[string]*bintree{}},
			"capability_end_epoch.cdc": {idtablestakingAdminCapability_end_epochCdc, map[string]*bintree{}},
			"change_candidate_limits.cdc": {idtablestakingAdminChange_candidate_limitsCdc, map[string]*bintree{}},
			"change_cut.cdc": {idtablestakingAdminChange_cutCdc, map[string]*bintree{}},
			"change_del_minimums.cdc": {idtablestakingAdminChange_del_minimumsCdc, map[string]*bintree{}},
			"change_minimums.cdc": {idtablestakingAdminChange_minimumsCdc, map[string]*bintree{}},
			"change_payout.cdc": {idtablestakingAdminChange_payoutCdc, map[string]*bintree{}},
			"end_epoch.cdc": {idtablestakingAdminEnd_epochCdc, map[string]*bintree{}},
			"end_epoch_change_payout.cdc": {idtablestakingAdminEnd_epoch_change_payoutCdc, map[string]*bintree{}},
			"end_staking.cdc": {idtablestakingAdminEnd_stakingCdc, map[string]*bintree{}},
			"move_tokens.cdc": {idtablestakingAdminMove_tokensCdc, map[string]*bintree{}},
			"pay_rewards.cdc": {idtablestakingAdminPay_rewardsCdc, map[string]*bintree{}},
			"remove_approved_nodes.cdc": {idtablestakingAdminRemove_approved_nodesCdc, map[string]*bintree{}},
			"remove_invalid_nodes.cdc": {idtablestakingAdminRemove_invalid_nodesCdc, map[string]*bintree{}},
			"remove_node.cdc": {idtablestakingAdminRemove_nodeCdc, map[string]*bintree{}},
			"scale_rewards_test.cdc": {idtablestakingAdminScale_rewards_testCdc, map[string]*bintree{}},
			"set_approved_nodes.cdc": {idtablestakingAdminSet_approved_nodesCdc, map[string]*bintree{}},
			"set_claimed.cdc": {idtablestakingAdminSet_claimedCdc, map[string]*bintree{}},
			"set_node_weight.cdc": {idtablestakingAdminSet_node_weightCdc, map[string]*bintree{}},
			"set_non_operational.cdc": {idtablestakingAdminSet_non_operationalCdc, map[string]*bintree{}},
			"set_slot_limits.cdc": {idtablestakingAdminSet_slot_limitsCdc, map[string]*bintree{}},
			"start_staking.cdc": {idtablestakingAdminStart_stakingCdc, map[string]*bintree{}},
			"transfer_admin.cdc": {idtablestakingAdminTransfer_adminCdc, map[string]*bintree{}},
			"transfer_fees_admin.cdc": {idtablestakingAdminTransfer_fees_adminCdc, map[string]*bintree{}},
			"transfer_minter_deploy.cdc": {idtablestakingAdminTransfer_minter_deployCdc, map[string]*bintree{}},
			"upgrade_set_claimed.cdc": {idtablestakingAdminUpgrade_set_claimedCdc, map[string]*bintree{}},
			"upgrade_staking.cdc": {idtablestakingAdminUpgrade_stakingCdc, map[string]*bintree{}},
		}},
		"delegation": {nil, map[string]*bintree{
			"del_request_unstaking.cdc": {idtablestakingDelegationDel_request_unstakingCdc, map[string]*bintree{}},
			"del_stake_new_tokens.cdc": {idtablestakingDelegationDel_stake_new_tokensCdc, map[string]*bintree{}},
			"del_stake_rewarded.cdc": {idtablestakingDelegationDel_stake_rewardedCdc, map[string]*bintree{}},
			"del_stake_unstaked.cdc": {idtablestakingDelegationDel_stake_unstakedCdc, map[string]*bintree{}},
			"del_withdraw_reward_tokens.cdc": {idtablestakingDelegationDel_withdraw_reward_tokensCdc, map[string]*bintree{}},
			"del_withdraw_unstaked_tokens.cdc": {idtablestakingDelegationDel_withdraw_unstaked_tokensCdc, map[string]*bintree{}},
			"delegator_add_capability.cdc": {idtablestakingDelegationDelegator_add_capabilityCdc, map[string]*bintree{}},
			"get_delegator_committed.cdc": {idtablestakingDelegationGet_delegator_committedCdc, map[string]*bintree{}},
			"get_delegator_info.cdc": {idtablestakingDelegationGet_delegator_infoCdc, map[string]*bintree{}},
			"get_delegator_info_from_address.cdc": {idtablestakingDelegationGet_delegator_info_from_addressCdc, map[string]*bintree{}},
			"get_delegator_request.cdc": {idtablestakingDelegationGet_delegator_requestCdc, map[string]*bintree{}},
			"get_delegator_rewarded.cdc": {idtablestakingDelegationGet_delegator_rewardedCdc, map[string]*bintree{}},
			"get_delegator_staked.cdc": {idtablestakingDelegationGet_delegator_stakedCdc, map[string]*bintree{}},
			"get_delegator_unstaked.cdc": {idtablestakingDelegationGet_delegator_unstakedCdc, map[string]*bintree{}},
			"get_delegator_unstaking.cdc": {idtablestakingDelegationGet_delegator_unstakingCdc, map[string]*bintree{}},
			"get_delegator_unstaking_request.cdc": {idtablestakingDelegationGet_delegator_unstaking_requestCdc, map[string]*bintree{}},
			"register_delegator.cdc": {idtablestakingDelegationRegister_delegatorCdc, map[string]*bintree{}},
			"register_many_delegators.cdc": {idtablestakingDelegationRegister_many_delegatorsCdc, map[string]*bintree{}},
		}},
		"node": {nil, map[string]*bintree{
			"node_add_capability.cdc": {idtablestakingNodeNode_add_capabilityCdc, map[string]*bintree{}},
			"register_many_nodes.cdc": {idtablestakingNodeRegister_many_nodesCdc, map[string]*bintree{}},
			"register_node.cdc": {idtablestakingNodeRegister_nodeCdc, map[string]*bintree{}},
			"request_unstake.cdc": {idtablestakingNodeRequest_unstakeCdc, map[string]*bintree{}},
			"stake_new_tokens.cdc": {idtablestakingNodeStake_new_tokensCdc, map[string]*bintree{}},
			"stake_rewarded_tokens.cdc": {idtablestakingNodeStake_rewarded_tokensCdc, map[string]*bintree{}},
			"stake_unstaked_tokens.cdc": {idtablestakingNodeStake_unstaked_tokensCdc, map[string]*bintree{}},
			"unstake_all.cdc": {idtablestakingNodeUnstake_allCdc, map[string]*bintree{}},
			"update_networking_address.cdc": {idtablestakingNodeUpdate_networking_addressCdc, map[string]*bintree{}},
			"withdraw_reward_tokens.cdc": {idtablestakingNodeWithdraw_reward_tokensCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {idtablestakingNodeWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_approved_but_not_staked_nodes.cdc": {idtablestakingScriptsGet_approved_but_not_staked_nodesCdc, map[string]*bintree{}},
			"get_approved_nodes.cdc": {idtablestakingScriptsGet_approved_nodesCdc, map[string]*bintree{}},
			"get_candidate_limits.cdc": {idtablestakingScriptsGet_candidate_limitsCdc, map[string]*bintree{}},
			"get_candidate_nodes.cdc": {idtablestakingScriptsGet_candidate_nodesCdc, map[string]*bintree{}},
			"get_current_table.cdc": {idtablestakingScriptsGet_current_tableCdc, map[string]*bintree{}},
			"get_cut_percentage.cdc": {idtablestakingScriptsGet_cut_percentageCdc, map[string]*bintree{}},
			"get_del_stake_requirements.cdc": {idtablestakingScriptsGet_del_stake_requirementsCdc, map[string]*bintree{}},
			"get_delegators_below_min.cdc": {idtablestakingScriptsGet_delegators_below_minCdc, map[string]*bintree{}},
			"get_node_committed_tokens.cdc": {idtablestakingScriptsGet_node_committed_tokensCdc, map[string]*bintree{}},
			"get_node_info.cdc": {idtablestakingScriptsGet_node_infoCdc, map[string]*bintree{}},
			"get_node_info_from_address.cdc": {idtablestakingScriptsGet_node_info_from_addressCdc, map[string]*bintree{}},
			"get_node_initial_weight.cdc": {idtablestakingScriptsGet_node_initial_weightCdc, map[string]*bintree{}},
			"get_node_networking_addr.cdc": {idtablestakingScriptsGet_node_networking_addrCdc, map[string]*bintree{}},
			"get_node_networking_key.cdc": {idtablestakingScriptsGet_node_networking_keyCdc, map[string]*bintree{}},
			"get_node_rewarded_tokens.cdc": {idtablestakingScriptsGet_node_rewarded_tokensCdc, map[string]*bintree{}},
			"get_node_role.cdc": {idtablestakingScriptsGet_node_roleCdc, map[string]*bintree{}},
			"get_node_staked_tokens.cdc": {idtablestakingScriptsGet_node_staked_tokensCdc, map[string]*bintree{}},
			"get_node_staking_key.cdc": {idtablestakingScriptsGet_node_staking_keyCdc, map[string]*bintree{}},
			"get_node_total_commitment.cdc": {idtablestakingScriptsGet_node_total_commitmentCdc, map[string]*bintree{}},
			"get_node_total_commitment_without_delegators.cdc": {idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc, map[string]*bintree{}},
			"get_node_type_ratio.cdc": {idtablestakingScriptsGet_node_type_ratioCdc, map[string]*bintree{}},
			"get_node_unstaked_tokens.cdc": {idtablestakingScriptsGet_node_unstaked_tokensCdc, map[string]*bintree{}},
			"get_node_unstaking_request.cdc": {idtablestakingScriptsGet_node_unstaking_requestCdc, map[string]*bintree{}},
			"get_node_unstaking_tokens.cdc": {idtablestakingScriptsGet_node_unstaking_tokensCdc, map[string]*bintree{}},
			"get_non_operational.cdc": {idtablestakingScriptsGet_non_operationalCdc, map[string]*bintree{}},
			"get_proposed_table.cdc": {idtablestakingScriptsGet_proposed_tableCdc, map[string]*bintree{}},
			"get_role_counts.cdc": {idtablestakingScriptsGet_role_countsCdc, map[string]*bintree{}},
			"get_slot_limits.cdc": {idtablestakingScriptsGet_slot_limitsCdc, map[string]*bintree{}},
			"get_stake_requirements.cdc": {idtablestakingScriptsGet_stake_requirementsCdc, map[string]*bintree{}},
			"get_table.cdc": {idtablestakingScriptsGet_tableCdc, map[string]*bintree{}},
			"get_total_staked.cdc": {idtablestakingScriptsGet_total_stakedCdc, map[string]*bintree{}},
			"get_total_staked_by_type.cdc": {idtablestakingScriptsGet_total_staked_by_typeCdc, map[string]*bintree{}},
			"get_weekly_payout.cdc": {idtablestakingScriptsGet_weekly_payoutCdc, map[string]*bintree{}},
		}},
	}},
	"inspect_field.cdc": {inspect_fieldCdc, map[string]*bintree{}},
	"lockedTokens": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"admin_create_shared_accounts.cdc": {lockedtokensAdminAdmin_create_shared_accountsCdc, map[string]*bintree{}},
			"admin_deploy_contract.cdc": {lockedtokensAdminAdmin_deploy_contractCdc, map[string]*bintree{}},
			"admin_deposit_account_creator.cdc": {lockedtokensAdminAdmin_deposit_account_creatorCdc, map[string]*bintree{}},
			"admin_remove_delegator.cdc": {lockedtokensAdminAdmin_remove_delegatorCdc, map[string]*bintree{}},
			"check_main_registration.cdc": {lockedtokensAdminCheck_main_registrationCdc, map[string]*bintree{}},
			"check_shared_registration.cdc": {lockedtokensAdminCheck_shared_registrationCdc, map[string]*bintree{}},
			"custody_create_account_with_lease_account.cdc": {lockedtokensAdminCustody_create_account_with_lease_accountCdc, map[string]*bintree{}},
			"custody_create_only_lease_account.cdc": {lockedtokensAdminCustody_create_only_lease_accountCdc, map[string]*bintree{}},
			"custody_create_only_shared_account.cdc": {lockedtokensAdminCustody_create_only_shared_accountCdc, map[string]*bintree{}},
			"custody_create_shared_accounts.cdc": {lockedtokensAdminCustody_create_shared_accountsCdc, map[string]*bintree{}},
			"custody_setup_account_creator.cdc": {lockedtokensAdminCustody_setup_account_creatorCdc, map[string]*bintree{}},
			"deposit_locked_tokens.cdc": {lockedtokensAdminDeposit_locked_tokensCdc, map[string]*bintree{}},
			"get_unlocking_bad_accounts.cdc": {lockedtokensAdminGet_unlocking_bad_accountsCdc, map[string]*bintree{}},
			"unlock_tokens.cdc": {lockedtokensAdminUnlock_tokensCdc, map[string]*bintree{}},
			"unlock_tokens_for_multiple_accounts.cdc": {lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc, map[string]*bintree{}},
		}},
		"delegator": {nil, map[string]*bintree{
			"delegate_new_tokens.cdc": {lockedtokensDelegatorDelegate_new_tokensCdc, map[string]*bintree{}},
			"delegate_rewarded_tokens.cdc": {lockedtokensDelegatorDelegate_rewarded_tokensCdc, map[string]*bintree{}},
			"delegate_unstaked_tokens.cdc": {lockedtokensDelegatorDelegate_unstaked_tokensCdc, map[string]*bintree{}},
			"get_delegator_id.cdc": {lockedtokensDelegatorGet_delegator_idCdc, map[string]*bintree{}},
			"get_delegator_info.cdc": {lockedtokensDelegatorGet_delegator_infoCdc, map[string]*bintree{}},
			"get_delegator_node_id.cdc": {lockedtokensDelegatorGet_delegator_node_idCdc, map[string]*bintree{}},
			"register_delegator.cdc": {lockedtokensDelegatorRegister_delegatorCdc, map[string]*bintree{}},
			"request_unstaking.cdc": {lockedtokensDelegatorRequest_unstakingCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens.cdc": {lockedtokensDelegatorWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens_locked.cdc": {lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {lockedtokensDelegatorWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"staker": {nil, map[string]*bintree{
			"get_node_id.cdc": {lockedtokensStakerGet_node_idCdc, map[string]*bintree{}},
			"get_staker_info.cdc": {lockedtokensStakerGet_staker_infoCdc, map[string]*bintree{}},
			"register_node.cdc": {lockedtokensStakerRegister_nodeCdc, map[string]*bintree{}},
			"request_unstaking.cdc": {lockedtokensStakerRequest_unstakingCdc, map[string]*bintree{}},
			"stake_new_tokens.cdc": {lockedtokensStakerStake_new_tokensCdc, map[string]*bintree{}},
			"stake_rewarded_tokens.cdc": {lockedtokensStakerStake_rewarded_tokensCdc, map[string]*bintree{}},
			"stake_unstaked_tokens.cdc": {lockedtokensStakerStake_unstaked_tokensCdc, map[string]*bintree{}},
			"unstake_all.cdc": {lockedtokensStakerUnstake_allCdc, map[string]*bintree{}},
			"update_networking_address.cdc": {lockedtokensStakerUpdate_networking_addressCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens.cdc": {lockedtokensStakerWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens_locked.cdc": {lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {lockedtokensStakerWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"user": {nil, map[string]*bintree{
			"deposit_tokens.cdc": {lockedtokensUserDeposit_tokensCdc, map[string]*bintree{}},
			"get_locked_account_address.cdc": {lockedtokensUserGet_locked_account_addressCdc, map[string]*bintree{}},
			"get_locked_account_balance.cdc": {lockedtokensUserGet_locked_account_balanceCdc, map[string]*bintree{}},
			"get_multiple_unlock_limits.cdc": {lockedtokensUserGet_multiple_unlock_limitsCdc, map[string]*bintree{}},
			"get_total_balance.cdc": {lockedtokensUserGet_total_balanceCdc, map[string]*bintree{}},
			"get_unlock_limit.cdc": {lockedtokensUserGet_unlock_limitCdc, map[string]*bintree{}},
			"withdraw_tokens.cdc": {lockedtokensUserWithdraw_tokensCdc, map[string]*bintree{}},
		}},
	}},
	"nodeVersionBeacon": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"change_version_freeze_period.cdc": {nodeversionbeaconAdminChange_version_freeze_periodCdc, map[string]*bintree{}},
			"delete_version_boundary.cdc": {nodeversionbeaconAdminDelete_version_boundaryCdc, map[string]*bintree{}},
			"heartbeat.cdc": {nodeversionbeaconAdminHeartbeatCdc, map[string]*bintree{}},
			"set_version_boundary.cdc": {nodeversionbeaconAdminSet_version_boundaryCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_current_node_version.cdc": {nodeversionbeaconScriptsGet_current_node_versionCdc, map[string]*bintree{}},
			"get_current_node_version_as_string.cdc": {nodeversionbeaconScriptsGet_current_node_version_as_stringCdc, map[string]*bintree{}},
			"get_next_version_boundary.cdc": {nodeversionbeaconScriptsGet_next_version_boundaryCdc, map[string]*bintree{}},
			"get_next_version_update_sequence.cdc": {nodeversionbeaconScriptsGet_next_version_update_sequenceCdc, map[string]*bintree{}},
			"get_version_boundaries.cdc": {nodeversionbeaconScriptsGet_version_boundariesCdc, map[string]*bintree{}},
			"get_version_boundary_freeze_period.cdc": {nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc, map[string]*bintree{}},
		}},
	}},
	"quorumCertificate": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"publish_voter.cdc": {quorumcertificateAdminPublish_voterCdc, map[string]*bintree{}},
			"start_voting.cdc": {quorumcertificateAdminStart_votingCdc, map[string]*bintree{}},
			"stop_voting.cdc": {quorumcertificateAdminStop_votingCdc, map[string]*bintree{}},
		}},
		"create_voter.cdc": {quorumcertificateCreate_voterCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"generate_quorum_certificate.cdc": {quorumcertificateScriptsGenerate_quorum_certificateCdc, map[string]*bintree{}},
			"get_cluster.cdc": {quorumcertificateScriptsGet_clusterCdc, map[string]*bintree{}},
			"get_cluster_complete.cdc": {quorumcertificateScriptsGet_cluster_completeCdc, map[string]*bintree{}},
			"get_cluster_node_weights.cdc": {quorumcertificateScriptsGet_cluster_node_weightsCdc, map[string]*bintree{}},
			"get_cluster_vote_threshold.cdc": {quorumcertificateScriptsGet_cluster_vote_thresholdCdc, map[string]*bintree{}},
			"get_cluster_votes.cdc": {quorumcertificateScriptsGet_cluster_votesCdc, map[string]*bintree{}},
			"get_cluster_weight.cdc": {quorumcertificateScriptsGet_cluster_weightCdc, map[string]*bintree{}},
			"get_clusters.cdc": {quorumcertificateScriptsGet_clustersCdc, map[string]*bintree{}},
			"get_node_has_voted.cdc": {quorumcertificateScriptsGet_node_has_votedCdc, map[string]*bintree{}},
			"get_node_weight.cdc": {quorumcertificateScriptsGet_node_weightCdc, map[string]*bintree{}},
			"get_qc_enabled.cdc": {quorumcertificateScriptsGet_qc_enabledCdc, map[string]*bintree{}},
			"get_voter_is_registered.cdc": {quorumcertificateScriptsGet_voter_is_registeredCdc, map[string]*bintree{}},
			"get_voting_completed.cdc": {quorumcertificateScriptsGet_voting_completedCdc, map[string]*bintree{}},
		}},
		"submit_vote.cdc": {quorumcertificateSubmit_voteCdc, map[string]*bintree{}},
	}},
	"stakingCollection": {nil, map[string]*bintree{
		"close_stake.cdc": {stakingcollectionClose_stakeCdc, map[string]*bintree{}},
		"create_machine_account.cdc": {stakingcollectionCreate_machine_accountCdc, map[string]*bintree{}},
		"create_new_tokenholder_acct.cdc": {stakingcollectionCreate_new_tokenholder_acctCdc, map[string]*bintree{}},
		"deploy_collection_contract.cdc": {stakingcollectionDeploy_collection_contractCdc, map[string]*bintree{}},
		"register_delegator.cdc": {stakingcollectionRegister_delegatorCdc, map[string]*bintree{}},
		"register_multiple_delegators.cdc": {stakingcollectionRegister_multiple_delegatorsCdc, map[string]*bintree{}},
		"register_multiple_nodes.cdc": {stakingcollectionRegister_multiple_nodesCdc, map[string]*bintree{}},
		"register_node.cdc": {stakingcollectionRegister_nodeCdc, map[string]*bintree{}},
		"request_unstaking.cdc": {stakingcollectionRequest_unstakingCdc, map[string]*bintree{}},
		"restake_all_stakers.cdc": {stakingcollectionRestake_all_stakersCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"does_account_have_staking_collection.cdc": {stakingcollectionScriptsDoes_account_have_staking_collectionCdc, map[string]*bintree{}},
			"get_all_delegator_info.cdc": {stakingcollectionScriptsGet_all_delegator_infoCdc, map[string]*bintree{}},
			"get_all_node_info.cdc": {stakingcollectionScriptsGet_all_node_infoCdc, map[string]*bintree{}},
			"get_delegator_ids.cdc": {stakingcollectionScriptsGet_delegator_idsCdc, map[string]*bintree{}},
			"get_does_stake_exist.cdc": {stakingcollectionScriptsGet_does_stake_existCdc, map[string]*bintree{}},
			"get_locked_tokens_used.cdc": {stakingcollectionScriptsGet_locked_tokens_usedCdc, map[string]*bintree{}},
			"get_machine_account_address.cdc": {stakingcollectionScriptsGet_machine_account_addressCdc, map[string]*bintree{}},
			"get_machine_accounts.cdc": {stakingcollectionScriptsGet_machine_accountsCdc, map[string]*bintree{}},
			"get_node_ids.cdc": {stakingcollectionScriptsGet_node_idsCdc, map[string]*bintree{}},
			"get_unlocked_tokens_used.cdc": {stakingcollectionScriptsGet_unlocked_tokens_usedCdc, map[string]*bintree{}},
		}},
		"setup_staking_collection.cdc": {stakingcollectionSetup_staking_collectionCdc, map[string]*bintree{}},
		"stake_new_tokens.cdc": {stakingcollectionStake_new_tokensCdc, map[string]*bintree{}},
		"stake_rewarded_tokens.cdc": {stakingcollectionStake_rewarded_tokensCdc, map[string]*bintree{}},
		"stake_unstaked_tokens.cdc": {stakingcollectionStake_unstaked_tokensCdc, map[string]*bintree{}},
		"test": {nil, map[string]*bintree{
			"deposit_tokens.cdc": {stakingcollectionTestDeposit_tokensCdc, map[string]*bintree{}},
			"get_tokens.cdc": {stakingcollectionTestGet_tokensCdc, map[string]*bintree{}},
		}},
		"transfer_delegator.cdc": {stakingcollectionTransfer_delegatorCdc, map[string]*bintree{}},
		"transfer_node.cdc": {stakingcollectionTransfer_nodeCdc, map[string]*bintree{}},
		"unstake_all.cdc": {stakingcollectionUnstake_allCdc, map[string]*bintree{}},
		"update_networking_address.cdc": {stakingcollectionUpdate_networking_addressCdc, map[string]*bintree{}},
		"withdraw_from_machine_account.cdc": {stakingcollectionWithdraw_from_machine_accountCdc, map[string]*bintree{}},
		"withdraw_rewarded_tokens.cdc": {stakingcollectionWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
		"withdraw_unstaked_tokens.cdc": {stakingcollectionWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
	}},
	"stakingProxy": {nil, map[string]*bintree{
		"add_node_info.cdc": {stakingproxyAdd_node_infoCdc, map[string]*bintree{}},
		"get_node_info.cdc": {stakingproxyGet_node_infoCdc, map[string]*bintree{}},
		"register_node.cdc": {stakingproxyRegister_nodeCdc, map[string]*bintree{}},
		"remove_node_info.cdc": {stakingproxyRemove_node_infoCdc, map[string]*bintree{}},
		"remove_staking_proxy.cdc": {stakingproxyRemove_staking_proxyCdc, map[string]*bintree{}},
		"request_unstaking.cdc": {stakingproxyRequest_unstakingCdc, map[string]*bintree{}},
		"setup_node_account.cdc": {stakingproxySetup_node_accountCdc, map[string]*bintree{}},
		"stake_new_tokens.cdc": {stakingproxyStake_new_tokensCdc, map[string]*bintree{}},
		"stake_unstaked_tokens.cdc": {stakingproxyStake_unstaked_tokensCdc, map[string]*bintree{}},
		"unstake_all.cdc": {stakingproxyUnstake_allCdc, map[string]*bintree{}},
		"withdraw_rewards.cdc": {stakingproxyWithdraw_rewardsCdc, map[string]*bintree{}},
		"withdraw_unstaked.cdc": {stakingproxyWithdraw_unstakedCdc, map[string]*bintree{}},
	}},
	"storageFees": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"set_parameters.cdc": {storagefeesAdminSet_parametersCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_account_available_balance.cdc": {storagefeesScriptsGet_account_available_balanceCdc, map[string]*bintree{}},
			"get_accounts_capacity_for_transaction_storage_check.cdc": {storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc, map[string]*bintree{}},
			"get_storage_capacity.cdc": {storagefeesScriptsGet_storage_capacityCdc, map[string]*bintree{}},
			"get_storage_fee_conversion.cdc": {storagefeesScriptsGet_storage_fee_conversionCdc, map[string]*bintree{}},
			"get_storage_fee_min.cdc": {storagefeesScriptsGet_storage_fee_minCdc, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
