// Code generated by go-bindata. DO NOT EDIT.
// sources:
// FlowServiceAccount/add_account_creator.cdc (564B)
// FlowServiceAccount/deposit_fees.cdc (823B)
// FlowServiceAccount/remove_account_creator.cdc (566B)
// FlowServiceAccount/scripts/get_account_creators.cdc (117B)
// FlowServiceAccount/scripts/get_account_fee.cdc (112B)
// FlowServiceAccount/scripts/get_execution_effort_weights.cdc (131B)
// FlowServiceAccount/scripts/get_execution_memory_limit.cdc (119B)
// FlowServiceAccount/scripts/get_execution_memory_weights.cdc (131B)
// FlowServiceAccount/scripts/get_fees_balance.cdc (89B)
// FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc (121B)
// FlowServiceAccount/scripts/get_is_account_creator.cdc (133B)
// FlowServiceAccount/scripts/get_tx_fee_parameters.cdc (108B)
// FlowServiceAccount/scripts/verify_payer_balance_for_tx_execution.cdc (379B)
// FlowServiceAccount/set_execution_effort_weights.cdc (1.663kB)
// FlowServiceAccount/set_execution_memory_limit.cdc (287B)
// FlowServiceAccount/set_execution_memory_weights.cdc (315B)
// FlowServiceAccount/set_is_account_creation_restricted.cdc (585B)
// FlowServiceAccount/set_tx_fee_parameters.cdc (608B)
// FlowServiceAccount/set_tx_fee_surge_factor.cdc (467B)
// accounts/add_key.cdc (1.407kB)
// accounts/create_new_account.cdc (1.248kB)
// accounts/revoke_key.cdc (364B)
// dkg/admin/force_stop_dkg.cdc (337B)
// dkg/admin/publish_admin.cdc (300B)
// dkg/admin/set_safe_threshold.cdc (428B)
// dkg/admin/start_dkg.cdc (369B)
// dkg/admin/stop_dkg.cdc (332B)
// dkg/create_participant.cdc (461B)
// dkg/scripts/get_consensus_nodes.cdc (95B)
// dkg/scripts/get_dkg_canonical_final_submission.cdc (105B)
// dkg/scripts/get_dkg_completed.cdc (91B)
// dkg/scripts/get_dkg_enabled.cdc (80B)
// dkg/scripts/get_final_submissions.cdc (113B)
// dkg/scripts/get_latest_whiteboard_messages.cdc (322B)
// dkg/scripts/get_node_final_submission.cdc (135B)
// dkg/scripts/get_node_has_submitted.cdc (108B)
// dkg/scripts/get_node_is_claimed.cdc (210B)
// dkg/scripts/get_node_is_registered.cdc (115B)
// dkg/scripts/get_thresholds.cdc (432B)
// dkg/scripts/get_whiteboard_messages.cdc (107B)
// dkg/send_empty_final_submission.cdc (1.035kB)
// dkg/send_final_submission.cdc (1.059kB)
// dkg/send_whiteboard_message.cdc (399B)
// epoch/admin/advance_view.cdc (600B)
// epoch/admin/calculate_rewards.cdc (340B)
// epoch/admin/deploy_epoch.cdc (1.173kB)
// epoch/admin/deploy_qc_dkg.cdc (310B)
// epoch/admin/pay_rewards.cdc (458B)
// epoch/admin/recover_epoch.cdc (3.708kB)
// epoch/admin/reset_epoch.cdc (1.627kB)
// epoch/admin/set_automatic_rewards.cdc (361B)
// epoch/admin/set_bonus_tokens.cdc (624B)
// epoch/admin/update_clusters.cdc (343B)
// epoch/admin/update_dkg_phase_views.cdc (333B)
// epoch/admin/update_epoch_config.cdc (1.76kB)
// epoch/admin/update_epoch_timing_config.cdc (488B)
// epoch/admin/update_epoch_views.cdc (334B)
// epoch/admin/update_reward.cdc (346B)
// epoch/admin/update_staking_views.cdc (336B)
// epoch/node/register_dkg_participant.cdc (498B)
// epoch/node/register_node.cdc (3.072kB)
// epoch/node/register_qc_voter.cdc (490B)
// epoch/scripts/get_bonus_tokens.cdc (93B)
// epoch/scripts/get_config_metadata.cdc (106B)
// epoch/scripts/get_create_clusters.cdc (171B)
// epoch/scripts/get_current_view.cdc (147B)
// epoch/scripts/get_epoch_counter.cdc (95B)
// epoch/scripts/get_epoch_metadata.cdc (144B)
// epoch/scripts/get_epoch_phase.cdc (101B)
// epoch/scripts/get_epoch_timing_config.cdc (119B)
// epoch/scripts/get_proposed_counter.cdc (98B)
// epoch/scripts/get_randomize.cdc (110B)
// epoch/scripts/get_target_end_time_for_epoch.cdc (248B)
// flowToken/burn_tokens.cdc (992B)
// flowToken/create_forwarder.cdc (1.944kB)
// flowToken/mint_tokens.cdc (1.392kB)
// flowToken/scripts/get_balance.cdc (651B)
// flowToken/scripts/get_supply.cdc (193B)
// flowToken/setup_account.cdc (1.365kB)
// flowToken/transfer_tokens.cdc (1.739kB)
// idTableStaking/admin/add_approved_and_limits.cdc (1.611kB)
// idTableStaking/admin/add_approved_nodes.cdc (1.031kB)
// idTableStaking/admin/capability_end_epoch.cdc (1.35kB)
// idTableStaking/admin/change_candidate_limits.cdc (703B)
// idTableStaking/admin/change_cut.cdc (641B)
// idTableStaking/admin/change_del_minimums.cdc (666B)
// idTableStaking/admin/change_minimums.cdc (794B)
// idTableStaking/admin/change_payout.cdc (601B)
// idTableStaking/admin/end_epoch.cdc (889B)
// idTableStaking/admin/end_epoch_change_payout.cdc (955B)
// idTableStaking/admin/end_staking.cdc (674B)
// idTableStaking/admin/move_tokens.cdc (574B)
// idTableStaking/admin/pay_rewards.cdc (662B)
// idTableStaking/admin/remove_approved_nodes.cdc (987B)
// idTableStaking/admin/remove_invalid_nodes.cdc (673B)
// idTableStaking/admin/remove_node.cdc (605B)
// idTableStaking/admin/scale_rewards_test.cdc (689B)
// idTableStaking/admin/set_approved_nodes.cdc (604B)
// idTableStaking/admin/set_claimed.cdc (609B)
// idTableStaking/admin/set_node_weight.cdc (626B)
// idTableStaking/admin/set_non_operational.cdc (761B)
// idTableStaking/admin/set_open_access_node_slots.cdc (912B)
// idTableStaking/admin/set_slot_limits.cdc (1.548kB)
// idTableStaking/admin/start_staking.cdc (573B)
// idTableStaking/admin/transfer_admin.cdc (634B)
// idTableStaking/admin/transfer_fees_admin.cdc (430B)
// idTableStaking/admin/transfer_minter_deploy.cdc (1.329kB)
// idTableStaking/admin/upgrade_set_claimed.cdc (667B)
// idTableStaking/admin/upgrade_staking.cdc (159B)
// idTableStaking/delegation/del_request_unstaking.cdc (646B)
// idTableStaking/delegation/del_stake_new_tokens.cdc (986B)
// idTableStaking/delegation/del_stake_rewarded.cdc (652B)
// idTableStaking/delegation/del_stake_unstaked.cdc (652B)
// idTableStaking/delegation/del_withdraw_reward_tokens.cdc (913B)
// idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc (913B)
// idTableStaking/delegation/get_delegator_committed.cdc (297B)
// idTableStaking/delegation/get_delegator_info.cdc (275B)
// idTableStaking/delegation/get_delegator_info_from_address.cdc (481B)
// idTableStaking/delegation/get_delegator_request.cdc (306B)
// idTableStaking/delegation/get_delegator_rewarded.cdc (295B)
// idTableStaking/delegation/get_delegator_staked.cdc (291B)
// idTableStaking/delegation/get_delegator_unstaked.cdc (295B)
// idTableStaking/delegation/get_delegator_unstaking.cdc (297B)
// idTableStaking/delegation/get_delegator_unstaking_request.cdc (306B)
// idTableStaking/delegation/register_delegator.cdc (923B)
// idTableStaking/delegation/register_many_delegators.cdc (645B)
// idTableStaking/node/register_many_nodes.cdc (1.193kB)
// idTableStaking/node/register_node.cdc (1.662kB)
// idTableStaking/node/request_unstake.cdc (620B)
// idTableStaking/node/stake_new_tokens.cdc (950B)
// idTableStaking/node/stake_rewarded_tokens.cdc (623B)
// idTableStaking/node/stake_unstaked_tokens.cdc (602B)
// idTableStaking/node/unstake_all.cdc (584B)
// idTableStaking/node/update_networking_address.cdc (626B)
// idTableStaking/node/withdraw_reward_tokens.cdc (883B)
// idTableStaking/node/withdraw_unstaked_tokens.cdc (883B)
// idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc (646B)
// idTableStaking/scripts/get_approved_nodes.cdc (265B)
// idTableStaking/scripts/get_candidate_limits.cdc (247B)
// idTableStaking/scripts/get_candidate_nodes.cdc (210B)
// idTableStaking/scripts/get_current_table.cdc (172B)
// idTableStaking/scripts/get_cut_percentage.cdc (181B)
// idTableStaking/scripts/get_del_stake_requirements.cdc (200B)
// idTableStaking/scripts/get_delegators_below_min.cdc (1.942kB)
// idTableStaking/scripts/get_moves_pending.cdc (189B)
// idTableStaking/scripts/get_node_committed_tokens.cdc (239B)
// idTableStaking/scripts/get_node_info.cdc (216B)
// idTableStaking/scripts/get_node_info_from_address.cdc (447B)
// idTableStaking/scripts/get_node_initial_weight.cdc (227B)
// idTableStaking/scripts/get_node_networking_addr.cdc (235B)
// idTableStaking/scripts/get_node_networking_key.cdc (227B)
// idTableStaking/scripts/get_node_rewarded_tokens.cdc (240B)
// idTableStaking/scripts/get_node_role.cdc (207B)
// idTableStaking/scripts/get_node_staked_tokens.cdc (236B)
// idTableStaking/scripts/get_node_staking_key.cdc (221B)
// idTableStaking/scripts/get_node_total_commitment.cdc (255B)
// idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc (258B)
// idTableStaking/scripts/get_node_type_ratio.cdc (217B)
// idTableStaking/scripts/get_node_unstaked_tokens.cdc (240B)
// idTableStaking/scripts/get_node_unstaking_request.cdc (251B)
// idTableStaking/scripts/get_node_unstaking_tokens.cdc (242B)
// idTableStaking/scripts/get_non_operational.cdc (187B)
// idTableStaking/scripts/get_proposed_table.cdc (174B)
// idTableStaking/scripts/get_role_counts.cdc (184B)
// idTableStaking/scripts/get_slot_limits.cdc (285B)
// idTableStaking/scripts/get_stake_requirements.cdc (223B)
// idTableStaking/scripts/get_table.cdc (166B)
// idTableStaking/scripts/get_total_staked.cdc (439B)
// idTableStaking/scripts/get_total_staked_by_type.cdc (232B)
// idTableStaking/scripts/get_weekly_payout.cdc (178B)
// lockedTokens/admin/admin_create_shared_accounts.cdc (3.935kB)
// lockedTokens/admin/admin_deploy_contract.cdc (463B)
// lockedTokens/admin/admin_deposit_account_creator.cdc (862B)
// lockedTokens/admin/admin_remove_delegator.cdc (453B)
// lockedTokens/admin/check_main_registration.cdc (897B)
// lockedTokens/admin/check_shared_registration.cdc (581B)
// lockedTokens/admin/custody_create_account_with_lease_account.cdc (3.471kB)
// lockedTokens/admin/custody_create_only_lease_account.cdc (3.371kB)
// lockedTokens/admin/custody_create_only_shared_account.cdc (3.606kB)
// lockedTokens/admin/custody_create_shared_accounts.cdc (3.742kB)
// lockedTokens/admin/custody_setup_account_creator.cdc (740B)
// lockedTokens/admin/deposit_locked_tokens.cdc (1.626kB)
// lockedTokens/admin/recover_lease_tokens.cdc (2.528kB)
// lockedTokens/admin/unlock_tokens.cdc (575B)
// lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc (3.104kB)
// lockedTokens/delegator/delegate_new_tokens.cdc (1.317kB)
// lockedTokens/delegator/delegate_rewarded_tokens.cdc (608B)
// lockedTokens/delegator/delegate_unstaked_tokens.cdc (600B)
// lockedTokens/delegator/get_delegator_id.cdc (374B)
// lockedTokens/delegator/get_delegator_info.cdc (1.416kB)
// lockedTokens/delegator/get_delegator_node_id.cdc (378B)
// lockedTokens/delegator/register_delegator.cdc (1.665kB)
// lockedTokens/delegator/request_unstaking.cdc (602B)
// lockedTokens/delegator/withdraw_rewarded_tokens.cdc (930B)
// lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc (608B)
// lockedTokens/delegator/withdraw_unstaked_tokens.cdc (608B)
// lockedTokens/staker/get_node_id.cdc (369B)
// lockedTokens/staker/get_staker_info.cdc (1.123kB)
// lockedTokens/staker/register_node.cdc (1.799kB)
// lockedTokens/staker/request_unstaking.cdc (637B)
// lockedTokens/staker/stake_new_tokens.cdc (1.343kB)
// lockedTokens/staker/stake_rewarded_tokens.cdc (640B)
// lockedTokens/staker/stake_unstaked_tokens.cdc (640B)
// lockedTokens/staker/unstake_all.cdc (581B)
// lockedTokens/staker/update_networking_address.cdc (622B)
// lockedTokens/staker/withdraw_rewarded_tokens.cdc (921B)
// lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc (621B)
// lockedTokens/staker/withdraw_unstaked_tokens.cdc (621B)
// lockedTokens/user/deposit_tokens.cdc (1.088kB)
// lockedTokens/user/get_locked_account_address.cdc (383B)
// lockedTokens/user/get_locked_account_balance.cdc (382B)
// lockedTokens/user/get_multiple_unlock_limits.cdc (496B)
// lockedTokens/user/get_total_balance.cdc (2.735kB)
// lockedTokens/user/get_unlock_limit.cdc (373B)
// lockedTokens/user/withdraw_tokens.cdc (1.194kB)
// nodeVersionBeacon/admin/change_version_freeze_period.cdc (780B)
// nodeVersionBeacon/admin/delete_version_boundary.cdc (805B)
// nodeVersionBeacon/admin/heartbeat.cdc (605B)
// nodeVersionBeacon/admin/set_protocol_state_version.cdc (1.035kB)
// nodeVersionBeacon/admin/set_version_boundary.cdc (1.397kB)
// nodeVersionBeacon/scripts/get_current_node_version.cdc (214B)
// nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc (241B)
// nodeVersionBeacon/scripts/get_next_version_boundary.cdc (245B)
// nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc (184B)
// nodeVersionBeacon/scripts/get_version_boundaries.cdc (271B)
// nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc (299B)
// quorumCertificate/admin/publish_voter.cdc (392B)
// quorumCertificate/admin/start_voting.cdc (1.503kB)
// quorumCertificate/admin/stop_voting.cdc (362B)
// quorumCertificate/create_voter.cdc (1.108kB)
// quorumCertificate/scripts/generate_quorum_certificate.cdc (314B)
// quorumCertificate/scripts/get_cluster.cdc (177B)
// quorumCertificate/scripts/get_cluster_complete.cdc (229B)
// quorumCertificate/scripts/get_cluster_node_weights.cdc (184B)
// quorumCertificate/scripts/get_cluster_vote_threshold.cdc (178B)
// quorumCertificate/scripts/get_cluster_votes.cdc (238B)
// quorumCertificate/scripts/get_cluster_weight.cdc (174B)
// quorumCertificate/scripts/get_clusters.cdc (258B)
// quorumCertificate/scripts/get_node_has_voted.cdc (473B)
// quorumCertificate/scripts/get_node_weight.cdc (308B)
// quorumCertificate/scripts/get_qc_enabled.cdc (94B)
// quorumCertificate/scripts/get_voter_is_registered.cdc (191B)
// quorumCertificate/scripts/get_voting_completed.cdc (180B)
// quorumCertificate/submit_vote.cdc (592B)
// randomBeaconHistory/scripts/get_backfiller_max_entries.cdc (321B)
// randomBeaconHistory/scripts/get_latest_source_of_randomness.cdc (200B)
// randomBeaconHistory/scripts/get_source_of_randomness.cdc (305B)
// randomBeaconHistory/scripts/get_source_of_randomness_page.cdc (326B)
// randomBeaconHistory/transactions/set_backfiller_max_entries.cdc (379B)
// stakingCollection/close_stake.cdc (848B)
// stakingCollection/create_machine_account.cdc (2.401kB)
// stakingCollection/create_new_tokenholder_acct.cdc (3.564kB)
// stakingCollection/deploy_collection_contract.cdc (312B)
// stakingCollection/register_delegator.cdc (765B)
// stakingCollection/register_multiple_delegators.cdc (857B)
// stakingCollection/register_multiple_nodes.cdc (1.762kB)
// stakingCollection/register_node.cdc (2.783kB)
// stakingCollection/register_node_old.cdc (2.68kB)
// stakingCollection/request_unstaking.cdc (774B)
// stakingCollection/restake_all_stakers.cdc (1.371kB)
// stakingCollection/scripts/does_account_have_staking_collection.cdc (230B)
// stakingCollection/scripts/get_all_delegator_info.cdc (306B)
// stakingCollection/scripts/get_all_node_info.cdc (286B)
// stakingCollection/scripts/get_delegator_ids.cdc (259B)
// stakingCollection/scripts/get_does_stake_exist.cdc (364B)
// stakingCollection/scripts/get_locked_tokens_used.cdc (262B)
// stakingCollection/scripts/get_machine_account_address.cdc (413B)
// stakingCollection/scripts/get_machine_accounts.cdc (291B)
// stakingCollection/scripts/get_node_ids.cdc (221B)
// stakingCollection/scripts/get_unlocked_tokens_used.cdc (267B)
// stakingCollection/setup_staking_collection.cdc (3.391kB)
// stakingCollection/stake_new_tokens.cdc (898B)
// stakingCollection/stake_rewarded_tokens.cdc (791B)
// stakingCollection/stake_unstaked_tokens.cdc (791B)
// stakingCollection/test/deposit_tokens.cdc (799B)
// stakingCollection/test/get_tokens.cdc (605B)
// stakingCollection/transfer_delegator.cdc (1.998kB)
// stakingCollection/transfer_node.cdc (2.315kB)
// stakingCollection/unstake_all.cdc (700B)
// stakingCollection/update_networking_address.cdc (718B)
// stakingCollection/withdraw_from_machine_account.cdc (780B)
// stakingCollection/withdraw_rewarded_tokens.cdc (952B)
// stakingCollection/withdraw_unstaked_tokens.cdc (967B)
// stakingProxy/add_node_info.cdc (622B)
// stakingProxy/get_node_info.cdc (443B)
// stakingProxy/register_node.cdc (1.162kB)
// stakingProxy/remove_node_info.cdc (305B)
// stakingProxy/remove_staking_proxy.cdc (313B)
// stakingProxy/request_unstaking.cdc (475B)
// stakingProxy/setup_node_account.cdc (601B)
// stakingProxy/stake_new_tokens.cdc (473B)
// stakingProxy/stake_unstaked_tokens.cdc (478B)
// stakingProxy/unstake_all.cdc (439B)
// stakingProxy/withdraw_rewards.cdc (481B)
// stakingProxy/withdraw_unstaked.cdc (481B)
// storageFees/admin/set_parameters.cdc (826B)
// storageFees/scripts/get_account_available_balance.cdc (157B)
// storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc (296B)
// storageFees/scripts/get_storage_capacity.cdc (153B)
// storageFees/scripts/get_storage_fee_conversion.cdc (121B)
// storageFees/scripts/get_storage_fee_min.cdc (115B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flowserviceaccountAdd_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6e\xf2\x30\x10\xc4\xcf\xf6\x53\x8c\x72\x40\xc9\x25\xbe\x47\xdf\x57\x94\x56\xea\x0b\xf4\xcf\x7d\xb1\x37\x60\x29\xd8\xd1\xda\x29\x95\x2a\xde\xbd\xc2\xe1\x00\x85\xaa\xe7\x99\xf1\x6f\xc6\xeb\xf7\x53\x94\x8c\xea\x79\x8c\x87\x17\x96\x0f\x6f\xb9\xb7\x36\xce\x21\x57\x5a\x1b\x83\xd7\x9d\x4f\xc8\x42\x21\x91\xcd\x3e\x06\x90\x73\x09\x84\xc0\x07\xd0\x62\x84\x15\x16\xca\x51\xf4\x85\xaf\x3e\x8b\x4f\xc2\x27\xa9\x43\xef\x9c\x70\x4a\x0d\xbe\xb4\x56\x23\x67\xa4\x2b\x5a\xef\xf6\x3e\x74\x58\xdd\xf6\x68\x8b\xe4\x53\x5e\x18\x5a\x4d\xc2\x13\x09\xd7\xc9\x6f\x03\x4b\x07\x9a\xf3\xae\x7e\x8c\x22\xf1\xf0\x4e\xe3\xcc\x0d\x56\xe7\xe8\x09\xa6\x94\x31\x58\x54\x08\x0f\x2c\x1c\x2c\x23\x47\xdc\x92\x70\x45\x82\x70\x8a\xb3\x58\x6e\xcb\x1b\x5a\xa9\xc4\xe3\xd0\xde\xa9\x8d\xff\x58\xba\xb4\x29\x47\xa1\x2d\xb7\x9b\xc2\xfb\xf7\xe7\x9a\x87\x7a\x90\xb8\xef\x60\xce\x41\x33\x5c\x04\x4e\xc6\x46\x2b\xa5\xd6\x6b\x4c\x14\xbc\xad\xab\xb7\x40\x9b\xb1\xb4\xdf\xdc\x59\x44\x77\xeb\x57\x8d\x56\x47\xad\xf8\x93\xed\x9c\xb9\xfc\xc8\x6f\x43\x5a\x72\xae\xbf\xba\xdb\x8f\x33\x96\xa7\x8e\xdf\x01\x00\x00\xff\xff\x74\x26\xcc\x17\x34\x02\x00\x00"

func flowserviceaccountAdd_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountAdd_account_creatorCdc,
		"FlowServiceAccount/add_account_creator.cdc",
	)
}

func flowserviceaccountAdd_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountAdd_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/add_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xb4, 0x8a, 0xf9, 0x42, 0x4b, 0xf, 0xf0, 0x20, 0x56, 0x6d, 0xbc, 0xd, 0xc, 0x52, 0xfd, 0xe8, 0xa8, 0x73, 0xc1, 0xe8, 0x14, 0xcc, 0x84, 0x38, 0xd6, 0xf, 0x6c, 0xdc, 0x39, 0xbb, 0xe4}}
	return a, nil
}

var _flowserviceaccountDeposit_feesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3d\x8f\x9c\x4c\x10\x84\xe3\xe5\x57\xd4\x4b\x70\x2f\x04\x07\x89\xe5\x60\xb5\xf6\xf9\x4b\xeb\xdc\x3a\x9f\xe3\x59\x68\x60\x64\x76\x1a\xf5\x34\xe6\xac\xd5\xfd\x77\x8b\x81\x41\x46\x76\xe0\x08\xa9\xe8\xa9\x7a\xfa\xc3\x5e\x07\x16\x45\x7a\x1e\x5d\x6b\x2f\x3d\x3d\xf2\x77\x72\x69\xb2\xc9\x3d\x4f\x7f\x91\xce\x44\x3e\x4d\x92\xb2\xc4\x27\x1a\xd8\x5b\x85\xce\x45\x1e\xca\xd0\x8e\x10\x6b\xf0\x64\xc6\x5e\xe7\x3a\x76\xfd\x4f\x34\x2c\x50\xf2\x6a\x5d\x9b\x24\x2a\xc6\x79\x53\xa9\x65\x97\x99\x2b\x8f\x4e\x8f\xf8\x7a\xb6\xcf\xaf\x5f\xe5\xb8\x25\x09\x00\x94\x25\x1e\x3b\x5a\x4c\x20\xe4\x79\x94\x8a\xa0\x9d\x51\x74\xdc\xd7\x3e\x64\xc5\xe4\x59\x35\x42\xb8\x90\x75\x2d\x82\x7b\x43\x22\x54\x07\xab\x9e\x14\x9e\x9c\x06\xaf\x23\xde\xdd\x76\x0d\x17\x41\x7e\x59\x52\x07\xa1\xc1\x08\x65\xde\xb6\x8e\xe4\x08\x33\x6a\x97\x7d\x60\x11\x9e\x9e\x4c\x3f\x52\x8e\xbb\xf7\x55\x35\x03\x6f\xa0\x2b\xec\x67\x52\x18\x08\x35\x24\xe4\x66\xd2\x65\x1a\x8b\xd1\xff\x1e\x5e\x59\xa8\xc6\x8f\x30\x94\xf8\x6e\x26\x0b\xca\x17\x6a\xf0\x66\x2d\x2e\xe6\x52\xd3\x52\x71\x09\xb9\xa7\xc0\xb0\x47\xfe\x66\xb5\xab\xc5\x4c\x39\xee\xb6\x2d\x2d\x7d\xbc\xcd\x1a\xe1\xeb\x11\xe5\x6a\x52\x36\xf1\x7f\xf8\x9d\x27\x87\xc3\xe1\xe1\x01\x83\x71\xb6\xca\xd2\x8f\x3c\xf6\x35\x1c\x2b\x96\xac\x3f\xf9\x79\x5a\xf0\xc3\xeb\xff\xd2\x7c\xd7\x73\xc4\x88\x7b\x98\xa3\xff\xa1\x6b\x4f\x7d\x53\x6c\x0b\xc1\xe9\x7e\x9b\x41\x31\xad\x8e\xdb\x55\x2c\xdf\x3c\xbc\x5d\x77\x44\xcf\x54\x8d\x4a\xb8\xfd\x8e\xb2\xdd\x62\x47\x88\x26\x2e\x72\x59\xb7\xbf\xcc\x3d\x4e\x94\x8b\x7a\xf1\x58\x27\x78\xba\xdf\x73\x46\x86\x97\x5f\x01\x00\x00\xff\xff\xfb\xdb\x1b\x5b\x37\x03\x00\x00"

func flowserviceaccountDeposit_feesCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountDeposit_feesCdc,
		"FlowServiceAccount/deposit_fees.cdc",
	)
}

func flowserviceaccountDeposit_feesCdc() (*asset, error) {
	bytes, err := flowserviceaccountDeposit_feesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/deposit_fees.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x3f, 0xf7, 0xe, 0xc7, 0x3a, 0xea, 0x6b, 0xbb, 0xb, 0xfd, 0x70, 0x4c, 0x25, 0x66, 0x71, 0xb4, 0x8d, 0xc8, 0x52, 0xa8, 0x8b, 0x26, 0xe1, 0x12, 0xaa, 0x6a, 0x22, 0x4c, 0x50, 0xf5, 0x1e}}
	return a, nil
}

var _flowserviceaccountRemove_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcd\x6e\x83\x30\x10\x84\xcf\xf6\x53\xac\x38\x44\x70\xb1\xef\xa8\x6d\x44\x2b\xf5\x05\xfa\x73\xdf\x38\x4b\x62\x09\xbc\x68\x6d\x92\x4a\x55\xde\xbd\x8a\xe1\x10\x1a\xaa\x9e\x67\xc7\xdf\x8c\xc7\xf7\x03\x4b\x82\xe2\xb5\xe3\xf3\x1b\xc9\xc9\x3b\x6a\x9c\xe3\x31\xa4\x42\x6b\x6b\xe1\xfd\xe8\x23\x24\xc1\x10\xd1\x25\xcf\x01\x84\x7a\x3e\x51\x04\x0c\x80\xd3\x21\x38\x21\x4c\x2c\xfa\xe6\xac\x9c\xb5\x97\x49\xaa\xa1\xd9\xef\x85\x62\xac\xe0\x5b\x6b\xd5\x51\x82\xb8\x80\x35\xfb\xde\x87\x1a\x36\xf7\x31\x4c\x96\x7c\x4c\x92\x19\x5a\x0d\x42\x03\x0a\x95\xd1\x1f\x02\x49\x0d\x38\xa6\x63\xf9\xcc\x22\x7c\xfe\xc4\x6e\xa4\x0a\x36\xb3\xf5\x0a\x53\xca\x5a\x98\x54\x10\x6a\x49\x28\x38\x82\xc4\x70\x4f\x82\x05\x09\x84\x22\x8f\xe2\xc8\xe4\x37\xb4\x52\x91\xba\xd6\xac\xc4\x86\x47\x98\xb2\x98\x98\x58\xf0\x40\x66\x97\x79\x0f\xff\xb6\x79\x2a\x5b\xe1\xbe\x06\x3b\x1b\x6d\x7b\x63\xb8\x1e\x56\x5a\x29\xb5\xdd\xc2\x80\xc1\xbb\xb2\xf8\x08\xb8\xeb\x72\xfa\xdd\x4a\x23\x5c\x8d\x5f\x54\x5a\x5d\xb4\xa2\x2f\x72\x63\xa2\xfc\x23\x7f\x15\x31\xd3\xb6\xcd\x62\xba\x5f\x4b\xe6\xd7\x2e\x3f\x01\x00\x00\xff\xff\x2b\xe1\xd1\x6d\x36\x02\x00\x00"

func flowserviceaccountRemove_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountRemove_account_creatorCdc,
		"FlowServiceAccount/remove_account_creator.cdc",
	)
}

func flowserviceaccountRemove_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountRemove_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/remove_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x40, 0xe1, 0xa0, 0xda, 0x1c, 0xfc, 0x7c, 0x3f, 0x61, 0xd8, 0x72, 0x93, 0xd, 0x46, 0xac, 0x6c, 0x57, 0x6, 0xee, 0xe, 0x5c, 0xff, 0xaf, 0x44, 0x8, 0x49, 0x1d, 0x29, 0x71, 0x74, 0xdc}}
	return a, nil
}

var _flowserviceaccountScriptsGet_account_creatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x0f\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\x51\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x76\x4c\x49\x29\x4a\x2d\x2e\x8e\x55\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\xc0\x34\x43\x2f\x3d\xb5\x04\xca\x74\x2e\x4a\x4d\x2c\xc9\x2f\x2a\xd6\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\x1e\x2b\x76\x03\x75\x00\x00\x00"

func flowserviceaccountScriptsGet_account_creatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_account_creatorsCdc,
		"FlowServiceAccount/scripts/get_account_creators.cdc",
	)
}

func flowserviceaccountScriptsGet_account_creatorsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_account_creatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_account_creators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x8f, 0x1e, 0x63, 0xc4, 0x7f, 0x6c, 0x51, 0xe8, 0xba, 0xe7, 0x0, 0x0, 0x8a, 0xf1, 0xba, 0x2, 0x67, 0x79, 0x96, 0xab, 0x8b, 0xb8, 0x46, 0xd5, 0x72, 0xf3, 0xe6, 0xc8, 0x3c, 0x15, 0x64}}
	return a, nil
}

var _flowserviceaccountScriptsGet_account_feeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x0f\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\x51\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\xc0\x34\x40\x2f\x11\x42\x3b\x17\xa5\x26\x96\x64\xe6\xe7\xb9\xa5\xa6\x72\xd5\x02\x02\x00\x00\xff\xff\x6a\xac\x10\xcd\x70\x00\x00\x00"

func flowserviceaccountScriptsGet_account_feeCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_account_feeCdc,
		"FlowServiceAccount/scripts/get_account_fee.cdc",
	)
}

func flowserviceaccountScriptsGet_account_feeCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_account_feeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_account_fee.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xdc, 0xbe, 0xe, 0xf, 0x4e, 0xf8, 0x74, 0x1f, 0xb4, 0xa8, 0x29, 0x59, 0x25, 0x45, 0xd9, 0x4a, 0x57, 0x7c, 0xc5, 0xb2, 0xc5, 0x8e, 0x11, 0x4b, 0x3, 0xfa, 0x47, 0x50, 0xa1, 0x54, 0xd8}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_effort_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xd3\x29\x59\x9c\xc4\xa1\x9b\x43\x05\x67\x11\xe7\x70\x5c\x6a\x20\xbd\xc8\xe5\xa2\x42\xe9\xbb\x3b\x38\x76\xfa\xb6\x2f\x2f\xaf\xaa\x86\xe1\x52\xea\xe7\xc6\xfa\xce\xc4\x67\xa2\xda\xc5\x06\xe7\x22\x11\xb7\xe6\x63\x29\x01\xa9\x0b\x96\x98\xc5\x87\x11\xeb\xfd\x2a\x76\x3a\x8e\xf8\xbb\x61\x75\x00\xa0\x6c\x5d\x05\xfb\xea\x30\xb3\x4d\x5f\xa6\x6e\xb9\xca\x94\x52\x55\x7b\x70\x9e\x9f\xd6\x7c\x70\xdb\x2f\x00\x00\xff\xff\x24\x21\x26\x03\x83\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_effort_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_effort_weightsCdc,
		"FlowServiceAccount/scripts/get_execution_effort_weights.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_effort_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_effort_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_effort_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x62, 0xfa, 0xe7, 0xfe, 0xc8, 0xb5, 0x98, 0xe7, 0xf0, 0x53, 0xf4, 0x3b, 0x6, 0x52, 0xfa, 0x2f, 0x46, 0xcb, 0x92, 0xd6, 0x5c, 0x32, 0x44, 0x7d, 0x45, 0x85, 0x68, 0x73, 0x33, 0x41, 0x4}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_memory_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x3d\x0a\x42\x31\x0c\x07\xf0\xbd\xa7\xf8\xf3\xa6\x76\x71\x12\x07\x37\x07\x05\x41\x27\xf1\x00\x25\x44\x09\xb4\x89\xe4\xa5\x7e\x20\xde\xdd\x03\xbc\x0b\xfc\xa4\x3f\xcc\x03\xd3\xa1\xd9\xeb\xc2\xfe\x14\xe2\x1d\x91\x0d\x8d\x29\xa5\x4a\xc4\xf3\x9c\x6b\x6b\x05\xb7\xa1\xe8\x55\x34\x97\x2d\xae\x47\x8d\xcd\x1a\xdf\x04\x00\xce\x31\x5c\xb1\x04\x56\x77\x8e\xfd\x9b\x69\x84\x98\x9e\xb9\x9b\x7f\x4e\xd2\x25\x72\x49\xbf\x7f\x00\x00\x00\xff\xff\x72\x4a\x1e\x87\x77\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_memory_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_memory_limitCdc,
		"FlowServiceAccount/scripts/get_execution_memory_limit.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_memory_limitCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_memory_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_memory_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xde, 0xe2, 0x2b, 0x3c, 0x59, 0x5f, 0x66, 0xcf, 0x5b, 0x25, 0xa3, 0x81, 0x4b, 0x35, 0x92, 0x80, 0x45, 0x5, 0xc8, 0x6c, 0x51, 0x67, 0x1c, 0x77, 0x60, 0xe1, 0xce, 0x3a, 0x55, 0x54, 0x26}}
	return a, nil
}

var _flowserviceaccountScriptsGet_execution_memory_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xaf\x0e\xc2\x30\x10\x07\x60\xdf\xa7\xf8\x65\xaa\x35\x28\x82\x98\x43\x40\x82\x40\x11\x82\x6e\x2e\xc7\x68\xd2\x5e\xc9\xf5\xca\x9f\x2c\x7b\x77\x04\x72\xea\x73\x5f\x2a\xcf\xaa\x86\xe1\x98\xeb\xfb\xc2\xfa\x4a\xc4\x7b\xa2\xda\xc5\x06\xe7\x22\x11\xb7\xe6\x63\xce\x01\xf7\x2e\x28\x31\x89\x0f\x23\xe6\xeb\x49\x6c\xb7\x1d\xf1\x77\xc1\xec\x00\x40\xd9\xba\x0a\xd6\xd5\x66\x62\x3b\x7c\x98\xba\xa5\x2a\x67\x2e\x55\xbf\x37\x4e\xd3\xc3\x9a\x0f\x6e\xf9\x05\x00\x00\xff\xff\x58\x7d\xa5\x8c\x83\x00\x00\x00"

func flowserviceaccountScriptsGet_execution_memory_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_execution_memory_weightsCdc,
		"FlowServiceAccount/scripts/get_execution_memory_weights.cdc",
	)
}

func flowserviceaccountScriptsGet_execution_memory_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_execution_memory_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_execution_memory_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x8e, 0x96, 0x3a, 0x69, 0xbb, 0x7d, 0xad, 0x30, 0xc7, 0x9f, 0xbc, 0x4, 0x2b, 0x11, 0x1d, 0x98, 0x6e, 0x6, 0x8c, 0x5d, 0x1f, 0x4f, 0xf7, 0x9, 0x78, 0x2, 0xe4, 0x97, 0x1a, 0x20, 0xd3}}
	return a, nil
}

var _flowserviceaccountScriptsGet_fees_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x4b\x4d\x2d\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\x69\xd3\x4b\x4f\x2d\x71\x4b\x4d\x75\x4a\xcc\x49\xcc\x4b\x4e\xd5\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\xe6\xa5\x8c\x1c\x59\x00\x00\x00"

func flowserviceaccountScriptsGet_fees_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_fees_balanceCdc,
		"FlowServiceAccount/scripts/get_fees_balance.cdc",
	)
}

func flowserviceaccountScriptsGet_fees_balanceCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_fees_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_fees_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0xb5, 0x3c, 0xb0, 0x27, 0x22, 0x8, 0xa7, 0xa8, 0x9b, 0xd9, 0x6e, 0xb6, 0x12, 0x7, 0x38, 0x59, 0x1b, 0x6c, 0x28, 0xdc, 0xf5, 0xc, 0xbe, 0x28, 0x2b, 0x5e, 0xd3, 0x57, 0x44, 0x15, 0x6a}}
	return a, nil
}

var _flowserviceaccountScriptsGet_is_account_creation_restrictedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0a\x82\x31\x0c\x06\xd0\xbd\xa7\xf8\xf8\xa7\x76\xf1\x00\x6e\x2a\x78\x00\x3d\x41\x89\x11\x02\x6d\x22\x49\xaa\x83\x78\x77\x17\x37\xb7\xb7\x3c\x99\x0f\xf3\xc4\x76\x1e\xf6\xba\xb2\x3f\x85\xf8\x40\x64\x4b\x73\x2b\xa5\x13\x71\x44\xed\x63\x34\xdc\x97\x62\x76\xd1\xda\xf6\x38\x9a\x0d\xbc\x0b\x00\x38\xe7\x72\xc5\x7f\xdf\x49\xfc\x74\x72\xee\x29\xa6\x17\x8e\x74\xa1\xe4\x5b\x6d\xe5\xf3\x0d\x00\x00\xff\xff\x4e\x91\x05\xd5\x79\x00\x00\x00"

func flowserviceaccountScriptsGet_is_account_creation_restrictedCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_is_account_creation_restrictedCdc,
		"FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc",
	)
}

func flowserviceaccountScriptsGet_is_account_creation_restrictedCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_is_account_creation_restrictedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x88, 0x6d, 0x8c, 0xeb, 0x9c, 0xaa, 0xb8, 0x9, 0xfa, 0x1c, 0x6d, 0x23, 0xf8, 0xd7, 0xf7, 0xb3, 0xc, 0x4a, 0x9b, 0x22, 0xac, 0xaa, 0x87, 0x40, 0x95, 0xc2, 0xb, 0xc, 0x30, 0x74, 0x21}}
	return a, nil
}

var _flowserviceaccountScriptsGet_is_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x0d\xc2\x40\x0c\x05\xd0\xfe\xa6\xf8\x4a\x95\x6b\x18\x20\x5d\x40\x62\x01\x26\xb0\x1c\x23\x9d\x74\xb1\x91\xed\x83\x02\xb1\x3b\x05\x50\xd1\xbd\xea\xb5\xfd\x66\x9e\x98\xce\xdd\x1e\x17\xf1\x7b\x63\x59\x99\x6d\x68\x4e\xa5\x10\xb3\x44\xcc\xd4\x7b\xc5\x75\x28\x76\x6a\x3a\xd3\xb6\xb9\x44\x2c\x58\x3f\xa8\x0b\x8e\x66\x1d\xcf\x02\x00\x2e\x39\x5c\xf1\xdf\x1d\x5a\x7c\x75\x72\xa1\x34\xff\x45\xb5\xbc\xde\x01\x00\x00\xff\xff\x30\x32\x62\x09\x85\x00\x00\x00"

func flowserviceaccountScriptsGet_is_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_is_account_creatorCdc,
		"FlowServiceAccount/scripts/get_is_account_creator.cdc",
	)
}

func flowserviceaccountScriptsGet_is_account_creatorCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_is_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_is_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xa4, 0xd9, 0x71, 0x97, 0x96, 0x40, 0x13, 0x14, 0x73, 0x17, 0xdb, 0xcc, 0x90, 0x6e, 0xae, 0x37, 0xd5, 0x88, 0x0, 0x10, 0xb8, 0xfd, 0xfe, 0xaa, 0x8f, 0x27, 0xe, 0xbe, 0xbb, 0x7, 0xea}}
	return a, nil
}

var _flowserviceaccountScriptsGet_tx_fee_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x4b\x4d\x2d\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x80\x29\xd1\x73\x4b\x4d\x0d\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\xa8\x49\x4f\x2d\x41\x51\xa6\xa1\xc9\x55\x0b\x08\x00\x00\xff\xff\x02\x2a\x6b\x7f\x6c\x00\x00\x00"

func flowserviceaccountScriptsGet_tx_fee_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsGet_tx_fee_parametersCdc,
		"FlowServiceAccount/scripts/get_tx_fee_parameters.cdc",
	)
}

func flowserviceaccountScriptsGet_tx_fee_parametersCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsGet_tx_fee_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/get_tx_fee_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x97, 0xad, 0xcf, 0x84, 0x79, 0xb8, 0x1e, 0x70, 0x52, 0x7f, 0x5, 0x2, 0x55, 0x15, 0x84, 0x27, 0x6, 0x54, 0xf7, 0x55, 0x12, 0x5a, 0xfb, 0xe7, 0xd2, 0x3c, 0xba, 0xa8, 0x91, 0xf9, 0xa3}}
	return a, nil
}

var _flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x8f\x1e\x24\x0b\xc1\x93\x78\x08\x2a\xa4\xd0\x9c\x45\xb4\xf7\x61\x3b\xd1\x85\xcd\x6e\x99\x9d\xb5\x29\xe2\x7f\x97\xc4\x86\x40\x9b\xb9\xcd\x7b\xf0\xbe\xf7\x5c\x7f\x8c\xa2\xd8\xb4\x3e\x9e\x5a\xe6\xb4\x29\x0a\xb2\x96\x53\x2a\xc9\x7b\x83\x2e\x07\xf4\xe4\x42\x79\xa4\x33\x4b\x63\xad\xd6\x68\x0e\x07\xe1\x94\x2a\xb8\x60\x7d\x4e\x2e\x86\x5d\xd7\x45\xd1\x1a\x1f\xad\x1b\x1e\x1f\x2a\xf4\x34\xec\x06\xb6\x59\x6f\x3c\x53\x63\x26\xdd\xef\x59\x5c\x77\x7e\x1d\x83\xb7\xe4\x29\x58\x7e\xe3\x94\xbd\xe2\xa7\x00\x00\xcf\x0a\xca\xfa\x35\x42\xf1\x8c\x4f\xd6\xe6\xff\x8b\x39\xe8\xd3\xe8\x94\xdb\x28\x12\x4f\x7b\xf2\x99\x0d\xee\x2e\xd6\xcb\xd2\xd5\x4c\x41\xc2\x9a\x25\x2c\xdc\xef\x85\x9b\x2e\xe0\x36\xca\xbb\x50\x48\x64\xa7\xca\x73\xf7\x72\xe6\xaf\x6c\xbd\x12\xaa\x09\x35\xde\xda\xf8\x5b\xcd\x14\xbf\x7f\x01\x00\x00\xff\xff\x91\xde\x97\xf6\x7b\x01\x00\x00"

func flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdc,
		"FlowServiceAccount/scripts/verify_payer_balance_for_tx_execution.cdc",
	)
}

func flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdc() (*asset, error) {
	bytes, err := flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/scripts/verify_payer_balance_for_tx_execution.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x9f, 0x8a, 0x3c, 0x82, 0xca, 0xe3, 0xad, 0x36, 0x46, 0x7, 0xcf, 0xa2, 0x6c, 0x62, 0x6d, 0x42, 0x1f, 0x5f, 0x22, 0x77, 0x2f, 0x36, 0x93, 0x3f, 0xbc, 0x6e, 0xdb, 0xc3, 0x24, 0x85, 0xd7}}
	return a, nil
}

var _flowserviceaccountSet_execution_effort_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x5f\x6b\xe3\x38\x14\xc5\xdf\xf3\x29\x2e\x5e\x58\x12\x48\xe3\x38\x89\x9d\xd8\x2c\x0b\x4b\x77\x0b\x65\xbb\xb0\xd0\xfd\xf3\x50\x3a\xf4\x5a\xbe\x8e\x35\xb5\x24\x8f\x24\x27\x0d\x21\xdf\x7d\x90\x15\xb7\xe9\x9f\x19\x66\x86\x79\x18\x43\x2c\xa1\x73\xee\xd1\x2f\xbe\x52\x18\xc2\x3f\x15\x37\x60\x35\x4a\x83\xcc\x72\x25\x0d\x18\xb2\x06\x24\x6d\x81\x1e\x88\xb5\x6e\x0d\xa8\x2c\x95\xb6\xb0\x25\xbe\xae\xac\x19\x74\x65\x04\x02\x1f\xb8\x68\xc5\x6b\x5f\xcd\x05\xb7\x50\x2a\xfd\x3c\x98\x1b\xc0\x7a\x8b\x3b\x03\xa9\x7b\x26\x7d\x8e\x8f\x05\x89\x82\x4c\xc8\x0b\x03\x0c\x25\xe4\x04\x86\x48\x42\x45\x9a\x32\xe7\x74\xbf\x33\xb8\x39\xc7\x82\x24\x23\x38\x57\xa2\x69\x2d\xba\xe4\x3f\xb9\x2c\x6e\x87\x95\xb5\x8d\xc9\xc2\x70\xcd\x6d\xd5\xe6\x13\xa6\x44\xa8\x64\x59\xab\x6d\xc8\x7c\x49\x98\xd7\x2a\x0f\x93\xe9\x32\xa6\x72\xb1\x62\x4b\x36\xc3\x69\x12\x15\xb3\x25\xcd\x93\x7c\x9a\xc6\x48\x4b\x62\x31\xcd\xa6\x8b\x98\xe1\x32\xd4\xad\xb4\x5c\x50\xc8\x94\x10\x4a\xba\xa1\xdf\xef\x9e\xcb\x62\xb2\x56\x3f\x5d\xcd\xa7\xa3\x23\xd5\xc5\x7f\x7f\x7d\x0d\x91\x7b\x9d\xad\x95\x27\x8a\x8a\x72\x31\x2f\x68\x15\xb3\x38\x5f\xc6\x49\xb4\x8a\xa3\x08\x57\x25\xa5\x29\xa5\x69\xba\xc2\x7c\x46\x0b\x56\xc4\x69\x58\x6e\x44\x28\xc8\x92\xf6\xef\x0e\x21\x75\x04\x1e\xc2\x56\x04\x5c\x5a\xd2\x12\x6b\x68\x34\x31\x6e\x5c\x4f\x54\xd9\x29\xaf\x9a\xd4\x65\xb8\x9e\xcc\xde\x45\xc9\x18\xb6\x15\x67\x15\x08\x42\xe9\x57\x9c\x42\x1f\x5a\xac\xc1\x2a\x88\x40\xb5\xb6\x4f\xb2\xca\x62\xed\x5b\xf8\x3a\x15\x37\xc8\x6b\xcc\x6b\x67\x03\x3c\xed\xff\xe4\x08\xea\x3a\x5e\x50\x89\x6d\xfd\x78\xa0\x00\x7d\x8f\xfd\xff\x78\xf1\x1d\xaf\x94\x6a\x32\x88\xde\xd4\xae\x2d\x5a\x12\x24\x6d\x06\x11\xbc\xe9\xb8\x68\x65\xb7\xfb\xa5\xdc\x28\xd6\xad\xfa\x2c\x67\x56\x1a\xb8\x84\x06\x35\xfa\x6f\x51\x2a\x2d\x7a\x8c\xbb\xbb\xbb\xf7\x46\x49\x37\xbd\x71\x2f\x80\xbd\x1f\x00\x02\xbb\x6b\x28\xc8\x20\xf8\x9d\x77\xd1\xa8\x77\xc1\xf8\x51\xdc\x60\xdd\x3a\xf5\xa6\x5f\x39\xa9\xec\x0c\xf7\xb4\x0b\x32\xd8\x3f\xc5\xfc\x7b\x29\x6d\xb2\x08\xc6\x4f\xb5\x41\x34\x9d\x46\x01\x1c\xc6\xcf\x0a\x7b\xf5\xf3\xa5\x49\x1c\xcf\x93\x00\x0e\x4f\xa5\xa7\x31\xdf\x84\x32\xfb\x71\x50\xe6\xdf\x0f\xa5\x9f\xde\xfa\x49\x1f\x7b\x92\xf3\x37\xda\xea\x34\x65\x0f\x41\xa1\x04\x72\xe9\x44\x63\x95\xc6\x35\x39\x9d\x17\x24\x2d\x2f\x39\x69\x27\x3c\x5e\x89\x3f\xba\x1b\xf1\xbf\x3f\xe2\x01\x1c\xfc\x96\xb7\xc7\xd3\x35\x38\xb9\x1a\x43\x49\xdb\xa3\x2f\x83\xbd\xc7\xcf\xc0\x8f\x87\x11\xec\x07\x8e\xb3\xd1\xd4\xa0\xa6\xa1\xe1\x6b\x49\x3a\x03\x6c\x6d\x35\xbc\xf6\x14\x23\xf8\xf9\x37\xc6\x54\x2b\x6d\xef\x76\x8f\x77\x4e\x8e\xa4\x93\x5a\x61\xf1\xcb\xcb\xf4\x5f\x87\xa5\x56\x22\x83\xf0\xe8\x0a\xdf\xc6\x1f\x7d\x2a\xd4\xe0\x86\x4e\xf0\xc7\x60\xd5\x17\x86\x1d\x06\x87\x8f\x01\x00\x00\xff\xff\x38\x5a\x8f\x3f\x7f\x06\x00\x00"

func flowserviceaccountSet_execution_effort_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_effort_weightsCdc,
		"FlowServiceAccount/set_execution_effort_weights.cdc",
	)
}

func flowserviceaccountSet_execution_effort_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_effort_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_effort_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xdb, 0xc1, 0xb9, 0x62, 0xa9, 0x42, 0x74, 0x68, 0xbe, 0xd1, 0xd7, 0xd6, 0x94, 0xc, 0x9d, 0x43, 0xe7, 0x67, 0xb0, 0xa7, 0x57, 0xa0, 0x72, 0xfa, 0xb0, 0x1f, 0x18, 0x12, 0xbd, 0x99, 0xf}}
	return a, nil
}

var _flowserviceaccountSet_execution_memory_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x6a\xc3\x30\x10\x86\x77\x3f\xc5\x3f\x15\x19\x8a\xb5\x94\x0e\xa6\x14\x3a\x16\xda\xa9\xed\x03\x1c\xea\xc5\x16\x58\x92\xd1\x9d\xe3\x84\xe0\x77\x0f\xb6\x13\x93\x25\x90\x1b\xff\xfb\xf8\xf8\xac\xc5\x6f\xeb\x05\x9a\x29\x0a\x39\xf5\x29\x0a\x84\x55\x40\x88\x3c\x82\x0f\xec\x86\x79\x45\xe0\x90\xf2\x11\x9d\x0f\x5e\xab\xe2\x86\x37\x91\xc7\xaf\x79\xad\xf1\xf7\x19\xf5\xf5\xa5\xc4\xa9\x00\x80\x3e\x73\x4f\x99\x8d\xf8\x26\x72\xae\x41\x83\xb6\xe6\x47\x53\xa6\x86\x4b\x3c\x7d\x38\x97\x86\xa8\x57\x7a\xbe\x95\xac\x64\x65\xaa\x2e\xd1\xff\xdb\xea\x7c\x37\xbb\x9c\x42\x0d\x7b\xf9\xd9\x2d\xec\x7b\xe9\x5a\x02\xca\x7b\x22\xa1\x3d\x6f\x99\xcf\xd0\xf4\x90\x68\x2a\xa6\x73\x00\x00\x00\xff\xff\xc0\x86\x20\x70\x1f\x01\x00\x00"

func flowserviceaccountSet_execution_memory_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_memory_limitCdc,
		"FlowServiceAccount/set_execution_memory_limit.cdc",
	)
}

func flowserviceaccountSet_execution_memory_limitCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_memory_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_memory_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x55, 0xd0, 0x7e, 0x5b, 0xb1, 0x66, 0x8e, 0x6e, 0x52, 0xd0, 0x4d, 0x3f, 0xf0, 0x8a, 0xa, 0x11, 0xfc, 0x2b, 0xb7, 0x1, 0xe1, 0x84, 0xf5, 0x2b, 0x69, 0xf5, 0xa8, 0xc2, 0x36, 0xc0, 0xbb}}
	return a, nil
}

var _flowserviceaccountSet_execution_memory_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6b\xc3\x30\x10\x46\x77\xff\x8a\x6f\x2a\x32\x14\x6b\x29\x1d\x44\x29\x74\xec\xd0\xa9\x2d\x99\x85\x72\xb1\x05\xb1\x64\x74\xe7\x38\xc1\xf8\xbf\x07\x47\x4e\x30\x81\x40\x6e\x39\xf8\x78\x3c\x9e\xd6\xf8\x6b\x3c\x43\x92\x0d\x6c\x9d\xf8\x18\x18\x4c\xc2\x08\x34\x80\x8e\xe4\xfa\x79\x43\x4b\x6d\x4c\x27\x0c\xe4\xeb\x46\xb8\x2a\x56\xbc\x0a\x34\x6c\xf2\x6e\x30\xfe\x7f\x07\x79\x7f\x33\xc8\x7f\x2a\x31\x16\x00\xd0\x25\xea\x6c\x22\xc5\xbe\x0e\x94\x0c\x6c\x2f\x8d\xfa\x95\x98\x6c\x4d\x25\x5e\xbe\x9c\x8b\x7d\x90\x2b\x3d\x5f\x26\x2b\xce\x4c\xb5\x8f\x76\xfb\x71\x6f\xff\x54\xbb\x14\x5b\x03\xbd\x50\xfa\x16\xfc\x73\xe9\x5d\xb2\xca\x47\x52\xb6\x07\x5a\xe5\xbf\x42\xe2\x93\xb2\xa9\x98\xce\x01\x00\x00\xff\xff\x43\xef\x3d\xe4\x3b\x01\x00\x00"

func flowserviceaccountSet_execution_memory_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_execution_memory_weightsCdc,
		"FlowServiceAccount/set_execution_memory_weights.cdc",
	)
}

func flowserviceaccountSet_execution_memory_weightsCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_execution_memory_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_execution_memory_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x68, 0x24, 0x78, 0x78, 0x6b, 0x42, 0x18, 0x35, 0x8d, 0x1, 0x95, 0xfe, 0xec, 0x4b, 0x3b, 0x81, 0x3, 0xa1, 0x7, 0x1d, 0xeb, 0x87, 0x46, 0x33, 0xa2, 0x65, 0x58, 0xe5, 0x14, 0x5d, 0x3c}}
	return a, nil
}

var _flowserviceaccountSet_is_account_creation_restrictedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x6f\xc2\x30\x0c\xc5\xcf\xc9\xa7\xb0\x7a\x40\xed\xa5\xbd\x57\xdb\x10\x4c\x9a\xb4\xeb\xfe\x9d\x31\xc1\x85\x48\x21\xae\x1c\x17\x26\x4d\x7c\xf7\xa9\x01\x6d\x20\x98\x76\xcd\xf3\xf3\xef\xbd\xd8\x6f\x7b\x16\x85\xe2\x29\xf0\xfe\x95\x64\xe7\x1d\xcd\x9c\xe3\x21\x6a\x61\x6d\xd3\xc0\xdb\xc6\x27\x50\xc1\x98\xd0\xa9\xe7\x08\x6e\x83\x71\x4d\x09\x16\x3e\x01\x1e\x27\xc1\x91\x60\x16\x85\x92\x8a\x77\x4a\xab\x05\xec\x30\x0c\x64\xcf\xac\xe5\xaf\xda\xc2\x9c\x39\x54\xf0\x65\xad\x09\xa4\x90\x2e\xc8\xb3\xd5\xd6\xc7\x16\x26\xd7\x99\xea\x2c\xf9\xa4\x82\xca\x62\xad\xe9\x85\x7a\x14\x2a\x93\x5f\x47\x92\x16\x70\xd0\x4d\x39\x67\x11\xde\x7f\x8c\xfc\x0a\x26\x27\xeb\x08\x33\xa6\x69\xe0\xa8\x82\x50\x47\x42\xd1\x11\x28\xc3\x35\x09\x2e\x48\x63\x31\x1e\xc4\x51\x9d\x77\x58\x63\x12\x85\xae\xbe\x11\x1b\xee\xe1\x98\xa5\x4e\xca\x82\x6b\xaa\x97\x99\x77\xf7\x6f\x9b\x87\xb2\x13\xde\xb6\xd0\x9c\x8c\x4d\x77\x66\x18\x07\x2b\x6b\x8c\x99\x4e\xa1\xc7\xe8\x5d\x59\xbc\x47\x5c\x86\x9c\x7e\x79\xa3\x11\xde\x8c\x5f\x54\xd6\x1c\xac\xa1\x4f\x72\x83\x52\xfe\x91\xbf\x8a\xd4\x89\xf4\x39\x9d\x5e\x1e\x85\xf2\x81\x5f\x7e\x2e\x78\x76\xcc\xbc\xf3\xf0\x1d\x00\x00\xff\xff\x3c\x40\x43\xd7\x49\x02\x00\x00"

func flowserviceaccountSet_is_account_creation_restrictedCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_is_account_creation_restrictedCdc,
		"FlowServiceAccount/set_is_account_creation_restricted.cdc",
	)
}

func flowserviceaccountSet_is_account_creation_restrictedCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_is_account_creation_restrictedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_is_account_creation_restricted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0xf8, 0x72, 0x31, 0x76, 0xe0, 0x9e, 0x8d, 0xf3, 0x83, 0x14, 0x90, 0x30, 0x33, 0x4a, 0xb9, 0x30, 0xa9, 0x34, 0x68, 0xce, 0x46, 0xbd, 0x93, 0xb5, 0x3e, 0xcd, 0x5e, 0x36, 0xbb, 0x76, 0x33}}
	return a, nil
}

var _flowserviceaccountSet_tx_fee_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcf\x6a\xf3\x30\x10\xc4\xcf\xd2\x53\x2c\x3e\x04\x1b\x3e\xec\xcb\x47\x0f\xa6\x6d\x48\x4b\x7d\xee\xa1\xe9\x5d\x51\xd7\x89\xc0\xd6\x9a\xdd\x15\x09\x94\xbc\x7b\xa9\xf3\xa7\x29\xd8\x3d\x6a\x76\xf8\xcd\xa0\x09\xfd\x40\xac\x90\x35\x1d\xed\x1b\x44\xc9\xac\xad\x2a\x78\xdb\x05\x01\x65\x17\xc5\x79\x0d\x14\x41\x50\x05\x74\x87\x70\xf1\xc1\xe0\xd8\xf5\xa8\xc8\x62\x6f\x8c\xb9\x24\xde\x62\xe3\xbc\x12\xd7\xb0\x6e\xc2\xe1\xee\xff\x3f\x08\xd1\x77\x49\x02\xc5\x97\xb6\x25\xd6\x67\x12\xfd\x39\xe2\x01\x7d\xd2\xc9\x63\x01\x9f\xd6\x74\xa8\xd0\x9e\x53\x57\xde\x53\x8a\xba\xfa\xe8\x43\xac\x61\x71\x29\x53\x8e\x42\x10\x65\xa7\xc4\xd6\x9a\x81\x71\x70\x8c\xb9\x84\x6d\x44\xae\xc1\x25\xdd\xe5\x4f\xc4\x4c\xfb\x77\xd7\x25\x2c\x60\x71\x46\x8d\x11\x46\xb0\x6b\xcb\xa9\x10\x78\x80\x13\xa3\x14\x25\x76\x5b\x2c\x37\x23\xe5\x7e\x26\xfb\x31\x6f\x99\xfa\x1a\xaa\xb3\xbd\xba\x42\xbf\x5d\x85\x35\xc6\x2c\x97\x30\xb8\x18\x7c\x9e\xad\xa3\xdb\x74\x08\x4a\x70\x82\x02\x63\x8b\x8c\xd1\x8f\x9a\xbb\xe5\x02\xa3\x50\x62\x8f\x59\x61\xcd\xd1\x9a\xd3\xa7\xe1\xdf\xe5\x4b\x41\x6d\x10\x5f\xaf\x4b\xfd\x5e\xe7\xe6\x31\x33\xd1\x84\x38\xb3\xd7\x84\x38\x16\x3d\x7e\x05\x00\x00\xff\xff\xe7\x6e\x14\x31\x60\x02\x00\x00"

func flowserviceaccountSet_tx_fee_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_tx_fee_parametersCdc,
		"FlowServiceAccount/set_tx_fee_parameters.cdc",
	)
}

func flowserviceaccountSet_tx_fee_parametersCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_tx_fee_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_tx_fee_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x17, 0x63, 0x8f, 0x29, 0xc7, 0x93, 0x1e, 0xd8, 0xa7, 0x9a, 0xfa, 0x3d, 0xe3, 0xfd, 0x30, 0xf2, 0x9f, 0x63, 0x3c, 0x54, 0x43, 0x53, 0xd2, 0x51, 0x2a, 0x66, 0x4b, 0x4a, 0x17, 0xed, 0x3c}}
	return a, nil
}

var _flowserviceaccountSet_tx_fee_surge_factorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xb1\x6a\xe3\x40\x10\x06\xe0\x7a\xf7\x29\x06\x15\x46\x6a\xa4\xe6\xb8\x42\xdc\x9d\xf1\x15\x7a\x81\xc4\xe9\xc7\x9b\x5f\xf6\x82\xb4\x2b\x66\x46\xd8\x10\xfc\xee\x21\xb2\x9d\x38\x90\xa4\xdc\xe1\xdf\xef\x1f\x26\x8e\x53\x16\xa3\xa2\x1b\xf2\xb1\x03\xb4\xf0\xbe\x69\xe8\xf1\x10\x95\x4c\x38\x29\x07\x8b\x39\x91\xc2\x94\xec\x00\xba\xe5\x68\x62\xe1\x11\x06\x51\x7f\x17\x2c\x75\x96\x3d\x3a\x0e\x96\xa5\xa5\x6d\x17\x4f\xbf\x7f\x55\xf4\xe2\xdd\x00\xa3\xfe\xfa\x77\x13\x42\x9e\x93\x6d\x9e\xc7\x98\x5a\x5a\xdd\xc8\x7a\x19\x44\x35\x61\xcb\xe2\xbd\x9b\x04\x13\x0b\x4a\x8d\xfb\x04\x69\x89\x67\x3b\x94\xff\xb3\x48\x3e\x3e\xf1\x30\xa3\xa2\xd5\x95\x5a\x2a\x9c\x62\xe8\xeb\xaf\x4a\xe8\x2f\x5d\x8c\x5a\x2d\x0b\xef\x51\xef\x16\xe5\xcf\x37\xdd\xff\xca\x5e\xf2\xd8\x52\x73\x8d\x37\xef\xe8\x5b\xaa\xf2\xce\xb9\xf5\x9a\x26\x4e\x31\x94\xc5\x36\xf1\x6e\x00\x59\xa6\x0b\x4a\x82\x1e\x82\x14\x96\x19\xdf\xbb\x24\xd0\x3c\x4b\x40\x51\x79\x77\xf6\x0e\x27\x84\xd9\xf0\xf3\xf2\xb5\xc2\x3a\xe0\xe1\xe3\xb0\x9f\x8f\x7c\xf7\x58\xd4\xf3\x6b\x00\x00\x00\xff\xff\xbf\xce\x73\xad\xd3\x01\x00\x00"

func flowserviceaccountSet_tx_fee_surge_factorCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountSet_tx_fee_surge_factorCdc,
		"FlowServiceAccount/set_tx_fee_surge_factor.cdc",
	)
}

func flowserviceaccountSet_tx_fee_surge_factorCdc() (*asset, error) {
	bytes, err := flowserviceaccountSet_tx_fee_surge_factorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount/set_tx_fee_surge_factor.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x94, 0xfc, 0xeb, 0x7d, 0x4c, 0x3c, 0xab, 0x96, 0x11, 0x36, 0xb2, 0x3a, 0x1c, 0x57, 0xeb, 0xbc, 0xbe, 0xb8, 0x6e, 0xf3, 0x3e, 0x55, 0x21, 0xd5, 0x36, 0x62, 0x89, 0x7, 0x94, 0xa6, 0xb9}}
	return a, nil
}

var _accountsAdd_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5d\x6b\xdb\x30\x14\x7d\x96\x7e\xc5\x69\x1e\x86\x05\xc5\x24\xe9\x5a\x86\x59\x1e\x42\xb7\x92\x11\x06\x85\xac\x83\x3d\x15\xc5\xba\x8d\x45\x1c\xc9\xc8\x72\xdc\xb0\xe6\xbf\x0f\xc5\xcd\xd7\x9c\x96\x0d\xe2\x17\x49\x57\xf2\xb9\xf7\x9c\x23\x5d\xbd\x28\xac\xf3\xb8\x75\xab\xc2\x5b\xce\xbd\x93\xa6\x94\xa9\xd7\xd6\x44\x73\x5a\x25\x98\x78\xa7\xcd\xec\x12\xa5\x9e\x19\xe9\x2b\x47\xc3\x7c\x66\x9d\xf6\xd9\x22\xc1\xc3\x37\xe3\x3f\x5d\x22\x93\x65\xd6\x8e\xd6\xa4\x67\x99\x4f\xf0\x70\xa7\x9f\x6f\x3e\x0a\xfc\xe6\x9c\x15\x8e\x0a\xe9\x28\x0a\x60\xe4\x12\xc8\xca\x67\xd1\x50\xa9\x31\xad\x04\x3e\x0c\xd3\xd4\x56\xc6\x87\xa3\x2c\x1c\xdd\x8c\xac\x9d\x18\x83\x01\x7a\x78\x79\x39\x51\x53\xd8\xea\x27\x1c\x7f\x7d\x9d\x5b\x69\x8c\xf5\x90\x4a\x61\x1c\x58\x7d\xaf\x4a\x8f\xc2\xd9\xa5\x56\x04\xb9\x07\x82\xdc\x21\x39\x59\x63\x29\xf3\x8a\xe0\x33\xe9\x91\x5a\xe7\xa8\x2c\xac\x51\x25\xbc\x45\xa7\x95\x23\x4e\xad\x49\xa5\x8f\x3a\xd6\x10\xec\x13\x7c\x46\x90\x4b\xa9\x73\x39\xcd\xe9\x54\x86\x12\x4f\xd6\xe1\x2e\xb7\x35\xe6\xb4\x2a\xe3\x8e\x78\x1b\xf3\x97\xad\xb6\xe5\x2a\x74\xc4\x36\xde\x16\x20\xf6\xb6\x71\x2c\x12\xef\xc0\x61\x5a\xf9\x4d\x81\xb6\x08\x4e\x97\x90\x8e\x40\xda\x67\xe4\xd0\x43\xf4\xf5\xf6\xcb\x64\xf8\x78\xdf\xbf\xbe\x11\xb0\x0e\xfd\x6d\xa4\xa4\xb4\xe8\x5f\xdf\xcc\x7b\x22\x14\xcb\x18\x3b\x72\x7e\x67\x4b\x2b\x7a\xf5\xff\x8e\x04\x8c\x33\x9a\xd1\xf2\xe3\x18\xff\x0c\x56\x1c\x91\x3e\x8b\x0b\x93\xd1\xb0\xff\xb8\xf5\xe0\x6a\xb3\xbe\xda\xac\x5f\xc5\x6f\x1e\x18\x3e\x0f\xd0\xeb\x76\xbb\x71\xf7\x1f\x44\xfe\x91\x51\x20\xf8\xfa\x36\xb1\x08\x9a\x4f\x09\x53\xf2\x35\x91\x41\x17\xd2\xa8\x06\xed\x1d\x49\xf1\x86\x02\x0d\xe8\x21\xf5\xfd\x2f\x75\xa6\xd3\x0c\xba\x84\x36\x4b\x99\x6b\xd5\x50\x58\x73\xc6\x38\x63\x39\x79\x14\xd5\x34\xd7\xe9\x98\x56\x18\xe0\x7e\x3b\x8f\x02\xcd\xdd\x4e\x12\x4a\x8f\x15\xa5\x56\xd1\x88\x9e\x23\x71\x79\xba\x3d\x24\x98\xb4\x62\x91\x93\xf5\xcf\x70\x7f\x92\x13\x4d\x43\x5c\x70\xc6\x04\xe7\x0d\x18\xb9\x78\x73\x07\xa4\x52\xd1\x41\xee\xdd\xb4\xd5\xef\x46\x87\xcb\x83\x44\x47\xc7\xc4\xc5\xbe\x23\x36\xa3\xe0\x6c\xcd\xd7\x7f\x02\x00\x00\xff\xff\x27\x5f\x67\xa9\x7f\x05\x00\x00"

func accountsAdd_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_accountsAdd_keyCdc,
		"accounts/add_key.cdc",
	)
}

func accountsAdd_keyCdc() (*asset, error) {
	bytes, err := accountsAdd_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/add_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x26, 0x46, 0x5e, 0xfc, 0x98, 0xfb, 0xc2, 0xa4, 0x1c, 0x2c, 0x3c, 0x17, 0xe, 0xb5, 0xd7, 0x48, 0x86, 0x74, 0x5b, 0x34, 0x57, 0x1d, 0x60, 0x41, 0x61, 0x1d, 0x26, 0x8a, 0x3f, 0x90, 0x28}}
	return a, nil
}

var _accountsCreate_new_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5d\x8b\xda\x50\x10\x7d\x4e\x7e\xc5\x59\x1f\x4a\x2e\x48\xf0\x83\x5d\x4a\xc0\x07\x6b\x5b\x2c\x4b\x61\x41\x5a\xe8\xd3\x32\x26\xb3\x26\x98\xcd\x84\x9b\x89\x56\xba\xfe\xf7\x72\xe3\xc6\xea\xc6\x16\x0a\xfa\xe2\xbd\x73\x67\xce\x9c\x99\xc3\x49\xf6\x5c\x8a\x55\xcc\xec\xae\x54\xf1\x7d\xb5\x54\x54\x14\x6b\x26\x45\xb0\xe6\x5d\x84\x85\xda\xac\x58\xf5\x51\x65\xab\x82\xb4\xb6\x3c\xcd\x57\x62\x33\x4d\x9f\x23\x7c\xfb\x52\xe8\xfb\x3e\x52\xaa\xd2\xb7\x51\x83\x5f\xbe\x57\x5a\x2e\xc9\x72\xe0\x6a\xd9\x46\xa0\x5a\xd3\xe0\x83\x58\x2b\xdb\xef\x94\xd7\xdc\xc7\x42\xc5\xd2\x8a\x0d\xde\x4d\xe3\x58\xea\x42\x9b\x3a\x57\xd8\xfc\x7b\xdd\xae\x98\x4c\x30\xc4\xcb\xcb\x05\x42\xee\x69\x14\xf9\x78\xf3\xeb\xcd\xa8\x28\x44\x41\x49\x82\x7b\x37\xd2\xd7\xba\x52\x94\x56\x36\x59\xc2\xa0\x3f\x40\xa0\x23\x92\xa5\x2d\x36\x8e\x22\x34\x25\x45\x2c\xd6\x72\x55\x4a\x91\x54\x50\x41\xaf\xd3\x23\x8c\xa5\x88\x49\x83\x9e\x14\x0c\x79\x82\xa6\x0c\xda\x50\x96\xd3\x32\xe7\x4b\x1d\x2a\x3c\x89\xc5\xe7\x5c\xb6\x58\xf3\xae\x0a\x7b\xe6\xef\x98\x3f\xa4\x6e\xe9\x26\xe8\x99\x36\xde\x5d\x40\xa8\x72\x90\x2b\x30\xff\x80\xc3\xb2\xd6\x86\xa0\x94\x4e\xe6\x0a\x64\x19\x9c\x69\xca\x16\x43\x04\x9f\x66\x1f\x17\xd3\xc7\x87\xd1\xed\x9d\x81\x58\x8c\xda\x48\xc5\x71\x39\xba\xbd\x5b\x0f\x8d\x23\xeb\x79\xde\x99\xec\x47\x59\x3a\xd1\xf1\xff\x2b\xe2\x30\xae\x28\x46\x47\x8f\x73\xfc\x2b\x48\x71\x36\xf4\x55\x54\x58\xcc\xa7\xa3\xc7\x56\x83\x71\x73\x1f\x37\xf7\xc3\xf2\xf7\xbe\xef\x79\x39\x2b\xca\x7a\x99\x67\xf1\x3d\xef\x30\xc1\x43\x7b\x0e\x9c\x3c\xc7\x97\xc8\x8d\x15\x26\x1c\x4b\xc2\x73\xfe\x19\x98\xfe\x65\x67\x45\x58\x74\x62\x81\xa5\x83\x55\xa3\x0b\x7e\x33\x37\xbe\xe7\x99\x96\x09\x1d\x0c\x8c\x09\x5e\xad\x1c\x94\xb4\x73\xae\x3f\xb8\xbf\xc9\x7b\xcd\x09\x9b\x3d\x53\x92\x04\x27\x24\x8f\xc7\xce\x07\x65\x7e\x7a\x3d\x61\x74\x96\x66\x6e\xfa\xd8\x72\xb6\x4a\x35\xc2\x70\x30\x18\x84\x03\xe3\x7b\x7b\x7f\xff\x3b\x00\x00\xff\xff\x46\x7c\x6d\x6e\xe0\x04\x00\x00"

func accountsCreate_new_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_accountsCreate_new_accountCdc,
		"accounts/create_new_account.cdc",
	)
}

func accountsCreate_new_accountCdc() (*asset, error) {
	bytes, err := accountsCreate_new_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/create_new_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x46, 0x75, 0x2d, 0x27, 0x94, 0x7c, 0xc8, 0x5e, 0x5f, 0xb6, 0x2f, 0x4d, 0xee, 0xcb, 0x12, 0xbd, 0x7b, 0x2a, 0x72, 0x12, 0x11, 0xef, 0x94, 0x4a, 0xcf, 0x52, 0x8b, 0xd6, 0x48, 0xdc, 0xd7}}
	return a, nil
}

var _accountsRevoke_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x4a\xc4\x30\x14\x45\xd7\xe9\x57\x5c\xba\xd0\x64\x93\x0f\x28\xb8\x10\x57\x83\xe0\x42\xbf\x20\xc4\x67\x1b\x3a\xbc\x57\x92\x37\x3a\x75\xe8\xbf\x4b\x1b\xc5\x0a\x32\x6f\x95\xc5\x39\x37\x97\xab\x39\x70\x09\x51\x93\xb0\x1d\x69\x3e\xf0\x2b\x9d\x3b\x1c\x58\x1d\x2e\x8d\x99\x32\x4d\x21\x93\x2d\xa9\x67\xca\x1d\xc2\x49\x07\xfb\x4c\xef\x32\xd2\x23\xcd\x0e\x37\xf7\x31\xca\xe9\x1b\x36\xe9\x0d\x47\x52\x8c\x34\xe3\x0e\x55\xf1\x23\xcd\xc5\xf7\xa4\xbb\xf0\x9f\x57\x95\xcc\x1e\xcc\x5b\xf4\x7f\x6c\x63\xcc\x02\x3a\x16\xc2\xa5\xc1\xee\xa6\xc0\x29\xda\xf6\x21\x30\x8b\xa2\xfa\xab\xd5\xe1\x49\xb6\x26\x1f\x49\x07\xe8\x40\x48\x6b\x0e\xda\x3f\x76\x3d\x1f\x85\x63\xf8\xad\xe8\x55\x5e\x34\x27\xee\xad\x73\x57\xf0\x16\x74\x4e\x45\x0b\x84\xb7\x0f\xd6\x71\x24\xa7\x4f\xca\xb7\x05\xa1\x0e\xe3\x5b\xb7\x55\x6f\xcc\xd2\x2c\x5f\x01\x00\x00\xff\xff\xb2\x4c\x83\x49\x6c\x01\x00\x00"

func accountsRevoke_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_accountsRevoke_keyCdc,
		"accounts/revoke_key.cdc",
	)
}

func accountsRevoke_keyCdc() (*asset, error) {
	bytes, err := accountsRevoke_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/revoke_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x40, 0x91, 0x33, 0x29, 0x4a, 0x24, 0xbc, 0x16, 0x73, 0x75, 0xf4, 0x70, 0x43, 0x60, 0x46, 0x76, 0xb7, 0xfd, 0xf1, 0xdd, 0xe9, 0x39, 0x65, 0x40, 0xc1, 0x3f, 0xf5, 0x40, 0xaa, 0x92, 0x88}}
	return a, nil
}

var _dkgAdminForce_stop_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x6a\xf3\x40\x10\x84\x7b\x3d\xc5\xa0\xc2\x48\xcd\x3d\x80\xf8\xff\x18\x27\x4a\x54\xa8\x09\x04\xd2\x5f\x4e\x2b\xf9\xc8\xe9\x56\xac\xf6\x70\xc0\xf8\xdd\x83\x75\x71\xc0\x45\xa6\xdb\x65\xbe\x99\x5d\x3f\x2f\x2c\x8a\xf2\x25\xf0\xa9\xed\xbb\xb2\x28\x54\x6c\x5c\xad\x53\xcf\x11\xe7\xa2\x00\x80\x40\x8a\xe1\x73\x3a\x0c\xb3\x8f\x0d\x76\x3f\x5e\xb3\xcd\xd9\xb1\x08\x2d\x56\xa8\x5a\xfd\x14\x49\x1a\xd8\xa4\xc7\xea\x91\x45\xf8\xf4\x6e\x43\xa2\x1a\xbb\x83\x73\x9c\xa2\xd6\x38\x6f\xc4\x55\x2b\x85\xd1\xdc\x82\xf1\x1f\x99\x36\xab\xb2\xd8\x89\xcc\xc7\xc6\xff\xbb\xef\x7b\xa8\x46\xe1\xb9\xc1\xdd\xf2\x2d\x13\xaf\x56\x8f\xf5\x6f\xfa\x55\xfb\x3d\x16\x1b\xbd\xab\xca\x27\x4e\x61\x40\x64\x45\x8e\x45\xdb\x77\xc8\xc5\x42\x23\x09\x45\x47\x65\x86\x2f\xf9\x27\xfa\x22\x97\x94\xfe\xba\xd7\x8c\x2c\x8e\x9e\xe3\xd0\xf6\x5d\x75\x03\x2f\xc5\x77\x00\x00\x00\xff\xff\x05\xc4\x61\xe9\x51\x01\x00\x00"

func dkgAdminForce_stop_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminForce_stop_dkgCdc,
		"dkg/admin/force_stop_dkg.cdc",
	)
}

func dkgAdminForce_stop_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminForce_stop_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/force_stop_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x2b, 0x94, 0x52, 0xf6, 0x6d, 0x17, 0xec, 0x57, 0xe7, 0x7d, 0x5f, 0xdb, 0x45, 0xe8, 0xb4, 0x31, 0x0, 0xb3, 0x89, 0xf3, 0xd7, 0x74, 0xb9, 0x30, 0xa3, 0xe4, 0xe2, 0x1b, 0x21, 0xec, 0xdf}}
	return a, nil
}

var _dkgAdminPublish_adminCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\xbf\x3d\x94\x04\x24\xb9\x17\x15\x4a\x45\x0f\x5e\x04\x7d\x81\xe9\x76\x4c\x06\xb7\xbb\xcb\xce\x2c\x22\xa5\xef\x2e\x4d\x54\x22\x38\xb7\x19\xfe\xef\xfb\x47\x8e\x39\x15\xc3\xea\x21\xa4\x8f\xfb\xa7\xc7\x95\x73\x7d\x8f\xd7\x51\x14\x56\x28\x2a\x79\x93\x14\x21\x8a\x14\xc3\x27\xde\x52\x81\xb1\x9a\xc4\xe1\xca\x2d\x03\x27\xe7\x00\x20\x17\xce\x54\xb8\x51\x19\x22\x97\x0d\xa8\xda\xd8\xec\x28\xd3\x5e\x82\x98\xb0\xb6\x58\x6f\xbd\x4f\x35\x5a\x8b\xd3\x84\x5c\x26\xb0\x81\x0e\x47\x89\x3b\xca\xb8\xc5\x4c\x77\x7e\xc1\x75\x6a\xa9\xd0\xc0\x9d\xa8\x56\xbe\x59\x7f\xbf\xdb\x6d\x2f\xd4\x5d\xf3\x67\x7d\x99\xa3\xcf\x64\x63\xfb\x5b\xf1\x9f\x33\xd7\x7d\x10\x1d\x9b\x9f\xea\x6b\x90\x6d\xd0\x4f\x67\xdf\x1f\xde\x87\x49\x37\x3b\xce\xee\xec\xbe\x02\x00\x00\xff\xff\x8a\xfd\x77\x2f\x2c\x01\x00\x00"

func dkgAdminPublish_adminCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminPublish_adminCdc,
		"dkg/admin/publish_admin.cdc",
	)
}

func dkgAdminPublish_adminCdc() (*asset, error) {
	bytes, err := dkgAdminPublish_adminCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/publish_admin.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xa5, 0x46, 0x3, 0x75, 0xc8, 0x72, 0x1b, 0xd6, 0xe8, 0xf, 0x74, 0xaf, 0x47, 0xd2, 0x3c, 0xd3, 0xfb, 0x38, 0x1b, 0xe4, 0xf0, 0xdb, 0x82, 0x2b, 0xb5, 0x76, 0xaa, 0x2f, 0xc5, 0xbb, 0xd8}}
	return a, nil
}

var _dkgAdminSet_safe_thresholdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x6b\xf3\x30\x10\x86\x77\xff\x8a\xc3\x43\x70\x16\x4f\x1f\xdf\x60\xda\x9a\xb4\x21\x19\xb2\x04\xdc\x76\x57\xe5\xd7\xb6\xa8\x2c\x99\xd3\x09\x07\x4a\xfe\x7b\x49\x94\x04\x02\xcd\x6d\x3a\xf4\x3c\xaf\xf4\x9a\x71\xf2\x2c\x94\x6f\xac\x9f\xd7\xbb\x6d\x9e\x65\xc2\xca\x05\xa5\xc5\x78\x57\x38\xcc\xef\x03\x23\x0c\xde\xb6\x7b\xb0\x86\x13\xd5\xa3\xa2\x8f\x8d\x39\xfc\xff\x57\x2f\xe9\x27\xcb\x88\x88\x2c\x84\xda\xef\x7e\xd5\x8e\xc6\x55\xb4\xb8\xc8\xca\xf3\x39\xdd\x98\x18\x93\x62\x14\xc1\xf4\x0e\x5c\x91\x8a\x32\x14\xaf\x9e\xd9\xcf\x9f\xca\x46\x2c\x69\xb1\xd2\xda\x47\x27\x27\x29\x5d\x26\xc0\x76\xe5\x55\x4c\xcf\x94\xe8\x32\x88\x67\xd5\xa3\xfc\x3a\xf3\x4f\xf7\x79\x2f\x45\xc7\x7e\xac\xe8\x6e\xd9\x24\x62\xaf\x64\x58\xde\xec\xa7\xa9\x6b\x9a\x94\x33\xba\xc8\xdf\x7c\xb4\x2d\x39\x2f\x94\xb4\xb4\xde\x6d\x29\x05\x33\x3a\x30\x9c\x46\x9e\xe0\x63\xfa\x13\x0e\xd0\x51\xf0\xe8\xbd\x65\x80\x34\xaa\x43\x13\xb5\x46\x08\xb7\x22\x1f\xb6\xfa\xf7\xfe\x1a\x79\xcc\x7e\x03\x00\x00\xff\xff\x09\xbb\x83\x03\xac\x01\x00\x00"

func dkgAdminSet_safe_thresholdCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminSet_safe_thresholdCdc,
		"dkg/admin/set_safe_threshold.cdc",
	)
}

func dkgAdminSet_safe_thresholdCdc() (*asset, error) {
	bytes, err := dkgAdminSet_safe_thresholdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/set_safe_threshold.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x48, 0x46, 0x3b, 0xa6, 0xdc, 0x30, 0xaf, 0x5a, 0x9e, 0xf5, 0x14, 0x60, 0xa0, 0xf6, 0x2, 0x6, 0x75, 0x56, 0x6b, 0xd9, 0x6d, 0x3, 0x33, 0xc3, 0x42, 0x53, 0xba, 0xed, 0x83, 0x8f, 0x1}}
	return a, nil
}

var _dkgAdminStart_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x8b\x17\xc1\xde\xf8\x03\xcc\x7b\x0d\x69\x4d\x4d\xf1\xa6\x10\xe8\xa6\x74\xa1\xca\x63\x47\xd4\xd6\x98\xd1\x88\x14\x4a\xfe\xbd\x24\x72\x5a\xb2\xe8\x5d\x49\x42\xe7\x5c\x69\xdc\xbc\xb0\x28\xf2\xc7\x89\x8f\x4d\xd7\xe6\x59\xa6\x62\x7c\x30\x56\x1d\xfb\xc2\x73\x4f\x4f\x4d\xa8\xf1\xba\x57\x71\x7e\x7c\x2b\xf1\x95\x65\x00\x30\x91\xa2\xff\x18\x77\xfd\xec\x7c\x8d\xcd\x8a\x57\x97\x7d\xba\xb1\x08\x2d\x46\xa8\x08\x6e\xf4\x24\x35\x4c\xd4\x43\x71\xcf\x22\x7c\x7c\x31\x53\xa4\x12\x9b\x9d\xb5\x1c\xbd\x9e\xa5\x58\x13\x68\x1a\xaa\xab\x18\xff\x91\xe8\x2a\x28\x8b\x19\xa9\x7a\xbf\xf0\xff\x6e\xfb\xee\x8a\x41\x78\xae\x71\x73\xb8\x4f\xc4\xb3\xd1\x43\xf9\x63\x3f\x67\xbb\xc5\x62\xbc\xb3\x45\xfe\xc0\x71\xea\xe1\x59\x91\xb4\x68\xba\x16\xa9\x58\x68\x20\x21\x6f\x29\x4f\xf0\x29\xfd\x89\x3e\xc9\x46\xa5\xbf\xde\x5b\x05\x35\xa2\x4d\xd7\xfe\x0e\x6e\x5d\x5c\x2d\xa7\xec\x3b\x00\x00\xff\xff\xa3\xc5\x70\x31\x71\x01\x00\x00"

func dkgAdminStart_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminStart_dkgCdc,
		"dkg/admin/start_dkg.cdc",
	)
}

func dkgAdminStart_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminStart_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/start_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xae, 0x4e, 0xb0, 0xeb, 0xdd, 0x35, 0xce, 0x8f, 0xdd, 0xce, 0x19, 0xd6, 0xfb, 0xc0, 0xea, 0xed, 0xc6, 0xc7, 0xed, 0x42, 0x5, 0xa2, 0x5b, 0x52, 0x8f, 0x6, 0xaf, 0xa1, 0xa, 0xe1, 0xc3}}
	return a, nil
}

var _dkgAdminStop_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x6a\xc3\x40\x10\x44\x7b\x7d\xc5\xa0\xc2\x48\xcd\x7d\x80\x48\x62\x9c\x88\xa8\x50\x13\x08\xa4\xbf\x9c\x56\xf2\x91\xd3\xad\x58\xed\xe1\x80\xf1\xbf\x07\xeb\xe2\x80\x8b\x4c\xb7\xcb\xbc\x99\x5d\x3f\x2f\x2c\x8a\xf2\x35\xf0\xa9\xed\xbb\xb2\x28\x54\x6c\x5c\xad\x53\xcf\x11\xe7\xa2\x00\x80\x40\x8a\xe1\x6b\x3a\x0c\xb3\x8f\x0d\x76\xbf\x5e\xb3\xcd\xd9\xb1\x08\x2d\x56\xa8\x5a\xfd\x14\x49\x1a\xd8\xa4\xc7\xea\x99\x45\xf8\xf4\x61\x43\xa2\x1a\xbb\x83\x73\x9c\xa2\xd6\x38\x6f\xc4\x55\x2b\x85\xd1\xdc\x82\xf1\x88\x4c\x9b\x55\x59\xec\x44\xe6\x73\xe3\x1f\xee\xfb\x9e\xaa\x51\x78\x6e\x70\xb7\x7c\xcf\xc4\x9b\xd5\x63\xfd\x97\x7e\xd5\x7e\x8f\xc5\x46\xef\xaa\xf2\x85\x53\x18\x10\x59\x91\x63\xd1\xf6\x1d\x72\xb1\xd0\x48\x42\xd1\x51\x99\xe1\x4b\xfe\x89\xbe\xc9\x25\xa5\xff\xee\x35\x14\x87\xb6\xef\xaa\x1b\x73\x29\x7e\x02\x00\x00\xff\xff\x6d\x00\x62\x97\x4c\x01\x00\x00"

func dkgAdminStop_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgAdminStop_dkgCdc,
		"dkg/admin/stop_dkg.cdc",
	)
}

func dkgAdminStop_dkgCdc() (*asset, error) {
	bytes, err := dkgAdminStop_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/admin/stop_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xc3, 0xbb, 0x29, 0x57, 0xf5, 0x13, 0x79, 0x94, 0x7d, 0x8e, 0xa4, 0x51, 0x1a, 0x1d, 0x72, 0xc7, 0x62, 0xd1, 0x3a, 0x37, 0xaf, 0xe2, 0x8c, 0xec, 0x3, 0x3, 0x6, 0x65, 0xb1, 0xac, 0x31}}
	return a, nil
}

var _dkgCreate_participantCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x8b\x22\x31\x10\x85\xef\xf9\x15\x45\x1f\xa4\x1b\xb4\xfb\xde\xb8\x2b\xb2\xb2\xcb\x32\x07\x05\x87\xb9\x97\x49\x19\x83\x31\x09\x95\x6a\x65\x18\xfc\xef\x83\xa6\x1d\xb4\x2e\x09\xa9\xbc\xaf\xea\x3d\x77\x4a\x91\x05\xaa\xbf\x3e\x5e\x56\x6f\xff\x2a\xa5\xba\x0e\xde\xd7\xab\x75\x0f\x31\xf8\x4f\x18\x32\x19\xd8\x47\x06\xa1\x2c\x2e\x58\xa5\x84\x31\x64\xd4\xe2\x62\xa8\xd1\x18\xa6\x9c\x7b\x58\x96\xcb\x14\x42\x34\xf4\x7f\xd5\xc3\x56\xd8\x05\xdb\xc0\x97\x52\x00\x00\x89\x29\x21\x53\x9d\x9d\x0d\xc4\x3d\xe0\x20\x87\x7a\x8b\x67\xfa\x40\x3f\x50\x03\x93\xa5\xd6\x71\x08\x72\x13\xc0\x58\x9e\x04\xd0\x9c\x5c\x80\x5f\x60\x49\xc6\x1f\x8f\x99\x4d\xab\x31\xe1\xce\x79\x27\x8e\x72\xbb\x8b\xcc\xf1\x32\x9f\x8c\x3e\xda\xe5\x4d\xf8\xbb\xee\xd2\xb0\xf3\x4e\x77\xe6\x68\xef\x2f\xcd\x0f\xfd\x5e\x8b\x05\x24\x0c\x4e\xd7\xd5\x9f\x38\x78\x03\x21\x0a\x14\xd2\x38\x99\x69\x4f\x4c\x41\x53\xd5\xa8\x97\xc5\xcc\xd1\x6e\x90\xc5\x69\x97\x30\x08\xcc\x67\x45\xd0\x6a\x26\x14\x7a\x6a\xd5\x8f\x44\xca\xf9\x84\x29\x59\xb4\x59\x22\xa3\xa5\x36\xe3\x99\xea\xf9\xec\x15\x3c\x05\x89\x3d\x3c\x4c\x3d\x35\xb6\x45\xb5\x41\x39\x14\x4f\x57\xa5\xae\xdf\x01\x00\x00\xff\xff\xbf\x8f\x52\xc8\xcd\x01\x00\x00"

func dkgCreate_participantCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgCreate_participantCdc,
		"dkg/create_participant.cdc",
	)
}

func dkgCreate_participantCdc() (*asset, error) {
	bytes, err := dkgCreate_participantCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/create_participant.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x9f, 0xf6, 0x1d, 0x5d, 0x2e, 0x68, 0xf9, 0x25, 0x99, 0x5a, 0xf6, 0xc2, 0x1e, 0xcd, 0x34, 0x2b, 0xdd, 0x25, 0xe6, 0xf3, 0xfc, 0x74, 0xa8, 0x38, 0x33, 0xe3, 0x91, 0xb1, 0x47, 0x0, 0xed}}
	return a, nil
}

var _dkgScriptsGet_consensus_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x0e\x2e\x29\xca\xcc\x4b\x8f\x55\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xea\xd3\x4b\x4f\x2d\x71\xce\xcf\x2b\x4e\xcd\x2b\x2e\x2d\xf6\xcb\x4f\x49\xf5\x74\x29\xd6\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\x2d\xa1\x5e\x8d\x5f\x00\x00\x00"

func dkgScriptsGet_consensus_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_consensus_nodesCdc,
		"dkg/scripts/get_consensus_nodes.cdc",
	)
}

func dkgScriptsGet_consensus_nodesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_consensus_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_consensus_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xf6, 0xd8, 0xd1, 0x57, 0x9f, 0xa, 0x95, 0xc0, 0x41, 0x50, 0xe3, 0x2f, 0x4d, 0x7a, 0xf7, 0xa1, 0xfb, 0xba, 0x3c, 0xea, 0x3, 0x64, 0x79, 0x52, 0x86, 0xb7, 0x37, 0xe2, 0x25, 0xcd, 0xcf}}
	return a, nil
}

var _dkgScriptsGet_dkg_canonical_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x80\xaa\xd0\x0b\x4a\x2d\x2e\xcd\x29\x09\x2e\x4d\xca\xcd\x2c\x2e\xce\xcc\xcf\xb3\x57\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x83\x2b\x4b\xc9\x4e\x77\xce\xcf\x2d\xc8\x49\x2d\x49\x4d\xd1\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\x84\x9a\x7e\x76\x69\x00\x00\x00"

func dkgScriptsGet_dkg_canonical_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_canonical_final_submissionCdc,
		"dkg/scripts/get_dkg_canonical_final_submission.cdc",
	)
}

func dkgScriptsGet_dkg_canonical_final_submissionCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_canonical_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_canonical_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xc3, 0x10, 0xf9, 0xa9, 0xfd, 0x9b, 0xab, 0x4e, 0x54, 0x4e, 0x96, 0xd9, 0x7d, 0x1c, 0xf2, 0xdd, 0x2f, 0x2f, 0xd, 0xf3, 0xa8, 0xdb, 0x30, 0x9, 0xcb, 0x80, 0xd8, 0x1, 0xe2, 0x93, 0x52}}
	return a, nil
}

var _dkgScriptsGet_dkg_completedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xea\xd1\x4b\xc9\x4e\x77\xce\xcf\x2d\xc8\x49\x2d\x49\x4d\xd1\xd0\x54\x50\xb4\x55\xc8\xcb\xcc\xe1\xaa\x05\x04\x00\x00\xff\xff\x1a\x54\xf5\xfc\x5b\x00\x00\x00"

func dkgScriptsGet_dkg_completedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_completedCdc,
		"dkg/scripts/get_dkg_completed.cdc",
	)
}

func dkgScriptsGet_dkg_completedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_completedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_completed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xec, 0xaa, 0xe6, 0x2d, 0x34, 0x60, 0xed, 0xa, 0x45, 0xd5, 0x51, 0x92, 0x5, 0x2e, 0xc7, 0x15, 0x16, 0xe0, 0x3a, 0x5d, 0x98, 0x31, 0x64, 0x34, 0xb, 0xbc, 0x20, 0xc6, 0xc2, 0xd9, 0x14}}
	return a, nil
}

var _dkgScriptsGet_dkg_enabledCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xea\xd1\x4b\xc9\x4e\x77\xcd\x4b\x4c\xca\x49\x4d\xe1\xaa\x05\x04\x00\x00\xff\xff\xdf\x12\xc2\x46\x50\x00\x00\x00"

func dkgScriptsGet_dkg_enabledCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_dkg_enabledCdc,
		"dkg/scripts/get_dkg_enabled.cdc",
	)
}

func dkgScriptsGet_dkg_enabledCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_dkg_enabledCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_dkg_enabled.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0xc, 0x26, 0x2d, 0x83, 0x5a, 0xfc, 0xc6, 0x10, 0x50, 0x1f, 0x83, 0x97, 0xfc, 0x4, 0xad, 0xe2, 0x15, 0x96, 0xc4, 0x96, 0xbb, 0x53, 0x18, 0x97, 0xdf, 0x96, 0x7, 0x94, 0xd5, 0x33, 0xa2}}
	return a, nil
}

var _dkgScriptsGet_final_submissionsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x86\x2a\xd1\x0b\x4a\x2d\x2e\xcd\x29\x09\x2e\x4d\xca\xcd\x2c\x2e\xce\xcc\xcf\x8b\x55\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\x29\x4b\x4f\x2d\x71\xcb\xcc\x4b\xcc\x41\x28\x2c\xd6\xd0\xe4\xaa\x05\x04\x00\x00\xff\xff\xca\x01\x9b\x88\x71\x00\x00\x00"

func dkgScriptsGet_final_submissionsCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_final_submissionsCdc,
		"dkg/scripts/get_final_submissions.cdc",
	)
}

func dkgScriptsGet_final_submissionsCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_final_submissionsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_final_submissions.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xc2, 0xda, 0x84, 0xe3, 0xd7, 0xeb, 0x4, 0x67, 0xa5, 0xd7, 0xc, 0xc5, 0xa4, 0x26, 0x8a, 0xc, 0xc9, 0x56, 0x9a, 0x96, 0x19, 0xc0, 0x53, 0x95, 0x24, 0x2e, 0x51, 0xeb, 0x7d, 0xb0, 0x43}}
	return a, nil
}

var _dkgScriptsGet_latest_whiteboard_messagesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\xc4\x40\x10\xc5\xfb\x7c\x8a\xc7\x55\xbb\x08\x01\xdb\xc3\x34\x22\xca\x21\xd6\x16\x21\xc5\x70\x99\x4b\x06\xf6\x4f\xd8\x9d\xf3\x04\xb9\xef\x2e\xae\xc9\x82\x72\xcd\x14\x6f\x7e\xef\x8f\xf8\x25\x26\xc5\xee\xd9\xc5\xcb\xd3\xeb\xcb\xae\x69\xe8\x78\xe4\x9c\x0d\x39\x67\x71\x3a\x07\x78\x92\x60\x4e\x29\xfa\x43\x18\xf9\x73\x8f\x43\x50\xbb\x47\xbf\x1a\xda\x37\xce\x99\x26\x1e\xf0\xd5\x00\x80\x63\x85\xff\x95\x32\x3a\x6c\xd4\xc4\xfa\x3e\x8b\xf2\x63\xa4\x34\xae\x96\x6c\x6c\xb1\x7c\x50\x82\x23\xe5\xac\xdb\xe3\x56\x7c\x87\x7e\xa8\xb8\xa0\x43\x9d\x54\xd4\xcb\x2c\x8e\x21\x78\xa8\xed\xad\xe3\x30\xe9\xbc\xee\x2a\xdb\xfe\x94\xb4\xb4\x2c\x1c\x46\xb3\xf1\xbd\x0c\xb6\xa2\x3f\x05\x82\x3b\xdc\x17\xe5\x5a\x6e\x62\x3d\xa7\xf0\x2f\xa5\xb9\x7e\x07\x00\x00\xff\xff\x28\xe0\x1d\x15\x42\x01\x00\x00"

func dkgScriptsGet_latest_whiteboard_messagesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_latest_whiteboard_messagesCdc,
		"dkg/scripts/get_latest_whiteboard_messages.cdc",
	)
}

func dkgScriptsGet_latest_whiteboard_messagesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_latest_whiteboard_messagesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_latest_whiteboard_messages.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xc2, 0x65, 0xef, 0xb4, 0x14, 0x6c, 0xaa, 0x9f, 0xc7, 0xec, 0xa2, 0xf0, 0xcc, 0xa3, 0xa8, 0x7, 0x33, 0x33, 0x2d, 0xab, 0x4d, 0xca, 0xbf, 0xef, 0x1e, 0x39, 0x60, 0x5a, 0xec, 0xc6, 0x34}}
	return a, nil
}

var _dkgScriptsGet_node_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xdb\xa9\x59\x7c\x80\xce\xa5\x22\x82\x83\x7d\x82\xd8\x9e\xe5\x20\xb9\x93\xdc\x05\x07\xf1\xdd\x5d\x8a\xee\x1f\x1f\x97\xa7\x56\x47\x37\x65\x7d\x8d\x97\x53\x17\x42\x5a\x16\x32\xeb\x53\xce\x11\x8f\x26\x28\x89\xa5\x17\x5d\xe9\x3c\x0e\x98\xbd\xb2\x6c\x71\xc0\xee\x8f\x37\xb2\x96\x7d\x6e\xf7\xc2\x66\xac\x82\x77\x00\x80\x4a\xde\xaa\xfc\xd4\x46\x7e\xd5\x95\x26\x96\x94\xff\x76\x5f\xe3\x21\x7c\xbe\x01\x00\x00\xff\xff\x81\x5f\x9a\x7b\x87\x00\x00\x00"

func dkgScriptsGet_node_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_final_submissionCdc,
		"dkg/scripts/get_node_final_submission.cdc",
	)
}

func dkgScriptsGet_node_final_submissionCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x9b, 0x79, 0x1a, 0x0, 0x4b, 0x8d, 0xcc, 0x8d, 0x29, 0x2a, 0xe3, 0xeb, 0x21, 0xfd, 0xbd, 0xb4, 0x94, 0x36, 0x65, 0x21, 0x8f, 0xee, 0xb, 0x60, 0x24, 0x19, 0x21, 0x66, 0x7a, 0xb3, 0x7f}}
	return a, nil
}

var _dkgScriptsGet_node_has_submittedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xc8\xcb\x4f\x49\xf5\x74\xb1\x52\x08\x2e\x29\xca\xcc\x4b\xd7\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\x9a\xa0\x07\x52\xea\x91\x58\x1c\x5c\x9a\x94\x9b\x59\x52\x92\x9a\x02\xd5\xab\xc9\x55\x0b\x08\x00\x00\xff\xff\xba\xab\xdc\x8b\x6c\x00\x00\x00"

func dkgScriptsGet_node_has_submittedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_has_submittedCdc,
		"dkg/scripts/get_node_has_submitted.cdc",
	)
}

func dkgScriptsGet_node_has_submittedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_has_submittedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_has_submitted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x7, 0x47, 0x7a, 0x3b, 0xdc, 0x89, 0xaa, 0x1e, 0x73, 0x24, 0x82, 0x4, 0x79, 0xf7, 0xdf, 0x25, 0xcd, 0x40, 0xf5, 0x6c, 0x54, 0xe9, 0x86, 0xa1, 0xd4, 0x88, 0xc6, 0xd7, 0x85, 0xb5, 0xb5}}
	return a, nil
}

var _dkgScriptsGet_node_is_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x31\x0e\x82\x40\x10\x85\xe1\x7e\x4f\xf1\xa0\x82\xc6\x03\x90\xd8\x28\xd1\x10\x4b\x4f\x30\x81\xc1\x4c\x32\x3b\xbb\xd9\x5d\x62\x61\xb8\xbb\x51\xb1\xb2\xf1\xd5\xef\xfb\xc5\xc7\x90\x0a\xea\x93\x86\x7b\x7f\x39\xd7\xce\xd1\x38\x72\xce\x0d\xa9\xb6\x98\x17\x83\x27\xb1\xc6\xc2\xc4\x43\xdf\xe1\x5a\x92\xd8\xad\xed\x70\x08\x41\xf1\x70\x00\x20\x33\x36\xbd\x8b\x94\x8a\x8c\x12\xc9\xca\x90\x8f\x4a\xe2\x79\xda\x6c\x8b\x6a\x0f\x93\x2f\x7a\x2d\x71\x59\x92\xfd\x85\xab\x37\x5a\xc1\x9a\xf9\xb7\x30\x93\x66\xfe\x3c\xdc\xfa\x0c\x00\x00\xff\xff\xf3\x83\xe3\x02\xd2\x00\x00\x00"

func dkgScriptsGet_node_is_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_is_claimedCdc,
		"dkg/scripts/get_node_is_claimed.cdc",
	)
}

func dkgScriptsGet_node_is_claimedCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_is_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_is_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0xea, 0x6b, 0xc7, 0xb2, 0xe0, 0x98, 0x13, 0x77, 0xd6, 0x7c, 0xe8, 0xec, 0x47, 0xa4, 0xf9, 0x89, 0x49, 0xc4, 0x1c, 0x67, 0x60, 0xa3, 0xf6, 0x9e, 0xc8, 0x41, 0x5d, 0x93, 0xba, 0x2b, 0xba}}
	return a, nil
}

var _dkgScriptsGet_node_is_registeredCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\xea\xd4\x2c\x1c\xa0\x23\xaa\x40\x15\x1b\x9c\xc0\x4a\x4d\x65\x29\xb5\x23\xc7\x15\x03\xe2\xee\x2c\xbd\xc0\x93\xbd\x99\x07\x86\x5b\xb5\xcf\xfc\xb8\x0f\x29\x51\x29\xdc\xfb\x48\xb5\x66\xbc\x0f\xc5\x4e\xa2\xa3\xda\xca\xcb\x3c\xe1\x15\x2e\xba\xe5\x09\x57\xb3\x8a\x6f\x02\x00\xe7\x38\x5c\x71\x0a\x97\x46\x1e\x52\xa4\x91\xc6\xd2\x9f\xbc\x49\x0f\x76\x5e\x4f\x22\xa7\xdf\x3f\x00\x00\xff\xff\xd7\x06\x49\x99\x73\x00\x00\x00"

func dkgScriptsGet_node_is_registeredCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_node_is_registeredCdc,
		"dkg/scripts/get_node_is_registered.cdc",
	)
}

func dkgScriptsGet_node_is_registeredCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_node_is_registeredCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_node_is_registered.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xe4, 0xd, 0x48, 0x2e, 0x59, 0x4b, 0x7, 0xc, 0xbe, 0xf6, 0x48, 0xb1, 0x9b, 0xa, 0x1e, 0x3c, 0x8e, 0xfe, 0x4c, 0xa7, 0x70, 0x74, 0x84, 0xf7, 0xa0, 0xc9, 0xe5, 0x6f, 0xc7, 0x42, 0xe1}}
	return a, nil
}

var _dkgScriptsGet_thresholdsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x4a\xc0\x30\x10\x85\xf7\x39\xc5\xd0\x55\xb2\x29\x5d\x94\x2e\x0a\xd2\x8d\x54\x44\x10\xa1\x7a\x80\x10\x27\x6d\x20\x4d\x25\x99\xa8\x20\xbd\xbb\x34\x96\xfe\x50\x41\x67\x39\x7c\xdf\xbc\xc7\x98\xf1\x6d\xf2\x04\x59\x6b\xa7\x8f\xdb\x87\xbb\x8c\x31\xa9\x14\x86\xc0\xa5\xb5\x02\x02\xf9\xa8\x08\x9e\x07\x8f\x61\x98\xec\x6b\x80\x2f\x06\x00\x70\x64\x2c\x12\x38\x49\xe6\x1d\x6b\x78\xb9\x77\x54\x95\xbf\x22\x41\xea\xbf\x81\x27\xf4\x0a\x1d\xc9\x7e\x41\x5b\xf3\x59\x95\x2c\xb1\xc6\x19\xe2\x62\x0d\x5f\x26\xa0\xd5\xf9\x4f\x2a\xdc\xc0\x5a\x3e\xef\x91\x1e\xd3\xae\x8b\xe9\xf8\xd6\x9b\x8b\xb3\xb9\x64\x9d\xbd\x4e\xea\x7f\x59\x7b\xc3\xab\xbf\x89\x3b\xc4\x05\x34\x0d\x14\x79\x91\x2e\xcd\x6c\x3e\xff\x57\x47\x07\xa3\x34\x8e\x8b\xfa\xfa\x64\x8f\x14\xbd\x3b\xec\xb9\x60\xf3\x77\x00\x00\x00\xff\xff\xfa\x26\x6b\x88\xb0\x01\x00\x00"

func dkgScriptsGet_thresholdsCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_thresholdsCdc,
		"dkg/scripts/get_thresholds.cdc",
	)
}

func dkgScriptsGet_thresholdsCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_thresholdsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_thresholds.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x5c, 0x75, 0xf3, 0xe7, 0x23, 0xbf, 0xc4, 0x83, 0x46, 0x4c, 0x20, 0x5d, 0x82, 0xeb, 0x92, 0x86, 0x31, 0x8, 0x53, 0xab, 0x7e, 0x7a, 0x9b, 0xd, 0x5c, 0x52, 0x35, 0x12, 0xf1, 0xaa, 0x71}}
	return a, nil
}

var _dkgScriptsGet_whiteboard_messagesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xf1\x76\x57\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x88\x86\x2a\xd1\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x8d\x55\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xc9\xa6\xa7\x96\x84\x67\x64\x96\xa4\x3a\xe5\x27\x16\xa5\x40\x95\x16\x6b\x68\x2a\x70\xd5\x02\x02\x00\x00\xff\xff\xb7\x6e\xcb\x8e\x6b\x00\x00\x00"

func dkgScriptsGet_whiteboard_messagesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgScriptsGet_whiteboard_messagesCdc,
		"dkg/scripts/get_whiteboard_messages.cdc",
	)
}

func dkgScriptsGet_whiteboard_messagesCdc() (*asset, error) {
	bytes, err := dkgScriptsGet_whiteboard_messagesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/scripts/get_whiteboard_messages.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x7a, 0x78, 0xe, 0x3a, 0xc7, 0xff, 0x1d, 0x5a, 0x8a, 0xf8, 0xda, 0xb3, 0xc6, 0x14, 0x3b, 0x6e, 0xc7, 0xbf, 0xb8, 0xc7, 0x3d, 0xf8, 0x56, 0xc7, 0xfe, 0xc7, 0x82, 0x26, 0x75, 0xfd, 0x2a}}
	return a, nil
}

var _dkgSend_empty_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\xa3\x1c\x56\xa9\x54\xbc\xf7\x8a\x65\x05\xac\xba\x87\x0a\xa9\xa2\x0b\xd7\x95\xeb\x4c\x12\x0b\x77\x6c\x8d\xc7\x2a\x05\xed\x7f\x47\x76\xd2\x36\x45\x50\xdf\x3c\x13\xbf\xf7\x79\xfc\x62\xf7\xc1\xb3\x40\xb5\x72\xfe\xf0\xb4\x7e\xae\x66\xb3\xfb\x7b\xf8\x16\xb1\x81\xdd\x11\x9e\xd6\xcf\x10\x34\x8b\x35\x36\x68\x92\x08\xe2\x21\xa6\xdd\xde\x0a\x48\x8f\x96\xa1\xb5\xa4\xdd\x50\x8a\xd1\x7a\x82\xd6\x73\x6e\x81\x49\xcc\x48\x52\x14\x2c\x45\xd1\x64\x50\x65\xe9\x97\xde\x46\x10\xd6\x14\xb5\x91\x7c\xc2\x46\x48\xd9\xee\xd0\x23\x95\xa3\x13\x43\x70\xde\x68\xe7\x8e\xd0\x6a\xeb\xb0\x29\xed\xc2\xc4\xde\x60\x8c\x0b\xd0\xd4\x80\x66\xcc\xc2\x8c\xc6\x73\x63\xa9\x03\xc9\x16\xbb\xe3\x48\x2a\xb9\xa4\x09\x70\x1f\xe4\x08\x8c\x31\x39\x51\xb0\xf2\x0c\xe4\xe9\xdd\x50\xbd\x5c\x20\x2e\x32\x0d\x54\x11\xa9\x79\x2d\xb7\x7b\xbd\x34\x2b\x35\x9b\x90\xd7\x73\xf8\x3d\x9b\x01\x00\x38\x14\x68\x7e\x74\x9b\x0b\xf8\x12\xee\xc6\x81\xaa\x49\xf5\xfc\xf1\x45\x72\x09\xa7\xef\xbe\x16\xb2\xed\xb9\x33\x48\x07\xc6\xa0\x19\xeb\x68\x3b\x42\x5e\x82\x4e\xd2\xd7\x9f\x3c\xb3\x3f\x7c\xd7\x2e\xe1\x1c\xee\x3e\x1a\xe3\x13\x49\xa6\x81\x71\x45\x74\xad\xba\x26\x82\x07\x18\x34\x54\x14\xcf\xba\x43\xb5\x2b\x2a\xef\xff\x05\xfa\xa1\x6e\xd9\xef\x2f\x6c\x93\xd6\x76\x38\xbd\xd1\xd2\xcf\xcf\x7e\x79\x3d\x3e\x42\xd0\x64\x4d\x5d\x7d\xd6\x44\x5e\x60\xd0\x2f\xef\x35\xe5\x60\x6c\x91\x91\x0c\x42\xf6\x80\xa0\xa5\x87\xea\x4a\xe9\xb4\x94\xf1\x64\xb4\xd4\xb7\x29\x94\xf8\xad\xb0\xa5\xae\x9e\xcf\x6f\xca\x54\x0a\x5e\x7a\x1c\xa7\x00\x84\xd8\x94\x3c\x23\xc5\xc4\x38\xe6\x59\x0f\xb3\xcc\xa1\xb4\x64\xc5\x6a\x67\x7f\xe5\x6c\x5a\xe9\xcf\xe1\xbb\xbe\x4c\xf4\x89\x0d\xaa\x6a\x62\x5e\xa6\x3f\xf9\x27\x1e\xfe\xfb\xc6\x75\xc7\x3e\x85\x4d\xda\xad\xf1\xb8\x04\xb2\x6e\x01\xa1\x6c\xe2\xb8\xb3\xcd\x17\x1d\x82\xa5\xae\xec\x07\x8b\xb7\x21\x19\xf8\x13\x4d\x12\xbc\xfd\xea\x2a\xe7\x78\x95\x63\x3c\x31\xfd\x8b\xef\xa4\xfa\xf6\x27\x00\x00\xff\xff\x2e\x3b\x14\x84\x0b\x04\x00\x00"

func dkgSend_empty_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgSend_empty_final_submissionCdc,
		"dkg/send_empty_final_submission.cdc",
	)
}

func dkgSend_empty_final_submissionCdc() (*asset, error) {
	bytes, err := dkgSend_empty_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/send_empty_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x4f, 0x25, 0xc3, 0x9d, 0x77, 0x2f, 0xe2, 0x2a, 0x27, 0x53, 0x76, 0xd3, 0xb0, 0x74, 0x0, 0x90, 0x81, 0xc3, 0x77, 0xc1, 0x10, 0x48, 0x22, 0x75, 0xfd, 0x65, 0x35, 0xc, 0xe7, 0x5c, 0x62}}
	return a, nil
}

var _dkgSend_final_submissionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x6b\x1b\x31\x10\xc5\xef\xfe\x14\x8f\x3d\x84\x35\x98\xcd\x7d\x69\x1a\xda\x06\x87\x62\x0a\xa6\x4e\x7b\x29\xc5\xc8\xf2\x78\x57\x74\x2d\x89\xd1\x08\xd7\x0d\xfe\xee\x45\x2b\xff\x59\x97\xc6\x3a\x89\x99\xd1\x9b\x9f\x46\x4f\x66\xeb\x1d\x0b\x8a\x69\xe7\x76\x4f\xb3\xe7\x62\x34\xba\xbf\xc7\xb7\x40\x6b\xac\xf6\x78\x9a\x3d\xc3\x2b\x16\xa3\x8d\x57\x56\x02\xc4\x21\xc4\xd5\xd6\x08\xa4\x25\xc3\xd8\x18\xab\xba\x1c\x0a\xc1\x38\x8b\x8d\xe3\x94\x82\x8e\xcc\x64\xa5\x57\x30\x36\x88\xb2\x9a\xaa\x24\xfd\xd2\x9a\x00\x61\x65\x83\xd2\x92\x4e\x98\x80\x98\xda\xed\x5a\xb2\xfd\xd1\x41\x43\x74\x4e\xab\xae\xdb\xc3\xab\x90\x6a\x52\xba\x67\x62\xa7\x29\x84\x5e\x70\xea\x18\xb4\xf5\xb2\x1f\x60\x84\x49\xd2\x44\x11\xc8\xae\x97\x7d\x72\xd9\x93\x2e\x2f\x25\x45\x35\x1a\x50\x94\x0d\xbb\xe8\x67\xb4\xaf\xb1\x10\x36\xb6\x99\xc0\xc7\xd5\x8c\xf6\xa1\xc6\x8f\x1c\xf9\x39\x81\x59\x7f\x51\xde\x1b\xdb\xd4\x78\xcd\xc1\x1a\x9f\xad\x1c\xc6\x78\x1d\x8d\x00\xa0\x23\xc1\xfa\x57\x33\xbf\xdc\xa0\xc6\xdd\x71\xb2\xd5\x20\x7a\x2e\xbe\xf0\xd4\x38\xd5\x7d\xa5\x10\x3b\x59\x9c\x33\x59\xda\x33\x79\xc5\x54\x06\xd3\x58\xe2\x1a\x2a\x4a\x5b\x7e\x74\xcc\x6e\xf7\x5d\x75\x91\xc6\xb8\xfb\xa0\xb5\x8b\x56\x12\x0d\x8e\x2b\x50\xb7\xa9\xae\x89\xf0\x80\xac\x51\x05\x71\xac\x1a\xaa\x56\xbd\xca\xbb\xff\x81\xbe\x2f\x37\xec\xb6\x17\xb6\x41\x6a\x91\x4f\xcf\x95\xb4\xe3\x73\xbf\xb4\x1e\x1f\xe1\x95\x35\xba\x2c\x3e\x29\x6b\x9d\x20\xeb\xf7\x0f\x37\xe4\x60\xda\x10\x93\xd5\x84\xd4\x03\x5e\x49\x8b\xe2\x4a\xe9\xb4\x2a\xed\xac\x56\x52\xde\xa6\xa8\xc4\xe5\x47\x29\xc7\xe3\x9b\x32\x45\x85\x97\x96\x8e\x53\x80\x25\x5a\xf7\xc6\x26\x1b\x22\xd3\xd1\xd8\x2a\xcf\x32\xb9\xd3\x58\x23\x46\x75\xe6\x4f\x32\xa9\x91\xf6\xec\xc2\xeb\xcb\x04\x17\x59\x53\x55\x0c\x9a\xf7\xd3\x1f\x7c\x8e\x87\x37\xdf\x38\xfb\x6f\xde\x5b\xae\xc6\xc9\x8c\x03\x13\x1e\x37\x57\x1e\x3c\x6f\x73\xc7\x43\x36\x0a\xfd\x26\x1d\x85\x6e\x9b\xa0\x4a\x3f\x63\x9a\xbe\xc4\x80\xe1\x1f\xdc\x93\xea\xe1\x6f\x00\x00\x00\xff\xff\x1d\x4a\xd8\x33\x23\x04\x00\x00"

func dkgSend_final_submissionCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgSend_final_submissionCdc,
		"dkg/send_final_submission.cdc",
	)
}

func dkgSend_final_submissionCdc() (*asset, error) {
	bytes, err := dkgSend_final_submissionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/send_final_submission.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x81, 0xbc, 0xf2, 0xbe, 0x72, 0x14, 0xa, 0x83, 0xc1, 0x7d, 0xde, 0x0, 0x2f, 0x65, 0xc6, 0x59, 0x8c, 0x3a, 0x76, 0x26, 0xdd, 0x65, 0x8b, 0xa2, 0xa0, 0xdf, 0x9f, 0xd2, 0xe4, 0x78, 0xfd}}
	return a, nil
}

var _dkgSend_whiteboard_messageCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\x03\x31\x10\xc6\xef\xfb\x14\xc3\x1e\x4a\xf6\x92\x07\x58\xd4\xe2\x1f\xf4\x20\x42\xa1\xe0\x7d\x8c\xb3\x69\x70\x3b\x13\x26\xb3\x54\x90\xbe\xbb\xac\x69\xa5\xc2\xe2\x1c\x93\xf9\x7e\xbf\x7c\x49\xfb\x2c\x6a\xd0\x3e\x8e\x72\x78\x78\x7e\x6a\x9b\xc6\x14\xb9\x60\xb0\x24\xec\x82\xb0\x11\x5b\x0f\x5b\xd3\xc4\xb1\x83\xaf\xa6\x01\x00\x18\xc9\xe0\xfd\x23\x6e\x50\x2d\x85\x94\x71\x5e\x59\x9d\x10\xfe\xe2\xb4\x6e\x67\xa5\x8c\x4a\xae\xa4\xc8\xa4\x3d\xe0\x64\x3b\x77\x27\xaa\x72\x78\xc5\x71\xa2\x0e\x56\xb7\x21\xc8\xc4\x36\x0b\xe0\x34\x85\xc6\xc1\xff\x95\xc0\x35\x54\x86\x2f\x26\x8a\x91\xfc\xdb\x0f\xe5\x6a\xc9\x7d\xe3\x06\x95\x7d\x0f\x0b\x57\xdb\x9a\xde\xa0\xed\xba\x5f\xdf\x3c\xeb\x35\x64\xe4\x14\x5c\x7b\x8f\xcc\x62\x50\xf9\x73\x57\xc8\x17\xef\x50\x1a\x48\x89\x03\xb5\x35\x7f\xac\x45\xe9\x93\xc2\x64\xf4\x7f\x09\x9f\xa5\xd8\x0b\x95\x82\x91\xce\x1f\x7c\xa6\x1c\xbf\x03\x00\x00\xff\xff\x0a\x34\x40\x12\x8f\x01\x00\x00"

func dkgSend_whiteboard_messageCdcBytes() ([]byte, error) {
	return bindataRead(
		_dkgSend_whiteboard_messageCdc,
		"dkg/send_whiteboard_message.cdc",
	)
}

func dkgSend_whiteboard_messageCdc() (*asset, error) {
	bytes, err := dkgSend_whiteboard_messageCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dkg/send_whiteboard_message.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x30, 0x91, 0x74, 0x68, 0x4a, 0x86, 0xb2, 0xe4, 0xf8, 0xaa, 0xda, 0x3f, 0xe3, 0xf6, 0x7f, 0xc5, 0xd7, 0x23, 0x18, 0x43, 0x18, 0x99, 0x3, 0x6b, 0xa4, 0x4, 0x3, 0x18, 0x4, 0x90, 0x20}}
	return a, nil
}

var _epochAdminAdvance_viewCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xc1\x6e\x82\x40\x10\x06\xe0\x3b\x4f\x31\xe1\x60\xe0\xc2\x03\x98\x5a\xa3\xd4\xc6\xa6\xb5\x9a\x60\x7b\x1f\xd7\x11\x36\xc2\xce\x66\x77\xa8\x87\xc6\x77\x6f\x80\x8a\x1c\x6a\x9d\x03\x17\xf8\xbf\xf9\x07\x5d\x59\x76\x02\xe1\x73\xc9\xa7\x85\x65\x55\x84\x41\x20\x0e\x8d\x47\x25\x9a\x4d\x64\x0b\xf4\x34\x86\x4c\x9c\x36\x79\x0c\xdf\x01\x00\x80\x75\x64\xd1\x51\xe4\x75\x6e\xc8\x8d\x01\x6b\x29\xa2\x39\x3b\xc7\xa7\x4f\x2c\x6b\x8a\x61\x34\x53\x8a\x6b\x23\x97\x44\x33\x25\x09\x14\x84\x4e\x76\x84\x02\x13\xe8\xd2\x89\x17\x76\x98\x53\xb2\x6b\xf3\x0f\xa3\xbe\x49\xb2\xbc\x7c\xfc\x18\x1d\x1c\x57\x63\xb8\xbe\xea\x9d\xac\x4b\x6f\x50\x8a\xb8\xdf\xd4\xcc\x74\x0a\x16\x8d\x56\x51\x98\x72\x5d\xee\xc1\xb0\x40\xb7\x62\x50\xa2\x61\xe1\xb7\x00\x58\x94\x22\x8c\x83\x5e\xd1\x07\x68\xaf\x87\xc9\x04\xc2\xc5\x66\x9d\x2e\xb3\xc5\xf6\x63\x13\x0e\x4e\x6a\xa6\xd7\x12\x32\xfb\x4c\xf0\xa8\x4d\x3e\xab\xbb\xbf\x77\xad\x74\x06\x2a\x3d\xfd\x61\xa6\xeb\xd5\xea\x65\x7b\x1b\xf5\x82\x4e\xda\xa3\x53\xae\x2a\x2d\xf7\xcc\xf7\xa7\x96\xfd\xb7\x65\xcb\xdd\x81\xe6\x6f\xeb\xf4\xf5\xb6\x82\xfb\x2f\x34\x8a\xe6\x25\xab\xe3\x50\x0a\xba\xe7\xf9\x27\x00\x00\xff\xff\xfb\xe0\x78\xc1\x58\x02\x00\x00"

func epochAdminAdvance_viewCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminAdvance_viewCdc,
		"epoch/admin/advance_view.cdc",
	)
}

func epochAdminAdvance_viewCdc() (*asset, error) {
	bytes, err := epochAdminAdvance_viewCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/advance_view.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xab, 0xdd, 0x82, 0xd7, 0xa7, 0xe3, 0x8f, 0xc7, 0x81, 0x53, 0x56, 0xe4, 0x47, 0x6b, 0xa5, 0xe0, 0x7c, 0x5f, 0x7f, 0xf6, 0xa8, 0x14, 0x25, 0xba, 0x6d, 0x8a, 0x84, 0x9f, 0x26, 0xbd, 0x7b}}
	return a, nil
}

var _epochAdminCalculate_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcf\x4e\xf3\x30\x10\xc4\xef\x7e\x8a\x55\x0e\x95\x73\xc9\x03\x54\xdf\x47\x55\xfe\x09\x6e\x88\x20\xee\x1b\x67\x89\x2d\x5c\xaf\xb5\x59\x2b\x07\xd4\x77\x47\x21\xd4\x74\x8e\xbb\xf3\x9b\x99\x70\xca\x2c\x0a\xcd\x63\xe4\xe5\x21\xb3\xf3\x8d\xb9\x3e\x3d\xdf\xbf\xe1\x10\xa9\x57\xfc\x0c\x69\x6a\x8c\x51\xc1\x34\xa3\xd3\xc0\xc9\xb6\xf0\x65\x00\x00\xb2\x50\x46\x21\x3b\x87\x29\x91\xec\x01\x8b\x7a\x7b\xcb\x22\xbc\xbc\x63\x2c\xd4\xc2\xee\xe8\x1c\x97\xa4\x17\x62\x55\x24\x05\x4f\x28\x3a\x10\x2a\xfc\x87\x8d\xee\x66\x65\xc1\x89\xba\xe1\x87\xff\xb7\xab\xc3\xba\xa7\x8b\xf9\xc6\x7e\x08\x9f\xf6\xf0\xf7\xaa\x39\xfd\x46\xbf\xa0\xfa\xb6\x36\xad\x3a\x1c\x20\x63\x0a\xce\x36\x77\x5c\xe2\x08\x89\x15\xb6\x8a\xab\x11\x6b\x2c\xfc\x0e\x80\x8c\xea\x9b\xd6\xd4\x94\x6a\xeb\x1c\x46\x57\x22\x2a\x1d\xd3\xd8\x93\xbe\xd2\x82\x32\xce\x76\x2b\x3c\x9b\xf3\x77\x00\x00\x00\xff\xff\xef\x2a\x7a\x2c\x54\x01\x00\x00"

func epochAdminCalculate_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminCalculate_rewardsCdc,
		"epoch/admin/calculate_rewards.cdc",
	)
}

func epochAdminCalculate_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminCalculate_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/calculate_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xf1, 0x1d, 0x7c, 0x7f, 0x11, 0xec, 0x54, 0x12, 0xb2, 0x8a, 0x75, 0xf0, 0xbf, 0x68, 0xa8, 0xd6, 0x82, 0xc1, 0xc6, 0x9f, 0xf3, 0x8a, 0x8b, 0x17, 0x7c, 0xdd, 0x20, 0x6d, 0xc1, 0x35, 0x6f}}
	return a, nil
}

var _epochAdminDeploy_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x6b\xf2\x40\x10\x86\xef\xf9\x15\x83\x87\x0f\x05\x11\x3e\x28\x52\xbc\x49\x5a\x8b\x58\xa8\x22\x6d\x0f\xe2\x61\xbb\x19\x62\x30\x99\x0d\xb3\xb3\x58\x29\xfe\xf7\x12\x13\xa9\x89\x31\xb1\xcd\x61\x49\x66\xde\x77\x32\x3b\xf3\x44\x49\x6a\x58\xa0\x33\x89\xcd\xce\x8f\x9d\x15\xe4\x85\xdf\xf1\x3c\x61\x45\x56\x69\x89\x0c\x75\x49\x25\x38\x82\xa5\x70\x44\x61\x1f\x3c\x38\x7b\xb4\x09\x70\x04\xab\xd7\x29\xc9\xfd\xba\x5f\x4e\x39\x66\x24\x79\x4c\x8d\xde\xf8\xc6\x91\x20\x8f\x20\x13\x0e\xef\xca\x42\x72\xc9\x5b\x84\x3b\x3b\xa5\xa3\xb6\x4d\xb4\x14\xb5\x8d\x28\x1c\xbb\x63\x73\x6d\xea\x87\xd9\xd3\x7c\xa3\x2c\x5e\xd5\xf9\x26\x8e\x51\x8b\xe1\xe2\xf6\x36\x57\xfe\x1f\x96\x95\x93\xe7\x97\x77\xeb\xd2\x34\xde\x4f\x49\x33\x2a\x8b\x73\x64\x8d\x24\x2a\xcc\x6a\x4f\xa2\xcf\x6a\x6d\x56\x14\x98\x64\x69\x1c\xeb\x9f\xe9\x55\x86\x77\xf1\xeb\x55\x69\x0f\x83\xe2\xad\x3a\xd9\x53\xfe\xaa\x61\xe1\x57\x2c\xc1\x36\x9c\xbb\x8f\x19\xee\x33\x4b\xde\xcb\xba\x07\x5f\x9e\x07\x90\x32\xa6\x8a\xb1\x6b\xa3\x90\xb2\x15\x29\x27\x9b\xee\x38\x08\x7c\x43\xc2\x4a\x4b\x0f\xfe\x8d\xb5\xce\x16\x58\x18\x00\x72\xe9\x40\x17\x0a\x3b\x50\x41\x50\x50\x92\x9d\xb5\x8c\x64\xe7\x0d\x80\xd4\x04\x5b\x68\xa9\x04\x6e\xc5\xe6\x5a\xa6\xd2\x7c\x1d\x49\x97\xb1\x4b\x53\x0d\x56\x75\xd1\xdf\x40\xd6\x94\x6d\x42\xef\xfc\xab\x1d\xc0\x35\x28\xfb\x07\x0c\x1b\x6c\xcd\x30\xe6\xc6\x13\x92\x1e\xc0\xc1\x3b\x7c\x07\x00\x00\xff\xff\x00\x39\x65\xcd\x95\x04\x00\x00"

func epochAdminDeploy_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminDeploy_epochCdc,
		"epoch/admin/deploy_epoch.cdc",
	)
}

func epochAdminDeploy_epochCdc() (*asset, error) {
	bytes, err := epochAdminDeploy_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/deploy_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x18, 0xce, 0xb3, 0x85, 0x46, 0xb6, 0x72, 0xb8, 0x2, 0xbf, 0x95, 0xe6, 0x3d, 0xf3, 0xbc, 0xb7, 0xf4, 0x7d, 0x8c, 0x3a, 0x2f, 0xef, 0x70, 0x29, 0xc6, 0x57, 0xa4, 0xe6, 0x6a, 0xae, 0x24}}
	return a, nil
}

var _epochAdminDeploy_qc_dkgCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\xb1\x4a\x03\x41\x10\xc6\xf1\x7e\x9e\xe2\xab\xe4\x16\x8e\xa4\x95\xeb\x42\x6c\x6c\x6c\xc4\x4a\x2c\x86\xd9\x65\x5d\xa2\x33\x97\xdd\x09\x22\x92\x77\x17\xb2\xab\x98\xca\x72\xe0\xfb\x33\xbf\xed\x16\x77\x69\x7d\xb3\xcf\x06\xff\x30\x88\xa9\x57\x16\x6f\x70\x03\x2b\x58\xc4\x4e\xea\x28\x0a\xd3\x04\xaf\xac\x8d\xc5\x8b\x29\x81\xfe\x5c\xd3\x51\x1e\xf8\x3d\x2d\x78\xf4\x5a\x34\xcf\x38\xca\xde\x62\x5a\xf0\xfc\x74\xaf\x7e\xfb\x32\x23\x1e\xf2\xf5\x22\x1e\xf2\xd5\x24\xe0\x8b\x08\x58\x6b\x5a\xb9\xa6\xa9\x95\xac\xa9\x2e\xe0\x93\xbf\x4e\xbb\x18\xf7\x43\x16\x70\xb3\xeb\xa8\x11\x00\x7d\xba\xf9\xb5\x6f\x38\xc6\x49\x2f\xcf\x3a\x6b\x86\x5c\x3e\x75\x54\xf8\xb7\x1a\xd6\x9f\x6c\x48\x03\x01\x67\xa2\x33\x81\xbe\x03\x00\x00\xff\xff\x37\x0b\x9f\x58\x36\x01\x00\x00"

func epochAdminDeploy_qc_dkgCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminDeploy_qc_dkgCdc,
		"epoch/admin/deploy_qc_dkg.cdc",
	)
}

func epochAdminDeploy_qc_dkgCdc() (*asset, error) {
	bytes, err := epochAdminDeploy_qc_dkgCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/deploy_qc_dkg.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0xf3, 0x8a, 0xbb, 0x2a, 0x94, 0xec, 0x2, 0x91, 0xbb, 0xb8, 0x47, 0x83, 0xda, 0xe4, 0x7, 0x32, 0x98, 0x19, 0x9, 0x22, 0xec, 0xd7, 0x7e, 0x5d, 0x67, 0xf5, 0x20, 0x9d, 0x75, 0xef, 0x5f}}
	return a, nil
}

var _epochAdminPay_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\xc5\x87\x60\xc3\x87\x73\x0f\x5f\x1b\xfa\x2f\x34\xb7\xd0\x94\xde\xd7\xf6\x26\x12\x55\xb4\x62\xbd\x8e\x31\x25\xef\x5e\x6c\xa5\x6e\xba\x37\x49\xf3\x9b\x59\x8d\x3b\x45\x16\x85\x6c\xe3\xb9\x7f\x89\x5c\xdb\xcc\xdc\x5e\x6d\x9f\xdf\xb1\xf2\xb4\x57\xfc\x74\xe1\x98\x19\xb3\x5c\x2e\x61\x87\x43\x0b\x6a\x09\x84\x7a\x94\xa6\x85\x03\xcb\x74\x8e\x42\x67\xc7\x5d\x0b\x34\x3a\x4d\xda\xed\xe1\x8f\xd2\xe2\x99\x00\xbd\x10\x36\x03\x54\x44\x01\x22\xba\xe6\x5f\xa2\x71\x38\x51\x50\xe8\x9d\xf7\x10\x58\xc1\x62\x8c\x14\x8c\x51\xc1\xd0\x62\xad\x8e\x03\x7c\x19\x00\x18\x83\x22\x0a\xe5\xad\x3b\x06\x92\x15\x60\xa7\x36\x7f\x64\x11\xee\x3f\xd0\x77\x54\xc0\xe2\xa1\xae\xb9\x0b\x5a\x5c\x89\x71\x3c\x29\x58\x42\xd1\x8a\x50\xe1\x0e\x12\x5d\xb6\xca\x82\x47\x2a\xab\x89\xff\xbf\x98\xab\x28\x5f\x7f\xc4\xf7\xf9\x41\xf8\xb4\x82\xdf\xa7\xd9\x67\x9f\xe8\x1d\xaa\x2d\xe6\xa4\x71\xd6\x6b\x88\x18\x5c\x9d\x67\x4f\xdc\xf9\x66\xfa\x51\x8a\xb8\x59\x62\xb4\x85\xeb\x02\x10\x51\x6d\x56\x98\xd9\x65\x96\x95\x11\x87\xb7\xd4\xe0\x86\x65\x77\x6d\x79\x5a\x24\x4f\xa1\x17\x73\xf9\x0e\x00\x00\xff\xff\x74\x52\x9e\x77\xca\x01\x00\x00"

func epochAdminPay_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminPay_rewardsCdc,
		"epoch/admin/pay_rewards.cdc",
	)
}

func epochAdminPay_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminPay_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/pay_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x8d, 0x40, 0x67, 0xff, 0x6e, 0x20, 0xfe, 0x3e, 0xa9, 0xa3, 0x6, 0x17, 0x52, 0xf1, 0x19, 0xfb, 0x10, 0x8b, 0x27, 0x40, 0xc, 0xa2, 0xb, 0xe8, 0x89, 0x98, 0x5e, 0x4e, 0x92, 0x24, 0xe4}}
	return a, nil
}

var _epochAdminRecover_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\xcc\xeb\xc3\x42\xc6\x9b\x55\x50\xa0\xe8\x41\x6d\xba\xf0\x3a\xd9\xc2\x58\xe4\x63\x9b\x6c\x2e\x41\x0e\x34\x35\xb6\x88\x48\x1c\x81\x1c\x45\x31\x82\xfc\xf7\x82\xa4\x2c\x4b\x96\x9c\xf6\x52\xf4\xb2\x3e\x18\xa2\xf4\xcc\x33\x1f\xe4\x3c\x43\x55\x94\x64\x18\xa6\x5f\x72\xaa\x2f\x4a\x92\xd9\x74\xd2\x7d\xb5\x3c\xbf\x13\xab\x1c\x6f\x59\x3c\x29\xbd\xe9\x7f\x5b\xe4\x95\x65\x34\xdf\x16\xd3\xc9\xe4\xf4\x14\xee\x32\x04\x83\x92\x9e\xd1\x78\x22\x60\x23\xb4\x15\x92\x15\x69\x90\x06\x05\xa3\x05\xa1\x53\xb0\x2c\x0c\x5b\x10\xa0\xb1\x06\xf4\x50\xa5\x81\x33\x84\x36\x08\xb0\x85\x30\x0c\x92\x34\x1b\x21\xd9\xd1\xd7\x99\x92\x19\xd4\x2a\xcf\x41\x8a\xca\xa2\x37\xd0\xc8\x35\x99\x27\xc0\x17\xc5\x10\x2c\xbf\x88\x3c\x5f\x09\xf9\x04\x97\x94\x22\x3c\x5c\x7c\xb9\x7c\x8c\x7d\x6c\x7f\x76\x63\xb3\x68\x9e\x95\x44\xc0\x67\xd4\x81\xde\x11\xaf\x10\x4a\x43\x12\xad\xc5\x14\x56\x5b\xef\x42\x92\xb6\xa8\x6d\x65\x41\x52\x51\x28\x66\xc4\x93\x6e\x30\x22\x4d\x41\x31\x30\x79\xf4\x8d\x21\x26\x49\x39\xdc\xb2\x60\x8c\x27\xa7\xa7\xa1\x34\xca\xf6\xca\x61\x33\xaa\xf2\x14\x48\xe7\x5b\xe7\xb4\x72\xfe\x6a\xc5\x99\xe7\xa0\x8a\xcb\x8a\x81\xd6\x7e\xb5\x22\x62\xcb\x46\x94\x50\xb1\xca\x15\x6f\x13\xc7\x08\x7e\xd5\x54\x0f\xd7\xc5\xc7\xa6\xf2\x1f\xf9\xe5\xa3\x30\x1b\xdb\x38\xbe\xba\xbe\xbb\x48\xc0\x22\xb3\xd2\x1b\xa8\xb4\x15\x6b\x9c\xe7\x39\xd5\xd7\xcf\x68\x6a\xa3\x18\x7d\xe0\xa6\xc2\x26\x19\xf7\xed\x60\x2b\x76\x9b\xe0\x90\xb4\x37\x73\xa5\xa9\x8c\x41\xcd\xe0\x3c\x85\x48\xda\x1c\xdc\xd6\x4a\xd2\x6b\xb5\xa9\x8c\x70\x29\x9f\x80\x0a\xf9\x34\x81\x6e\x3d\xf9\x82\x2a\xcd\x68\xa0\x10\x2c\x33\xb4\x10\x11\x67\x68\x6a\x65\x9b\x78\x4a\xa1\x95\x9c\xc5\x6d\x0d\xd7\x95\x0e\x05\xc4\x17\x65\xd9\xba\x90\x1a\x3e\x58\x1b\x2a\xa0\x24\x46\xcd\x4a\xe4\x60\x84\xf4\x7b\x97\x2a\x87\xb7\xc0\x99\xe0\x70\x70\x52\x10\x50\x1a\x45\x66\x67\xba\x08\x69\x0c\x0f\x2d\x13\xac\x85\xca\x7f\x75\xee\xd9\xb9\xf7\xe5\xb1\x40\x25\x1a\xc1\x64\x1a\xff\x6c\xb6\xbd\xcc\xc2\x19\x4a\x2b\x83\x27\x6d\xc1\x5c\xf9\x1d\x26\x38\x76\xac\x2e\x0e\x66\x2c\x4a\x8e\x27\x1d\xa7\xd1\x58\x7d\x12\xf8\xbe\xd4\xfc\xcb\xcf\x27\x13\xe8\xfc\x7c\x1f\xdd\x2b\xac\x8f\x7e\x76\x3d\x7b\xa1\xd3\xe3\x18\x7c\xef\x23\x0b\xb3\x41\x3e\x6f\x36\xf0\x3d\xcc\x85\x4e\xef\x54\x81\xe3\x10\x19\x64\x62\x6e\xad\xda\xe8\x02\x35\xdb\x04\x1e\x1e\x6e\xd9\x28\xbd\x79\x7c\x1c\xc5\x7e\x5b\xdc\x13\xe3\xb9\x60\x91\xc0\x43\x4f\x6a\xe2\xc5\x21\xe2\x80\x21\x7d\xda\xdc\x54\xab\xaf\xb8\x75\x5e\x1a\x27\x03\xc4\x1f\x86\xaa\xf2\x2b\x6e\x13\x08\x88\x01\x60\x99\x5e\x8a\xb2\x54\x7a\x93\xc0\x6b\x80\x24\xb0\xd4\xfc\xd6\x07\x6a\x4a\x71\x79\x7e\xd4\xd1\x58\xbb\x25\xf0\x99\x28\x9f\xc1\xeb\xc4\x43\x4b\x83\xa5\x30\x18\xb9\xd2\xb8\x6d\x16\x15\x67\xd1\x67\x32\x86\xea\x7b\x91\x57\x38\x83\x0f\x73\x29\xdd\x21\x70\x26\x3b\xe2\x1c\x39\xf4\xdb\x3c\x2d\x94\x86\x33\x08\xe6\xb1\x65\x32\x62\x83\xf1\xca\x13\xfc\xf6\xa1\xed\xe1\xd8\x03\x7f\x8f\x5c\x8f\x24\xfb\xd6\x8e\x85\x7b\x7d\x1b\xac\x6e\x04\x67\xb3\x5e\xfc\x9f\x3e\x85\xfe\x8b\xa6\x0b\xaf\x56\x9a\x18\x02\x75\xd3\xed\xde\x3c\x34\xde\x34\x96\xa4\xa5\xe0\xe8\x38\x79\xcc\x14\xca\x14\xcd\x66\xb3\x49\x2f\x99\xd2\x50\x49\x16\xd3\x9e\x26\x9c\x75\x02\x1d\x03\x44\xfb\x68\xd5\x7a\x5c\x56\xce\xce\xc6\xa9\x5f\x7b\x79\x3a\x71\xd9\x96\x4a\x0a\xa7\x37\x9c\x25\xbb\x49\x11\xb8\x9c\x38\xdb\x96\xa6\xc9\x5c\x36\x44\xd1\xff\x7f\x0a\xf9\x37\x52\xd8\x2f\xe0\x7e\x8f\xe2\x26\xbc\x2b\x0c\x09\x45\x3d\x9c\xfb\x8d\xb7\xfd\xd8\xdb\x93\x81\x6d\x47\x08\xda\xc7\x51\x54\x4f\x0f\xfa\xeb\x21\xbe\xd5\x06\x3c\x86\x38\x14\x88\xfe\xfa\x18\xbe\x15\x8b\xde\x72\x88\x1e\xd3\x8d\xe1\xbb\xa3\x76\x5d\x0d\x19\xbc\x1a\x5a\x75\x75\x63\xff\x3c\x8a\xdb\xab\x47\x67\x31\x8a\xec\xc8\x48\x77\x35\xc4\xb6\x4a\xd2\x3c\xf4\x00\xfb\x43\xf5\x06\x98\x5b\x1c\x1e\xdf\x39\xbf\x73\x7e\x95\xed\x4d\x21\x3f\x39\xfd\x83\xef\x2c\x38\xe4\x5a\xcc\xbf\xdf\x2d\xaf\xaf\x92\x30\x70\xfd\xc4\xb4\x90\x0a\x16\x90\x93\xb5\xee\x56\x64\xb0\xcc\x85\xdc\x4d\xb4\x96\x6f\x77\x1b\x08\x1d\x52\x20\x0b\x6f\xd5\x5e\x09\x94\x2e\xab\x30\xb2\xb9\x3b\xca\xe3\x41\x2f\xfe\x87\x83\xfe\x20\x94\x7f\x75\xe8\x77\x7d\xa9\x35\xfc\x6f\xf4\x76\xf6\x3a\x38\x2a\x3b\x49\x16\xda\xe9\xf1\xfe\x42\xd6\xdf\x57\x5f\x76\xaa\x78\xfc\xce\x67\x91\x77\xf7\xbe\x69\x5f\xb2\xde\xfe\x46\xc0\xba\x25\xfc\x21\x62\x3f\x44\xac\xfb\xfb\xa7\x22\x36\x09\xff\x6f\x93\xbf\x02\x00\x00\xff\xff\xc9\x94\x18\xca\x7c\x0e\x00\x00"

func epochAdminRecover_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminRecover_epochCdc,
		"epoch/admin/recover_epoch.cdc",
	)
}

func epochAdminRecover_epochCdc() (*asset, error) {
	bytes, err := epochAdminRecover_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/recover_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x79, 0x6d, 0xe3, 0xf2, 0x6a, 0xf, 0xc, 0xd0, 0x1d, 0x46, 0x9, 0x88, 0x36, 0x1d, 0x41, 0x2b, 0x1a, 0xca, 0xd3, 0x36, 0xa2, 0x8, 0xbf, 0x3c, 0x38, 0xf5, 0x45, 0x5b, 0xe5, 0x1b, 0xc6}}
	return a, nil
}

var _epochAdminReset_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x0c\x3e\xa4\x36\x71\x64\x02\xa5\x07\xd3\x36\xa4\x4e\x0a\xa1\x97\x14\xa7\xb9\x94\x1e\x46\xd2\x58\x5a\x2c\xed\x88\x9d\x51\x5c\x53\xf2\xdf\xcb\xee\xfa\x4b\x45\x4d\xa2\x93\x76\xf5\xde\xdb\xb7\xef\x8d\x4c\xd3\xb2\x53\x18\x7d\xad\x79\x73\xdb\x72\x5e\x8d\x92\xd3\xad\xbb\x9b\x07\xcc\x6a\x5a\x2a\xae\x8d\x2d\x47\x49\x32\x9b\xc1\x43\x45\xe0\x48\x48\x03\x1e\xd4\xa1\x15\xcc\xd5\xb0\x05\xb2\x85\x80\x56\x04\x79\xe7\x1c\x59\x05\x0a\x10\x63\xc3\xe6\xe1\x0c\x90\x06\x9d\x42\xce\x56\x1d\xe6\xea\x45\xd1\x16\x90\x51\x69\xac\x00\x82\xa5\xcd\x8e\xb9\x31\x5a\x05\x6e\x69\x9e\xc8\x7a\xc6\xca\x94\x9d\x43\x7f\x5a\x1a\x9c\x1c\xb1\x58\x6f\x70\x2b\x50\xa1\x78\xc1\xe0\x82\x3b\xab\xe4\xf6\x6e\xc2\xd9\x8b\xb8\x77\x7e\x19\xe9\xa7\xee\x85\x6c\x41\x0e\x9a\x4e\x14\x5a\xc7\x4f\xa6\xa0\x20\xe3\xe5\x06\x24\x60\x9c\xd1\x8a\x5d\xc4\x84\x40\x40\x71\x4d\x02\x6d\x8d\x39\x4d\x00\xfd\x55\x04\x57\xa4\x5b\x68\x28\xaf\xd0\x1a\x69\xd2\x64\x36\xf3\x7a\x37\x9d\x33\xb6\x04\x4b\xba\x61\xb7\x06\x69\xd9\xad\x65\x1a\xa4\x32\x66\x15\x75\xd8\xb6\x54\x78\x1f\xca\x39\xd7\x20\x8a\x4a\x60\xc4\x87\x19\x13\x8a\x51\x8e\x07\x2f\x37\x99\xee\x43\x3d\x69\xca\x08\x74\x42\x05\x28\x83\x77\x53\x46\xe7\x31\xbc\x7d\x54\x6f\xa8\x6a\xe5\xb8\x19\xcc\x43\x79\xd0\x0d\x9c\xc3\xe5\x64\x0a\xc2\xa0\x15\x2a\x18\x7d\x27\x5e\x4f\x8c\xa8\x1f\x91\x50\xf1\xbe\xb1\x17\xee\x9e\xc6\xd9\x33\xd2\xef\xac\xe2\xae\x2e\x80\x6d\xbd\x85\x8c\xe2\xfd\x0e\x43\xc3\x9d\xb6\x9d\x02\xaf\xfa\xda\xd0\xa9\xa9\x8d\x6e\xe7\x5e\x11\xc2\x6a\x97\x42\x08\xeb\x42\x7f\x5f\xa0\x2b\x25\x49\x4e\x0e\x1a\xba\xd8\x1c\x7e\xdc\x59\xfd\xf0\x7e\x9a\xc0\xc9\xe3\xd0\x16\xdc\x2c\xb9\x73\x39\xcd\x61\xa9\xbe\xe7\x3e\x42\x14\x9d\x3e\x1a\xda\x0c\x0b\x48\xfc\xd9\x6e\x6d\xf1\x7f\x0c\xf5\x3f\x4e\xe0\x4f\x12\xbe\xb7\x8e\x5a\x74\x34\x16\x53\x5a\x6f\x10\x3b\xad\xc6\x5f\xd8\x39\xde\x3c\x62\xdd\xd1\x04\xce\xae\xf3\xd0\xb5\xa7\xec\xd5\x6a\xda\xfd\xa9\xd7\x45\x63\x2c\x7c\x82\x48\x4f\x45\xd9\x61\x49\x69\x16\x04\x3e\x9e\x1d\xa6\x22\x0d\xc0\xcf\x63\x3f\x0a\xf3\xe3\xb0\xa4\xe8\xb7\x97\x91\x75\x8f\x5a\x4d\x7a\xa6\xaf\xae\xa0\x45\x6b\xf2\xf1\x68\x11\x4a\xb3\xac\x10\xa5\xa1\x22\x74\x9a\x11\x6a\x9c\xae\xdd\xc1\xd0\xa2\x56\xa3\x49\x72\x50\x39\x9a\x4c\x8f\x73\x3d\x5c\xcd\xc0\x66\x3f\xc2\x7f\x9f\x7e\x6f\xa7\xab\x97\x79\xa7\x75\x1e\x5e\x5f\xa7\xf4\x2a\xee\xaf\x5f\x21\x1f\xba\xa7\x37\xc1\x73\xae\x6b\xca\x95\xdd\xa2\xee\x44\xc9\xc9\x1c\x7e\xfe\x7a\x8d\x13\xa1\xdf\x17\x6f\x01\x17\xeb\xf2\xbe\xcb\xbe\xd1\x36\x80\x63\xe5\xcf\xc9\x73\xf2\x37\x00\x00\xff\xff\xa3\xbf\x66\x12\x5b\x06\x00\x00"

func epochAdminReset_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminReset_epochCdc,
		"epoch/admin/reset_epoch.cdc",
	)
}

func epochAdminReset_epochCdc() (*asset, error) {
	bytes, err := epochAdminReset_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/reset_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xaa, 0x1d, 0xce, 0xa6, 0xcf, 0x36, 0xeb, 0xcb, 0xa0, 0x21, 0x1d, 0x9e, 0x5b, 0x19, 0x50, 0xaa, 0xa8, 0x36, 0x9a, 0xea, 0xf5, 0xca, 0x1b, 0xe1, 0x5d, 0x14, 0xfb, 0x9f, 0x2f, 0xbc, 0xd3}}
	return a, nil
}

var _epochAdminSet_automatic_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4e\x84\x40\x0c\x86\xef\x3c\xc5\x1f\x0e\x1b\xb8\xf0\x00\x44\xdd\xb0\x66\x3d\x1b\x4d\xbc\x77\x87\xba\x4c\x32\x4c\x27\xa5\x13\x0e\x66\xdf\xdd\x00\xca\x5e\xb4\xc7\xa6\xdf\xf7\xff\xa9\x1f\x93\xa8\xa1\x7c\x09\x32\x9f\x93\xb8\xa1\x2c\x0a\x53\x8a\x13\x39\xf3\x12\x2b\xca\x26\x23\x99\x77\x6f\x3c\x93\xf6\xd3\x39\xd2\x25\x70\xdf\xe2\x24\x12\x6a\x7c\x15\x00\x90\x94\x13\x29\x57\x93\xbf\x46\xd6\x16\x94\x6d\xa8\x4e\xa2\x2a\xf3\x07\x85\xcc\x35\x0e\x9d\x73\x92\xa3\xfd\x12\xcb\x04\x36\xf0\x12\xd9\xf5\xa3\x8f\x78\xc4\x86\x37\x93\x89\xd2\x95\x9b\xcb\x2a\x78\x38\xec\xd5\x9a\xf5\xf0\xa9\xfa\x54\x19\x5b\xdc\xd7\xb4\xac\xdf\x37\xea\x95\x6c\xa8\xf7\x88\x65\x8e\x47\x24\x8a\xde\x55\xe5\xb3\xe4\xd0\x23\x8a\x61\x53\x63\x05\xb1\xe8\xf0\x13\x8a\x44\x36\x94\x75\xb1\x1b\xee\x05\x9b\x9c\x7a\x32\xee\xfe\x7e\xc8\x7f\x8f\xda\xba\xdc\x8a\xdb\x77\x00\x00\x00\xff\xff\x73\x24\x1e\xc6\x69\x01\x00\x00"

func epochAdminSet_automatic_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminSet_automatic_rewardsCdc,
		"epoch/admin/set_automatic_rewards.cdc",
	)
}

func epochAdminSet_automatic_rewardsCdc() (*asset, error) {
	bytes, err := epochAdminSet_automatic_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/set_automatic_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xc6, 0x6b, 0xa, 0x53, 0xd6, 0x26, 0x7c, 0x52, 0xfc, 0x53, 0xbe, 0x50, 0x8f, 0x59, 0x7a, 0x77, 0x4c, 0xd, 0x4a, 0xe5, 0xd4, 0x99, 0x43, 0x1d, 0xf9, 0xf5, 0x84, 0xd, 0xa9, 0xaa, 0x65}}
	return a, nil
}

var _epochAdminSet_bonus_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\xcb\xdb\x30\x10\x86\x77\xff\x8a\x77\x2a\x0e\x84\x78\x29\x1d\x42\x29\xa4\xd0\x4c\x85\x0e\x49\xe9\x7c\x96\x2f\xb1\xa9\x22\x99\xd3\xc9\xae\x5b\xf2\xdf\x8b\x64\xbb\xa4\xf9\xf8\xe0\xf3\xe0\x41\xf7\xdc\xa3\xf7\x74\x45\x55\x55\x38\xd1\xc0\x01\xe4\x40\x37\x1f\x9d\x42\x3d\x82\x7a\xa1\x2b\x43\x5b\x52\x08\xf7\xc2\x81\x53\xa5\xe5\x05\xca\x8d\xfe\x82\xda\xbb\x18\xa0\xfe\x27\xbb\x30\xd3\x2d\x0d\x8c\x89\xb3\xa6\x66\xd4\x51\x1c\x37\x19\x3f\xb7\x5d\x58\xef\xe8\x02\x42\xac\x55\xc8\x28\x37\xb8\x88\xbf\x65\xb9\x7a\x25\x8b\x10\xfb\xde\x4e\x49\x7f\xfc\xfa\xed\x47\xee\x1d\x5b\x76\x3c\xb0\x80\xe0\x78\x5c\x38\xe1\x91\xa4\x79\x74\x1a\xb2\x26\x5a\x4a\xce\x44\x4f\xe0\xde\x9b\x36\x1b\x6a\x36\x14\x43\x1a\x89\x27\x90\x30\x9c\x57\xdc\x98\xdc\x9a\x94\xd0\x93\x68\xba\xf5\x39\x49\xee\xcf\xbf\x2f\x03\x3b\x8d\x64\xed\xb4\x05\x59\xfb\xff\xf8\x63\x97\x4e\xd6\x91\x41\xae\x79\x78\xb0\x7f\xd5\xdf\x2c\xbe\x28\x54\xc8\x05\x32\xda\x79\x57\x66\xc9\x39\x39\x0e\x19\xdd\xe3\xfb\xb1\xfb\xf5\xe1\xfd\x06\x7f\x0a\x00\xe8\x85\x7b\x12\x2e\x43\x77\x75\x2c\x7b\x50\xd4\xb6\x3c\xcd\x1b\xda\xe0\xdd\xc1\x98\xd4\xb5\xd2\xe9\x9b\xc9\xdd\xb2\xc5\x9d\xf5\xd4\x7c\x9c\x9d\x9f\xca\xf4\xd6\x7b\x54\x4b\xad\x3a\x5a\x3f\x7e\x7e\x0a\xb0\x79\x4d\x14\x68\xe0\x17\x71\xb7\x50\xff\x26\xe1\xbd\xb8\xff\x0d\x00\x00\xff\xff\x6b\x0e\xc9\x02\x70\x02\x00\x00"

func epochAdminSet_bonus_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminSet_bonus_tokensCdc,
		"epoch/admin/set_bonus_tokens.cdc",
	)
}

func epochAdminSet_bonus_tokensCdc() (*asset, error) {
	bytes, err := epochAdminSet_bonus_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/set_bonus_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x59, 0x6d, 0x99, 0x1b, 0x9b, 0xe3, 0x7f, 0xac, 0xcc, 0x5b, 0x8e, 0xfc, 0xda, 0x10, 0xa3, 0xe1, 0x8e, 0x81, 0xf0, 0xde, 0xd9, 0x1e, 0x8c, 0x3c, 0xa0, 0x15, 0x29, 0xfc, 0x2f, 0x7f, 0xc1}}
	return a, nil
}

var _epochAdminUpdate_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x4b\xc4\x40\x10\x85\xfb\xfc\x8a\x47\x8a\x23\x69\x02\x36\x16\x41\x3d\xce\x43\xc1\x46\x04\xd1\x7e\xdc\x8c\x97\xc0\x66\x67\x99\xcc\x92\x42\xee\xbf\xcb\x26\x7a\x81\x9b\xf2\x31\xdf\x7b\x8f\x37\x8c\x51\xd4\x50\x3e\x7b\x99\x9f\xa2\xb8\xbe\x2c\x0a\x53\x0a\x13\x39\x1b\x24\x54\x81\xe7\xd7\x34\x1e\x7d\x9a\x8c\x75\x6a\xf1\xf1\x12\xec\xe6\xb6\xc6\x4f\x01\x00\x51\x39\x92\x72\x35\x0d\xa7\xc0\xda\x82\x92\xf5\xd5\xa3\xa8\xca\xfc\x49\x3e\x71\x8d\xdd\xc1\x39\x49\xc1\x32\xb1\x20\xf9\x3c\x1b\x38\x87\x1d\xba\x71\x08\xb8\xc7\xca\x37\x93\x89\xd2\x89\x9b\xaf\xc5\xe1\x6e\x77\x29\xd5\x2c\x8f\x0f\xd5\xb7\xca\xd8\x62\x93\x29\xcb\xef\x2b\xf5\x46\xd6\xd7\x97\x88\x7c\xfb\x3d\x22\x85\xc1\x55\xe5\x51\x92\xef\x10\xc4\xb0\x5a\x63\x01\x91\xed\xf0\x17\x8a\x48\xd6\x97\xf5\x56\x72\x2b\xd8\xa4\xd8\x91\x71\xde\x41\xbc\x67\x67\xa2\xff\x83\x5c\xed\xb3\xe6\x9f\x8b\xf3\x6f\x00\x00\x00\xff\xff\xe0\x08\x07\x53\x57\x01\x00\x00"

func epochAdminUpdate_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_clustersCdc,
		"epoch/admin/update_clusters.cdc",
	)
}

func epochAdminUpdate_clustersCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x1e, 0xda, 0x2a, 0x27, 0xb1, 0xa4, 0x84, 0x71, 0x6e, 0x5d, 0x91, 0xf3, 0x19, 0xe2, 0x41, 0xd, 0x3d, 0xfa, 0x16, 0xc3, 0xb, 0xde, 0x87, 0xba, 0x41, 0xbf, 0xa0, 0x8a, 0xc, 0x28, 0x62}}
	return a, nil
}

var _epochAdminUpdate_dkg_phase_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3f\x4b\xc4\x40\x10\xc5\xfb\x7c\x8a\x47\x8a\x23\x69\x52\x89\x45\x50\x8f\xf3\x2f\x62\x73\x20\x5e\x3f\x26\xe3\xed\x42\xb2\xb3\xec\xce\x92\x42\xee\xbb\xcb\x26\x9a\xe0\x94\xc3\xbc\xdf\x6f\x78\x76\xf4\x12\x14\xe5\xf3\x20\xd3\x93\x97\xce\x94\x45\xa1\x81\x5c\xa4\x4e\xad\xb8\xca\xf1\x74\x34\x14\xf9\x64\x79\x8a\x2d\x3e\x5e\x9d\x5e\x5f\xd5\xf8\x2e\x00\xc0\x07\xf6\x14\xb8\x8a\xf6\xec\x38\xb4\xa0\xa4\xa6\xba\x97\x10\x64\x3a\xd1\x90\xb8\xc6\xee\xd0\x75\x92\x9c\xfe\x25\xf2\x0c\xac\xe0\xac\x3a\xf4\xa3\x75\xb8\xc5\x12\x6f\xa2\x4a\xa0\x33\x37\x9f\x33\xe0\x66\xb7\xbe\xd4\xcc\x87\x77\xd5\x57\x90\xb1\xc5\xb6\xa6\xbc\x7e\x5f\x52\x47\x52\x53\xaf\x8a\x3c\xfb\x3d\x3c\x39\xdb\x55\xe5\x83\xa4\xa1\x87\x13\xc5\x82\xc6\x1c\x44\xc6\xe1\x57\x0a\x4f\x6a\xca\xba\x58\x09\xdb\x83\x4d\xf2\x3d\x29\x3f\xbe\xbd\x6c\x45\xfc\xaf\x65\xf1\x5e\x8a\xcb\x4f\x00\x00\x00\xff\xff\xd9\x96\x5e\xf9\x4d\x01\x00\x00"

func epochAdminUpdate_dkg_phase_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_dkg_phase_viewsCdc,
		"epoch/admin/update_dkg_phase_views.cdc",
	)
}

func epochAdminUpdate_dkg_phase_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_dkg_phase_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_dkg_phase_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xb0, 0x49, 0x87, 0x99, 0xf6, 0x98, 0x18, 0x63, 0x60, 0xdc, 0xbe, 0x54, 0xd3, 0x6d, 0x96, 0xb3, 0xbb, 0x5, 0x92, 0x7c, 0x36, 0x76, 0xe2, 0xee, 0xb1, 0x9b, 0x37, 0x67, 0xf1, 0xc3, 0x78}}
	return a, nil
}

var _epochAdminUpdate_epoch_configCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x41\x4f\xdc\x3a\x14\x85\xf7\xf3\x2b\xce\x9b\x05\xca\x48\xf3\xc2\xe6\xe9\x2d\x46\x2d\x88\x02\xa5\x88\x96\x22\x41\xe9\xfa\x4e\x72\x93\x58\x24\x76\x64\xdf\x90\x45\xc5\x7f\xaf\x6c\x67\x26\xc9\xa8\x2a\x42\x55\xb3\x98\x85\xc7\xe7\x9c\xeb\xef\xda\x57\x35\xad\xb1\x82\xe5\xc7\xda\xf4\x97\xad\xc9\xaa\xe5\x62\x21\x96\xb4\xa3\x4c\x94\xd1\x49\xfe\x54\xde\x55\xe4\xf8\x33\xeb\x0d\xbe\x5d\x6b\xf9\xff\xbf\x35\x9c\xd0\x93\xd2\xe5\x6c\x8d\xbd\x78\xb2\xb2\xc2\x8f\x05\x00\xb4\x96\x5b\xb2\x9c\x38\x55\x6a\xb6\x1b\x50\x27\x55\xf2\xc1\x58\x6b\xfa\x47\xaa\x3b\x5e\xe1\xe8\x2c\xcb\x4c\xa7\x65\xa7\xf0\x5f\xcd\x12\x1d\xcf\xf2\x46\x69\xbc\x47\x94\xa7\x4e\x8c\xa5\x92\xd3\x6d\x30\x78\x77\xb4\x2f\x3b\x0d\x1b\x4f\x92\xc2\x9a\x66\x83\x71\x99\xfc\xf2\x7d\x54\xdd\x91\x54\xab\x7d\x84\xff\x4e\x4f\xd1\x92\x56\x59\xb2\x3c\x37\x5d\x9d\x43\x1b\x41\xb4\x46\x10\xc2\xdb\x61\x08\x45\x4b\x52\x2d\x57\x8b\xbd\x83\x2a\xf0\xcf\x98\xa4\xdc\x23\xd5\x2a\x0f\xb4\xce\x8d\x2e\x54\xd9\x59\x0a\x0c\x47\x5c\x6b\x4c\x78\x8e\xcc\xa6\x27\x0f\xcc\x62\x4d\xb7\xdc\x23\x78\xe3\x51\x71\xef\xd0\x74\x4e\xb0\x65\x94\x96\x49\xd8\x42\x2a\xd2\x90\x8a\xe1\xba\x06\xa6\xd8\xb5\x05\xa4\x73\x5c\xdc\x5c\x21\x04\xe1\xd9\x6b\x97\xe3\xb9\x5f\xc6\x03\x1c\x1f\x1f\xe3\xa2\x63\x88\x09\x36\x05\x65\xe2\x4d\x07\xf4\x7f\x9e\x3a\x0b\xea\x39\x5a\x75\x6d\x4e\xc2\xc1\x21\xc6\x64\x01\x16\x54\x74\xcd\x8c\xb5\x9c\x09\x8c\xcd\xd9\xa6\x78\xa8\x94\xc3\xb3\x07\x1b\x58\x42\x39\xe4\x46\x33\x8c\x06\x53\x56\xcd\x2c\x66\x71\x31\x26\xc5\x27\xd3\x07\x5f\xdd\x35\x5b\xb6\xbe\xe0\x50\xda\x2e\x2e\xea\x95\xc3\x96\xfd\x21\xa2\x2a\x47\xce\xc2\xb6\x51\x9a\x5d\xd8\x15\x8a\x99\xd9\x2b\x8d\xbe\x52\x59\xe5\x7d\x03\xa7\x6b\x1d\x5a\xb5\x9e\x2c\xdc\x47\x32\x67\x5d\x78\x4a\xeb\x40\x68\xfc\xf7\xe2\xe6\x2a\xa2\xd2\xcc\xb9\x6f\xc1\x96\xf7\xf1\xae\xcb\xaa\xd8\x09\x9f\x3e\x39\x7e\x4b\xce\xb1\x4b\x67\xa5\xfc\x0b\xa5\x33\xcb\xe4\xfc\x01\x0e\xca\xd9\xec\x70\x1f\xac\x63\xcb\x85\xb1\xfc\xe6\x62\x0f\x82\x73\x7e\x43\xf0\x3c\x21\x04\xfc\x0a\xc7\x2b\x95\xcd\x2a\xb8\xfd\xfa\x70\xb9\xc1\x77\x06\x39\xd7\x35\x8c\x8a\x2d\x8f\xdc\xfc\x6d\x6c\x83\x67\xcd\xba\x94\xd0\xe6\xc6\x93\x75\x0d\xd5\xf5\xec\x2a\x0f\x77\x78\xd8\x57\x18\x0b\xaa\x6b\xb4\x46\x58\x8b\xa2\x7a\xb8\x60\xc3\x83\x9e\xf0\x57\xc5\xfe\x11\xe3\x64\x32\x76\x4a\x96\x38\x03\xbe\xb0\x50\x4e\x42\xc9\x2a\x3d\x6c\xc1\xc1\xa3\x1f\xc7\x5d\x1a\xd1\x85\x5d\x41\x91\xec\x07\xc5\xef\x15\x03\xa2\xa8\x19\xa7\xce\x2b\xaa\x1d\xf9\x28\x9b\x0c\xa8\xc9\xcc\x00\xd7\x8e\x5f\x2b\xf8\xaf\xc5\xbf\x1d\xcf\xcb\x22\xfe\xbe\xfc\x0c\x00\x00\xff\xff\x40\x91\xcb\x80\xe0\x06\x00\x00"

func epochAdminUpdate_epoch_configCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_epoch_configCdc,
		"epoch/admin/update_epoch_config.cdc",
	)
}

func epochAdminUpdate_epoch_configCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_epoch_configCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_epoch_config.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x9a, 0x9c, 0x7, 0x8c, 0x4, 0x51, 0x66, 0x62, 0x81, 0xac, 0x96, 0x13, 0x86, 0xe8, 0xae, 0x32, 0x2a, 0x21, 0x48, 0xc5, 0xcb, 0x30, 0x2, 0xb8, 0x7b, 0x5, 0x13, 0xde, 0xfb, 0x13, 0x1d}}
	return a, nil
}

var _epochAdminUpdate_epoch_timing_configCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4f\x4b\xfc\x30\x10\xbd\xf7\x53\x0c\x3d\x2c\x2d\xfc\xe8\xe9\x87\x87\xc5\x75\x59\x8b\x82\x37\xc1\xd5\xfb\x98\xa6\x6d\xa0\xc9\x84\xe9\x84\x3d\xc8\x7e\x77\x49\x63\xb7\xad\xce\x21\x4c\x5e\xf2\xfe\xf0\x8c\xf5\xc4\x02\xf9\xf3\x40\x97\x27\x4f\xaa\xcf\xb3\x4c\x18\xdd\x88\x4a\x0c\xb9\xa2\x09\x8c\x71\xd9\xc3\xfb\x8b\x93\xbb\xff\xff\x80\x75\x5b\x53\x70\xa2\x79\x83\x9d\x8d\xd5\xa3\xa0\xf5\x33\x5a\xc2\x57\x06\x00\xe0\x59\x7b\x64\x5d\x8c\xa6\x73\x91\x83\x41\xfa\xe2\x91\x98\xe9\xf2\x81\x43\xd0\x25\xec\x4e\x4a\x45\xc5\x99\x11\x67\xd0\x02\x3a\xe6\x39\x35\xd6\x38\x38\x40\xa2\x57\xa3\x10\x63\xa7\xab\xcf\x49\xe0\x7e\x77\xcb\x5d\x4d\x1f\x1f\x8a\x96\xc9\xee\x61\x81\x31\xc2\x6f\x89\xf5\x8a\xd2\x97\x37\x8b\x38\xc7\x23\x78\x74\x46\x15\x79\x4d\x61\x68\xc0\x91\x40\x92\x86\x89\x08\x51\x0e\x7e\x4c\xc1\xa3\xf4\x79\x99\x6d\x42\x2a\x72\xad\xe9\xe0\xb0\xb2\x9c\xce\xb3\xb1\xc6\x75\xf5\xf4\xba\x6a\x71\xde\xb6\x3d\x2e\xfb\xef\x2e\xd7\xb7\x25\xfa\xd2\x4c\x15\x7c\x83\xa2\xff\x5a\xa6\x5c\x89\x72\xcd\xae\xdf\x01\x00\x00\xff\xff\xb9\x3c\xa2\x87\xe8\x01\x00\x00"

func epochAdminUpdate_epoch_timing_configCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_epoch_timing_configCdc,
		"epoch/admin/update_epoch_timing_config.cdc",
	)
}

func epochAdminUpdate_epoch_timing_configCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_epoch_timing_configCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_epoch_timing_config.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x2e, 0x71, 0x5e, 0x2c, 0xd1, 0x4f, 0xf0, 0xf6, 0xbe, 0x36, 0xa2, 0xa1, 0x14, 0x7b, 0xf7, 0x8e, 0x5e, 0xad, 0x4a, 0x56, 0x78, 0x41, 0x7e, 0x7b, 0xc1, 0xa6, 0xd3, 0x4e, 0x44, 0x4b, 0xba}}
	return a, nil
}

var _epochAdminUpdate_epoch_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x1e\x96\xf4\xd2\x93\x78\x28\xea\x52\x45\xc1\x9b\x20\xee\x7d\x4c\xc7\x6d\xa0\xcd\x84\x74\x42\x0f\xb2\xff\x5d\x92\x6a\x17\x9c\x53\x18\xf2\xbe\x6f\x78\x6e\x0e\x12\x15\xf5\xcb\x24\xeb\x73\x10\x3b\xd6\x55\xa5\x91\xfc\x42\x56\x9d\x78\xe3\x79\xed\x53\x79\x9e\x1c\xaf\x4b\x87\x8f\x57\xaf\xb7\x37\x0d\xbe\x2b\x00\x08\x91\x03\x45\x36\x8b\x3b\x7b\x8e\x1d\x28\xe9\x68\x1e\x25\x46\x59\x4f\x34\x25\x6e\x70\xe8\xad\x95\xe4\xf5\x2f\x91\x67\x62\x05\x67\x59\x3f\xcc\xce\xe3\x1e\x5b\xbc\x5d\x54\x22\x9d\xb9\xfd\x2c\x80\xbb\xc3\x7e\x54\x5b\x3e\x3e\x98\xaf\x28\x73\x87\xeb\x9a\xf2\xfa\x7d\x4b\xbd\x91\x8e\xcd\xae\xc8\x73\x3c\x22\x90\x77\xd6\xd4\x4f\x92\xa6\x01\x5e\x14\x1b\x1a\x25\x88\x8c\xc3\xaf\x14\x81\x74\xac\x9b\x6a\x27\x5c\x0f\x6c\x53\x18\x48\xb9\x28\x4b\x0b\xff\x5b\xd9\xb4\x97\xea\xf2\x13\x00\x00\xff\xff\x64\x55\x96\x1e\x4e\x01\x00\x00"

func epochAdminUpdate_epoch_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_epoch_viewsCdc,
		"epoch/admin/update_epoch_views.cdc",
	)
}

func epochAdminUpdate_epoch_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_epoch_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_epoch_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x49, 0x8e, 0xed, 0x77, 0xc, 0xc3, 0x7d, 0x2d, 0xc9, 0xaf, 0x46, 0x6c, 0xfb, 0x48, 0xc1, 0x9b, 0xf7, 0x7b, 0x5, 0x3f, 0xa4, 0x9b, 0x4b, 0x9f, 0xe9, 0x79, 0xa7, 0xea, 0xcb, 0x3e, 0xa0}}
	return a, nil
}

var _epochAdminUpdate_rewardCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x43\x0f\x4b\x7b\xe9\x49\x3c\x14\x75\xa9\x62\x41\x10\x2c\x2e\x2a\x1e\xc7\x74\x6c\x03\x6d\x26\x4c\x27\x54\x91\xfd\xef\x92\x56\xbb\xec\x1c\x1f\xf9\xbe\xf7\x88\x1d\x3d\x8b\x42\x5a\x0f\x3c\xdf\x7b\x36\x7d\x9a\x24\x2a\xe8\x26\x34\x6a\xd9\x65\x8e\xe6\x67\x9a\x51\xda\xaa\x79\x2f\xe1\xa5\xb6\x5f\x97\x17\x39\xfc\x24\x00\x00\x5e\xc8\xa3\x50\x36\xd9\xce\x91\x94\x80\x41\xfb\xec\x96\x45\x78\x7e\xc5\x21\x50\x0e\xbb\xca\x18\x0e\x4e\xff\x89\x78\x03\x29\x50\x6c\xaa\xda\xd1\x3a\xb8\x86\x15\x2f\x26\x65\xc1\x8e\x8a\x8f\x45\x70\xb5\xdb\x16\x15\xcb\xc3\x9b\xec\x53\x78\x2c\xe1\x14\x63\x8c\x0f\x2b\xd5\xa0\xf6\xf9\x56\x11\x6f\xbf\x07\x8f\xce\x9a\x2c\xbd\xe3\x30\xb4\xe0\x58\x61\x55\xc3\x02\x42\xd4\xc1\x5f\x29\x78\xd4\x3e\xcd\x93\xcd\x70\x1a\x58\x04\xdf\xa2\x52\xfd\xf8\xf4\x76\x08\xde\x0f\xdf\x0f\xce\x08\xe1\x44\x0d\x89\x21\xa7\xd8\xd1\xd9\x27\xad\x2b\x8e\xc9\xf1\x37\x00\x00\xff\xff\x04\x50\xf8\xdc\x5a\x01\x00\x00"

func epochAdminUpdate_rewardCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_rewardCdc,
		"epoch/admin/update_reward.cdc",
	)
}

func epochAdminUpdate_rewardCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_rewardCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_reward.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x80, 0xb3, 0x40, 0x79, 0x5f, 0xd6, 0x34, 0x24, 0x3d, 0xb9, 0xed, 0xa7, 0x1f, 0x74, 0x2a, 0x60, 0xf6, 0xde, 0x95, 0x8c, 0xef, 0x61, 0x36, 0x34, 0x99, 0xad, 0xe3, 0x6e, 0x8d, 0x83, 0xbb}}
	return a, nil
}

var _epochAdminUpdate_staking_viewsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x4b\xc4\x40\x10\x85\xfb\xfc\x8a\x47\x8a\x23\x69\x52\x89\x45\x50\x8f\x28\x0a\x76\xc2\xe1\xf5\x63\x32\x26\x8b\xc9\xcc\xb2\x99\x25\x85\xdc\x7f\x97\x6c\x34\x07\x4e\x39\xcc\xfb\xbe\xe1\xb9\xc9\x6b\x30\xe4\x2f\xa3\x2e\xcf\x5e\xdb\x21\xcf\x32\x0b\x24\x33\xb5\xe6\x54\x0a\xe1\xe5\x64\xf4\xe5\xa4\x3f\x3b\x5e\xe6\x1a\xef\xaf\x62\xb7\x37\x25\xbe\x33\x00\xf0\x81\x3d\x05\x2e\x66\xd7\x0b\x87\x1a\x14\x6d\x28\x1e\x35\x04\x5d\xce\x34\x46\x2e\x71\x68\xda\x56\xa3\xd8\x5f\x62\x9d\x91\x0d\xbc\xca\x9a\x6e\x72\x82\x7b\x6c\xf1\x6a\x36\x0d\xd4\x73\xf5\x91\x00\x77\x87\xfd\xa9\x2a\x1d\x3e\x14\x9f\x41\xa7\x1a\xd7\x35\xad\xeb\xd3\x96\x7a\x23\x1b\xca\x5d\xb1\xce\xf1\x08\x4f\xe2\xda\x22\x7f\xd2\x38\x76\x10\x35\x6c\x68\xa4\x20\x56\x1c\x7e\xa5\xf0\x64\x43\x5e\x66\x3b\xe1\xfa\x60\x15\x7d\x47\xc6\x4d\x4c\x95\xa4\x1e\xfe\xf7\xb2\x89\x2f\xd9\xe5\x27\x00\x00\xff\xff\x29\x23\x2a\x56\x50\x01\x00\x00"

func epochAdminUpdate_staking_viewsCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochAdminUpdate_staking_viewsCdc,
		"epoch/admin/update_staking_views.cdc",
	)
}

func epochAdminUpdate_staking_viewsCdc() (*asset, error) {
	bytes, err := epochAdminUpdate_staking_viewsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/admin/update_staking_views.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xa3, 0xf, 0xcd, 0x6c, 0xee, 0xc9, 0xf4, 0x57, 0x0, 0x65, 0x90, 0xe1, 0x76, 0x9e, 0x99, 0xcf, 0xcf, 0xd9, 0xc3, 0x6c, 0xf5, 0xe5, 0xab, 0xc9, 0xc2, 0x2d, 0xea, 0xa8, 0x21, 0x8e, 0x59}}
	return a, nil
}

var _epochNodeRegister_dkg_participantCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xdd\x4a\xc3\x40\x10\x85\xef\xf7\x29\x86\x5c\x94\x0d\xd8\x3c\x40\xa9\x16\x31\x5a\xa4\x20\xc5\xfa\x02\xd3\xcd\x34\x59\x9a\xee\x2c\x93\xa9\xbd\x90\xbe\xbb\x24\xa9\x21\x51\x70\xae\x96\x9d\x9f\xf3\x9d\xe3\x4f\x91\x45\x21\x79\xa9\xf9\xf2\x1c\xd9\x55\x89\x19\x7f\xbd\xe6\x1f\xb8\xaf\x69\xa7\x78\xf4\xa1\x9c\xf6\xf2\xcd\x3a\x31\x46\x05\x43\x83\x4e\x3d\x07\x9b\xc2\x97\x31\x00\x00\x51\x28\xa2\x90\x6d\x7c\x19\x48\x16\x80\x67\xad\xec\x4e\x59\xb0\xa4\x14\x66\x8f\xce\xf1\x39\xe8\x30\xde\x56\x4d\x0a\x81\x0b\x7a\xa7\x03\xdc\x43\xbf\x98\x35\xfd\x4a\xb6\x67\x11\xbe\x2c\x67\x7f\x91\xb2\x37\x2e\xba\x37\xc9\x83\x3d\x08\x9f\x16\xf0\xef\xd0\x0d\x62\x8b\x5a\xa5\x83\x76\x5b\xab\x15\x44\x0c\xde\xd9\xe4\x89\xcf\x75\x01\x81\x15\x7a\xd9\x0e\x0b\x84\x0e\x24\x14\x1c\x41\xab\x02\x37\x32\x88\xa8\x55\x92\x4e\x6d\x14\xc7\x72\x8b\xa2\xde\xf9\x88\x41\x61\x39\x87\x21\xdd\xac\x24\xcd\x37\xeb\x51\xdb\x86\x81\x6d\xf1\x13\xc0\xe8\xde\xaf\x20\x1a\xfc\x24\xbb\x9c\x4f\x15\xee\x40\xb9\xb7\x9d\x6f\xd6\xd9\xa8\x31\x31\xdb\x9d\xbc\x9a\xeb\x77\x00\x00\x00\xff\xff\xdd\xd5\x14\x2b\xf2\x01\x00\x00"

func epochNodeRegister_dkg_participantCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_dkg_participantCdc,
		"epoch/node/register_dkg_participant.cdc",
	)
}

func epochNodeRegister_dkg_participantCdc() (*asset, error) {
	bytes, err := epochNodeRegister_dkg_participantCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_dkg_participant.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xce, 0xe8, 0xa7, 0x85, 0xbc, 0x1a, 0x1, 0xe3, 0x86, 0xb5, 0x2a, 0xdc, 0x15, 0x1, 0x1e, 0x4, 0x23, 0x24, 0x71, 0x41, 0xe2, 0x9d, 0x29, 0x3, 0x72, 0x9, 0xea, 0xd, 0x2c, 0xde, 0x11}}
	return a, nil
}

var _epochNodeRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x5f\x8f\xdb\x36\x0c\x7f\xcf\xa7\x20\xee\xe1\xe0\x00\x3e\x07\x1b\x86\x61\x30\x92\x16\x41\xd2\x3b\x04\x29\xb6\xf4\xee\xda\x3e\x0c\x7b\x50\x24\x3a\xd6\xe2\x48\x9e\x44\x2f\x33\x0e\xf9\xee\x83\xfc\x2f\x56\x9d\xa6\x2d\xb6\xb7\xe6\xc1\xb1\x48\xe9\x47\x52\x24\x7f\xb4\x3c\xe4\xda\x10\x2c\x4c\x99\x93\x1e\x35\xab\x9b\xfb\x4c\x1f\x57\xcb\x67\xb6\xcd\xf0\x89\xd8\x5e\xaa\xdd\x8d\xa7\x7b\xd6\x7b\x54\xbe\x68\x91\x15\x96\xd0\xbc\x5b\xf8\xe2\xe5\xfa\xc1\x17\xbc\xc9\x35\x4f\x7b\xa2\x42\xed\xe4\x36\xc3\x06\x71\x34\x99\xc0\x73\x2a\x2d\x90\x61\xca\x32\x4e\x52\x2b\xe0\x06\x19\xa1\x05\x06\x0a\x8f\xa0\xb4\x40\xb0\x64\x0a\x4e\xa0\xb7\x7f\x22\xa7\xfa\x10\xaa\x10\x64\x02\x94\x62\xbd\x45\xba\x03\x5c\x67\x19\x72\xd2\xa6\x92\x85\x9f\x40\x31\xce\x75\xa1\x08\x98\x12\xc0\x84\x70\xe2\x77\x8b\x06\x14\x48\x83\xac\xa0\x57\x43\x50\x65\x51\xd9\xc2\x36\xa0\x92\xbe\x8c\xbb\x5c\x3f\xf8\xc0\xa3\x5e\x84\xc1\x08\x00\x40\x8a\x18\x9e\xc8\x48\xb5\x0b\xab\xb5\xd1\x19\xc6\xf0\x7e\xa5\xe8\x97\x5a\xa0\x90\x8e\xda\xb8\x6c\xcc\x85\x30\x68\xad\xbf\xff\xac\x5e\x63\xe9\xab\x6c\x9d\xc4\x2b\xf2\x8d\xde\xf8\x2a\x76\x70\x21\xc4\xf0\xfe\x5e\xfe\xf3\xf3\x4f\xb5\x2c\x2f\xb6\x99\xe4\x6b\x2c\x6d\x0c\xbf\xd7\x25\x13\xad\xb1\x7c\x2b\x2d\xbd\x51\x64\xca\x3f\x46\x63\x78\x19\x55\x5b\x33\x24\x48\xda\x4a\x79\xc4\x24\x06\x56\x50\x1a\x78\xe9\x8e\x3e\x4a\x4a\x85\x61\xc7\x31\xdc\x76\x55\x15\x7d\x60\x45\x46\x35\x48\x6e\x30\x67\x06\x03\xc6\x39\x35\x00\x4f\xa4\x0d\xdb\x61\x08\x0b\x96\xb3\xad\xcc\x24\x49\xb4\x21\xcc\x85\x58\x63\x39\x86\xdb\x79\x7d\xf5\x9d\x1f\x55\x94\x98\x25\x51\xdf\x19\x98\xb9\x14\x51\x64\x6b\xb0\x68\xab\x8d\xd1\xc7\xe9\x37\x79\xf8\x2a\x48\x8c\x3e\xc4\x30\x69\x40\x26\x9d\x81\x4a\x3d\xee\xac\xbb\xdf\xeb\xd7\x90\x33\x25\x79\x70\xb3\xd0\x45\x26\x40\x69\x82\xda\x28\x18\x4c\xd0\xa0\xe2\xe8\xea\xe2\xfe\xed\x6f\x1f\xa1\x3a\x7f\x33\x3e\xfb\x3f\x99\xc0\x23\xee\xa4\x6b\x2f\xf8\x55\x0b\xec\x14\x32\xb9\x18\xc7\xed\xb0\x7d\x23\x77\xce\xbd\xa3\x69\x1d\xbf\xba\xa9\xb9\xe6\x0d\xa3\x74\x0c\xb3\x19\x28\x99\xf5\x6f\xb4\xcd\xb0\xea\x0e\xc0\xf4\xee\x12\x22\x13\xc2\x81\x3e\x22\xd7\x46\x04\xde\xf9\xb6\xe4\xa5\x08\x07\xf2\xba\xf4\xdd\x73\xa8\xbb\xd0\x05\x03\xd1\xb5\x53\x55\x13\x78\xcb\xe1\xee\x7e\xbf\x9c\xdf\xaf\xed\xab\xfa\xc7\x5b\x0e\x77\x93\xab\x0e\xbb\xd0\x87\x83\x24\x42\x11\xc3\xf4\x6e\x50\x9a\xd1\xb1\xa9\xb8\xa0\x6d\xc0\xfa\xdf\xaf\xa7\xb1\x9f\x0a\xaf\x08\x2c\xfb\x1b\x83\xe9\xdd\x39\x35\x21\x90\xfe\x86\x74\x5f\xcb\xf2\x82\xe5\x6d\xef\xf0\x5e\xff\x75\xb6\xa5\xb5\x05\x4e\x6f\x5f\xae\x1a\xdb\x54\x2c\x72\x7a\x15\x7c\xbd\x4b\x83\x60\x3d\xeb\x15\x2d\xd9\x34\xf0\xfc\x0c\x81\xd1\x17\xa2\xae\x1d\xf1\x2d\x9c\xce\xe1\xb7\xa1\x7f\x9e\x30\xfe\xe7\x46\xfb\x5a\xca\xa8\x26\xd1\x99\x37\x9c\x15\x68\x3c\x83\x9c\x51\xda\xe7\x8e\x36\x88\x95\x4a\x34\xcc\x3e\xe7\x8b\xd3\x56\xd7\xb7\x5a\xc6\x6d\xcc\x91\x14\x3e\x07\x5d\x98\x83\xed\x70\xd5\x66\x30\x14\xeb\x89\x08\x0c\x2c\x72\xad\x04\x33\x65\x37\x16\x13\x6d\x1c\x92\x34\x60\x73\xe4\x32\x91\xbc\x19\x8d\xb6\xcf\x6c\xad\xd7\x91\xa3\x01\xc7\x41\x3f\x00\xb3\xf5\x38\xbc\x44\x45\x07\xc6\x53\xa9\x70\xce\x39\xc1\x0c\x9a\x31\x10\xe4\xac\x44\x13\x57\xc9\xf3\xaf\xd7\xf9\xb0\xc7\x12\xa4\xea\x4d\x35\x78\x19\xf4\x6c\x0f\x36\xda\x63\x69\x1d\xa3\x05\xdd\x89\xd8\x61\x44\xdd\x32\x84\x94\xd9\x74\x9e\xed\xb4\x91\x94\x1e\x6a\xad\x27\x0a\xe1\x88\x72\x97\x52\xad\xaa\xdf\x7d\xc7\x4e\xc3\xd0\xfe\xe2\x1f\x34\x9d\x29\xb6\xfa\x82\x8a\x76\x48\xdd\x27\x57\xa5\xee\x95\x7f\x97\x43\x1f\xba\x1f\xcb\x27\x6c\xd1\x98\x38\x53\x45\x87\x1d\x55\x8a\xcb\x04\x71\x02\xcc\x2c\x5e\x4c\xd6\x8f\xdf\x6b\xb2\xc4\x7e\xb7\x61\x86\x24\x97\x39\x53\x34\xc8\xd9\x72\xfd\xd0\x53\xff\xa7\x9c\xf9\x96\xce\xa9\x5b\xae\x1f\xa2\x9e\xe2\x22\xc3\x9c\x46\xf5\xf3\xf4\x6f\x00\x00\x00\xff\xff\x8b\x82\x50\xbe\x00\x0c\x00\x00"

func epochNodeRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_nodeCdc,
		"epoch/node/register_node.cdc",
	)
}

func epochNodeRegister_nodeCdc() (*asset, error) {
	bytes, err := epochNodeRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0xf0, 0xe7, 0xd0, 0xf2, 0x33, 0x8e, 0x91, 0x2c, 0x57, 0x76, 0xf6, 0xcb, 0x82, 0x15, 0xa5, 0x4d, 0xa1, 0x4b, 0x51, 0x9c, 0xcf, 0x0, 0x4f, 0x64, 0x74, 0x8a, 0x96, 0xd, 0x56, 0xa8, 0x7}}
	return a, nil
}

var _epochNodeRegister_qc_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\xcb\x4e\xeb\x40\x0c\xdd\xcf\x57\x58\x59\x54\x13\xe9\x36\x1f\x50\xf5\x52\xa1\x00\x12\x1b\x04\x14\xb1\x77\x27\xce\x43\xa4\xe3\xc1\x71\xe8\x02\xf5\xdf\x51\x1e\x8c\x1a\x90\xf0\x6a\x34\xc7\x3e\xaf\xe6\x18\x58\x14\x92\xbb\x96\x4f\xb7\x81\x5d\x9d\x98\xcb\xaf\xfb\x9b\x17\x3c\xb4\xb4\x57\x7c\x6b\x7c\xb5\xc4\xf2\xb6\xef\x94\xe4\x29\x4f\x8c\x51\x41\xdf\xa1\xd3\x86\xbd\x4d\xe1\xd3\x18\x00\x80\x20\x14\x50\xc8\x76\x4d\xe5\x49\x36\x80\xbd\xd6\x76\xaf\x2c\x58\x51\x0a\xab\x6b\xe7\xb8\xf7\x1a\xd7\x87\x69\x49\xc1\x73\x41\xcf\x54\xc2\x7f\x98\x0e\xb3\x6e\x3a\xc9\x0e\x2c\xc2\xa7\xed\xea\xb7\xb1\xec\x81\x8b\xf1\x4d\x72\x65\x4b\xe1\xe3\x06\xfe\x5c\x9a\x4d\x3c\xa2\xd6\x69\xd4\x1e\x66\xb7\x83\x80\xbe\x71\x36\xc9\xb9\x6f\x0b\xf0\xac\x30\xc9\x8e\xb6\x40\xa8\x24\x21\xef\x08\x06\x15\x98\x9d\x41\x40\xad\x93\x74\x19\xe3\xdd\xbd\xb2\x92\xc0\x76\x0d\xb1\xdc\xac\x22\x8d\xb5\x8d\xb0\xf5\xd1\xd4\xe6\x3b\xf9\x05\xd1\x8f\x06\x3a\xfc\x20\xbb\x5d\xcf\xd4\xff\x40\x79\x0a\x1a\x39\xb3\x11\x58\xc4\x1b\xb9\xce\xe6\xfc\x15\x00\x00\xff\xff\xc6\xc7\x9b\xeb\xea\x01\x00\x00"

func epochNodeRegister_qc_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochNodeRegister_qc_voterCdc,
		"epoch/node/register_qc_voter.cdc",
	)
}

func epochNodeRegister_qc_voterCdc() (*asset, error) {
	bytes, err := epochNodeRegister_qc_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/node/register_qc_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x56, 0x4d, 0x3e, 0x62, 0x69, 0x8c, 0x0, 0x77, 0xd7, 0x80, 0xe3, 0x1a, 0x63, 0xe5, 0xe3, 0x64, 0x7f, 0xed, 0x92, 0x47, 0x2a, 0x1a, 0x86, 0x3e, 0x85, 0x98, 0x59, 0xfb, 0xd8, 0xdd, 0x73}}
	return a, nil
}

var _epochScriptsGet_bonus_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xeb\xd3\x4b\x4f\x2d\x71\xca\xcf\x2b\x2d\x0e\xc9\xcf\x4e\xcd\x2b\xd6\xd0\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\x19\x28\xe4\x87\x5d\x00\x00\x00"

func epochScriptsGet_bonus_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_bonus_tokensCdc,
		"epoch/scripts/get_bonus_tokens.cdc",
	)
}

func epochScriptsGet_bonus_tokensCdc() (*asset, error) {
	bytes, err := epochScriptsGet_bonus_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_bonus_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0x3b, 0xb9, 0x5, 0x9b, 0xe1, 0x37, 0x18, 0x52, 0xa8, 0xdb, 0x85, 0x33, 0x54, 0x82, 0xd3, 0x45, 0x75, 0xe4, 0xdd, 0x1, 0x1d, 0xea, 0x60, 0x6a, 0xc2, 0xeb, 0x79, 0xbe, 0x1f, 0xd7, 0x16}}
	return a, nil
}

var _epochScriptsGet_config_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x80\xab\xd1\x73\xce\xcf\x4b\xcb\x4c\x57\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x43\x92\x4d\x4f\x2d\x81\x28\xf0\x4d\x2d\x49\x4c\x49\x2c\x49\xd4\xd0\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xfd\xde\x1e\xa0\x6a\x00\x00\x00"

func epochScriptsGet_config_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_config_metadataCdc,
		"epoch/scripts/get_config_metadata.cdc",
	)
}

func epochScriptsGet_config_metadataCdc() (*asset, error) {
	bytes, err := epochScriptsGet_config_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_config_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x75, 0xeb, 0x0, 0xcc, 0x7c, 0xd9, 0xdf, 0x3e, 0xad, 0x41, 0x19, 0xed, 0x82, 0x9, 0xb4, 0x4a, 0xa6, 0x38, 0x32, 0x1a, 0x65, 0x93, 0xb4, 0x35, 0xff, 0x9f, 0x2d, 0x58, 0xb8, 0x43, 0x63}}
	return a, nil
}

var _epochScriptsGet_create_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x31\xca\xc2\x50\x10\x04\xe0\x7e\x4f\x31\xa4\x4a\x9a\x1c\x20\x6d\xfe\x5f\xb0\x14\xcb\x90\x62\x79\xae\x1a\xd8\xbc\x0d\xfb\x36\x88\x88\x77\x17\x24\x88\x76\xc3\x30\xc3\x37\xcd\x8b\x79\xa0\xda\xa9\xdd\xfe\x17\x4b\xd7\x8a\xbe\xab\x5e\xd7\x12\xe2\x87\xbe\x22\xe2\x94\xa4\x94\x9a\x55\x1b\x9c\xd7\x8c\x99\xa7\x5c\xb3\x3b\xdf\x3b\x0c\xc7\xf0\x29\x5f\xc6\xa6\xc3\xf0\xf3\x6b\xb7\x34\xe2\x41\x00\xe0\x12\xab\x67\x7c\xb8\x36\xb9\x70\x48\x6f\xaa\x92\xc2\x7c\x9b\x97\x3a\xdb\x49\xf6\x7f\xa5\xc3\x5b\x68\xe8\x49\xaf\x00\x00\x00\xff\xff\x58\x3d\x97\x79\xab\x00\x00\x00"

func epochScriptsGet_create_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_create_clustersCdc,
		"epoch/scripts/get_create_clusters.cdc",
	)
}

func epochScriptsGet_create_clustersCdc() (*asset, error) {
	bytes, err := epochScriptsGet_create_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_create_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0xcb, 0x50, 0x69, 0xec, 0xe5, 0x8b, 0xcb, 0xf2, 0x9c, 0x32, 0x1b, 0x3, 0xcd, 0xdc, 0xb2, 0x5d, 0x27, 0xb2, 0x4d, 0x10, 0xc9, 0x7b, 0xec, 0xfd, 0x10, 0xe2, 0xc, 0xeb, 0x15, 0x58, 0xf9}}
	return a, nil
}

var _epochScriptsGet_current_viewCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x55\x28\xcb\x4c\x2d\x57\xc8\x4f\x03\xb3\x93\x4b\x8b\x8a\x52\xf3\x4a\x14\x92\x72\xf2\x93\xb3\xb9\xb8\x12\x93\x93\x53\x8b\x8b\x35\x12\x73\x72\x34\x15\xd2\x4a\xf3\x14\x72\x13\x33\xf3\x34\x34\xad\x14\x42\x3d\xf3\x4a\xcc\x4c\x14\xaa\xb9\x14\x14\x14\x14\x72\x52\x4b\x60\xfa\x9c\x40\xda\x14\x6c\x15\xd2\x53\x4b\x9c\x91\x44\x34\x34\xc1\x0a\x8b\xc0\x96\xa2\xa8\xd5\x03\x59\xce\x55\xcb\x05\x08\x00\x00\xff\xff\x31\x43\x70\x8e\x93\x00\x00\x00"

func epochScriptsGet_current_viewCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_current_viewCdc,
		"epoch/scripts/get_current_view.cdc",
	)
}

func epochScriptsGet_current_viewCdc() (*asset, error) {
	bytes, err := epochScriptsGet_current_viewCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_current_view.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x73, 0xd7, 0x7e, 0xbb, 0xc1, 0xf1, 0x48, 0x38, 0xc7, 0x46, 0x64, 0xbd, 0x3, 0x96, 0xc3, 0x96, 0xa1, 0x6c, 0x17, 0x53, 0x1e, 0x2e, 0x17, 0x5e, 0x74, 0x20, 0x69, 0x5, 0x49, 0x81, 0x46}}
	return a, nil
}

var _epochScriptsGet_epoch_counterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\x31\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xeb\xd3\x4b\x2e\x2d\x2a\x4a\xcd\x2b\x01\x73\x9c\xf3\x4b\xf3\x4a\x52\x8b\xb8\x6a\x01\x01\x00\x00\xff\xff\x06\x13\xd8\x48\x5f\x00\x00\x00"

func epochScriptsGet_epoch_counterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_counterCdc,
		"epoch/scripts/get_epoch_counter.cdc",
	)
}

func epochScriptsGet_epoch_counterCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_counterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_counter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x48, 0xa6, 0x3a, 0x1d, 0x4a, 0x1b, 0x75, 0xd6, 0xe4, 0x89, 0x20, 0xd1, 0xf4, 0x35, 0xac, 0x50, 0x61, 0x6a, 0x8e, 0x23, 0x51, 0xf, 0x64, 0x5a, 0xd6, 0xe5, 0xd5, 0x8d, 0xef, 0x66, 0x5f}}
	return a, nil
}

var _epochScriptsGet_epoch_metadataCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x05\x49\x3a\xe7\x97\xe6\x95\xa4\x16\x59\x29\x84\x7a\xe6\x95\x98\x99\x68\x5a\x29\xc0\xf5\xe9\x81\x49\xdf\xd4\x92\xc4\x94\xc4\x92\x44\x85\x6a\x2e\x05\x05\x05\x85\xa2\xd4\x92\xd2\xa2\x3c\x24\x45\xe9\xa9\x25\x28\xea\x50\x8c\xd5\x54\xe4\xaa\x05\x04\x00\x00\xff\xff\xc9\x56\xf5\x66\x90\x00\x00\x00"

func epochScriptsGet_epoch_metadataCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_metadataCdc,
		"epoch/scripts/get_epoch_metadata.cdc",
	)
}

func epochScriptsGet_epoch_metadataCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_metadataCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_metadata.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xfb, 0xbf, 0xb, 0xd5, 0x4a, 0x7c, 0xf9, 0xe8, 0xad, 0x6f, 0xd6, 0xb, 0xd1, 0x24, 0x8f, 0xf5, 0x67, 0x5a, 0x9, 0x81, 0x0, 0x8, 0x5e, 0x66, 0x27, 0xa3, 0x59, 0x8b, 0x8d, 0x1, 0xd2}}
	return a, nil
}

var _epochScriptsGet_epoch_phaseCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\xb1\x50\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\x6b\xd3\x4b\x2e\x2d\x2a\x4a\xcd\x2b\x01\x73\x02\x32\x12\x8b\x53\xf5\x8a\x12\xcb\xc3\x12\x73\x4a\x53\xb9\x6a\x01\x01\x00\x00\xff\xff\xbf\x18\xe6\x2f\x65\x00\x00\x00"

func epochScriptsGet_epoch_phaseCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_phaseCdc,
		"epoch/scripts/get_epoch_phase.cdc",
	)
}

func epochScriptsGet_epoch_phaseCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_phaseCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_phase.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x16, 0x19, 0x6e, 0x63, 0x8b, 0x65, 0xbf, 0x32, 0xe5, 0xec, 0xa1, 0xd1, 0x0, 0x2d, 0x2e, 0xed, 0xb5, 0x6b, 0x1c, 0xeb, 0xb6, 0xe9, 0x9d, 0x1c, 0x7b, 0xb9, 0xe8, 0x6f, 0x69, 0x3e, 0x59}}
	return a, nil
}

var _epochScriptsGet_epoch_timing_configCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x80\xab\xd1\x03\x93\x21\x99\xb9\x99\x79\xe9\xce\xf9\x79\x69\x99\xe9\x0a\xd5\x5c\x0a\x0a\x0a\x0a\x45\xa9\x25\xa5\x45\x79\x48\x0a\xd3\x53\x4b\x30\xd4\x6a\x68\x72\xd5\x02\x02\x00\x00\xff\xff\xa8\xef\xbb\x7f\x77\x00\x00\x00"

func epochScriptsGet_epoch_timing_configCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_epoch_timing_configCdc,
		"epoch/scripts/get_epoch_timing_config.cdc",
	)
}

func epochScriptsGet_epoch_timing_configCdc() (*asset, error) {
	bytes, err := epochScriptsGet_epoch_timing_configCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_epoch_timing_config.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0x95, 0xd3, 0x4a, 0x66, 0x6f, 0x72, 0x76, 0x84, 0xe9, 0xfd, 0xd, 0xab, 0x7e, 0xcf, 0xf3, 0xf7, 0x65, 0xf, 0x47, 0x4d, 0x23, 0x6c, 0x81, 0x51, 0x7d, 0x2, 0x1, 0x8a, 0x45, 0xe1, 0x6}}
	return a, nil
}

var _epochScriptsGet_proposed_counterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\xf5\xcc\x2b\x31\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x80\xeb\xd3\x2b\x28\xca\x2f\xc8\x2f\x4e\x4d\x01\xf3\x9c\xf3\x4b\xf3\x4a\x52\x8b\x34\x34\xb9\x6a\x01\x01\x00\x00\xff\xff\x12\x73\x8a\xae\x62\x00\x00\x00"

func epochScriptsGet_proposed_counterCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_proposed_counterCdc,
		"epoch/scripts/get_proposed_counter.cdc",
	)
}

func epochScriptsGet_proposed_counterCdc() (*asset, error) {
	bytes, err := epochScriptsGet_proposed_counterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_proposed_counter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xd1, 0x77, 0x7, 0x66, 0xbe, 0x79, 0x87, 0xbb, 0x1e, 0x4d, 0x1c, 0xcf, 0x98, 0xce, 0xcf, 0x5c, 0x5b, 0xf5, 0x15, 0x3c, 0xf, 0x1f, 0x3d, 0x19, 0xd9, 0xc3, 0x67, 0xcf, 0x6c, 0x52, 0x94}}
	return a, nil
}

var _epochScriptsGet_randomizeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\x2d\xc8\x4f\xce\x50\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x2c\x2a\x4a\xac\xb4\x52\x88\x0e\x2e\x29\xca\xcc\x4b\x8f\xd5\x44\x30\x15\xaa\xb9\x14\x14\x14\x14\x8a\x52\x4b\x4a\x8b\xf2\x14\xe0\x06\xe9\x15\x25\xe6\xa5\xe4\xe7\x66\x56\xa5\x42\xf4\x6a\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x9c\x88\x96\x27\x6e\x00\x00\x00"

func epochScriptsGet_randomizeCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_randomizeCdc,
		"epoch/scripts/get_randomize.cdc",
	)
}

func epochScriptsGet_randomizeCdc() (*asset, error) {
	bytes, err := epochScriptsGet_randomizeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_randomize.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xdc, 0xb6, 0x3f, 0x62, 0x0, 0xcf, 0x5c, 0x1f, 0x5f, 0xf2, 0x51, 0x1f, 0x5e, 0xac, 0x94, 0x1f, 0x34, 0x68, 0x3a, 0x95, 0x1d, 0x92, 0xa1, 0xdd, 0x73, 0x27, 0x4c, 0x33, 0xcd, 0xd3, 0x4a}}
	return a, nil
}

var _epochScriptsGet_target_end_time_for_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\xaa\x83\x30\x10\x45\xf7\xf9\x8a\x8b\x2b\xb3\x79\xab\x47\x17\x85\x76\x23\x15\xba\xb7\x1f\x10\xd2\xd1\x06\x92\x89\x8c\x09\x5d\x14\xff\xbd\x18\xb5\x98\x45\xb8\x30\xe7\xcc\x65\x5c\x18\xa3\x24\x54\xad\x8f\xef\xdb\x18\xed\xab\x52\xca\x58\x4b\xd3\x54\x1b\xef\x35\xfa\xcc\x08\xc6\x71\x9d\x8c\x0c\x94\x0a\x72\xc6\xe3\xce\xe9\xf4\xaf\xf7\x80\x8f\x02\x80\x51\x68\x4b\xcb\x3b\x08\xb8\x5e\xf0\x2b\xf8\xb3\x59\x84\x78\x9d\x34\x31\x73\x22\x29\xd2\x5c\x7e\x4f\x09\x36\x72\xef\x06\x1c\xa5\x7d\x55\xe7\x82\xe3\xa1\x29\x40\xad\x8b\x21\x94\xb2\xf0\x26\x2d\x60\xb7\x36\xf3\xb3\x73\x81\xda\x28\x45\x3c\x1e\xa0\xd5\xfc\x0d\x00\x00\xff\xff\x3a\xae\x44\x03\xf8\x00\x00\x00"

func epochScriptsGet_target_end_time_for_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_epochScriptsGet_target_end_time_for_epochCdc,
		"epoch/scripts/get_target_end_time_for_epoch.cdc",
	)
}

func epochScriptsGet_target_end_time_for_epochCdc() (*asset, error) {
	bytes, err := epochScriptsGet_target_end_time_for_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "epoch/scripts/get_target_end_time_for_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0xcc, 0xe2, 0x3, 0xcd, 0xfc, 0xf5, 0xfe, 0x3f, 0x18, 0xc2, 0xfb, 0xdc, 0x70, 0x98, 0xd0, 0xab, 0xc9, 0x3a, 0x89, 0xec, 0x93, 0x83, 0x17, 0xc3, 0x96, 0x76, 0xc7, 0x5d, 0xbd, 0x29, 0x3d}}
	return a, nil
}

var _flowtokenBurn_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x8e\x9c\x3a\x10\xbc\xf3\x15\xf5\x38\xac\xe0\xb0\x70\x79\xca\x61\x34\xc9\x26\x7b\xd8\x0f\x88\x36\x9b\x73\x03\xcd\xe0\x04\x6c\x64\xb7\xc3\x26\xa3\xfd\xf7\xc8\x36\x30\x33\x91\x12\x5f\x46\xe3\x76\x57\x55\x57\x17\x75\x8d\xe7\x41\x39\x88\x25\xed\xa8\x15\x65\x34\x94\x03\x41\x78\x9a\x47\x12\x46\x6f\x6c\xf8\x7b\x55\x97\x81\x24\xab\x6b\xb4\xc6\x8f\x1d\x1a\x86\x77\xdc\xa1\xf9\x09\x19\x18\xd4\x4d\x4a\x83\xda\xd6\x78\x2d\x10\x83\xc6\x5b\x0d\x31\xdf\x59\xbb\xd0\xd4\x5b\x33\x85\x87\xca\xc2\x89\xb1\xdc\xe1\x85\xfc\x18\xf0\xb2\xa8\x85\x63\x83\xd2\x27\xd0\x14\x21\x96\x8d\x85\x30\x93\xa5\x89\x85\x6d\xc0\x0d\x64\x57\xaa\xb2\x4c\x4d\xb3\xb1\x82\xfc\xc9\xeb\x93\x6a\x46\x7e\x0e\x9c\xf9\xe5\x7a\x34\xcb\x1f\x57\x8f\xde\x6a\xb6\x79\x96\x5d\xe1\x14\x89\xf6\x80\x2f\x4f\xea\xf5\xdd\xff\x25\xce\x59\x06\x00\x75\x9d\x84\xc2\xb2\x33\xde\xb6\x1c\x6d\xc0\x60\xc6\xce\x25\x2d\x71\xc4\x74\x4b\x96\xd1\x70\x18\x22\x0c\xc3\x5d\x44\x18\x59\xf0\x23\x40\x1c\xf0\xf1\x7c\x23\xb2\x8a\xc8\x6f\x89\x68\xb6\x3c\x93\xe5\xc2\xa9\x93\x66\x7b\x00\x79\x19\x8a\x47\x63\xad\x59\x5e\x68\xf4\x5c\xe2\xee\x53\x72\x77\xd7\xb6\xea\xfb\xaa\x64\xe8\x2c\x2d\x9b\x94\xcd\xea\x75\x27\x91\x1b\x4a\x47\xdf\xe9\xc4\x7b\xeb\x2e\xec\x33\xf7\x78\x8f\x44\x5c\xad\xaf\xaa\x26\x52\x1f\xa3\x8c\x5b\xd5\x1b\x5f\x89\xbb\xdd\xdc\x34\xca\x87\x22\x70\x1f\x50\xaf\x20\x75\xbf\xd5\x63\xb9\xdc\xa9\xc3\x79\x78\xc0\x4c\x5a\xb5\x45\x1e\xb6\x9f\xd8\xd1\x19\x76\xd0\x46\x52\x48\x40\xd8\x19\xd6\x35\x98\xe6\x1b\xb7\x02\x92\x38\xe1\x4c\x32\x20\xbf\x81\xdd\x4e\xd5\x1a\xdd\x92\x14\xf9\x5f\xc4\x54\xc8\xcb\x7f\x37\x5e\xc9\x9a\xbc\x0b\x16\x2a\x51\x34\xaa\x5f\xbc\x06\x79\x4b\xfb\xa2\x64\x80\x84\xcf\x29\x79\xdd\x2b\xeb\xe4\xbf\xbc\x2c\x2f\x6b\x72\x3c\xf6\x55\xaa\x1e\xef\x77\xd7\xab\x65\xb5\x72\x4f\x5f\xfa\x4d\xc2\xd6\x60\xf0\x2b\xb7\x5e\x18\xe7\x1d\x2c\xe5\xb7\x0a\x19\x2b\x8e\xf7\x17\xe8\xad\xed\x2d\xc3\xef\x00\x00\x00\xff\xff\xce\xa0\xe6\xb2\xe0\x03\x00\x00"

func flowtokenBurn_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenBurn_tokensCdc,
		"flowToken/burn_tokens.cdc",
	)
}

func flowtokenBurn_tokensCdc() (*asset, error) {
	bytes, err := flowtokenBurn_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/burn_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x62, 0x47, 0x9, 0x14, 0x56, 0x72, 0xbd, 0x54, 0xd3, 0x5d, 0x57, 0x84, 0x9a, 0xf1, 0x1f, 0x11, 0xa3, 0x34, 0xb5, 0xe4, 0x8f, 0xb2, 0xd1, 0x99, 0x1a, 0x20, 0x64, 0x20, 0x4c, 0x7b, 0xf1}}
	return a, nil
}

var _flowtokenCreate_forwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x6e\x23\x37\x13\xbc\xf3\x29\x0a\x3e\xec\x27\x1b\xf2\x08\x5f\x7e\x2e\x82\x37\xc0\xc6\x81\x81\x5c\x72\xd8\x18\x7b\xcd\xb6\xc8\x1e\x91\xd9\x11\x39\x20\x7b\x34\x10\x16\x7e\xf7\x80\xe4\x68\x34\x72\x60\x9f\xa2\x93\x87\xec\xae\xae\xaa\x2e\x7a\x73\x77\xa7\xd4\xb3\x75\x09\x12\xc9\x27\xd2\xe2\x82\x87\x4b\x20\x08\x1f\xfa\x8e\x84\xd1\x86\x98\x3f\x17\xf7\x62\x49\xa0\xc3\xd0\x19\xec\x18\x43\x62\xa3\x24\x20\xb1\x60\xe8\x41\x1e\xa4\x75\x18\xbc\x40\x42\x6e\x1e\x29\x1a\x18\xee\x43\x72\xc2\x06\x12\xbe\xb1\x4f\xf9\x8e\x7c\x10\xcb\x11\x91\x35\xbb\x23\xc7\x46\xa9\xdf\x5b\x90\x3f\x05\xcf\x48\xec\x4d\x5a\x16\xe7\x39\xf1\x7f\x09\x4f\x15\x91\x23\x3e\x4f\x7d\x6b\x25\x96\xe7\x2f\x8c\xae\xeb\xf0\xf7\x90\x64\x1e\x2e\x36\x24\x5e\x60\xe5\xf2\x2f\x34\x74\x52\x95\x58\x4a\xd8\x31\x7b\x95\x15\x50\x2a\xd7\x91\xb5\xeb\x1d\x7b\x01\x79\x03\x3e\xb8\xfc\x07\xf8\x98\x4f\x4a\x93\xf3\xc6\x69\x12\x4e\x6a\xb4\x4e\xdb\xc2\xee\x3c\x30\xab\xb4\xe7\x81\xcd\x64\xf0\x48\xa7\x35\x5c\xd6\x87\xd0\xb6\xf7\xda\x92\xf3\x48\x1c\x8f\x4e\x33\x46\xf2\x52\xa8\x1d\x82\x77\x12\x22\x46\x1b\xf2\x1a\x26\x40\xe7\xf7\xea\x42\xdf\xc9\x1a\x4e\xa0\xc9\x63\x24\xd1\xb6\xd2\x2a\x57\x89\x19\xa3\xe5\xc8\x0b\x02\xd0\x74\x60\xb4\x31\x1c\x1a\xa5\xfe\x14\xee\xa7\xca\xba\xad\xba\xaa\x84\xd1\x89\xad\x0d\xb3\x8a\xb8\x55\xea\xff\x0d\x9e\x2d\xe3\x69\xf0\x7b\xb7\xeb\x18\xcf\xa5\x42\x07\x2f\x91\x74\x76\x41\x38\xb6\xa4\x19\xc9\x96\x3c\x50\x17\x99\xcc\x29\xe7\xc2\x70\xdf\x85\x13\x1b\xa4\x70\xe0\x42\x4a\xfd\x50\xd1\xa8\xef\x3b\xa7\x29\xe3\xc9\x35\xde\x84\xb2\xe8\x6e\xd4\x8f\xb5\x69\xb1\x91\x29\x5e\x53\xb1\xa5\x23\x83\xa6\x85\xe6\xb0\x4a\xc9\x73\x05\x8e\x4c\xc2\x46\x01\x28\x8b\x4c\x12\x22\x1b\x38\x0f\x27\xa9\x7c\xd1\x9e\xab\x76\x42\x3f\xec\x3a\x97\x2c\x9b\x39\x4b\xea\xa7\x06\xbf\x15\x22\xc5\xcf\xaf\x45\xfd\xd3\xbc\x93\x46\x1b\xfd\xf5\x42\xbe\xa4\xd4\xb8\xb6\xe5\xb8\xa0\xa9\x7e\x6e\x72\x66\x41\xf0\x3c\xe2\x53\x3d\xdc\xe2\xb1\x30\x2b\xb0\x67\x3d\x3e\xc4\x03\x75\xdd\x69\x5d\xe8\x8a\x65\x8f\x38\xf8\x3a\xb9\x0a\xf9\x6b\x5e\x4d\x1d\xbd\x78\x94\xb5\x69\xcf\x22\xce\xef\x71\xf5\x20\xf2\xea\xaf\x06\xd5\x00\xbf\x0a\x7a\xa3\xee\x36\x4a\xb9\x43\x1f\xa2\xe0\xe6\xbc\xf0\xa2\xf8\xe6\x72\xdc\x85\xf1\xd5\xd1\x2b\x4f\x6e\x94\x5a\xb0\x5a\x9d\xdf\xf6\x16\x9f\x8c\x89\x9c\xd2\x2d\xbe\xab\x42\xb5\x8f\xdc\x53\xe4\x15\x69\x2d\x5b\xd0\x20\x76\xf5\x6b\x88\x31\x8c\x5f\xa8\x1b\x78\x8d\x47\xea\x69\xe7\x3a\x27\x8e\xd3\x2d\x3e\x4c\xc6\xe5\x76\x4c\xbf\x8e\x65\x91\x8a\x8f\x59\xfc\x54\x35\x8f\xbd\x9d\x8b\xf3\xaf\xd1\x0b\xcc\x66\xcf\xf2\xf0\xe1\xfb\x95\xd0\xe6\xec\xd9\xcb\x2f\xab\x4d\x89\x83\xde\xb4\x67\xc9\x9f\x67\xcc\x2b\x06\xc7\x92\xbb\x87\x7b\xfc\x2b\x1c\x65\x65\x7f\xf0\x38\xff\xc7\x5a\xcd\x6c\xb7\x17\xe2\x17\x8a\xd9\x89\x66\xca\x64\x93\xe8\xc8\xab\x87\xfb\x82\xbe\x86\x84\x2d\x36\xd3\xd5\x85\xd1\x0c\xfc\x8a\x92\xa6\x1e\x1f\x2b\xdc\x7f\xa3\x78\x61\xba\x6b\x33\x7c\xa3\x2d\xeb\x6f\xab\xe5\xc5\xac\xe0\x6a\xe4\xe0\xa7\x57\xf5\x9e\x9f\xe7\xf6\x97\x6b\x19\x73\xd8\x1f\xdf\xd0\x73\xf6\xca\xa5\x34\xf0\xbb\xca\xde\xb3\xee\x6d\xf2\x13\xf5\xf7\x90\xaf\xe4\x2f\x09\xaf\xaf\x8d\x91\x2d\xde\x34\x60\xae\xac\x5c\x5e\xd4\x8b\xfa\x27\x00\x00\xff\xff\x5c\xa7\x72\x22\x98\x07\x00\x00"

func flowtokenCreate_forwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenCreate_forwarderCdc,
		"flowToken/create_forwarder.cdc",
	)
}

func flowtokenCreate_forwarderCdc() (*asset, error) {
	bytes, err := flowtokenCreate_forwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/create_forwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xf4, 0x1, 0xf7, 0x6c, 0xc1, 0xed, 0xef, 0xac, 0x27, 0x13, 0x63, 0xf2, 0x10, 0x14, 0x8d, 0xc, 0x52, 0xf7, 0xb6, 0xd, 0x42, 0xcd, 0xec, 0x23, 0xa6, 0xc6, 0x82, 0xec, 0xcf, 0x34, 0xd1}}
	return a, nil
}

var _flowtokenMint_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4f\x4f\x23\x3f\x0c\xbd\xf7\x53\x58\x73\x40\x33\xd2\x8f\xe9\xe5\xa7\x3d\x54\x05\xd4\x5d\x89\x1b\x7b\x00\x96\xbb\x9b\x71\x5b\x8b\x69\x12\x39\x0e\x05\x21\xbe\xfb\x2a\x99\x3f\x6d\x61\x87\x5e\x2a\x39\xce\xf3\xf3\x7b\x79\xc3\x7b\xef\x44\xa1\xb8\x8d\x76\xcb\xeb\x96\x1e\xdd\x33\xd9\x62\x36\x96\x5b\x77\xe8\x4b\xb3\xf9\x7c\x0e\x8f\x3b\x0e\xa0\x82\x36\xa0\x51\x76\x16\xf6\x6c\x35\x80\xa6\x96\x00\x31\xb0\xdd\x82\xee\x08\xd0\x18\x17\xad\x82\xee\x50\x21\xa8\x13\x0a\xb9\x9e\xf0\x20\x03\xc2\xaa\xd9\xb3\x05\xa1\xe0\xa2\x18\x3a\xa2\x73\xd7\x19\x48\x5e\xd8\x8c\x48\xb3\xd9\xc9\xd4\x52\xc8\xb0\x67\xb2\xba\x80\x55\xd3\x08\x85\xf0\x1f\xe0\x3e\xf5\x2d\xe0\xcf\x2d\xbf\xfe\xf8\xbf\x82\xf7\xd9\x0c\x00\xa0\x25\xed\xe8\xe5\x79\x0b\xb8\x18\x57\xaa\x73\x85\x83\x0a\xaa\x93\xf3\xe6\x7b\x32\xc4\x2f\x24\x0b\xb8\x78\x3f\x93\xa6\x1e\x4e\x3e\x3a\x78\x2f\xe4\x51\xa8\x0c\xbc\xb5\xa9\x1d\xa3\xee\xca\x9f\x4e\xc4\x1d\x9e\xb0\x8d\x54\xc1\xc5\xaa\xdb\x60\x64\x94\x7e\x81\xda\x4d\x7d\xa4\x05\x57\xd0\x01\xd4\x49\x2b\xdc\xd2\xd8\x98\x7e\xf5\x3a\xe3\x2d\xa7\xa8\x5f\x97\x1b\x71\xfb\x05\xcc\xfb\xcb\xf3\xcd\xd0\x97\xdb\xaa\x33\xb0\x9b\x1b\xf0\x68\xd9\x94\xc5\x2f\xb4\xd6\x69\x76\x70\x01\x0f\x79\x3c\x34\x8e\x02\xa4\x6a\xf6\x6c\xb4\xec\xd4\xb1\xfb\xde\x31\x60\x9b\xce\x59\x06\x8b\x8a\xb3\x39\x99\xb8\x71\xd6\xa0\x96\x05\xa0\x66\x2c\x8f\xba\x9b\xa2\x59\x17\x55\xf5\x2f\x81\x06\xc1\xe1\x0a\xb6\xa4\xbd\x98\xc7\x17\x70\xbe\x5d\x6d\xd0\xe3\x9a\x5b\x56\xa6\x30\xea\x36\x65\xe1\x75\x39\xf7\x71\xdd\xb2\x39\x52\x19\xce\x26\x45\x73\xb1\x6d\xb2\x42\x1d\x38\x20\x8c\x04\x85\x36\x24\x64\x0d\x81\xba\x4f\xd2\x3d\x61\x6c\x35\x29\x36\x04\x63\x5a\xac\x71\xb3\x5a\xdd\x83\x0a\xdb\x6d\x59\x55\x67\x4a\x76\x2a\x4e\x31\x2f\xaa\x69\x1f\x6a\xb8\xc3\x67\x82\x10\x85\xe0\xcd\x45\x40\x49\x41\xb3\x4d\x8e\xad\x03\xb4\x80\x5d\x9c\xba\xe0\xee\x30\xc0\x77\x70\xf8\x65\xc3\x40\x0a\xd1\x83\x17\xe7\x49\xda\xb7\xc1\xf7\xe0\xc9\xf0\x86\xa9\xc9\xdc\xb3\xd3\x09\xa8\xcf\x10\xbd\x92\x89\x4a\xf0\x3e\x4e\x4a\x39\x4c\xef\x92\x04\x96\x97\x9f\xc3\x52\x1b\x21\x54\xfa\x4d\x87\xbb\xdc\x52\x62\xdb\xba\x03\x35\xab\xfe\x03\xd0\x7d\x08\xaa\xaf\x60\x4d\xc7\x71\x79\xd9\x63\xd7\xe9\x2f\xb3\x0f\x25\x7e\xba\xfc\xcd\x43\xac\x1b\xf2\x2e\xb0\xf6\xa9\x5b\x5e\x9e\x80\x9f\x5c\x6c\x28\xa8\xb8\xb7\x7e\x56\xbf\xef\xc7\xdf\x00\x00\x00\xff\xff\xa8\xcd\xe9\x66\x70\x05\x00\x00"

func flowtokenMint_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenMint_tokensCdc,
		"flowToken/mint_tokens.cdc",
	)
}

func flowtokenMint_tokensCdc() (*asset, error) {
	bytes, err := flowtokenMint_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/mint_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x9b, 0x37, 0xf6, 0x43, 0x48, 0x6d, 0xdd, 0xf8, 0xe5, 0xd6, 0xb3, 0x28, 0x2b, 0x88, 0x43, 0xda, 0x87, 0x2d, 0x37, 0xef, 0x55, 0xf, 0xe1, 0x89, 0x8d, 0xab, 0x3e, 0xc2, 0x63, 0xf9, 0xa3}}
	return a, nil
}

var _flowtokenScriptsGet_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xb1\x8e\xd4\x30\x10\x86\xfb\x3c\xc5\x2f\x17\x10\x37\xd9\x06\x51\x9c\x80\xd3\x81\xb4\x1d\x0d\x1c\xf4\x13\x67\xb2\x19\x9d\xcf\x36\xf6\x98\x63\x85\x78\x77\x94\x64\x37\x29\xd0\x92\x2a\xca\xcc\x7c\xf9\xe7\x9b\xc3\x01\x8f\x93\x14\x14\x97\x25\x29\x32\xd3\x50\xa0\x13\xa3\x27\x4f\xc1\x31\x46\x61\x3f\x20\x8e\xa0\x00\x72\x2e\xd6\xa0\xaf\x0b\x8e\x3e\xbe\x3c\xc6\x27\x0e\xf8\xb8\xf6\x35\x8d\x3c\xa7\x98\x15\xe6\x58\xc3\x49\x7a\xcf\x4b\xd9\xec\x9f\xaf\x13\xa6\x69\xc8\x39\x2e\xa5\x25\xef\x2d\xc6\x1a\xf0\x4c\x12\xda\x0b\xfc\x0e\x0f\xc3\x90\xb9\x14\x7b\x87\x6f\x47\xf9\xf5\xf6\x0d\x7e\x37\x0d\x00\x78\x56\xfc\xa4\xea\xf5\x0b\x8f\x78\x8f\x13\xeb\xc3\x3a\x72\x1d\xb5\x4b\xdb\xfc\x74\x8e\x12\xf5\xe2\x45\x85\x4b\xd7\xc7\x9c\xe3\xcb\xbb\x57\x5b\x84\xee\xfb\x8c\xf9\xd0\x1e\x52\xed\xbd\xb8\xc3\x78\x2d\x5c\x96\xd9\x41\xf7\xf7\x48\x14\xc4\xb5\xe6\x53\xac\x7e\x40\x88\x8a\x15\x07\xda\x14\x65\x1e\x39\xf3\xfc\xa6\x71\x71\xb7\xdb\x59\x7e\x04\xd9\xd4\xc1\x6c\xe8\x3d\x6b\x0c\x8e\xb6\x25\x3a\x8d\x5f\x35\x4b\x38\xb5\xd6\x5e\x4b\x06\xa4\x48\xa4\x13\x6e\x25\xee\x60\xec\x4d\xb2\xf9\x4c\x4f\x8c\x52\x33\xe3\x1c\x2b\x28\x33\x7e\x54\xce\x67\x09\xa7\xe5\xaa\xab\x6f\xe8\x44\x8a\x89\xca\x7f\x51\xf4\xcf\x72\x85\x15\x35\x21\xe5\x98\x38\xfb\xf3\x1c\x75\x76\x50\x12\x3b\x19\x85\x87\x25\x78\x67\xac\x5d\xaf\x98\x59\x6b\x0e\xdb\x21\xbb\x8b\xc4\xe6\x4f\xf3\x37\x00\x00\xff\xff\x2c\xff\x7a\x01\x8b\x02\x00\x00"

func flowtokenScriptsGet_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenScriptsGet_balanceCdc,
		"flowToken/scripts/get_balance.cdc",
	)
}

func flowtokenScriptsGet_balanceCdc() (*asset, error) {
	bytes, err := flowtokenScriptsGet_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/scripts/get_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x57, 0x90, 0xd3, 0xa4, 0x13, 0xab, 0xee, 0xc0, 0x72, 0x48, 0xb, 0xe, 0xcb, 0x1f, 0x4e, 0xfe, 0xfe, 0x3c, 0xce, 0x58, 0x9a, 0x17, 0x6a, 0xd4, 0xb8, 0x1f, 0x5e, 0x22, 0x49, 0x3d, 0xa2}}
	return a, nil
}

var _flowtokenScriptsGet_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\x3d\xca\xc3\x30\x0c\xc6\xf1\x5d\xa7\x78\xc8\x94\x2c\xaf\x97\x97\x0e\x85\xae\xb9\x40\xd3\x03\x18\xc7\x21\xa6\x8a\x6d\x24\x85\xb6\x94\xde\xbd\x90\x7e\xad\xd2\x0f\xfe\x8f\x73\x18\xe6\xa4\xd0\x20\xa9\x1a\x24\xfa\x51\x61\x73\x84\x15\xf3\x0c\x5d\x6b\xe5\x1b\xa6\x14\x79\x24\xe7\x50\xa6\xed\xd9\x73\xb9\x0c\xe5\x1c\x33\x74\xf1\x62\x08\x25\x9b\xf8\x60\x44\x69\xa9\x45\x0c\xcd\x57\x34\x44\x3e\x84\xa8\xda\x7a\xe6\x0e\xd3\x9a\xb1\xf8\x94\xdb\x6e\x8f\x53\x9f\xae\xbb\x7f\xdc\x89\x00\x80\xa3\x7d\x72\x87\x5f\xe0\x6f\xdb\x71\xdc\xee\x2f\x27\xd1\x56\xc9\x6f\x4a\x8f\x67\x00\x00\x00\xff\xff\x9c\x6f\xa6\xf1\xc1\x00\x00\x00"

func flowtokenScriptsGet_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenScriptsGet_supplyCdc,
		"flowToken/scripts/get_supply.cdc",
	)
}

func flowtokenScriptsGet_supplyCdc() (*asset, error) {
	bytes, err := flowtokenScriptsGet_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/scripts/get_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xb8, 0x7e, 0x53, 0x6a, 0xa6, 0x88, 0x9e, 0xf8, 0x4c, 0x7f, 0xdb, 0xe9, 0xcb, 0xbe, 0x56, 0xf9, 0xb7, 0xde, 0x1b, 0x55, 0x9b, 0x64, 0x76, 0xa2, 0x6a, 0x75, 0x28, 0x57, 0x23, 0xdd, 0xdf}}
	return a, nil
}

var _flowtokenSetup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x51\xcb\x8e\x1a\x3b\x10\xdd\xfb\x2b\x8e\x66\x31\x02\x69\x2e\xbd\x47\x70\x95\x04\x25\x1f\x90\xa0\xec\x0b\x53\x4d\x5b\x31\xb6\x65\x97\x21\x68\x34\xff\x1e\xb9\x1f\xf4\xf0\x8a\xb2\xc8\x26\xbd\xb0\xda\xae\xaa\x53\xe7\xa1\xaa\x0a\xeb\xc6\x24\x48\x24\x97\x48\x8b\xf1\x0e\x26\x81\x20\xbc\x0f\x96\x84\x51\xfb\x58\xae\x63\xbd\xcc\x88\x07\x6d\xb7\x20\x7c\xa7\x6c\x05\x91\x93\xcf\x51\x73\x79\x97\x86\x4d\x04\x69\xed\xb3\x93\xd2\x9b\xca\x1b\x49\x29\x9c\xa0\xc9\x21\x27\x2e\x17\xd4\xd6\x1f\xd7\xfe\x07\x3b\xa5\xcc\x3e\xf8\x28\x78\xfa\x92\xdd\xce\x6c\x2c\xb7\xcf\x4f\xe3\xf3\xd0\xf9\xa4\xd4\x7b\xa6\xaf\x4a\x01\x40\x88\x1c\x28\xf2\x24\x99\x9d\xe3\x38\x07\x65\x69\x26\x2b\x0a\xb4\x31\xd6\x88\xe1\xf4\x82\x6f\xe2\x23\xed\x78\x8a\xe7\x8f\x1d\xb3\xe9\x30\x5c\x3e\x53\xa3\x9b\x9d\xa5\xae\x6f\xb6\xf1\x31\xfa\xe3\xe2\xf9\xbc\x79\xd6\x2a\xfd\x7f\x52\x47\xbf\x9f\xa3\xea\xfb\xaa\xb3\x86\xb6\x3c\xc5\x72\x09\x67\x2c\x5e\xcf\xd0\xe5\xab\x2a\xac\x22\x17\x33\x09\x8e\x8f\xa3\xf0\xde\x3e\x72\x5b\x84\x2c\x30\x02\xe3\xd0\x43\x5f\x20\x5c\xb1\x4b\x74\xe0\xc9\xe2\xbf\x91\x9c\x6e\xe1\x3f\xef\x83\x9c\x5a\xc8\xc9\xa1\x9c\xeb\x53\xe0\x39\xca\xb9\xf8\x70\x23\x64\x3a\x7d\x81\xf8\xc7\x52\xd4\x43\x09\x21\x6f\xac\xd1\xd0\x83\xc1\xa7\x3e\xf6\x5e\x4d\x1b\xb6\x77\xf6\x04\xfe\x19\x7c\xe2\x74\x0d\x54\x5a\xb7\x1c\x7c\x32\x82\x3a\xbb\x2e\x4a\x69\xa2\xcf\xbb\xa6\x2d\x7e\x65\xcd\xe6\xc0\x11\xc6\x09\xc7\x9a\xf4\xa5\x19\x96\x05\xad\xbe\x15\x05\x2c\x07\x6f\xf4\xbb\xbc\xcf\x46\x99\x94\x32\xdf\x49\xf1\x02\xaf\xa5\x75\xdf\x85\x8b\xbe\x2b\x4b\xee\xed\x6d\xad\x49\xcd\x2d\xfe\xc0\xf7\xe5\xa6\x42\x32\x47\xd5\x59\x3a\x2e\x1f\x1c\xf8\xdd\xfe\xbf\x1d\xc9\x86\x2c\x39\xcd\xa8\x0d\xdb\xed\x45\x1e\x9f\xfa\xca\xe3\x38\xfa\xd9\x7f\x28\x90\x91\xf1\x1f\x46\xd2\x9b\x70\x45\x60\xf8\x7b\x53\xdd\xf9\xa6\xa0\x7e\x05\x00\x00\xff\xff\xd4\x46\x4a\x6e\x55\x05\x00\x00"

func flowtokenSetup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenSetup_accountCdc,
		"flowToken/setup_account.cdc",
	)
}

func flowtokenSetup_accountCdc() (*asset, error) {
	bytes, err := flowtokenSetup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xa1, 0xab, 0x63, 0x5d, 0x0, 0x78, 0x41, 0x75, 0x83, 0xb5, 0xe5, 0x69, 0x60, 0xd2, 0xc1, 0x1b, 0x1a, 0xea, 0xcb, 0xb3, 0x97, 0x3f, 0x1d, 0xa9, 0xcf, 0xef, 0x3c, 0xc2, 0xf8, 0xfa, 0x7c}}
	return a, nil
}

var _flowtokenTransfer_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x92\xe4\x34\x0c\xc6\xef\x79\x8a\x8f\x3e\xcc\x26\x55\x6c\x72\xa1\x38\x74\x0d\xbb\x2c\x50\xcb\x89\xcb\x32\x2c\x67\xc7\x51\x3a\x66\xd3\x76\x4a\x56\xb6\xa7\x99\x9a\x77\xa7\xec\xd8\xe9\x7f\xcc\x40\x5f\xba\x22\x5b\xd2\x67\xe9\x27\x35\x0d\x1e\x06\xe3\x21\xac\xac\x57\x5a\x8c\xb3\x30\x1e\x0a\x42\xfb\x69\x54\x42\xe8\x1d\x87\xcf\xb3\x73\x19\x94\x14\x4d\x03\xed\xe6\xb1\x43\x4b\x98\x3d\x75\x68\x8f\x50\xf6\xe8\x2c\x41\x1c\x3c\xd9\x0e\xe2\xbe\x90\xf5\xe1\x53\x59\x27\x03\x31\x94\xd6\x6e\xb6\xd1\x39\x04\xc1\xa0\x3c\x5a\x22\x0b\x4f\x82\x79\x0a\x57\x99\x34\x99\xaf\x94\x9c\xeb\xa2\x69\x8a\xa8\x91\x70\x30\x32\x74\xac\x0e\x50\xfb\x10\x04\x2a\xa4\x18\x28\x07\x45\xcf\x6e\x8f\x1d\xc9\x87\x53\x92\x43\x56\x18\xee\x4d\x8a\xd5\x9e\x84\x38\x4a\x0a\x96\xb3\x47\x15\x85\xd9\x4f\x8e\x05\x9b\x8f\xb3\xdd\x99\x76\xa4\x87\x20\x60\x73\x32\x8f\xee\x90\x4c\xc5\x99\x5f\xb9\x88\xd9\xe2\x8f\x8f\xe6\xf1\xfb\xef\xbe\x85\xb8\x2d\x3e\x74\x1d\x93\xf7\x15\x9e\x8a\x02\x00\xd2\x03\x3e\xab\x79\x14\x30\x79\x37\xb3\xa6\x54\x01\x37\x76\x7e\x11\x93\xaa\x15\xac\x8a\x09\x2d\x19\xbb\x5b\x24\xf6\xc4\x4c\x5d\x0c\x35\x92\x84\xe2\x4a\x8c\xb5\xc5\x8f\x4f\x17\x72\xeb\x68\x7e\x5e\xb2\x4e\x4c\x93\x62\x2a\xbd\xd9\x59\xe2\x2d\xd4\x2c\x43\xf9\x93\x63\x76\x87\xcf\x6a\x9c\xa9\xc2\x5d\x2a\xd5\x2a\x34\x89\xfd\x95\x04\x0a\x4c\x3d\x31\x59\x4d\xb9\x5c\x4b\xa0\x37\x1e\x5e\x1c\x53\x87\xaf\x21\xd9\xea\x17\x94\x45\xcb\x27\xea\xf1\x43\xba\x5c\x87\xab\x6a\x47\x75\x1b\xf3\xde\x47\x0d\x97\x92\xff\x4c\x6d\xad\x70\xb7\xd6\x78\x79\xc7\xbb\x32\xb4\x74\x8b\x26\x05\x69\xfa\x7c\x1e\x8f\xab\x35\x75\xf8\xbd\x7f\x8f\x49\x59\xa3\xcb\xcd\xc3\x2a\x15\x9d\x23\x0f\xeb\x64\x51\x0c\x85\x35\x43\x6a\x86\x6b\xff\x22\x2d\x50\x92\x08\x91\x01\x9b\x8b\xb0\xf9\x57\x6b\x67\xb5\x92\x72\xf3\x82\x98\x1a\x9b\xea\x75\xc7\x33\x59\xfb\xd9\x0b\x8c\x35\x62\xd4\x68\xfe\x8e\x74\x9a\x75\x38\x22\xe7\x90\x30\x94\xb1\x9c\xe8\x0d\x7b\xf9\x66\x53\x55\x17\x3d\xca\x65\xcb\xdc\x44\xfa\xff\xbb\x4b\x9e\xc6\xbe\x5e\x01\xc2\xfd\xdb\xb5\x67\x75\x9e\xaf\x15\xe9\xe5\x7f\x79\x56\x62\x8a\x1e\x49\xcf\x42\xff\x8f\x17\x26\x6d\x26\x43\x56\xde\x78\x7c\x5a\xc6\x9a\x2f\x70\x49\xb3\xce\x0b\x31\x67\xb3\x5b\x8a\xbb\xac\x66\xad\xd5\xa4\x5a\x33\x1a\x31\xe4\x33\x4c\x77\x57\xf0\xe7\x1c\xcf\xef\xca\x66\x9a\xdb\xd1\xe8\x53\x93\xf2\xd9\x4b\xd0\xfc\x1c\x37\x45\x40\x65\x09\x0e\xb5\x4a\xbe\x7d\xd8\x35\x45\xc6\xae\xcd\xbb\xa5\x27\x03\x20\xae\x16\xf7\xbb\xb0\xb1\xbb\xb2\xaa\x56\x2c\x02\x7b\x91\xbb\x17\x25\xff\x0b\x58\xab\x77\x8d\xdf\xd4\x17\x82\x9f\x99\x70\x74\x73\x5c\x1c\x61\xf7\xc6\xd5\x11\xf6\x2e\xd4\xb2\x8b\x4e\xfb\xf6\xb5\x70\xb7\x03\x92\x16\xf3\xc4\x6e\x22\x1e\x8f\x79\x52\xfc\x44\xda\xf4\x86\xba\xa8\xbd\xbe\x86\xf3\x17\x9a\x9c\x37\xcb\xd5\x8c\x95\xcd\xa4\x1a\x7b\x43\x07\x5f\xd3\x71\x46\x46\xdd\x2d\xc1\xd2\x32\xb8\x7f\x7b\x89\x70\xc6\xf3\xb9\xf8\x27\x00\x00\xff\xff\x80\x1a\xee\x3d\xcb\x06\x00\x00"

func flowtokenTransfer_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenTransfer_tokensCdc,
		"flowToken/transfer_tokens.cdc",
	)
}

func flowtokenTransfer_tokensCdc() (*asset, error) {
	bytes, err := flowtokenTransfer_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flowToken/transfer_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xda, 0x67, 0x82, 0x51, 0x68, 0xe8, 0x7f, 0x81, 0x22, 0x5, 0xa8, 0x36, 0x18, 0x56, 0x6d, 0x83, 0x93, 0xd, 0x51, 0xd0, 0x5b, 0xe8, 0x9f, 0x93, 0x2f, 0xf5, 0x7, 0xf5, 0x5d, 0x18, 0xf0}}
	return a, nil
}

var _idtablestakingAdminAdd_approved_and_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\xeb\x36\x10\x3c\x4b\xbf\x62\x9f\x0f\xaf\x32\x5a\xd8\x78\x57\xa3\x6e\x90\xd6\x28\x20\x20\x08\x8a\x38\xe8\x25\xc8\x81\x26\x57\x16\x5b\x9a\x2b\x90\xab\x28\x41\xe0\xff\x5e\x2c\x25\xf9\x23\x51\x50\x5e\x0c\x98\xb3\xb3\xc3\xd9\x1d\xd9\x43\x43\x81\x61\xf6\xa7\xa3\xae\xdc\x3c\xaa\x9d\xc3\x2d\xab\x7f\xad\xdf\xcf\xf2\x7c\xb9\x5c\xc2\x63\x6d\x23\x70\x50\x3e\x2a\xcd\x96\x3c\x28\x63\x22\x78\x32\x08\xe5\x26\x02\x13\x70\x8d\xe0\x6c\x64\xa0\x0a\x54\xd3\x04\x7a\x41\x93\x00\x11\xac\x4f\x1c\x82\x28\x37\xc0\xc2\xbe\x80\xf4\x57\xc9\xa0\x5c\x24\xb0\x5e\x07\x54\x11\x23\x44\x47\x0c\xce\x1e\x2c\xc7\x84\xd8\xbd\xa5\x3a\xdf\x1e\x76\x18\x84\xbb\xa7\xec\x6a\x02\x15\x50\x64\xa0\x11\x60\x4f\x57\x81\xf2\x6f\x82\x92\x1a\xd1\x60\xcd\x49\x85\x72\x01\x95\x79\x03\x7c\x15\x95\xd6\x5f\xe9\xf9\x05\xb8\xb6\x7d\xc7\xcb\x57\x76\xd6\x39\xf0\xc4\x10\xf0\x05\x03\x43\x61\x0d\x1e\x1a\x62\xf4\x3c\xcf\xf3\x0b\x64\xe1\xb1\xbb\x1d\x5e\x5d\x6e\xe2\x0a\x9e\xb6\x1c\xac\xdf\x3f\xcf\xe1\x3d\xcf\x01\x00\x96\x4b\xb8\x23\xad\x1c\xbc\xa8\x60\xa5\x25\x54\x14\x40\x41\xc0\x0a\x03\x7a\x8d\xa3\x89\xe5\x06\xd2\x00\xe0\xd6\x1c\xac\x07\xda\xfd\x83\x9a\x13\x85\x43\x06\x25\x7f\x3e\x60\xb5\x82\xef\x9f\x87\xb5\x48\x25\x7d\xbf\x26\x60\xa3\x02\x16\x4a\x6b\x5e\x81\x6a\xb9\x2e\x7e\xa7\x10\xa8\xfb\x5b\xb9\x16\xe7\xf0\xfd\x56\x6b\x6a\x3d\x8b\x40\x18\x8e\xf8\x9d\x30\x53\xba\xd4\x47\x39\x72\x22\xba\x6a\x31\x6a\x82\x35\x48\xb7\x45\x64\x0a\x6a\x8f\x8b\x9e\xeb\xd7\x2f\x85\xfe\x56\x54\x81\x0e\x2b\x98\xb8\x1f\x7e\x13\x6c\xdb\xd3\xfd\xa5\xb8\x9e\x9f\x1a\xcb\xb9\xb9\x81\x46\x79\xab\x8b\xd9\x1f\xd4\x3a\x93\x06\x35\xe8\xbf\x52\x1f\x7b\xb2\xfe\x05\xb3\x9e\xe3\xd8\xbb\x84\xaf\xa8\x5b\x46\x78\xcf\xb3\x4c\xec\x4d\xcb\x21\x8d\xcf\xb3\x84\xf5\x94\xc0\x3d\xf2\x88\xb9\xb3\x91\x8b\x79\x9e\x65\xd9\x94\x20\x47\xca\x9c\x03\x21\x09\x99\xcd\xf3\xa1\x9b\x2c\xfb\x5d\xda\xf5\x2f\x9b\x3c\x90\xc3\xed\x09\x56\xa4\xd2\xe5\x52\xf6\x3e\xad\xba\xc7\x6e\x4c\x21\x74\xb5\xd5\x35\x18\xc2\xe8\x7f\xe2\xe9\x75\x1f\x74\x24\x19\x03\x91\x37\xa7\xf4\x25\x88\x56\xde\x58\xa3\x18\x7b\xde\x3e\x8a\x09\x76\x11\x4d\x89\xe5\x8f\x9e\x40\xb6\x18\x95\xae\x41\x53\x08\x18\x1b\xf2\x46\xbc\x4e\xc5\x7d\x3a\xb3\x4c\x30\x1e\xbb\x7b\x32\x58\x6e\x44\xcb\x75\x5a\x92\xfb\x99\xad\xa6\xdc\x7f\x3a\xd5\x3d\xc3\xb7\x35\x78\xeb\x86\x7d\xcd\xb2\x4c\x93\x67\xeb\x5b\x94\xea\xa3\x18\x93\x4c\x95\xce\xa5\xaf\x68\xda\xd2\xfb\xe1\xb6\x48\xb0\xcd\xea\xac\x2b\x59\x9b\x9d\x47\xf2\x34\x12\x2d\x02\x39\x7c\x86\x35\x7c\x79\xf7\x0d\x7e\x86\x1f\xa9\xfc\x7f\x5e\xb0\x06\x0e\x49\xef\x71\x98\x63\x44\xbe\x1c\x4c\xbf\x20\x63\xe2\x5a\x2f\xdf\x20\x3a\xfb\x92\xc6\x70\x31\xf2\x38\x9d\xc3\x45\xfc\xb0\x9c\x13\xaa\xc6\x45\xda\x8a\x63\xd8\x5d\x7d\x77\xb3\xec\x13\xdd\xc5\x0a\x9e\x5d\x58\x5d\x38\x32\xa6\xea\xf8\x5f\x00\x00\x00\xff\xff\x39\xb4\x90\xba\x4b\x06\x00\x00"

func idtablestakingAdminAdd_approved_and_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminAdd_approved_and_limitsCdc,
		"idTableStaking/admin/add_approved_and_limits.cdc",
	)
}

func idtablestakingAdminAdd_approved_and_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminAdd_approved_and_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/add_approved_and_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0xfb, 0xfd, 0x44, 0xd5, 0x27, 0xe, 0x8f, 0x64, 0xfb, 0x10, 0xa4, 0xd6, 0xfb, 0xd, 0x3d, 0xe4, 0x74, 0x47, 0x1, 0xf1, 0x46, 0xc5, 0x31, 0x12, 0xac, 0x93, 0x1f, 0x12, 0x77, 0xab, 0x7a}}
	return a, nil
}

var _idtablestakingAdminAdd_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x8b\xdb\x3e\x10\xc5\xcf\xf6\xa7\x78\xe4\xb0\x7f\x07\xfe\xd8\xf7\xd0\x74\x49\x1b\x0a\x81\xa5\x94\x66\xe9\x65\xd9\x83\x62\x8d\x63\xb5\x8e\x64\xa4\x71\xbc\xcb\x92\xef\x5e\x46\xb6\x43\xb2\x4d\xa9\x2e\x01\x6b\xe6\xcd\x6f\x9e\x5e\xcc\xa1\x75\x9e\x31\xfb\xd2\xb8\x7e\xb3\x7e\x54\xbb\x86\xb6\xac\x7e\x19\xbb\x9f\xa5\x69\x51\xe0\xb1\x36\x01\xec\x95\x0d\xaa\x64\xe3\x2c\x94\xd6\x01\xd6\x69\xc2\x66\x1d\xc0\x0e\x5c\x13\x1a\x13\x18\xae\x82\x6a\x5b\xef\x8e\xa4\x63\x41\x80\xb1\x22\x21\x05\x9b\x35\x58\xb4\x73\xc8\x97\x4d\x05\x65\x5f\xa5\x41\xee\xa4\xc5\xe8\x73\x93\x6a\x3c\x29\xfd\x0a\x7a\x11\x51\x63\xaf\xfa\xff\x07\xd7\x26\x44\xd5\x0b\xa6\xde\x34\x0d\xac\x63\x78\x3a\x92\x67\x64\x46\xd3\xa1\x75\x4c\x96\xe7\x69\x7a\x51\x99\x19\x1d\x16\x78\xda\xb2\x37\x76\xff\x3c\xc7\x5b\x9a\x02\x40\x51\xe0\xc1\x95\xaa\xc1\x51\x79\x23\x63\x50\x39\x0f\x05\x4f\x15\x79\xb2\x25\x4d\x7b\x6e\xd6\x88\x16\x61\xa5\x0f\xc6\xc2\xed\x7e\x52\xc9\x51\xa2\x21\x86\x92\x8f\xdf\xa9\x5a\xe0\xee\x4f\x3b\xf3\xd8\x32\xcc\x6b\x3d\xb5\xca\x53\xa6\xca\x92\x17\x50\x1d\xd7\xd9\x27\xe7\xbd\xeb\x7f\xa8\xa6\xa3\x39\xee\x56\x65\xe9\x3a\xcb\x02\x88\xf1\x14\x05\x76\xb1\xe6\x16\x97\x7a\x8f\x23\x27\x50\x53\xe5\x13\x13\x96\x90\x69\x79\x60\xe7\xd5\x9e\xf2\x41\xeb\xc3\x5f\x41\x3f\x66\x95\x77\x87\x05\x6e\xdc\x8f\xbf\xb1\x6c\x3b\xc8\x7d\x53\x5c\xcf\xcf\x83\xe5\xdc\xdf\xa3\x55\xd6\x94\xd9\xec\xb3\xeb\x1a\x1d\x5f\x67\xe4\xbf\xa2\x0f\x83\xd8\xb0\xc1\x6c\xd0\x38\x0d\x2e\xd1\x0b\x95\x1d\x13\xde\xd2\x24\x11\x7b\x25\x1e\x92\xb9\xe5\x2d\xa8\x3d\xf1\x6a\x0c\xdf\x83\x09\x9c\xfd\x9b\x46\x52\x36\x05\x76\x08\xb0\x6c\x8c\xd1\xa0\xd9\x3c\x4d\x93\xa4\x28\x24\xef\x31\xac\x96\xfa\x29\xf6\xe8\x6b\x53\xd6\xd0\x8e\x82\xfd\x8f\xaf\x03\x9b\x26\x89\x64\xc7\x52\xff\x35\xe2\x4a\x80\x8d\x0e\x71\x89\x64\xdc\xe0\xe9\x7c\xfb\x8c\x25\xd8\x77\x94\x26\xc9\x69\x9c\x17\x88\x87\x27\x9d\xfe\x4a\x11\x6d\x7c\xe7\xce\x4a\xdc\x5d\x35\xcc\x8a\xbe\x59\x7d\x89\x16\x6e\xbf\x7e\x1e\xde\xd9\x33\x92\x4c\x7e\x9f\x7e\x07\x00\x00\xff\xff\xe1\x97\x95\x02\x07\x04\x00\x00"

func idtablestakingAdminAdd_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminAdd_approved_nodesCdc,
		"idTableStaking/admin/add_approved_nodes.cdc",
	)
}

func idtablestakingAdminAdd_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminAdd_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/add_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0xfe, 0x47, 0xaf, 0x74, 0x97, 0x2e, 0x8e, 0x49, 0x44, 0xcc, 0x7c, 0x0, 0x90, 0x4c, 0xbc, 0xf3, 0x44, 0xe5, 0x88, 0x6, 0xc, 0xf1, 0xff, 0x11, 0x75, 0x2f, 0x8e, 0x4b, 0xa2, 0xbe, 0x6b}}
	return a, nil
}

var _idtablestakingAdminCapability_end_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x5d\x4b\xe4\x4a\x10\x86\xef\xf3\x2b\x8a\xb9\x90\x0c\x0c\x13\xce\xe1\x70\x2e\x82\xab\xb8\xe3\x0a\x82\x17\xe2\xb8\x7b\x2b\x35\x9d\xca\xa4\xd7\xa4\x2b\x74\x57\x8c\x83\xf8\xdf\x97\xca\x97\x13\x57\x77\xfb\x66\x18\xba\xde\xb7\x9e\xfa\xe8\xd8\xaa\x66\x2f\xb0\xb8\x2a\xb9\xbd\xbe\xbc\xc7\x5d\x49\x5b\xc1\x47\xeb\xf6\x8b\x28\x4a\x12\xb8\x2f\x6c\x00\xf1\xe8\x02\x1a\xb1\xec\xa0\x09\x14\x00\x21\xf4\x41\x80\x59\x65\x1d\x18\xac\x71\x67\x4b\x2b\x07\xd5\x08\x43\x8d\x07\xf0\xd4\xa2\xcf\xc2\x0a\xc8\x65\x20\x05\xbd\x69\x9a\xce\x6a\x05\xe8\xb2\xe9\x92\x6a\x36\xc5\x3a\x4a\x12\x75\xb8\x16\x30\x5c\xed\xac\xa3\xd0\x5d\xd6\x78\x78\x38\xb6\x7b\x98\xac\x5c\x06\x15\x3f\xd1\x83\xf0\x23\xb9\x19\x69\x50\xa3\xb6\xb0\xa6\x50\x45\xf8\x98\xa0\xbf\xf7\x94\x37\x1a\xe2\x38\xa3\x00\xad\x95\x02\xac\x0b\x4d\x9e\x5b\x63\xc9\x49\x27\x23\xb5\x1b\xd3\x05\x18\xf2\xed\x48\x5a\x22\x07\xbb\xc6\x3c\x92\x84\x81\x1d\xcb\xc0\x10\x48\xb4\x51\x8e\xda\x3e\x58\x8b\xe0\x46\x20\x67\xdf\xb1\x38\x7a\x96\xbe\xea\x28\x3a\xc2\x8e\x6d\x16\x52\x78\xd9\x8a\xb7\x6e\x9f\xc2\x57\xe6\xf2\x75\xa5\x2e\xb7\x9d\x3c\x85\xef\x57\xf6\xf9\xff\xff\x96\xf0\x12\x45\x00\x00\x49\x02\x37\x6c\xb0\x84\x27\xf4\x56\xc7\xd7\x25\x40\xad\x89\x3c\x39\x43\x3a\x0e\xcd\x77\x7d\x09\xdd\x78\xe1\xa2\x1b\x19\xef\x7e\x92\x91\xce\xa2\x24\xe9\xe7\x78\x47\x79\x0a\x27\xbf\xaf\xc2\xba\x93\xf4\xf9\x6a\x4f\x35\x7a\x8a\xd1\x18\x49\x01\x1b\x29\xe2\x0d\xd7\x87\x1f\x58\x36\xb4\x84\x93\x0b\x63\xb8\x71\xa2\x78\x30\x9c\xc9\x7e\x33\x6d\x09\x7c\x01\xd5\xaf\x83\xb0\xc7\x3d\xad\x0d\xd7\x87\xd3\xb7\xeb\xb3\x38\xf7\x5c\xa5\xf0\x01\xc9\xf0\xdb\x01\x6d\x7b\xf5\x2d\x4a\xb1\x9c\xb2\xe9\x39\x3f\x87\x1a\x9d\x35\xf1\x62\xc3\x4d\x99\x81\x63\x81\x3d\xc9\xd1\x9a\x82\x26\x50\x06\x85\x85\x01\x63\xb1\x8c\x26\x9b\x24\x81\x1d\x7b\xcf\xed\x47\xad\xc4\xf7\x1d\xd4\x13\xa8\xcc\xd7\x63\x1b\xb5\xc0\x79\xc9\xeb\xde\xee\xf4\xd3\xf6\x9e\xc5\x7f\x2f\x62\x40\x9a\x01\xcd\x5e\xe2\xa2\xf7\x78\xed\x0b\xa1\x67\x32\x8d\xd0\xb8\x2a\xe3\x30\x86\x97\xb4\x6d\xaa\x0a\xbd\xce\x62\x86\xbe\x36\x58\x9a\xa6\x44\xa1\xbb\x3e\xee\x88\x6b\x1e\x58\xe3\x61\x0c\xc9\xd9\x7f\xd3\x55\xde\x68\x3f\xc9\xa7\xf0\xcf\xea\x5d\x9a\xf4\xdd\xff\xa3\x5e\xcf\x5d\x03\x49\x67\x75\xaf\x8f\xa6\x5f\xfa\x78\x5a\xff\x3f\xa9\x2e\xea\xda\xf3\x13\x65\x37\x36\x88\xbe\xa2\x4f\x63\xc9\x65\xe3\x1a\xf5\xdf\x81\xf8\xd3\x50\x7d\xec\x1d\x48\x50\x86\x79\x89\xff\x8e\xbd\x7e\x8d\x7e\x05\x00\x00\xff\xff\x86\x13\x6e\xe4\x46\x05\x00\x00"

func idtablestakingAdminCapability_end_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminCapability_end_epochCdc,
		"idTableStaking/admin/capability_end_epoch.cdc",
	)
}

func idtablestakingAdminCapability_end_epochCdc() (*asset, error) {
	bytes, err := idtablestakingAdminCapability_end_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/capability_end_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x59, 0x25, 0xdc, 0xbc, 0xe5, 0x19, 0x15, 0xf9, 0x51, 0x8c, 0x45, 0x0, 0x0, 0x42, 0xf, 0xa9, 0x4e, 0xcc, 0x55, 0x33, 0xb2, 0x5d, 0x4e, 0x18, 0x5a, 0xee, 0xe5, 0xc0, 0xbc, 0x74, 0x74}}
	return a, nil
}

var _idtablestakingAdminChange_candidate_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x8f\x3d\x04\x2f\x14\xfb\x52\x4a\x59\xda\x86\x34\xa1\xb0\x10\x4a\x69\xd2\xde\x67\xe5\xf1\x5a\xad\xac\x31\xd2\xb8\x1b\x28\xf9\xef\x45\x92\x5d\x92\x66\x3b\x07\x0b\xa4\x99\xef\xbd\x99\xb1\x1d\x27\x09\x8a\xcd\x27\x27\xa7\xfd\xcd\x3d\x1d\x1c\xdf\x29\xfd\xb4\xfe\xb8\xa9\xaa\xb6\x6d\x71\x3f\xd8\x08\x0d\xe4\x23\x19\xb5\xe2\x61\x06\xf2\x47\x8e\xd0\x81\xe1\xec\x68\x15\xd2\xc3\xf3\x09\x5e\xba\x7c\x4d\x0a\x43\x1e\x07\x4e\x47\x67\x3b\x52\x8e\x19\xd5\x4b\xc8\x55\x9e\x1f\x14\x3c\x89\x19\xaa\x27\xe0\x3a\x88\xe3\x1d\xbe\xed\xbd\xbe\x7d\x95\x80\xd7\x6b\xf5\x67\xe9\xf8\x36\x29\x95\xd7\x37\xaf\xb7\xf8\x5d\x55\x00\x90\xa8\xb7\x62\xc8\xe1\x17\x05\x9b\xcc\x67\x11\x42\xe0\x9e\x03\x7b\xc3\x50\xc9\x9a\xfb\x1b\xe4\xe6\x70\xd5\x8d\xd6\x43\x0e\x3f\xd8\x68\x66\x38\x56\x50\xba\xfc\xca\xfd\x0e\x17\x2f\x07\xd1\xe4\x92\x22\x38\x05\x9e\x28\x70\x4d\xc6\xe8\x0e\x34\xeb\x50\x7f\x94\x10\xe4\xf4\x9d\xdc\xcc\x5b\x5c\x5c\x19\x23\xb3\xd7\xe4\x10\x4b\xb4\x2d\x0e\x39\xe7\x9c\x2f\xfa\xd7\x4e\x8a\xc8\xae\x6f\x56\x4f\x78\x8f\xa4\xd6\x44\x95\x40\x47\x6e\x0a\xeb\xdd\x7f\x8d\x7e\xa8\xfb\x20\xe3\x0e\x67\xde\x97\x33\xa7\xdd\x15\xdc\x17\xd2\x61\xfb\x57\x38\xc5\xe5\x25\x26\xf2\xd6\xd4\x9b\x6b\x99\x5d\x07\x2f\xba\xfa\x7f\xe6\x3e\x16\x58\xe9\x60\x53\x18\x8f\x65\x4a\xfc\xc0\x66\x56\x7e\x32\x83\x67\x1d\x35\x91\xf5\xe5\x72\x97\xfd\xa7\x6f\x5e\xff\xb2\xf1\xb3\x3f\xc2\xaa\xf6\xf8\x27\x00\x00\xff\xff\x4d\x4f\xc1\x9b\xbf\x02\x00\x00"

func idtablestakingAdminChange_candidate_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_candidate_limitsCdc,
		"idTableStaking/admin/change_candidate_limits.cdc",
	)
}

func idtablestakingAdminChange_candidate_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_candidate_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_candidate_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x61, 0x1f, 0xfa, 0x14, 0x88, 0x6b, 0x98, 0x6a, 0x76, 0xaa, 0xa9, 0x94, 0xf4, 0x8, 0xce, 0x8e, 0xb6, 0x0, 0x5d, 0x7d, 0xfb, 0xed, 0x4, 0x6e, 0xb1, 0xa9, 0x79, 0x81, 0xf9, 0x66, 0xc8}}
	return a, nil
}

var _idtablestakingAdminChange_cutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xc1\x6a\xdc\x40\x0c\x86\xef\x7e\x8a\x9f\x3d\x04\xef\xc5\xbe\x94\x1e\x4c\xdb\x90\x26\x04\x02\x3d\x84\x26\xed\x5d\x3b\x96\xed\xe9\xce\x8e\x8c\x46\xae\x03\x25\xef\x5e\xc6\xce\x96\x6c\xb3\xd1\x65\x60\x46\xf3\xe9\x93\xe4\x0f\xa3\xa8\x61\x73\x1b\x64\xbe\xbb\x79\xa4\x5d\xe0\x07\xa3\xbd\x8f\xfd\xa6\x28\xea\x1a\x8f\x83\x4f\x30\xa5\x98\xc8\x99\x97\x08\x37\x50\xec\x39\xc1\x06\x46\x17\x64\x86\xc9\x9e\x23\x94\x67\xd2\x16\x6e\x32\xd8\x40\x86\x28\x6d\x4e\xa2\x3d\xa3\x53\x39\xa0\xe5\xc0\x3d\x99\x68\x2a\x8a\x57\xb8\x32\xf2\x7c\x3d\xd9\x3d\xab\xe3\x68\xd4\x73\x83\x1f\xb7\xfe\xe9\xe3\x87\x2d\xfe\x14\x05\x00\xd4\x35\xbe\x89\xa3\x80\xdf\xa4\x3e\xeb\xa1\x13\x05\x41\xb9\x63\xe5\xe8\x18\x26\x8b\xcc\xdd\x0d\x16\x7d\x5c\xb5\x07\x1f\x21\xbb\x5f\xec\x6c\x41\x04\x36\x50\xbe\xfc\xce\x5d\x83\x8b\xb7\xad\x56\xcb\x97\xb5\xde\xa8\x3c\x92\x72\x49\xce\x59\x03\x9a\x6c\x28\xbf\x8a\xaa\xcc\x3f\x29\x4c\xbc\xc5\xc5\x95\x73\x32\x45\xcb\x82\x78\x89\xba\xc6\x6e\xc9\x39\xe7\x45\xff\xeb\xe4\x48\x1c\xba\xea\xe8\x84\xcf\xc8\xd5\xaa\x64\xa2\xd4\x73\xb5\xb2\x3e\xbd\x2b\xfa\xa5\xcc\x23\x6d\x70\xe6\xfd\xe5\x5c\xd2\x1e\x56\xdc\x3d\xd9\xb0\xfd\x57\x38\xc7\xe5\x25\x46\x8a\xde\x95\x9b\x6b\x99\x42\x8b\x28\x76\xf4\x3f\xb1\x4f\x2b\x6c\xed\x60\xb3\x32\x9e\xd7\x29\xf1\x13\xbb\xc9\xf8\xd5\x0c\x4e\x3a\xaa\x12\xdb\xc9\x5a\xdf\xec\xf9\x48\x7b\xfe\x1b\x00\x00\xff\xff\xe8\x01\xa8\xfa\x81\x02\x00\x00"

func idtablestakingAdminChange_cutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_cutCdc,
		"idTableStaking/admin/change_cut.cdc",
	)
}

func idtablestakingAdminChange_cutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_cutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_cut.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb, 0xb5, 0xac, 0x31, 0xa5, 0xc8, 0xeb, 0xfc, 0xee, 0x32, 0xf4, 0x28, 0x69, 0x50, 0x96, 0x40, 0xa, 0x61, 0xe1, 0x33, 0x2f, 0xad, 0x5c, 0x5a, 0xeb, 0xe1, 0xb7, 0x6a, 0x28, 0x3e, 0x28}}
	return a, nil
}

var _idtablestakingAdminChange_del_minimumsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x4f\x39\x54\xce\xc5\xbe\x20\x0e\x11\x50\x15\xa2\x4a\x95\x40\x42\x6d\xe1\x3e\x59\x8f\xe3\x25\xeb\x9d\x30\x3b\x8b\x2b\xa1\xfe\x77\xb4\x76\x83\xda\x12\xe6\x62\xc9\x33\xfb\xde\xf7\x66\xfc\x78\x14\x35\xac\xae\x83\x4c\x37\xdb\x7b\xda\x05\xbe\x33\x3a\xf8\xb8\x5f\x55\x55\xdb\xe2\x7e\xf0\x09\xa6\x14\x13\x39\xf3\x12\xe1\x06\x8a\x7b\x4e\xb0\x81\xd1\x07\x99\x60\x72\xe0\x08\xe5\x89\xb4\x83\xcb\x06\x1b\xc8\x10\xa5\x2b\x43\x74\x60\xf4\x2a\x23\x3a\x0e\xbc\x27\x13\x4d\x55\xf5\x4c\xae\x8e\x3c\x6d\x4f\xad\x2f\x3e\xfa\x31\x8f\x1b\x7c\xbb\xf6\x0f\x6f\xdf\xac\xf1\xbb\xaa\x00\xa0\x6d\xf1\x59\x1c\x05\xfc\x22\xf5\x85\x10\xbd\x28\x08\xca\x3d\x2b\x47\xc7\x30\x99\x79\x6e\xb6\x98\x13\xe0\xaa\x1b\x7d\x84\xec\x7e\xb0\xb3\x59\x22\xb0\x81\xca\xcf\x5b\xee\x37\xb8\xf8\x37\x6d\x33\x3f\x59\xfc\x8e\xca\x47\x52\xae\xc9\x39\xdb\x80\xb2\x0d\xf5\x47\x51\x95\xe9\x3b\x85\xcc\x6b\x5c\x5c\x39\x27\x39\x5a\x01\xc4\x53\xb5\x2d\x76\xf3\xcc\x39\x2e\x7a\x8d\x53\x2a\x71\xe8\x9b\x13\x13\xde\xa3\xb8\x35\xc9\x44\x69\xcf\xcd\xa2\xf5\xee\xbf\xa0\x1f\xea\xb2\xd5\x0d\xce\xf4\x9f\xbe\xf3\xd8\xdd\x22\xf7\x95\x6c\x58\xff\x35\x2e\x75\x79\x89\x23\x45\xef\xea\xd5\x27\xc9\xa1\x43\x14\x3b\xf1\xbf\xa0\x4f\x8b\xd8\x92\x60\xb5\x68\x3c\x2e\x5b\xe2\x07\x76\xd9\xf8\xd9\x0e\x5e\x24\x6a\x12\xdb\xeb\xcb\x16\x34\xbe\xe5\x9f\xd9\x2b\x8f\x1c\xed\xdc\xf5\x4f\x1e\x8f\x7f\x02\x00\x00\xff\xff\xe4\xd9\x4a\x87\x9a\x02\x00\x00"

func idtablestakingAdminChange_del_minimumsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_del_minimumsCdc,
		"idTableStaking/admin/change_del_minimums.cdc",
	)
}

func idtablestakingAdminChange_del_minimumsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_del_minimumsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_del_minimums.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xcc, 0xb9, 0x39, 0xf0, 0xc1, 0x62, 0x36, 0xa3, 0xc6, 0x8, 0x6, 0x33, 0xb8, 0xb9, 0x92, 0xf2, 0xc3, 0xd4, 0xe4, 0x28, 0xcb, 0xa8, 0x24, 0xd1, 0xb9, 0xf4, 0x4d, 0xc5, 0xd9, 0x57, 0x99}}
	return a, nil
}

var _idtablestakingAdminChange_minimumsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x4c\x41\x22\x50\x4a\x11\x55\x43\xda\x10\x30\xb4\x50\xf2\xa7\x97\x90\xc3\x78\x3d\xb2\xb6\x95\x76\xd4\xdd\x51\x1c\x30\xfe\xee\x65\x25\xcb\x75\x1a\x67\x2e\x42\xda\xd9\xf7\x7e\xf3\x46\xb6\xed\xc4\x2b\x66\xd7\x8d\x6c\x16\x57\x77\xb4\x6c\xf8\x56\xe9\xb7\x75\xeb\x59\x92\xe4\x39\xee\x6a\x1b\xa0\x9e\x5c\x20\xa3\x56\x1c\x4c\x4d\x6e\xcd\x01\x5a\x33\xc2\xd8\x89\xd6\xba\xbe\xed\xdb\x80\x4a\x3c\x9c\xac\x18\xd2\xb1\x27\x15\x1f\x92\xe4\xe8\x72\xea\x78\xf3\xdd\x3a\x1b\x7b\x0b\x3c\xdc\x5f\xdb\xe7\x0f\xef\x1f\xe7\xd8\x26\x09\x00\xe4\x39\xbe\x89\xa1\x06\x4f\xe4\x6d\x24\x19\xf4\x08\x9e\x2b\xf6\xec\x0c\x43\x65\xf0\x5d\x5c\x61\x20\xc5\xe5\xaa\xb5\x0e\xb2\xfc\xc5\x46\x07\x89\x86\x15\x14\x3f\xde\x70\x55\xe0\xec\xf5\x54\xd9\x70\x65\xf4\xeb\x3c\x77\xe4\x39\x25\x63\xb4\x00\xf5\x5a\xa7\x5f\xc4\x7b\xd9\xfc\xa4\xa6\xe7\x39\xce\x2e\x8d\x91\xde\x69\x04\xc4\xbe\xf2\x1c\xcb\xa1\xe7\x14\x17\xfd\x8f\x13\x2b\x70\x53\x65\x13\x13\x4a\x44\xb7\x2c\xa8\x78\x5a\x73\x36\x6a\x7d\x7a\x13\xf4\x73\x5a\x79\x69\x0b\x9c\x38\xdf\x3f\x87\xb6\xdb\x51\xee\x07\x69\x3d\x3f\x18\xc7\xba\xb8\x40\x47\xce\x9a\x74\xf6\x55\xfa\x66\x05\x27\x3a\xf1\xbf\xa0\x9f\x36\x39\x70\xce\x46\x8d\xdd\x98\x12\x3f\xb3\xe9\x95\x8f\x32\x88\x21\xb7\x87\x35\x6e\xef\x17\x4e\x3f\x16\x18\xb7\xb9\x43\x89\xed\xee\xd0\xfa\x44\x1e\xb6\xc0\xd0\x82\x12\xe7\x87\x83\xb8\xd9\x18\x96\x75\x38\xfa\x29\x8e\x4c\x62\x4d\x26\x0f\xf6\x11\x65\x7c\x7b\x71\x6a\x51\xc2\xe2\xdd\x28\x9e\x9e\xff\x1b\x7c\x0f\xfe\x2a\xfc\x2c\xb0\xee\x9d\x62\x78\x7c\xc3\x7f\x7a\xeb\xb9\x65\xa7\x21\x9d\xbc\xa6\xd9\x77\x7f\x03\x00\x00\xff\xff\x22\xda\xf5\x12\x1a\x03\x00\x00"

func idtablestakingAdminChange_minimumsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_minimumsCdc,
		"idTableStaking/admin/change_minimums.cdc",
	)
}

func idtablestakingAdminChange_minimumsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_minimumsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_minimums.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xb9, 0x12, 0xbd, 0x17, 0x98, 0x5d, 0xf2, 0xa6, 0x7f, 0x46, 0x24, 0x73, 0x43, 0xe8, 0xc9, 0x40, 0x17, 0x39, 0x6c, 0xf5, 0x2e, 0x4, 0xe3, 0xf1, 0x6e, 0x5, 0x70, 0x4f, 0x15, 0xd9, 0xd7}}
	return a, nil
}

var _idtablestakingAdminChange_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\xef\xd2\x40\x10\xc5\xef\xfd\x14\x2f\x3d\xfc\x53\x2e\xed\xc5\x78\x68\x54\x82\x22\x09\x89\x07\x22\xe8\x7d\x58\xa6\x74\x65\xd9\x69\xb6\x53\x0b\x31\x7c\x77\xd3\x2e\x28\x28\xff\xb9\x6c\x32\x3b\xf3\xde\x6f\x66\xec\xb1\x91\xa0\x48\x17\x4e\xfa\xe5\x7c\x43\x5b\xc7\x6b\xa5\x83\xf5\xfb\x34\x49\x8a\x02\x9b\xda\xb6\xd0\x40\xbe\x25\xa3\x56\x3c\x4c\x4d\x7e\xcf\x2d\xb4\x66\x54\x4e\x7a\xa8\x1c\xd8\xa3\x67\x3e\xb8\x33\x1a\x3a\x4b\xa7\x49\x72\xd7\x91\x79\xee\x57\x63\xba\xc4\xb7\x85\x3d\xbd\x7d\x33\xc1\xaf\x24\x01\x80\xa2\xc0\x17\x31\xe4\xf0\x93\x82\x1d\xac\x51\x49\x00\x21\x70\xc5\x81\xbd\x61\xa8\x8c\x46\xcb\x39\x46\x34\xcc\x76\x47\xeb\x21\xdb\x1f\x6c\x74\x94\x70\xac\xa0\x21\xf9\x95\xab\x12\x2f\xff\x8f\x91\x8f\x2d\xd1\xaf\x09\xdc\x50\xe0\x8c\x8c\xd1\x12\xd4\x69\x9d\x7d\x94\x10\xa4\xff\x4e\xae\xe3\x09\x5e\x66\xc6\x48\xe7\x75\x00\xc4\x35\x8a\x02\xdb\xb1\xe6\x19\x17\xfd\x8b\x33\x44\xcb\xae\xca\x6f\x4c\x78\x8f\xc1\x2d\x6f\x55\x02\xed\x39\x8f\x5a\xef\x5e\x05\xfd\x90\x55\x41\x8e\x25\x9e\xfc\x5f\xdf\xb1\x6c\x1d\xe5\x56\xa4\xf5\xe4\x8f\xf1\x10\xd3\x29\x1a\xf2\xd6\x64\xe9\x27\xe9\xdc\x0e\x5e\xf4\xc6\xff\x40\xdf\x46\xb1\x38\x41\x1a\x35\x2e\x71\x4b\x7c\x62\xd3\x29\xdf\xed\xe0\x61\xa2\xbc\x65\xfd\xdc\x88\xa9\x37\xc3\xe1\xe3\x65\xff\xde\xf8\xa6\x74\xf9\x1d\x00\x00\xff\xff\x73\xc2\x23\xaf\x59\x02\x00\x00"

func idtablestakingAdminChange_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminChange_payoutCdc,
		"idTableStaking/admin/change_payout.cdc",
	)
}

func idtablestakingAdminChange_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminChange_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/change_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xdf, 0x69, 0xde, 0x31, 0xb0, 0x43, 0x1d, 0xca, 0x6d, 0x22, 0x77, 0x10, 0x63, 0x39, 0x30, 0x3c, 0x17, 0x20, 0x43, 0x43, 0x4f, 0x13, 0xc6, 0xd9, 0x98, 0x79, 0xa3, 0x75, 0x72, 0xed, 0x66}}
	return a, nil
}

var _idtablestakingAdminEnd_epochCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x0c\x45\x82\x1e\x45\xdb\x90\x3f\x2d\x18\x72\x28\xb5\xe9\x35\xac\x56\x23\x6b\x6b\x79\x46\xec\x8e\xac\x96\xe0\xef\x5e\x56\xb2\x9c\xb8\x8d\xf7\x22\xd0\xce\x7b\xef\xa7\x99\x91\xdb\x77\xe2\x15\x8b\x6f\xad\x0c\xab\xc7\x8d\x29\x5b\x5a\xab\xd9\x39\xde\x2e\x92\x24\xcf\xb1\x69\x5c\x80\x7a\xc3\xc1\x58\x75\xc2\xa0\xba\x26\xab\xee\x40\xed\x1f\x10\x57\x01\xda\x10\xa8\x13\xdb\xc0\x70\x85\xa0\xc6\x6b\x80\x01\xd3\x00\x61\xca\x92\x3c\x8f\x3e\x2b\x85\x95\x7d\xe9\x98\x4e\x0a\xae\x9e\xc3\x14\x34\xea\xf6\x72\xa0\x67\x95\x1d\xf1\x45\x5c\x88\xda\xa1\x71\xb6\x79\x0d\x3b\xcb\xfa\xb1\xe4\xc3\xe9\xde\x53\xdd\xc7\x12\x96\x8a\x02\x06\xa7\x0d\x1c\x87\xbe\xae\x9d\x75\xc4\x3a\xca\x28\xda\xcd\x71\x01\xa7\xbc\x92\x74\x20\x62\x94\xbd\xdd\x91\x86\x24\x79\x03\x90\xba\x2a\x14\x78\x59\xab\x77\xbc\x2d\x70\x2f\xd2\x1e\x97\x78\x49\x12\x00\xc8\x73\x3c\x89\x35\x2d\x0e\xc6\xbb\xd8\x3a\xd4\xe2\x61\x22\x0a\x79\x62\x4b\x50\x19\x91\x57\x8f\x18\x5b\x8b\xbb\x6a\xef\x18\x52\xfe\x22\xab\xa3\x45\x4b\x0a\x13\x5f\xfe\xa0\xba\xc0\xcd\xff\x63\xc8\x46\xc9\x94\xd7\x79\xea\x8c\xa7\xd4\x58\xab\x05\x4c\xaf\x4d\x7a\x2f\xde\xcb\xf0\xd3\xb4\x3d\x2d\x71\x73\x67\xad\xf4\xac\x11\x10\xa7\x93\xe7\x28\xc7\x9a\xf7\xb8\xcc\xbf\x38\xf1\x04\x6a\xeb\x6c\x66\xc2\x67\xc4\xb4\x2c\xa8\x78\xb3\xa5\x6c\xf2\xfa\x74\x15\xf4\x4b\x5a\x7b\xd9\x17\x78\xe7\xfe\xf4\x1c\xcb\xd6\x93\xdd\x77\xa3\xcd\xf2\x1c\x1c\xcf\xed\x2d\x3a\xc3\xce\xa6\x8b\x07\xe9\xdb\x0a\x2c\x3a\xf3\x5f\xd0\x9f\x97\x20\xba\x2d\x26\x8f\xe3\xd4\x25\xfa\x4d\xb6\x57\x7a\xd3\x83\x8b\x2f\xca\x02\xe9\x5d\xd7\x79\x39\x50\xf5\xe4\x82\xc6\x09\xbf\x32\x5c\xd1\x10\x57\x33\xfe\xb4\x75\xe9\x32\xb9\x52\x1a\x57\x6b\x33\x2e\x56\xca\x34\x7c\x8d\x7f\xc6\x43\x1c\x0a\xf9\x02\x1f\x67\xd0\x63\xf2\x37\x00\x00\xff\xff\x6a\xa0\x2e\x09\x79\x03\x00\x00"

func idtablestakingAdminEnd_epochCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_epochCdc,
		"idTableStaking/admin/end_epoch.cdc",
	)
}

func idtablestakingAdminEnd_epochCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_epochCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_epoch.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x1a, 0x3e, 0xc7, 0x13, 0x5f, 0x7a, 0xb4, 0x4b, 0x86, 0xbe, 0x72, 0xf4, 0xcc, 0x98, 0x1b, 0x44, 0x29, 0x53, 0x30, 0x7e, 0x1, 0x1c, 0x50, 0x64, 0x3f, 0x13, 0xc, 0xaf, 0x60, 0x6d, 0xc4}}
	return a, nil
}

var _idtablestakingAdminEnd_epoch_change_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x0f\x1f\x82\x0c\x41\x82\x52\x7a\x10\x6d\x83\x93\x34\x60\xc8\x21\xd4\x6e\xaf\x61\xb5\x1a\x59\x5b\xcb\x3b\x62\x77\x64\x25\x04\xff\xf7\xb2\x2b\xcb\x6d\x9a\xb8\x7b\x11\x68\xe7\xbd\xf7\xcd\xce\x98\x5d\xc7\x4e\x30\xbb\x6b\x79\x58\xde\xae\x55\xd9\xd2\x4a\xd4\xd6\xd8\xcd\x2c\x49\xf2\x1c\xeb\xc6\x78\x88\x53\xd6\x2b\x2d\x86\x2d\xa8\xae\x49\x8b\xd9\x53\xfb\x0c\xb2\x95\x87\x34\x04\xea\x58\x37\x50\xb6\x82\x17\xe5\xc4\x43\xc1\xd2\x00\xb6\x94\x25\x79\x1e\x7c\x96\x02\xcd\xbb\xd2\x58\x3a\x2a\x6c\xf5\xe8\xc7\xa0\xa8\xdb\xf1\x9e\x1e\x85\xb7\x64\x5f\xc5\xf9\xa0\x1d\x1a\xa3\x9b\x3f\x61\x27\x59\x1f\x4b\x2e\x8f\xf7\x8e\xea\x3e\x94\x58\xae\xc8\x63\x30\xd2\xc0\x58\xdf\xd7\xb5\xd1\x86\xac\x44\x19\x05\xbb\x29\xce\xe3\x98\x57\x92\x0c\x44\x16\x65\xaf\xb7\x24\x3e\x49\xfe\x02\x48\x4d\xe5\x0b\xbc\xac\xc4\x19\xbb\x29\x70\xcd\xdc\x1e\x2e\x43\x73\x0f\xea\x99\x7b\x29\xf0\xe3\xce\x3c\x7d\xfa\x38\xc7\x4b\x92\x00\x40\x9e\xe3\x9e\xb5\x6a\xb1\x57\xce\x84\xd7\x44\xcd\x0e\x2a\xd0\x91\x23\xab\x09\xc2\xb1\x8b\xe5\x2d\xe2\x6b\x63\x51\xed\x8c\x05\x97\xbf\x48\x4b\xb4\x68\x49\xa0\xc2\xcf\xef\x54\x17\xb8\x78\x3b\x99\x2c\x4a\xc6\xbc\xce\x51\xa7\x1c\xa5\x4a\x6b\x29\xa0\x7a\x69\xd2\x6b\x76\x8e\x87\x9f\xaa\xed\x69\x8e\x8b\x85\xd6\xdc\x5b\x09\x80\x38\x9e\x3c\x47\x19\x6b\xde\xe3\x52\xff\xe2\x84\xe3\xa9\xad\xb3\x89\x09\x5f\x10\xd2\x32\x2f\xec\xd4\x86\xb2\xd1\xeb\xf3\x59\xd0\xaf\x69\xed\x78\x57\xe0\x9d\xfb\xe3\x37\x96\xad\x46\xbb\x07\x25\xcd\xfc\x14\x1c\xce\xd5\x15\x3a\x65\x8d\x4e\x67\x37\xdc\xb7\x15\x2c\xcb\xc4\xff\x8a\xfe\xb4\x17\xc1\x6d\x36\x7a\x1c\xc6\x57\xa2\x27\xd2\xbd\xd0\x34\xa4\x37\x2d\x65\x9e\xe4\x5b\xd8\xe1\x75\xd8\x88\x71\xb4\xe9\x69\xc8\xf3\xff\xa8\x16\x5d\xe7\x78\x4f\xd5\xbd\xf1\x12\x76\xe5\x6c\x2d\xd9\x6a\xea\x76\xdc\xdb\xf4\x6c\x69\x58\xce\x08\xe2\x03\x43\xe4\xba\x09\x33\x24\x57\xe0\xc3\xd4\xd7\x21\xf9\x1d\x00\x00\xff\xff\xe2\x20\xc7\x2f\xbb\x03\x00\x00"

func idtablestakingAdminEnd_epoch_change_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_epoch_change_payoutCdc,
		"idTableStaking/admin/end_epoch_change_payout.cdc",
	)
}

func idtablestakingAdminEnd_epoch_change_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_epoch_change_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_epoch_change_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x42, 0x9c, 0x4e, 0xf3, 0x4c, 0x6d, 0xfd, 0x71, 0x44, 0x8c, 0x16, 0x4b, 0x61, 0xb5, 0x4e, 0x57, 0x70, 0x12, 0x63, 0x43, 0x77, 0x8f, 0xe5, 0xd, 0x88, 0xf7, 0xab, 0x91, 0x64, 0xa7, 0x13}}
	return a, nil
}

var _idtablestakingAdminEnd_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x8f\x3d\x04\x1b\x8a\x7d\x37\x6d\xc3\xa6\xa1\x10\xc8\xa1\x74\x43\xef\xb3\xf2\x78\xad\x56\xab\x31\xd2\x28\x2e\x84\xfd\xef\x45\x72\x1c\xda\x26\x99\x8b\xc1\xf3\xe6\xbd\x6f\x3c\xb6\xe7\x59\x82\x62\xf7\xd5\xc9\x72\x77\xfb\x40\x47\xc7\x07\xa5\x5f\xd6\x9f\x76\x55\xd5\x75\x78\x98\x6c\x84\x06\xf2\x91\x8c\x5a\xf1\x60\x3f\x44\xe8\xc4\x88\xab\x0c\x94\x4a\xe3\x03\x96\xc9\x9a\x09\x81\xc7\x94\x25\x5e\x06\x8e\xc8\x16\x8b\xd5\x09\xd6\xc7\x34\x8e\xd6\x58\xf6\x5a\x46\xb9\xaa\xfe\xb2\xad\xed\x10\x7b\x3c\x1d\x34\x58\x7f\xea\x71\x23\xe2\x2e\x0d\x9e\xaa\x0a\x00\xba\x0e\xf7\x62\xc8\xe1\x91\x82\xcd\x84\x18\x25\x80\x72\x14\x07\xf6\x86\xa1\x52\x90\xee\x6e\x51\x36\xc0\x7e\x38\x5b\x0f\x39\xfe\x64\xa3\xc5\xc2\xb1\x82\xf2\xcb\xef\x3c\xf6\xb8\x7a\xbd\x6d\x5b\x46\xd6\xbc\x39\xf0\x4c\x81\x6b\x32\x46\x7b\x50\xd2\xa9\xbe\x91\x10\x64\xf9\x41\x2e\x71\x83\xab\xbd\x31\x92\xbc\x66\x40\x3c\x57\xd7\xe1\x58\x34\x6f\x71\xd1\xff\x38\xb9\x22\xbb\xb1\xdd\x98\xf0\x09\x39\xad\x8d\x2a\x81\x4e\xdc\xae\x5e\x1f\xdf\x05\xfd\x5c\x8f\x41\xce\x3d\xde\xe8\x3f\x3f\x8b\xec\xb0\xda\x7d\x23\x9d\x9a\x97\xe0\x5c\xd7\xd7\x98\xc9\x5b\x53\xef\xbe\x48\x72\x03\xbc\xe8\xc6\xff\x0f\xfd\xcb\x91\xb3\xdb\x6e\xf5\xb8\xac\x5f\x89\x7f\xb3\x49\xca\xdb\x91\x5e\xad\xd4\x46\xd6\xfd\x3c\x07\x79\xe4\xe1\xde\x46\xcd\x27\x6e\xde\xd3\xb2\x1f\x36\xee\xf5\x77\xaa\xb7\xac\xcb\x9f\x00\x00\x00\xff\xff\x81\x11\xe7\xc5\xa2\x02\x00\x00"

func idtablestakingAdminEnd_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminEnd_stakingCdc,
		"idTableStaking/admin/end_staking.cdc",
	)
}

func idtablestakingAdminEnd_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminEnd_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/end_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x6b, 0x81, 0x36, 0x47, 0xf7, 0x73, 0xbf, 0x5, 0x48, 0x89, 0x75, 0x4d, 0x56, 0xe, 0xb7, 0xba, 0xc8, 0x5d, 0x8c, 0xd7, 0x9c, 0x17, 0x8d, 0xbd, 0x9f, 0x2f, 0x95, 0xbb, 0x20, 0xb0, 0x11}}
	return a, nil
}

var _idtablestakingAdminMove_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xc1\x6b\xea\x40\x10\xc6\xef\xf9\x2b\x3e\x72\x90\x78\x49\xe0\x1d\xc3\x7b\x4f\xac\xb6\x20\xf4\x50\xaa\xf4\x3e\x59\x27\x26\x35\xd9\x09\xbb\x13\x53\x10\xff\xf7\x92\x44\x8b\xb6\x76\x2e\x0b\xbb\xdf\x7e\xdf\x6f\x66\xca\xba\x11\xa7\x08\x9f\x2a\xe9\x56\xcb\x0d\x65\x15\xaf\x95\xf6\xa5\xdd\x85\x41\x90\x24\xd8\x14\xa5\x87\x3a\xb2\x9e\x8c\x96\x62\x51\xcb\x81\x3d\x54\xf6\x6c\x3d\x32\xd6\x8e\xd9\x22\x6b\xcd\x9e\xd5\x07\xc1\xb5\xf2\x18\x04\x00\x90\x24\x78\x16\x43\x15\x0e\xe4\xca\xde\x1f\xb9\x38\x10\x1c\xe7\xec\xd8\x1a\x86\x0a\xb4\x60\xac\x96\x18\xf2\x31\xdf\xd6\xa5\x85\x64\xef\x6c\x74\xb0\xa8\x58\x41\xfd\xe5\x2b\xe7\x29\x26\x3f\x59\xe3\xe1\xcb\x98\xd7\x38\x6e\xc8\x71\x44\xc6\x68\x0a\x6a\xb5\x88\x1e\xc4\x39\xe9\xde\xa8\x6a\x79\x8a\xc9\xdc\x18\x69\xad\x4e\x71\x1c\xf4\x67\xc6\x6c\xd0\xdc\xe3\xa2\xef\x38\x7d\x79\xae\xf2\xf8\xc2\x84\x7f\xe8\xd3\x62\xaf\xe2\x68\xc7\xf1\xe8\xf5\xf7\x57\xd0\xff\x51\xee\xa4\x4e\x71\xe7\xfd\x7c\x0e\xb2\xf5\x68\xf7\x42\x5a\x4c\xbf\x82\xfb\x9a\xcd\xd0\x90\x2d\x4d\x14\x2e\xa4\xad\xb6\xb0\xa2\x17\xfe\x1b\x7a\x3f\x9a\x8d\x1d\x84\xa3\xc7\x69\x9c\x12\x7f\xb0\x69\x95\xaf\x66\x70\xd3\x51\xdc\xaf\x79\x33\x2c\x39\xb2\xdc\x3d\x36\x62\x8a\x45\x3f\x35\x76\x29\xfe\x5c\x9c\x4e\x9f\x01\x00\x00\xff\xff\x5e\xe0\x36\x6d\x3e\x02\x00\x00"

func idtablestakingAdminMove_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminMove_tokensCdc,
		"idTableStaking/admin/move_tokens.cdc",
	)
}

func idtablestakingAdminMove_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingAdminMove_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/move_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0x29, 0x20, 0x7d, 0xa0, 0x33, 0xcd, 0x20, 0xd5, 0x37, 0x30, 0x1d, 0x65, 0xc7, 0x27, 0xaa, 0x94, 0xd2, 0xa0, 0x91, 0xec, 0xec, 0xb9, 0xc1, 0xdd, 0xa7, 0x1d, 0xe2, 0xb1, 0xfc, 0x8, 0x21}}
	return a, nil
}

var _idtablestakingAdminPay_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x8f\x3d\x04\x2f\x14\x9b\x5e\x4d\xd3\x90\x26\x2d\x04\x7a\x28\xd9\xd0\xfb\xac\x3c\x8e\xdd\xc8\x1a\x33\x1a\x77\xbb\x84\xfc\xf7\x22\x2b\x2e\xd9\x76\xab\x8b\xc1\x7a\x7a\xef\x9b\xc7\x0c\xe3\x24\x6a\xd8\x7c\xf1\x72\xb8\xbb\x7d\xa0\xbd\xe7\x9d\xd1\xd3\x10\x1e\x37\x45\x51\xd7\x78\xe8\x87\x08\x53\x0a\x91\x9c\x0d\x12\x30\xd1\x31\x42\xf9\x40\xda\x46\x98\x80\xbc\x87\xf5\x8c\x68\xf4\xc4\x2d\x82\xb4\x1c\x8b\xe2\xed\x8b\xe7\xa2\x00\x80\xba\xc6\x57\x71\xe4\xf1\x93\x74\x48\x39\xe8\x44\x41\x50\xee\x58\x39\x38\x4e\x6e\xc9\xe9\xee\x16\x0b\x07\xae\xdb\x71\x08\x90\xfd\x0f\x76\xb6\x58\x78\x36\x50\xfa\x79\xcf\x5d\x83\x8b\x7f\x99\xab\xe5\x49\xce\x9b\x94\x27\x52\x2e\xc9\x39\x6b\x40\xb3\xf5\xe5\x27\x51\x95\xc3\x77\xf2\x33\x6f\x71\x71\xed\x9c\xcc\xc1\xb6\x78\x5e\xf4\xaf\x8c\xfb\x45\x73\x8e\x8b\xfe\xc6\x49\x27\xb2\xef\xaa\x95\x09\x97\x48\x69\x55\x34\x51\x7a\xe4\x2a\x7b\x7d\xf8\x2f\xe8\xc7\xb2\x53\x19\x1b\x9c\xb9\x7f\xfd\x2e\xb2\x5d\xb6\xfb\x46\xd6\x6f\xff\x04\xa7\x73\x75\x85\x89\xc2\xe0\xca\xcd\x8d\xcc\x3e\x95\x6f\x2b\xff\x09\x7d\xcc\x66\x79\x82\x4d\xf6\x78\xc9\x2d\xf1\x2f\x76\xb3\xf1\x9b\x0e\x52\xc9\x71\x1e\x47\xd2\x23\x2e\x4f\xe7\xab\x1c\x79\x37\x7b\x32\xbe\xcf\x0b\x50\x6e\xcf\x17\x51\x4d\x74\x5c\x25\x9d\xe8\xe7\x49\x5c\x7f\x93\xca\x66\x6d\xf0\xfe\xdd\xba\x3f\xbb\x1c\xd3\xac\x79\x2b\xd9\xcb\xef\x00\x00\x00\xff\xff\x41\xc2\x8a\x09\x96\x02\x00\x00"

func idtablestakingAdminPay_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminPay_rewardsCdc,
		"idTableStaking/admin/pay_rewards.cdc",
	)
}

func idtablestakingAdminPay_rewardsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminPay_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/pay_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x73, 0x6e, 0x48, 0x2c, 0x71, 0x40, 0x46, 0xb8, 0xed, 0x2d, 0x3a, 0x1b, 0xc0, 0x9a, 0x9e, 0x51, 0x9d, 0xc8, 0xa7, 0xc3, 0xfa, 0xa2, 0xff, 0x33, 0x15, 0xe7, 0xf2, 0xc3, 0x64, 0x48, 0x19}}
	return a, nil
}

var _idtablestakingAdminRemove_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x6b\xdb\x4e\x10\xc5\xcf\xd6\xa7\x78\xf8\x10\x64\xf8\xff\xa5\xbb\x69\x1a\xd2\x9a\x82\x21\x34\x25\x36\xbd\x84\x1c\xc6\xd2\xc8\xda\x76\xbd\x2b\x76\xc7\x76\x4c\xf0\x77\x2f\xa3\x95\xda\x24\x75\xf7\x22\xd8\x99\x7d\xf3\x9b\x99\x27\xb3\xeb\x7c\x10\x4c\xbf\x58\x7f\x5c\x2e\xd6\xb4\xb1\xbc\x12\xfa\x69\xdc\x76\x9a\x65\x65\x89\x75\x6b\x22\x24\x90\x8b\x54\x89\xf1\x0e\x81\x77\xfe\xc0\x11\xce\xd7\x8c\xe5\x22\xa2\x09\x7e\x07\x69\x19\xd6\x44\x81\x6f\x40\x5d\x17\xfc\x81\xeb\x3e\x25\xc2\x38\xd5\xd1\x84\xe5\x02\xa2\x05\x0a\xe8\xcd\xb2\x01\xb9\x93\x3e\x48\xb1\x88\xc5\x3d\xbe\xde\xaf\xc1\xcf\x2a\x44\x36\x30\xd5\x27\x18\xd7\xc7\x4d\xcd\x4e\x8c\x9c\x92\xc2\x7f\x90\xd6\xc4\x5e\xf7\x15\xda\xd1\x58\x8b\xc0\x07\x0e\x82\xdc\x79\xd1\x47\xbb\xce\x0b\x3b\x99\x65\xd9\xab\xcc\xdc\xd4\x71\x8e\xc7\x95\x04\xe3\xb6\x4f\x33\xbc\x64\x19\x00\x94\x25\xee\x7c\x45\x16\x07\x0a\x46\xcb\xa0\xf1\x01\x84\xc0\x0d\x07\x76\x15\x43\xfc\xd8\x48\x3f\x29\xdc\xd6\x3b\xe3\xe0\x37\x3f\xb8\x92\x5e\xc2\xb2\x80\xf4\xf2\x81\x9b\x39\xae\xfe\x9e\x6a\xd1\x3f\x49\xf5\xba\xc0\x1d\x05\xce\xa9\xaa\x64\x0e\xda\x4b\x9b\x7f\xf2\x21\xf8\xe3\x77\xb2\x7b\x9e\xe1\xea\xb6\xaa\xfc\xde\x89\x02\x62\x38\x65\x89\x4d\x9f\x73\x89\x8b\xde\xe3\xe8\x89\x6c\x9b\x62\x64\xc2\x35\xb4\x5a\x11\xc5\x07\xda\x72\x91\xb4\x3e\xfc\x13\xf4\x63\xae\xeb\x9d\xe3\x42\x7c\xf8\xf6\x69\xab\x24\xf7\x8d\xa4\x9d\xfd\x2e\xac\xe7\xe6\x06\x1d\x39\x53\xe5\xd3\xcf\x7e\x6f\xd5\x12\x32\xf2\xbf\xa1\x8f\x49\x2c\x75\x30\x4d\x1a\xe7\x34\x25\x7e\xe6\x6a\x2f\x8c\x97\x6c\xa2\xd3\x55\x53\xa9\x59\xae\x2f\x31\x6d\x59\x6e\x07\xf7\xdd\x99\x28\xf9\x1f\x98\x4b\x20\x6a\xb0\xd1\xad\xc9\xbd\xbd\x97\x87\xd9\x4c\x67\x59\x36\x29\xcb\xc1\xf0\x60\xaa\xda\x64\xfa\x6c\xa2\xb6\x48\x1c\x6b\xff\x90\xc2\xc6\xc1\xd4\x51\x21\x27\x03\xe1\xe3\xdb\x8c\x27\x5c\xc3\x19\x9b\x4d\xce\x49\x36\xb2\xa4\x9d\x8d\x7f\x4b\x0f\x30\x2c\xd2\xf1\x11\x64\xad\x3f\xfe\xaf\xb7\x97\x57\x59\xc4\x77\xcd\x0e\x75\xc7\xe1\x9d\x7f\x05\x00\x00\xff\xff\x89\x21\xba\xf8\xdb\x03\x00\x00"

func idtablestakingAdminRemove_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_approved_nodesCdc,
		"idTableStaking/admin/remove_approved_nodes.cdc",
	)
}

func idtablestakingAdminRemove_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0xca, 0xcc, 0x33, 0xde, 0x41, 0xa8, 0x7c, 0xa1, 0xa7, 0x14, 0x88, 0xc4, 0xa7, 0xf8, 0x9e, 0x73, 0xee, 0x76, 0x2e, 0xc5, 0x93, 0x78, 0x45, 0xde, 0x23, 0xd5, 0xaf, 0x10, 0x9f, 0x95, 0x74}}
	return a, nil
}

var _idtablestakingAdminRemove_invalid_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x0f\x1f\x82\x0c\x45\xba\x8b\xb6\xc1\x69\x28\x18\x42\x29\x75\xe8\x7d\xbc\x1a\x59\xd3\xae\x77\xc4\xee\xc8\x2a\x04\xff\xf7\xb2\x52\x1c\x92\x36\x9e\x8b\x40\xfb\xf6\xbd\x6f\x66\x56\x8e\x83\x46\xc3\xea\xab\xd7\x69\x7b\xff\x48\x7b\xcf\x3b\xa3\xdf\x12\x0e\xab\xa2\xa8\x6b\x3c\xf6\x92\x60\x91\x42\x22\x67\xa2\x01\x1c\xda\x04\xeb\x19\x69\x91\x81\xc6\xf9\xe0\x03\xa6\x5e\x5c\x8f\xc8\xdd\x98\x25\x41\x5b\x4e\xc8\x16\x93\x58\x0f\x09\x69\xec\x3a\x71\xc2\xc1\xe6\xab\x5c\x14\xaf\x6c\x4b\x69\x53\x83\xa7\x9d\x45\x09\x87\x06\x77\xaa\xfe\xbc\xc6\x53\x51\x00\x40\x5d\xe3\x41\x1d\x79\x9c\x28\x4a\x26\x44\xa7\x11\x94\xa3\x38\x72\x70\x0c\xd3\x19\x69\x7b\x8f\xb9\x03\x6c\xda\xa3\x04\xe8\xfe\x17\x3b\x9b\x2d\x3c\x1b\x28\xff\xfc\xc1\x5d\x83\x9b\xff\xbb\xad\xe6\x2b\x4b\xde\x10\x79\xa0\xc8\x25\x39\x67\x0d\x68\xb4\xbe\xbc\xd3\x18\x75\xfa\x49\x7e\xe4\x35\x6e\x36\xce\xe9\x18\x2c\x03\xe2\xb9\xea\x1a\xfb\x59\xf3\x1e\x17\xfd\x8b\x93\x2b\xb1\xef\xaa\x0b\x13\x3e\x21\xa7\x55\xc9\x34\xd2\x81\xab\xc5\xeb\xe3\x55\xd0\xcf\x65\x17\xf5\xd8\xe0\x9d\xf3\xe7\xef\x2c\xdb\x2d\x76\xdf\xc9\xfa\xf5\x4b\x70\xae\xdb\x5b\x0c\x14\xc4\x95\xab\x2f\x3a\xfa\x16\x41\xed\xc2\xff\x86\xfe\x65\xc9\xd9\x6d\xb5\x78\x9c\x97\x29\xf1\x1f\x76\xa3\xf1\xab\x19\xbc\xe9\xa8\x4a\x6c\x9b\x61\x88\x7a\xe2\xf6\x41\x92\xe5\x0d\xaf\xaf\x48\x23\x1f\xf5\xc4\xdb\x70\x22\x2f\xed\xb7\xfc\x70\xca\x4b\xd4\xf9\x6f\x00\x00\x00\xff\xff\x2a\x7e\xa3\x6f\xa1\x02\x00\x00"

func idtablestakingAdminRemove_invalid_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_invalid_nodesCdc,
		"idTableStaking/admin/remove_invalid_nodes.cdc",
	)
}

func idtablestakingAdminRemove_invalid_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_invalid_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_invalid_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x2a, 0xde, 0x78, 0xf9, 0x4a, 0x9d, 0xde, 0x8e, 0xe8, 0x6, 0x5e, 0x6d, 0x5f, 0xc4, 0x70, 0x49, 0x59, 0x9, 0xd3, 0xde, 0xb6, 0x78, 0x9a, 0x44, 0x97, 0x63, 0x37, 0x28, 0xd1, 0xc7, 0xbf}}
	return a, nil
}

var _idtablestakingAdminRemove_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\xab\xdb\x30\x0c\xc7\xef\xf9\x14\x7f\x72\x78\xa4\x97\xe4\x1e\xb6\x3d\xba\x3d\x06\x0f\xc6\x18\x6d\xd9\x5d\xb5\x95\xc4\x5b\x62\x05\x47\x69\x3b\x46\xbf\xfb\x70\xdc\x8e\x76\xeb\xd3\xc5\x60\x4b\x3f\xfd\x24\xec\x86\x51\x82\x22\xff\xdc\xcb\xf1\xf5\x65\x47\xfb\x9e\xb7\x4a\x3f\x9d\x6f\xf3\x2c\xab\x2a\xec\x3a\x37\x41\x03\xf9\x89\x8c\x3a\xf1\x08\x3c\xc8\x81\x27\x90\x07\x9f\xdc\xa4\xce\xb7\xf0\x62\x19\x4d\x90\x01\xda\x31\x9c\x65\xaf\x4e\x7f\x41\x23\x2d\xcb\x6e\xaa\x0b\x67\x6b\x6c\x35\x38\xdf\xae\xf0\x3b\xcb\x00\xa0\xaa\xf0\x45\x0c\xf5\x38\x50\x70\xb1\x02\x8d\x04\x10\x02\x37\x1c\xd8\x1b\x86\xca\xc2\x7d\x7d\xc1\xe2\x87\xb5\x1d\x9c\x87\xec\x7f\xb0\xd1\x05\xd1\xb3\x82\xe2\xe5\x86\x9b\x1a\x4f\xff\xcf\x52\x2e\x25\xa9\xdf\x18\x78\xa4\xc0\x05\x19\xa3\x35\x68\xd6\xae\xf8\x28\x21\xc8\xf1\x3b\xf5\x33\xaf\xf0\xb4\x36\x46\x66\xaf\x51\x10\x97\xa8\x2a\xec\x97\x9c\x47\x5e\xf4\xaf\x4e\x8c\x89\xfb\xa6\xbc\x3a\xe1\x3d\x62\xb7\x72\x52\x09\xd4\x72\x99\x58\xef\xde\x14\xfd\x50\xc4\x65\xd6\x78\xf0\x7e\x39\x97\xb4\x6d\xc2\x7d\x23\xed\x56\x7f\x1b\xc7\x78\x7e\xc6\x48\xde\x99\x22\xff\x24\x73\x6f\xe1\x45\xaf\xfe\x77\xf6\x53\x82\xa5\x09\xf2\xc4\x38\xa7\x2d\xf1\x89\xcd\xac\x7c\xb3\x83\xbb\x89\xca\xf4\x0d\xd6\xde\x6e\xb8\x99\xbd\xfd\x2a\x96\x37\x6c\x24\xd8\xc2\xd9\x2b\xe8\xfc\x27\x00\x00\xff\xff\xfa\xd5\x19\x36\x5d\x02\x00\x00"

func idtablestakingAdminRemove_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminRemove_nodeCdc,
		"idTableStaking/admin/remove_node.cdc",
	)
}

func idtablestakingAdminRemove_nodeCdc() (*asset, error) {
	bytes, err := idtablestakingAdminRemove_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/remove_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x16, 0x1b, 0xff, 0xf5, 0x18, 0xce, 0xee, 0xb2, 0x6c, 0xd1, 0x5b, 0x14, 0xc, 0x5a, 0xbf, 0xf4, 0xe4, 0x25, 0x6b, 0xca, 0xe7, 0x6, 0x53, 0x5c, 0x9c, 0x71, 0x1e, 0x2b, 0xf7, 0xcb, 0x26}}
	return a, nil
}

var _idtablestakingAdminScale_rewards_testCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\xab\x86\xe2\x40\x30\x72\x4b\x16\x83\x87\x94\x10\xc8\xd2\xa1\x7f\xa6\xd2\xe1\x2a\x1d\xc6\x44\x91\x82\x74\xc5\x43\xc8\x77\x2f\x4a\x62\xe7\x8f\x5b\x57\x83\xe1\xf0\x7b\x3f\xbd\x77\x6a\x36\x5b\x1f\x18\xe4\xd2\xfa\x76\xb5\x78\xc3\x2f\x4b\xaf\x8c\xeb\xc6\xd5\x52\x08\x0e\xe8\x22\x6a\x6e\xbc\x83\x9d\x10\x00\x00\xdb\x40\x5b\x0c\x94\xa1\xd6\x5c\xc2\xfd\x5c\x6b\xff\xed\x78\x02\xbb\xc3\xdf\x74\x2c\x31\x04\x6a\x31\x98\xf8\x14\x08\xd7\xc6\xb7\x0e\x2a\x18\x5e\x90\xbf\xdc\xa8\x32\xe7\x0d\xad\x16\x25\x48\x75\x3a\x85\x9c\x88\x1e\x7c\x0b\xcd\x23\xf1\xb3\x37\x74\xc2\x64\x85\x52\x2a\x57\x93\x51\xfd\x82\x2c\xd5\xc8\x3e\x1c\x4d\x99\xe9\xe6\x74\x6d\x01\x18\xe1\x7d\xe5\xf8\xf1\x61\xda\xb9\x4b\x28\x8e\xd4\x11\xac\x46\x4b\x73\x6b\xbb\x1c\x69\x6e\x5c\xbd\x44\xcd\x3e\x94\xa0\xf2\xd9\x39\x13\xc6\x48\x81\xb3\x7e\xfe\x15\xe8\xce\xa5\xa0\xaa\x60\x96\x02\x4c\xaf\x2c\x1b\x8a\x11\x6b\x2a\x41\xb6\xc1\xbb\x1a\x92\xa3\xe3\xc0\x21\x8f\xec\xf5\x17\xd1\xd3\xd3\x98\xeb\x0d\x44\xa8\x86\x01\x6e\x35\x1f\x17\x9b\xf9\xbc\x13\xa3\x6d\x86\xfc\xd4\xe0\xbf\x02\xbd\xeb\xef\x16\xe9\xbb\x17\xfb\x9f\x00\x00\x00\xff\xff\x82\x54\x08\xb0\xb1\x02\x00\x00"

func idtablestakingAdminScale_rewards_testCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminScale_rewards_testCdc,
		"idTableStaking/admin/scale_rewards_test.cdc",
	)
}

func idtablestakingAdminScale_rewards_testCdc() (*asset, error) {
	bytes, err := idtablestakingAdminScale_rewards_testCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/scale_rewards_test.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x7a, 0xc4, 0x50, 0xe8, 0xa6, 0x22, 0xf2, 0x5, 0x7d, 0x61, 0xee, 0x71, 0x6c, 0x3c, 0x99, 0xe4, 0x53, 0x6f, 0x43, 0x91, 0x1c, 0xf, 0xb6, 0x82, 0xb4, 0x20, 0x38, 0xe3, 0xd1, 0xa2, 0x83}}
	return a, nil
}

var _idtablestakingAdminSet_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\xeb\xda\x40\x10\xc5\xef\xf9\x14\x8f\x1c\xfe\xc4\x4b\x72\x0f\x6d\xff\x68\xa5\x20\x78\x28\x55\x7a\x1f\x37\x13\xb3\xed\xba\x13\x76\x27\x5a\x10\xbf\x7b\xd9\xc4\x14\x6d\xed\x5c\x02\x99\x79\x6f\x7e\x33\xb3\xf6\xd4\x4b\x50\xe4\x5f\x9c\x5c\x36\xeb\x3d\x1d\x1c\xef\x94\x7e\x5a\x7f\xcc\xb3\xac\xaa\xb0\xef\x6c\x84\x06\xf2\x91\x8c\x5a\xf1\x88\xac\x11\xda\x31\x9c\x8d\x0a\x69\x41\x7d\x1f\xe4\xcc\x0d\xbc\x34\x1c\x61\xfd\x98\xdd\xac\xa1\xc9\x2c\xcb\x1e\xc4\x85\x6d\x62\x8d\xeb\x4e\x83\xf5\xc7\x1a\x2b\x11\x77\x5b\xe0\x9a\x65\x00\x50\x55\xd8\x8a\x21\x87\x33\x05\x9b\xa4\x68\x25\x80\x10\xb8\xe5\xc0\xde\x30\x54\x66\xeb\x91\x13\xcb\xe6\x64\x3d\xe4\xf0\x83\x8d\x8e\x16\x8e\x15\x94\x7e\x7e\xe3\xb6\xc6\xdb\xbf\x33\x95\xa3\x64\xea\xd7\x07\xee\x29\x70\x41\xc6\x68\x0d\x1a\xb4\x2b\x56\x12\x82\x5c\xbe\x93\x1b\x78\x81\xb7\xa5\x31\x32\x78\x4d\x80\xb8\x47\x55\xe1\x30\xd6\xbc\xe2\xa2\xbf\x71\x52\x44\x76\x6d\x39\x33\xe1\x23\x52\xb7\x32\xaa\x04\x3a\x72\x39\x79\x7d\xf8\x2f\xe8\xa7\xa2\x0d\x72\xaa\xf1\x22\x7f\xff\x8e\x65\xbb\xc9\xee\x2b\x69\xb7\xf8\xd3\x38\xc5\xfb\x3b\x7a\xf2\xd6\x14\xf9\x67\x19\x5c\xba\x90\xce\xfc\x4f\xf4\x71\x32\x9b\x26\xc8\x27\x8f\xdb\xb4\x25\xfe\xc5\x66\x50\x7e\xd8\xc1\xd3\x44\x65\x64\x5d\xde\x1f\xc0\xd6\x46\x4d\x17\x9e\xf5\xb7\xdf\x01\x00\x00\xff\xff\xc5\xf9\xa4\x1e\x5c\x02\x00\x00"

func idtablestakingAdminSet_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_approved_nodesCdc,
		"idTableStaking/admin/set_approved_nodes.cdc",
	)
}

func idtablestakingAdminSet_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x69, 0x3e, 0x21, 0x93, 0xd4, 0xc6, 0xdb, 0xaf, 0x38, 0x13, 0x28, 0xd, 0x33, 0xed, 0x31, 0x72, 0x7f, 0xd4, 0x63, 0x57, 0x2d, 0x9d, 0x83, 0x2, 0xf7, 0x23, 0x23, 0x45, 0xc6, 0x8a, 0x60}}
	return a, nil
}

var _idtablestakingAdminSet_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4d\x6f\xe2\x30\x10\x86\xef\xf9\x15\xaf\x72\x40\xc9\x25\xb9\xa3\xdd\x45\x2c\x68\x25\xa4\x3d\x54\x05\xf5\x3e\x38\x13\xe2\xe2\xd8\x91\x3d\x29\xad\x10\xff\xbd\x72\x42\xaa\x7e\xc0\x5c\x22\xc5\x33\xcf\xfb\x8c\xad\xdb\xce\x79\x41\xfa\xcf\xb8\xd3\x66\xbd\xa3\xbd\xe1\xad\xd0\x51\xdb\x43\x9a\x24\x65\x89\x5d\xa3\x03\xc4\x93\x0d\xa4\x44\x3b\x8b\x8e\xde\x02\x3c\x9f\xc8\x57\x01\xe2\x40\xc6\x40\x1a\x46\x10\x3a\x72\x05\xeb\x2a\x0e\x49\xf2\x79\xe2\x9c\x24\x00\x50\x96\xf8\xef\x14\x19\xbc\x90\xd7\x31\x07\xb5\xf3\x20\x78\xae\xd9\xb3\x55\x1c\x69\x91\xb4\x59\x63\xf0\xc0\xb2\x6a\xb5\x85\xdb\x3f\xb3\x92\x01\x61\x58\x40\xf1\xe7\x23\xd7\x73\xcc\x7e\x3a\x17\xc3\xc8\x98\xd7\x79\xee\xc8\x73\x46\x4a\xc9\x1c\xd4\x4b\x93\xfd\x75\xde\xbb\xd3\x13\x99\x9e\x73\xcc\x96\x4a\xb9\xde\x4a\x3e\x09\x5e\x25\xf7\x43\xd3\x2d\x31\xfa\xee\x13\x2b\xb0\xa9\x8b\x49\x0a\xbf\x11\xe3\x8a\x20\xce\xd3\x81\x8b\x91\xf5\xeb\xae\xe9\x9f\xac\xf6\xae\x9d\xe3\xc6\xf9\xf5\x3b\xb4\x6d\x47\xdc\x03\x49\x93\x7f\x04\xc7\x5a\x2c\xd0\x91\xd5\x2a\x4b\x57\xae\x37\xf1\xf6\x65\xf2\xff\x62\x1f\x46\xd8\xb8\x41\x3a\x32\x2e\xe3\xd6\xfc\xca\xaa\x17\xc6\xf9\xf6\x46\x45\x60\x59\x19\xd2\x2d\x57\x59\x7e\xaf\x45\xc8\xcb\xe4\xdb\x0f\x8f\x9e\x4d\x19\x97\xf7\x00\x00\x00\xff\xff\x3a\x2e\xb5\xef\x61\x02\x00\x00"

func idtablestakingAdminSet_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_claimedCdc,
		"idTableStaking/admin/set_claimed.cdc",
	)
}

func idtablestakingAdminSet_claimedCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x66, 0xe0, 0x59, 0x66, 0x4f, 0x7f, 0x86, 0x2c, 0x81, 0x4a, 0xc, 0xf4, 0xd, 0x48, 0x52, 0xdf, 0xd9, 0xe, 0xc1, 0xd6, 0x60, 0xc6, 0xcb, 0xa9, 0x2d, 0x1c, 0xe7, 0xd2, 0x5f, 0x71, 0xac}}
	return a, nil
}

var _idtablestakingAdminSet_node_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xd1\x8b\xd4\x40\x0c\xc6\xdf\xfb\x57\x7c\xec\xc3\xd1\x05\x69\x5f\xc4\x87\xa2\x1e\xa7\x8b\x50\x10\x11\xf7\xd4\xe7\xec\x34\x6d\xa3\xb3\x93\x32\x93\xba\x07\x72\xff\xbb\xb4\x73\xab\x77\xba\xe6\x25\xd0\x26\xdf\xf7\x4b\x32\x72\x9c\x34\x1a\x36\xef\xbc\x9e\xda\xdd\x2d\x1d\x3c\xef\x8d\xbe\x4b\x18\x36\x45\x51\xd7\xb8\x1d\x25\xc1\x22\x85\x44\xce\x44\x03\x12\x5b\x82\x8d\x0c\x09\x62\x42\xfe\x2b\xcb\x30\x1a\xb4\x07\x05\xf0\x9d\x24\x93\x30\x20\x68\xc7\xc5\xa3\xb6\x52\xba\x06\x7b\x8b\x12\x86\x67\x38\xad\x2d\x0d\x3e\xb7\xc1\x5e\x3c\xdf\xe2\x67\x51\x00\x40\x5d\xe3\xbd\x3a\xf2\xf8\x41\x51\x16\x10\xf4\x1a\x41\x88\xdc\x73\xe4\xe0\x18\xa6\xab\x73\xbb\xc3\x0a\x8a\x9b\xee\x28\x01\x7a\xf8\xc6\xce\x56\x09\xcf\x06\x5a\x3e\x7e\xe2\xbe\xc1\xd5\xbf\x43\x55\x6b\x4b\xf6\x9b\x22\x4f\x14\xb9\x24\xe7\xac\x01\xcd\x36\x96\x6f\x34\x46\x3d\x7d\x21\x3f\xf3\x16\x57\x37\xce\xe9\x1c\x6c\x01\xc4\x43\xd4\x35\x0e\x6b\xcd\x25\x2e\xfa\x1b\x67\x89\xc4\xbe\xaf\xce\x4c\x78\x85\xc5\xad\x4a\xa6\x91\x06\xae\xb2\xd6\xcb\xff\x82\xbe\x2e\xfb\xa8\xc7\x06\x17\xfe\x3f\xe4\xb5\x6c\x9f\xe5\x3e\x92\x8d\xdb\xdf\xc6\x4b\x5c\x5f\x63\xa2\x20\xae\xdc\xbc\xd5\xd9\x77\x08\x6a\x67\xfe\x27\xf4\x29\x8b\xe5\x09\x36\x59\xe3\x3e\x6f\x89\xef\xd8\xcd\xc6\x8f\x76\xf0\x64\xa2\x2a\xb1\x7d\xd0\x8e\xf3\x33\x28\x97\xbb\xb7\xbb\x06\xd2\xfd\x39\x73\xce\x67\xd1\xfb\x5f\x01\x00\x00\xff\xff\xed\xb1\x32\xf0\x72\x02\x00\x00"

func idtablestakingAdminSet_node_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_node_weightCdc,
		"idTableStaking/admin/set_node_weight.cdc",
	)
}

func idtablestakingAdminSet_node_weightCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_node_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_node_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x63, 0xba, 0x5b, 0xb1, 0xb7, 0xe, 0x48, 0x4, 0xc0, 0x8, 0x2a, 0xb4, 0x11, 0xbb, 0x54, 0xdb, 0x59, 0x3a, 0xb4, 0xdf, 0xa5, 0x3a, 0x14, 0xbb, 0xd0, 0xe, 0x62, 0x5d, 0xeb, 0xd8, 0x2f}}
	return a, nil
}

var _idtablestakingAdminSet_non_operationalCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x4c\x10\x86\xef\xfa\x15\x2f\x3e\x04\xf9\x22\xe5\xf0\xf1\x1d\x44\xdd\x90\x36\x04\x02\x21\x2d\x75\xda\x4b\xc8\x61\xbc\x3b\xb2\xb6\x5d\xef\x98\xdd\x71\x15\x30\xfe\xef\x65\x25\xcb\x75\x9b\x74\x2e\x06\xcf\xe8\x99\x67\x66\xc7\x6d\xb6\x12\x15\xb3\x5b\x2f\xfd\xdd\xcd\x23\xad\x3c\x2f\x95\x7e\xb8\xb0\x9e\x15\x45\x5d\xe3\xb1\x73\x09\x1a\x29\x24\x32\xea\x24\x20\xb1\x26\x68\xc7\xf0\x2e\x29\xa4\x45\x10\xcb\x09\x7d\x27\xa0\xc8\x08\x12\x20\x5b\x8e\x94\x8b\xc9\x67\x04\x05\x9b\xd3\x89\x11\xb9\xa7\x68\x13\x7a\xe7\x3d\x56\x8c\xde\x69\xd7\xb1\xb7\x45\x71\xd6\xa1\x74\x36\x35\x78\x5a\x6a\x74\x61\xfd\x3c\xc7\xbe\x28\x00\xa0\xae\x71\x2f\x86\x3c\x7e\x52\x74\x59\x13\xad\x44\x10\x22\xb7\x1c\x39\x18\x86\xca\xe0\x75\x77\x83\x61\x0c\x5c\xdb\x8d\x0b\x90\xd5\x77\x36\x3a\x20\x3c\x2b\x28\xff\xf9\x85\xdb\x06\x17\xaf\x47\xae\x86\x4f\xc6\x7e\xdb\xc8\x5b\x8a\x5c\x92\x31\xda\x80\x76\xda\x95\x1f\x24\x46\xe9\xbf\x91\xdf\xf1\x1c\x17\xd7\xc6\xc8\x2e\x68\x16\xc4\x31\xea\x1a\xab\xa1\xe6\x2d\x2f\xfa\x5b\x27\x47\x62\xdf\x56\x93\x13\x16\xc8\xdd\xaa\xa4\x12\x69\xcd\xd5\xc8\x7a\xf7\x4f\xd1\xf7\x65\x1b\x65\xd3\xe0\x8d\xfc\xf1\x77\x28\x5b\x8e\xb8\xcf\xa4\xdd\xfc\xd4\x38\xc7\xd5\x15\xb6\x14\x9c\x29\x67\x1f\x65\xe7\x2d\x82\xe8\xe4\xff\x87\x7d\x1a\x61\xe3\x04\xb3\x91\x71\x18\xb7\xc4\x2f\x6c\x76\xca\x67\x3b\xc8\x4b\xce\x27\x71\xef\x92\x36\xd8\x8f\xcf\xd8\xe0\xeb\xad\x7b\xf9\xff\xbf\x03\x16\xd8\x1f\x4e\xb5\xf9\x05\x9d\x85\x0b\x70\x36\x9d\x31\x72\x4c\x8c\x27\x67\x9f\xb1\xc0\x65\x75\x79\x4a\x1f\x7b\xbf\xda\x5f\x95\x58\x1f\x24\x7c\xfa\x7d\x7e\x0f\xf9\x36\x33\xa5\x9c\x70\x93\xfd\xe1\x57\x00\x00\x00\xff\xff\xed\xc5\xbd\xc8\xf9\x02\x00\x00"

func idtablestakingAdminSet_non_operationalCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_non_operationalCdc,
		"idTableStaking/admin/set_non_operational.cdc",
	)
}

func idtablestakingAdminSet_non_operationalCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_non_operationalCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_non_operational.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x67, 0x85, 0x95, 0x9d, 0x2d, 0xba, 0x33, 0x4b, 0x14, 0x79, 0x5d, 0x3f, 0x6a, 0xc7, 0xa0, 0x62, 0xd4, 0x6c, 0x93, 0x9e, 0x48, 0xd1, 0x80, 0x71, 0x73, 0x83, 0x56, 0xdc, 0xaa, 0xd3, 0x90}}
	return a, nil
}

var _idtablestakingAdminSet_open_access_node_slotsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x0f\x1f\x82\x0c\x41\xa2\x87\x96\x22\x9a\x86\xb4\xa1\x60\x28\x6d\xa9\xd3\xde\xc7\xab\x91\xb5\x89\xbc\x23\x76\x47\x76\x8d\xf1\x77\x2f\xbb\xb2\xda\xd4\x71\xe7\x22\x58\xcd\xfb\xcd\x9b\x3f\x76\xd3\x8b\x57\xcc\x3e\x75\xb2\x5b\xdc\x3f\xd0\xaa\xe3\xa5\xd2\x93\x75\xeb\x59\x96\x95\x65\x89\x87\xd6\x06\xa8\x27\x17\xc8\xa8\x15\x87\xc0\x1a\xa0\x2d\x43\x7a\x76\x70\x52\x33\x42\x27\x1a\xd0\x88\x07\x19\xc3\x21\xa4\xd7\x90\xe4\x5f\xcf\x92\xc8\x73\x12\xbb\x61\xb3\x62\x0f\x69\x4e\xef\xda\x92\xa6\x9f\x91\x9a\x94\x4c\xa6\x05\xf7\x62\xda\x6b\x78\x5e\x93\xaf\xbb\x88\x96\x06\xad\xec\xb0\x21\xb7\x1f\xcb\xe0\x51\xac\xe3\x1a\xd6\x25\x70\xef\x79\x6b\x65\x08\xa3\xb4\x38\xf5\xc0\xfb\x04\xf7\xdc\x78\x0e\x2d\xd7\xcf\xe8\x59\xf6\xac\xbb\x3c\x96\xbf\x4b\x4d\x2c\xa3\xaf\x0a\x3f\x16\x4e\x5f\xbd\x99\xe3\x90\x65\x00\x50\x96\xf8\x2c\x86\x3a\x6c\xc9\xdb\x38\xad\xb1\xed\x48\x66\xcf\xce\x30\x54\x92\x8f\xc5\x3d\xd2\x34\x71\x57\x6f\xac\x83\xac\x1e\xd9\x68\x42\x74\xac\xa0\xf8\xf8\x9d\x9b\x0a\x57\x2f\x27\x5f\x24\xc9\x58\xaf\xf7\xdc\x93\xe7\x9c\x8c\xd1\x0a\x34\x68\x9b\x7f\x10\xef\x65\xf7\x93\xba\x81\xe7\xb8\xba\x33\x46\x06\xa7\xd1\x20\x4e\x51\x96\x58\xa5\x9c\x4b\xbe\xe8\xdc\x4e\x8c\xc0\x5d\x53\x4c\x9e\x70\x13\xd7\xa8\x45\x50\xf1\xb4\xe6\x62\x64\xbd\xfb\xaf\xd1\xf7\x79\xe3\x65\x53\xe1\xc2\xff\xd3\x37\xa5\x2d\x47\xdc\x37\xd2\x76\xfe\xa7\x70\x8c\xdb\x5b\xf4\xe4\xac\xc9\x67\x1f\x65\xe8\x6a\x38\xd1\xc9\xff\x3f\xee\xc3\x08\x1b\x3b\x98\x8d\x8c\xe3\x38\x25\xfe\xc5\x66\x50\x9e\x96\x14\x63\x4b\x3e\xdd\x52\x5c\xe3\xbd\x4d\xcb\x25\xbf\xaf\x70\x88\x0b\x7d\x3b\xed\xf5\x88\x1b\x1c\x8e\x7f\x55\x2f\x15\x85\x75\x81\xbd\xe6\x4f\xbc\xaf\xf0\xfa\x1a\x67\x07\x32\xcf\x2e\x0f\xb1\x08\xac\xf1\xf6\xbf\x48\xcd\x29\x31\x9f\xd0\xa1\xba\x50\x65\xea\xe6\xf8\x3b\x00\x00\xff\xff\x8a\x95\x3c\xdd\x90\x03\x00\x00"

func idtablestakingAdminSet_open_access_node_slotsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_open_access_node_slotsCdc,
		"idTableStaking/admin/set_open_access_node_slots.cdc",
	)
}

func idtablestakingAdminSet_open_access_node_slotsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_open_access_node_slotsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_open_access_node_slots.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x68, 0xf8, 0x20, 0x4c, 0xde, 0x13, 0xb, 0x46, 0xe3, 0x9c, 0x33, 0x96, 0x7f, 0x58, 0x36, 0xcf, 0xb0, 0x16, 0xf4, 0xfb, 0x94, 0x6c, 0xa0, 0x10, 0xd0, 0x82, 0x5a, 0xb6, 0xeb, 0x2, 0x30}}
	return a, nil
}

var _idtablestakingAdminSet_slot_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xc1\x8e\xdb\x36\x10\xbd\xfb\x2b\x5e\x7d\x08\xbc\x48\x22\xd7\x40\x53\x04\x46\xdd\x20\xed\xa2\x80\xd1\x1c\x8a\x6e\xda\x4b\xd1\xc3\x98\x1a\x99\xec\x52\xa4\x40\x8e\xec\x18\x8b\xfd\xf7\x82\xa4\x2d\x59\x5b\x37\xbc\x18\x32\x67\xde\xbc\x79\xf3\x38\xa6\xed\x7c\x10\xcc\x7f\xb1\xfe\xb8\xbd\xff\x4c\x3b\xcb\x0f\x42\x8f\xc6\xed\xe7\xb3\xd9\x72\xb9\xc4\x67\x6d\x22\x24\x90\x8b\xa4\xc4\x78\x87\xc8\x12\x21\x9a\x11\xad\x17\x58\xd3\x1a\x89\x68\x7c\x00\x93\xd2\x70\xbe\x66\xc8\xa9\x63\x94\xf4\x14\xf4\xa9\xc4\x98\x08\xc2\x1f\x5b\x27\xab\xef\x41\x21\xd0\x09\xa2\x49\xa0\xbc\x13\x32\xae\x60\x66\xb8\x84\x96\x93\x5f\x20\x1a\x07\x1f\x6a\x0e\x68\x82\x6f\xf1\xed\xdb\xef\x2a\x6c\x25\xc1\xf6\x91\x6b\x88\x47\xe7\xbb\xde\x92\x70\x4e\x26\xd4\x26\x33\xa6\x70\xae\xa4\x29\xe2\x91\x4f\x11\x51\x9b\x46\xb8\xc6\xeb\x15\xa2\x2f\x77\xa2\xf9\x04\xb2\x66\xef\x72\xf2\xd1\x88\xce\x84\xd8\xf5\x2d\x07\x4a\xd1\x03\x91\x58\x08\xac\xde\xbe\xbb\x48\xc4\x81\x73\x7b\xce\x8b\xe6\x80\x96\x95\x26\x67\x62\x8b\xa3\x36\x4a\x83\xac\xf5\xc7\x22\x12\x21\x76\xac\x4c\x63\xb8\xce\xb9\xae\x6f\x77\x1c\xe0\x9b\xac\xd4\x4b\x21\x83\xb7\x8c\x8e\x03\xb8\xf3\x4a\x57\x39\x63\xdb\x14\xc6\x63\x91\xd4\x17\xe1\x40\xb6\xe7\x34\x9d\x73\x9d\x01\xe0\x0d\x8c\xe0\x68\xac\x85\x3f\x70\x08\xa6\x2e\xfa\x1c\x35\x09\x1f\x38\xe4\xf4\x1d\x73\x9e\xec\xa5\xf1\xe9\xcc\xab\xd9\xec\xea\x6b\x31\xce\x74\x8d\xbf\xca\x40\xff\xbe\xc3\xd3\x6c\x06\x00\xcb\x25\x3e\x79\x45\x16\x07\x0a\x26\xd9\xe9\x4c\x27\x70\xc3\x81\x9d\xe2\x34\xa8\xa4\xec\xf6\x1e\xd9\x6e\xf8\x58\xb7\x69\xb2\xbb\x7f\x58\x49\x86\xb0\x2c\xa0\xf4\xe7\xef\xdc\xac\xf1\xea\xbf\xd6\xac\x72\x4a\xa9\xd7\x05\xee\x28\xf0\x82\x94\x92\x35\xa8\x17\xbd\xf8\xc9\x87\xe0\x8f\x7f\x26\x3d\xee\xf0\xea\xa3\x52\xbe\x77\x92\x08\xe2\x7c\x96\x4b\xec\x72\xcc\x2d\x5e\xf4\x92\x4e\x3a\x91\x6d\x53\x5d\x38\x61\x83\x54\xad\x8a\xe2\x03\xed\xb9\x2a\x58\x3f\xfc\x2f\xd1\x1f\x17\xc9\x2f\x6b\xdc\xb8\x3f\xff\xe6\xb0\x87\x02\xf7\x1b\x89\xbe\x1b\x0a\xa7\xf3\xe1\x03\x3a\x72\x46\x2d\xe6\x3f\xfb\xde\x26\x23\xca\x85\xff\x84\x7d\x2c\x60\xa5\x83\x79\xc1\x78\x2e\x2a\xf1\x17\x56\xbd\xf0\x54\x83\x0c\x0a\xd3\xe0\xc8\xa8\x7d\x86\x2d\xe6\x3c\x81\xbf\x90\x12\x7b\x82\x77\xd7\xef\x3c\x5b\x71\xf0\xd5\x00\x65\x9a\xab\x67\x5e\x59\x76\x7b\xd1\xf8\x66\x83\x77\x57\xe5\xf2\xa8\x4a\x13\xd7\xcb\x84\xc2\xbe\x6f\xd9\x09\xda\x3e\x8e\xd5\xbf\x56\x75\x3e\x6a\x73\xee\x2d\x9d\x03\x85\x91\xc3\xfd\xf0\xee\xd7\x78\x4a\xfe\x7c\xbf\x3e\xef\x9d\x67\x6c\xf0\xf4\x3c\xc9\x1a\x97\xc4\xaf\x7c\x2a\x71\xef\xb1\xc1\x6a\xc4\x4e\xfe\x1d\xb0\xd3\x12\xba\xda\x69\xd3\x06\x6f\x30\xa8\x8c\x8b\x1c\x64\xf1\x98\xc0\x27\xb5\xde\x8c\xe1\xd3\x71\x4f\xa2\xb0\x79\xf1\xfd\x1a\xab\x5b\x02\x4c\x0c\x5a\x45\x96\x87\x81\xe4\xe4\xbd\xde\xa0\x78\x31\xca\xf3\xbf\x01\x00\x00\xff\xff\x96\xad\xa1\x96\x0c\x06\x00\x00"

func idtablestakingAdminSet_slot_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminSet_slot_limitsCdc,
		"idTableStaking/admin/set_slot_limits.cdc",
	)
}

func idtablestakingAdminSet_slot_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingAdminSet_slot_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/set_slot_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x6, 0x37, 0x67, 0xce, 0x5e, 0x51, 0xe0, 0xb4, 0x6f, 0x3a, 0xc9, 0x74, 0xe1, 0xfd, 0xf, 0x46, 0x87, 0x36, 0x44, 0xde, 0x71, 0xfa, 0x2, 0x4f, 0x1f, 0x19, 0xb3, 0x65, 0x3b, 0xac, 0xd4}}
	return a, nil
}

var _idtablestakingAdminStart_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xc1\x6e\xe2\x40\x0c\x86\xef\x79\x8a\x5f\x39\xa0\x70\x49\xee\x68\x77\x11\xbb\x68\x25\xa4\x1e\xaa\x82\x7a\x37\x13\x87\xa4\x0c\x33\x91\xc7\x29\xad\x10\xef\x5e\x4d\x42\x2a\x68\xa9\x2f\x91\x12\xfb\xfb\x3f\x3b\xcd\xa1\xf5\xa2\x48\xff\x5b\x7f\x5c\x2d\x37\xb4\xb5\xbc\x56\xda\x37\x6e\x97\x26\x49\x51\x60\x53\x37\x01\x2a\xe4\x02\x19\x6d\xbc\x43\x4b\xef\x01\xc2\x47\x92\x32\x40\x3d\xc8\x5a\x68\xcd\x08\x4a\x7b\x2e\xe1\x7c\xc9\x21\x49\xae\x27\x4e\x49\x02\x00\x45\x81\x07\x6f\xc8\xe2\x95\xa4\x89\x39\xa8\xbc\x80\x20\x5c\xb1\xb0\x33\x1c\x69\x91\xb4\x5a\xa2\xf7\xc0\xa2\x3c\x34\x0e\x7e\xfb\xc2\x46\x7b\x84\x65\x05\xc5\x97\x4f\x5c\xcd\x30\xf9\xee\x9c\xf7\x23\x43\x5e\x2b\xdc\x92\x70\x46\xc6\xe8\x0c\xd4\x69\x9d\xfd\xf5\x22\xfe\xf8\x4c\xb6\xe3\x29\x26\x0b\x63\x7c\xe7\x74\x8a\x53\xdf\x7f\x71\xdc\xf6\x3d\xf7\xbc\xe8\xab\x4e\xac\xc0\xb6\xca\x47\x27\xfc\x46\x4c\xcb\x83\x7a\xa1\x1d\xe7\x03\xeb\xd7\x8f\xa2\x7f\xb2\x4a\xfc\x61\x86\x3b\xdf\x2f\xcf\xbe\x6d\x3d\xe0\x1e\x49\xeb\xe9\x67\x70\xac\xf9\x1c\x2d\xb9\xc6\x64\xe9\x3f\xdf\xd9\x78\x7c\x1d\xfd\x6f\xec\xc3\x00\x1b\x36\x48\x07\xc6\x79\xb8\x12\xbf\xb1\xe9\x94\xaf\x6e\x70\xb3\x51\x1e\x94\x44\x47\x99\xae\xff\xa1\xd9\x08\x38\x7f\x04\x00\x00\xff\xff\xf1\x0e\x16\x1b\x3d\x02\x00\x00"

func idtablestakingAdminStart_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminStart_stakingCdc,
		"idTableStaking/admin/start_staking.cdc",
	)
}

func idtablestakingAdminStart_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminStart_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/start_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xc4, 0x6e, 0xfa, 0x21, 0x6b, 0xcd, 0x21, 0xf3, 0x8d, 0x36, 0xd7, 0x7, 0xec, 0xd6, 0x56, 0x6e, 0x33, 0x9, 0xa9, 0xaa, 0x47, 0xfe, 0x22, 0x3c, 0x89, 0x85, 0x3a, 0xa2, 0x1e, 0x7e, 0x98}}
	return a, nil
}

var _idtablestakingAdminTransfer_adminCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xc2\x40\x10\x85\xef\xfb\x2b\x1e\x1e\x6c\x02\x36\xde\xc5\x96\x4a\x4b\x4b\x6f\x05\xfd\x03\x63\x1c\xe3\xd2\x75\x27\xec\x8e\x8a\x88\xff\xbd\xb0\xc6\x24\xd4\xf6\xe0\x75\xe6\xcd\xbc\xef\xcd\xd8\x6d\x2d\x41\x31\x78\x77\x72\xf8\x7c\x5b\xd0\xd2\xf1\x5c\xe9\xdb\xfa\x6a\x60\x8c\x06\xf2\x91\x4a\xb5\xe2\x71\x32\x40\x1d\xb8\xa6\xc0\x99\x1c\x3c\x87\x09\x68\xa7\x9b\xec\x95\x6a\x5a\x5a\x67\xd5\x72\xcc\x31\x9c\x95\xa5\xec\xbc\x8e\x10\xb8\x64\xbb\x6f\x65\x73\x95\x40\x15\x77\x8a\x1c\x27\x63\x00\x60\x3c\xc6\x07\x2b\x08\xf1\xe2\x0b\x5a\x6d\xad\x47\x79\xdd\x7b\x4c\x2a\xc7\x8a\xb5\x93\x43\x03\x37\x4b\x9a\x27\x24\x92\xa2\xec\x31\x14\xf1\xe2\x54\xd8\x18\x77\x3c\x1d\xde\x06\x2b\xd2\xf0\x73\xf6\x47\xa7\xbf\xbd\x21\xfe\x22\xdd\xe4\xa6\x65\xe8\xb0\x30\x7d\x6c\x43\xb6\xa6\x4e\x68\x35\x7d\xf9\xdf\x73\x1d\x64\x3b\xc1\xfd\xce\x52\x65\x9d\x73\x51\xb1\x2e\x8e\x35\x67\x79\xd3\x5e\x71\xd4\x20\xc7\xfe\xcd\xae\xa7\x9d\xd3\x9e\xa1\x1b\xee\x83\xab\xa4\xca\x15\xfe\x21\x82\x2e\x3f\x41\x13\x23\x0d\xdf\x64\x8b\xb4\xe7\xec\xf7\x0f\x46\x50\xb9\x2f\x10\x70\x36\x67\x03\xf3\x13\x00\x00\xff\xff\xc2\xaf\x3d\x82\x7a\x02\x00\x00"

func idtablestakingAdminTransfer_adminCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_adminCdc,
		"idTableStaking/admin/transfer_admin.cdc",
	)
}

func idtablestakingAdminTransfer_adminCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_adminCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_admin.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x25, 0xd4, 0x59, 0xdf, 0x56, 0x62, 0x45, 0x63, 0x6d, 0xf4, 0xa3, 0xe8, 0xdd, 0x88, 0x6b, 0x4e, 0x75, 0x15, 0x87, 0x9c, 0x21, 0x71, 0xe6, 0xd7, 0xbe, 0x39, 0x7b, 0xf9, 0xca, 0xb, 0x38}}
	return a, nil
}

var _idtablestakingAdminTransfer_fees_adminCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x6b\xc3\x30\x10\x46\x77\xfd\x8a\xaf\x19\x5a\x07\x92\x78\x0f\xa1\x34\x4b\xa6\x6c\x85\xee\x57\xe5\x9c\x88\xc8\x3a\x21\x9d\x1d\x4a\xc9\x7f\x2f\x56\x6d\x43\x0a\xd5\x28\xde\x7d\xbc\xe7\xda\x28\x49\xb1\x38\x78\xb9\x1d\x98\xf3\xc2\x18\x4d\x14\x32\x59\x75\x12\xf0\x6d\x0c\x00\xc4\xc4\x91\x12\x57\x72\x0b\x9c\xb6\xa0\x4e\x2f\xd5\x51\xe8\xf4\x41\xbe\xe3\x25\x9e\xf7\xd6\x4a\x17\x74\x85\xc4\x96\x5d\x3f\x33\xef\xd4\xf3\x1f\x66\x39\x6d\x0e\xaf\xae\x71\x74\xe1\x0a\xbd\x30\xb2\xd2\xd5\x85\x33\xe8\xd4\xba\x00\x4b\x91\x3e\x9d\x77\xfa\x05\x15\x10\x62\x72\x3d\x29\x23\x7a\xb2\x3c\xdf\x7b\x56\x34\xcc\x79\x5f\x6e\x76\x6b\x14\xc1\x4d\x56\x49\x74\xe6\x8d\x17\x3a\xed\xde\xa6\xb4\x4d\xa1\x5c\xd6\x44\x2a\xe9\xb5\x6a\x92\xb4\x5b\xd4\x23\x5c\x37\x23\x56\xa8\xe5\xd3\x83\xe4\xd0\x51\x24\x1f\xb5\x86\x9f\xa9\xf8\x25\x83\x7e\x0b\x31\x2e\xce\x03\x13\x32\x7b\x65\xea\xb9\xda\xad\x67\xf3\x15\x54\xfe\x35\x29\x33\x77\x63\xee\x06\xe6\x27\x00\x00\xff\xff\xfa\x86\xe4\x0e\xae\x01\x00\x00"

func idtablestakingAdminTransfer_fees_adminCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_fees_adminCdc,
		"idTableStaking/admin/transfer_fees_admin.cdc",
	)
}

func idtablestakingAdminTransfer_fees_adminCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_fees_adminCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_fees_admin.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xca, 0xd0, 0x77, 0xb0, 0xdf, 0x5b, 0x72, 0x64, 0x30, 0x84, 0xd, 0xad, 0xab, 0x30, 0xf7, 0x99, 0x97, 0x0, 0x69, 0xef, 0x74, 0x82, 0xdc, 0x99, 0x8e, 0x86, 0x61, 0xff, 0xba, 0xfe, 0x61}}
	return a, nil
}

var _idtablestakingAdminTransfer_minter_deployCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xdb\x4e\x10\xbd\xfb\x53\x3c\xe5\x80\x1c\xfd\x82\x03\x12\x20\x64\xe1\x1f\x4a\xd3\x22\x55\x50\x0e\xa5\xf4\x82\x38\x6c\xec\x49\xbc\xc2\xde\xb5\x76\xc7\x49\xad\x28\xdf\xbd\x5a\xaf\xed\x04\x9a\x4a\xf5\x61\x93\x9d\x3f\x6f\x66\xde\xce\x8c\x2c\x2b\x6d\x18\x73\xd3\x54\xac\x83\xee\x36\xba\x2b\xf4\xe6\x87\x7e\x23\x35\x0a\x02\x36\x42\x59\x91\xb2\xd4\x2a\xac\xea\x45\x21\xd3\x7b\x6a\x6c\x8c\x17\xef\x13\xdd\x53\xf3\x20\x2d\x7f\x51\x6c\x9a\xd7\x09\x52\xad\xd8\x88\x94\x1f\x45\x49\x31\x9e\xd8\x48\xb5\x72\xd2\xec\xe0\x66\x68\x23\x4c\x36\x2b\x75\xad\x38\xc6\xf3\x9d\xfc\x75\x75\xd1\x4b\xe7\xf5\x81\x28\x15\x2a\x93\x99\x60\x7a\xd4\x19\x3d\xc8\x52\xb2\x0b\xfc\xfc\x55\xf1\xd5\xc5\xeb\x18\xdb\x20\x00\x2a\x43\x95\x30\x14\x5a\xb9\x52\x64\x62\x88\x9a\xf3\x70\x96\x65\xf7\xd4\x4c\xf0\x24\xd6\xf4\x53\x14\x35\x4d\xf0\x49\x1b\xa3\x37\xed\x65\x8c\x93\x59\x9a\xba\xe8\x1d\x06\x50\x10\x43\xa4\x29\x23\x41\xa7\x0a\x2b\xd1\x38\x3c\x8f\x3b\x6e\xad\xda\x63\xa9\x0d\xde\xa8\x81\x54\xd8\xf3\x81\x6d\xab\x73\x9f\x83\x89\xde\xa8\xb1\x91\xc8\xb2\x3d\x65\xb1\x73\x8a\x86\xeb\x04\xb9\xb0\xf9\xac\x58\x69\x23\x39\x2f\xbd\xf6\x9d\x68\x82\x0d\xc9\x55\xce\x5e\xe5\xff\xfb\x34\x76\x3e\xe7\xe9\x74\xda\x55\x05\x01\x43\x4b\x32\xa4\x52\x02\x6b\x70\x4e\x70\x6f\x88\xf6\x11\x31\xcb\x4a\xa9\x5c\xbe\x4e\x2e\x7c\x79\xb0\xac\x8d\x58\xd1\x50\xfd\xb2\x7f\x73\x6f\x9d\x74\x85\x47\x9d\x5d\xb4\x68\x23\xdd\x9c\x0c\xbd\x11\xb5\x86\xd2\xb2\x11\xac\xcd\xff\xe1\xd2\xe8\x32\xc6\xb4\xb3\x9f\xbe\xc7\x1b\x0f\xf4\xdc\xde\xa2\x12\x4a\xa6\xe1\x68\xae\xeb\x22\x83\xd2\x8c\xc5\xbf\x57\x61\xc8\xea\xda\xa4\x34\x1a\xef\x49\x98\x1b\x12\x4c\x10\xfb\x1a\xbe\x49\xc5\x64\xbe\x77\xb6\x7f\xd6\xe8\xf5\xb8\x39\xfd\x50\x76\x94\xb6\x50\x8f\xb4\xf1\x16\xa1\x28\x0a\xbd\xa1\xa1\x57\xcf\xcf\xfa\x2f\x3a\xeb\x12\x68\x9f\xbb\x27\xc9\x8a\x35\x85\x37\xa7\x1f\xe2\x4c\xc0\xfa\x18\x33\x5e\xdb\xe3\x58\x4b\x86\xc3\x23\x2d\x1f\x15\xa4\x56\x9c\x23\x49\x70\x39\x19\x78\x04\x50\x92\xb5\x62\x45\x31\x46\xf3\xde\x0b\xce\x0d\xad\x1f\x0a\x69\x19\x8b\x9a\x91\x8b\xb5\x63\xa7\x83\xd1\x4b\x5c\xf6\xec\x39\x52\x8e\x44\xfc\x2c\x53\x8e\xb1\x75\x83\x76\x1d\xc3\xcf\xdb\x0e\x09\xb6\xbb\xd6\x6b\x2d\x0c\x8c\x2e\xc8\xab\xae\x91\xe0\x3c\x18\x46\xa3\x68\x63\x4b\x75\x0c\x77\x98\x92\xbf\xc4\x7c\x71\xa8\xaf\x48\x3c\x48\x67\xeb\x64\x48\xfc\xcf\x7f\x38\x3f\x9c\x80\x96\xfb\x7e\xe3\xf8\x79\x53\xed\xde\x39\xdc\x42\xfd\xf6\x71\x67\x54\xf3\xf2\xfa\xfd\x02\x3a\x58\x3c\x47\x17\x8e\xcb\xcb\x75\xef\x2e\x08\x76\x01\x82\xdf\x01\x00\x00\xff\xff\x65\xb1\x43\xfb\x31\x05\x00\x00"

func idtablestakingAdminTransfer_minter_deployCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminTransfer_minter_deployCdc,
		"idTableStaking/admin/transfer_minter_deploy.cdc",
	)
}

func idtablestakingAdminTransfer_minter_deployCdc() (*asset, error) {
	bytes, err := idtablestakingAdminTransfer_minter_deployCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/transfer_minter_deploy.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x46, 0xb8, 0x38, 0xe7, 0xba, 0x52, 0x61, 0x21, 0x33, 0x9c, 0x15, 0x80, 0xc1, 0x96, 0x92, 0x28, 0x55, 0xc5, 0x1d, 0x94, 0x81, 0x4d, 0xcb, 0x9a, 0xad, 0x85, 0x3e, 0x8d, 0x78, 0xca, 0xa7}}
	return a, nil
}

var _idtablestakingAdminUpgrade_set_claimedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6b\x9d\x40\x14\xc5\xf7\x7e\x8a\x83\x8b\xa0\x10\x74\x5b\xa4\x6d\x48\x5f\x28\x3c\xe8\xa2\x34\x49\x37\xa5\x8b\xfb\xc6\x6b\x9c\x66\x9c\x2b\x33\xd7\xbe\x96\x90\xef\x5e\xc6\xc9\x4b\xff\x99\xbb\x50\x50\xcf\xef\x9e\xdf\x68\xa7\x59\x82\xa2\x7c\xef\xe4\xb8\xbf\xba\xa1\x83\xe3\x6b\xa5\x7b\xeb\xef\xca\xa2\x68\x5b\xdc\x8c\x36\x42\x03\xf9\x48\x46\xad\x78\xcc\xf4\x33\x22\xf0\x91\x42\x1f\xa1\x02\x72\x0e\x3a\x32\xa2\xd2\x3d\xf7\xf0\xd2\x73\x2c\x8a\x3f\x12\x95\x91\x9e\x3b\x7c\xb9\xdd\x7b\x7d\xf5\xb5\xc6\x43\x51\x00\x40\xdb\xe2\x83\x18\x72\xf8\x4e\xc1\xa6\xb5\x18\x24\x80\x10\x78\xe0\xc0\xde\x70\x82\x27\xf0\xfe\x0a\x6b\x2d\x5c\xf6\x93\xf5\x90\xc3\x37\x36\xba\x22\x1c\x2b\x28\x3d\xfc\xc4\x43\x87\xb3\xff\x15\x9a\x35\x92\xf7\xcd\x81\x67\x0a\x5c\x91\x31\xda\x81\x16\x1d\xab\xdb\xb9\x27\xe5\x9d\x78\x0d\x64\xf4\x1c\xef\x24\x04\x39\x7e\x26\xb7\x70\x8d\xb3\x4b\x63\x64\xf1\xfa\x5c\x38\x4d\x0a\x37\xe6\x29\x10\x9b\x65\x05\x54\x9e\x26\xee\x36\x8f\xf0\x1c\x59\x3e\x5d\xeb\xdf\x98\xb6\xc5\x61\xdd\xb5\xe5\x4b\xff\x6a\xa6\x89\xec\x86\xe6\xe4\x8a\x37\xb9\x48\x54\x09\x74\xc7\x4d\x66\xbd\x7e\xf1\x00\xde\x56\x43\x90\xa9\xc3\xc6\xfb\xa7\xfb\xfa\xd9\x75\xc6\x7d\x24\x1d\xeb\xe7\xc5\x69\x2e\x2e\x30\x93\xb7\xa6\x2a\x77\xb2\xb8\xf4\x8f\xf5\xd4\xff\xaf\xf6\x31\xc3\xb2\x41\x99\x19\x8f\xd9\x9a\x7f\xb0\x59\x94\xf1\xb0\x6d\xd4\x44\xd6\x9d\x23\x3b\x71\x5f\x9d\x72\x8f\xbf\x02\x00\x00\xff\xff\xa5\xfb\x4f\x7c\x9b\x02\x00\x00"

func idtablestakingAdminUpgrade_set_claimedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminUpgrade_set_claimedCdc,
		"idTableStaking/admin/upgrade_set_claimed.cdc",
	)
}

func idtablestakingAdminUpgrade_set_claimedCdc() (*asset, error) {
	bytes, err := idtablestakingAdminUpgrade_set_claimedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/upgrade_set_claimed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0xf4, 0xea, 0xb9, 0xff, 0x97, 0xa0, 0x94, 0xea, 0xd2, 0x70, 0xd9, 0xcf, 0xf0, 0x95, 0x5a, 0x86, 0x1e, 0xc8, 0x2b, 0xd7, 0x5c, 0x3a, 0x7a, 0x93, 0x8b, 0xcc, 0x9a, 0x8e, 0x51, 0x86, 0x95}}
	return a, nil
}

var _idtablestakingAdminUpgrade_stakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\x21\x85\x5c\x40\x52\x4b\x3a\x51\x84\xd4\x9a\x4a\x2c\xd6\xcd\xa2\xc1\xb8\x17\x2e\x7b\x58\x48\xfe\x5d\x2e\x66\x8a\xa9\xde\x9b\x71\x16\x49\x27\x62\xeb\x83\x7a\x0e\x9d\xd4\xb8\xb6\x8d\xda\xee\x56\xe2\xeb\x1c\x00\x8c\x51\x46\x8a\xe2\x89\xd9\x6a\x50\xb2\xa7\x6f\xc7\x8e\x4c\x0e\x41\x2d\x12\x5b\x89\xcd\x9e\x39\x24\xb5\xec\x60\x4d\xc6\x2b\x5e\x91\xa9\x4a\x8b\xe2\x95\xde\x52\xa3\x38\x0d\xe1\xd3\x1c\x2f\x74\x1f\xe4\x6c\xf4\xea\xf5\x51\x6c\xf1\xbf\xcf\x5d\x2e\x2b\xb3\x9b\x7f\x01\x00\x00\xff\xff\xe2\xcb\x57\x03\x9f\x00\x00\x00"

func idtablestakingAdminUpgrade_stakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingAdminUpgrade_stakingCdc,
		"idTableStaking/admin/upgrade_staking.cdc",
	)
}

func idtablestakingAdminUpgrade_stakingCdc() (*asset, error) {
	bytes, err := idtablestakingAdminUpgrade_stakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/admin/upgrade_staking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x5e, 0x5c, 0xd3, 0xb2, 0xd5, 0xa5, 0x4c, 0x45, 0xf4, 0x38, 0x8c, 0x9, 0x99, 0x95, 0xbc, 0xbd, 0x11, 0x8d, 0x62, 0x50, 0xa2, 0x21, 0xf2, 0x46, 0xce, 0x6e, 0xbe, 0x67, 0x1f, 0x7, 0x96}}
	return a, nil
}

var _idtablestakingDelegationDel_request_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x0f\x1d\x8c\x74\x91\x2e\xa5\x07\xd3\xd6\xb4\x35\x86\x42\x49\x42\x1c\xe7\x3e\x5e\x8d\x6c\x25\xeb\x1d\x65\x34\x8a\x0d\xc1\xff\x3d\xc8\xb2\x45\x42\x44\x4e\x99\xcb\x1e\x76\xde\x9b\xf7\x0d\x53\xed\x6a\x51\x43\xbc\xf0\xb2\xff\x37\xbf\xa3\xb5\xe7\xa5\xd1\x63\x15\x36\x71\x14\x45\xa6\x14\x1a\x72\x56\x49\x48\x68\x27\x6d\xb0\x29\x56\x8b\xea\xf0\xfd\x5b\x8a\x97\x28\x02\x80\x3c\xc7\x7f\x71\xe4\xf1\x4c\x5a\x75\x72\x94\xa2\x20\x28\x97\xac\x1c\x1c\xc3\x04\xb6\x65\xcc\xd9\xf3\x86\x4c\x14\xb2\x7e\x60\x67\x27\xb5\x67\x43\x71\xf9\xb8\xe5\x72\x0a\x6a\x6d\x9b\x7c\x4c\x93\x0d\xf2\xeb\x7d\x60\x4d\x31\x19\xe9\xb9\x92\x82\x87\xbe\x3e\x5e\xad\x5c\x93\x72\x42\xce\xd9\xd9\xfc\x8f\xa8\xca\xfe\x9e\x7c\xcb\x29\x26\xbf\x9d\xeb\xb8\x3a\x1e\x9c\x2b\xcf\xb1\x3e\xf5\x8c\x61\x14\x63\x18\x5d\x35\xec\xcb\xec\x2d\x0b\x7e\xa2\x9b\x9a\x35\x26\x4a\x1b\xce\x7a\xcf\x1f\x5f\x06\xf8\x2b\x29\x55\x76\x53\x7c\xe6\xb5\xec\x67\xdf\x90\x6d\xd3\x21\x69\x57\xb3\x19\x6a\x0a\x95\x4b\xe2\xbf\xd2\xfa\x02\x41\xec\x02\xfd\x0e\x79\x00\x8a\xd3\x7e\xa1\xc7\xfe\xe1\x03\xbb\xd6\xf8\x72\x05\xa3\x0b\xc8\x94\x9f\x5a\x6e\x6c\x15\x9a\x3e\xd7\x70\x43\xfd\x3b\x38\x1e\x5f\x03\x00\x00\xff\xff\x0f\xe4\x9f\x0b\x86\x02\x00\x00"

func idtablestakingDelegationDel_request_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_request_unstakingCdc,
		"idTableStaking/delegation/del_request_unstaking.cdc",
	)
}

func idtablestakingDelegationDel_request_unstakingCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_request_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x19, 0xc7, 0xd4, 0x61, 0xb5, 0xae, 0xd1, 0x56, 0x62, 0xb6, 0x45, 0x4, 0x79, 0x88, 0xbf, 0xed, 0x12, 0x92, 0x62, 0x48, 0x6a, 0x60, 0x6, 0x6f, 0xb7, 0xcd, 0xad, 0x8, 0x67, 0x3f, 0x28}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x8a\xdb\x40\x0c\xbe\xfb\x29\x84\x0f\x8b\x7d\xa8\x7d\x29\x3d\x84\x6d\x97\xb6\x4b\xa0\xb0\x6c\x4a\x93\x26\x67\x79\x2c\xdb\xd3\x4c\x46\x66\x2c\xd7\x81\x92\x77\x2f\xfe\xad\x43\x42\x08\x65\xe7\x62\x2c\x69\xbe\x3f\x31\xfa\x50\xb2\x13\xf0\x97\x86\x9b\x6f\xcf\x1b\x4c\x0c\xad\x05\xf7\xda\xe6\xbe\x37\xef\x6d\x78\x4f\x76\x56\xaa\x6d\xae\x13\x43\x43\xd9\xf3\xc4\xa1\xad\x50\x89\x66\x1b\xe0\x81\x6b\x2b\x0b\xf8\xb9\xd4\xc7\x0f\xef\x43\xf8\xe3\x79\x00\x00\x71\x0c\x2f\xac\xd0\xc0\x6f\x74\xba\x25\x82\x8c\x1d\x20\x38\xca\xc8\x91\x55\x04\xc2\x20\x05\x41\x4a\x86\x72\x14\x76\xc0\xc9\x2f\x52\xd2\xdd\x36\x24\xff\x1a\x3f\x28\x5b\x00\xd6\x52\x04\x97\xba\xa3\xe7\x71\x6a\xd5\x58\x72\x21\x3c\x5c\x99\x79\xe5\x94\xa6\x39\x6f\x22\xc8\x46\xa7\x33\x82\xb9\xd3\x68\xa7\xa5\x48\x1d\x36\x03\x6a\x5f\xdc\x62\x6d\xa4\x07\x29\x1d\x95\xe8\x28\x40\xa5\x64\x00\xf8\xc2\xce\x71\xb3\x45\x53\x53\x08\x0f\x9f\x95\x6a\xc3\x69\x43\x81\xe1\xc4\x31\x24\xdd\xcc\xdd\x59\xb4\xa7\x22\x93\x45\xf3\x40\xe0\x23\xb4\xac\x51\x25\xec\x30\xa7\xa8\xc7\x7c\x7c\xb3\x94\x3e\x05\x99\xe3\xc3\x02\x6e\x61\xad\x7b\xee\xef\x28\x45\x38\x29\x6d\xcf\xd3\x13\x94\x68\xb5\x0a\xfc\xaf\x5c\x9b\x14\x2c\xcb\x68\xfa\xcc\xf2\x64\xc8\x0f\xbd\x73\xab\xf3\xd5\xdc\xb4\x7a\xe7\xbe\x46\x3b\xf1\x00\x12\x4f\x04\x5d\xfb\xff\xe4\x2f\x5f\x56\x3b\xe8\xee\x8f\xfa\x4f\xfd\x87\x8e\xa4\x6a\xa1\xf1\x29\x5c\x5d\xe0\xf8\x43\xaf\xd4\x0b\xa9\x06\x89\x8f\xef\x2e\x12\x88\x9a\xc1\xd8\xf4\xd8\xfa\x6f\x38\xd1\x9e\xfe\x06\x00\x00\xff\xff\x03\xc6\x10\x6e\xda\x03\x00\x00"

func idtablestakingDelegationDel_stake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_new_tokensCdc,
		"idTableStaking/delegation/del_stake_new_tokens.cdc",
	)
}

func idtablestakingDelegationDel_stake_new_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0xbe, 0xed, 0xb5, 0x31, 0x43, 0xeb, 0xe2, 0x1e, 0xb4, 0xc3, 0x85, 0x7d, 0x5c, 0x5e, 0x45, 0x75, 0x33, 0x3e, 0x18, 0x52, 0x9f, 0x6e, 0xab, 0xb6, 0x57, 0x66, 0x12, 0xbd, 0xb5, 0x6c, 0xb3}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_rewardedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xc3\x50\x0c\xc7\xef\xfd\x14\xa1\x87\xd1\x5e\xda\x8b\x78\x18\xea\x50\xc7\x40\x10\x95\x6d\x7a\xcf\x5e\xd3\xad\xee\xf5\xa5\xa4\xa9\x1d\xc8\xbe\xbb\x74\x5d\x1f\x8a\xc5\x93\xb9\x84\xc7\x4b\xfe\xf9\xff\x42\x8a\xb2\x62\x51\x08\x17\x96\xdb\x87\xf9\x1a\x37\x96\x56\x8a\xfb\xc2\x6d\xc3\x20\x08\x54\xd0\xd5\x68\xb4\x60\x17\x61\xc9\x8d\xd3\x29\xbc\x2e\x8a\xc3\xe5\x45\x0c\x9f\x41\x00\x00\x90\xa6\xf0\xc8\x06\x2d\x7c\xa0\x14\x5d\x3b\xe4\x2c\x80\x20\x94\x93\x90\x33\x04\xca\xa0\x3b\x82\x39\x59\xda\xa2\xb2\x00\x6f\xde\xc9\xe8\xa9\xdb\x92\x42\x36\x7c\x2c\x29\x9f\x02\x36\xba\x8b\x7e\xbb\x49\x7c\xfb\x73\xeb\x48\x62\x98\x8c\xd4\x3c\x71\x46\xbe\xae\xb7\x57\x09\x55\x28\x14\xa1\x31\x7a\x16\xbf\x63\x11\x6e\xdf\xd0\x36\x14\xc3\xe4\xd6\x98\x8e\xab\xe3\x81\x73\xa4\x29\x6c\x4e\x35\x63\x18\xd9\x18\x46\x17\x35\xd9\x3c\xf9\xce\x02\xd7\xd0\x4d\x4d\x6a\x65\xc1\x2d\x25\xbd\xe6\xd5\xbf\x01\xde\x44\xb9\x70\x39\x85\xbf\xb4\x56\xfd\xec\x17\xd4\x5d\xec\x9d\x76\x31\x9b\x41\x85\xae\x30\x51\x78\xcf\x8d\xcd\xc0\xb1\x0e\xd0\x3f\x90\x3d\x50\x18\xf7\x0b\x3d\xf6\x89\x0e\x64\x1a\xa5\xe1\x0a\x46\x17\x30\x3c\x68\x49\x2d\x4a\x46\xd9\x9a\xf7\xe4\x6a\x7f\x49\x7d\xf6\xba\xc7\xaf\x00\x00\x00\xff\xff\x45\xd0\x69\xa8\x8c\x02\x00\x00"

func idtablestakingDelegationDel_stake_rewardedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_rewardedCdc,
		"idTableStaking/delegation/del_stake_rewarded.cdc",
	)
}

func idtablestakingDelegationDel_stake_rewardedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_rewardedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_rewarded.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x2e, 0xb1, 0xef, 0x37, 0x60, 0x44, 0x7e, 0xd6, 0xf8, 0x7b, 0x97, 0x9b, 0xe9, 0xf5, 0x4b, 0x62, 0x3, 0x9b, 0xeb, 0x62, 0x23, 0xa8, 0xec, 0xf, 0x6d, 0x2a, 0x67, 0xdc, 0xf4, 0x5e, 0xbb}}
	return a, nil
}

var _idtablestakingDelegationDel_stake_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x8f\x1c\x4a\x72\x49\x2e\xe2\xa1\xa8\x45\x2d\x05\x41\x54\x6c\xeb\x7d\xba\x99\xb4\xb1\xdb\x9d\xb0\x99\xd8\x82\xf4\xbf\x4b\x9a\x26\x28\x06\x4f\xce\x65\x58\x76\xe6\xcd\xfb\x86\x29\x76\xa5\x78\x45\x38\xb3\xb2\x7f\x98\x2e\x68\x65\x79\xae\xb4\x2d\xdc\x3a\x0c\x82\x40\x3d\xb9\x8a\x8c\x16\xe2\x22\xda\x49\xed\x74\x8c\xe5\xac\x38\x5c\x5e\xc4\xf8\x0c\x02\x00\x48\x53\x3c\x8a\x21\x8b\x0f\xf2\x45\xd3\x8e\x5c\x3c\x08\x9e\x73\xf6\xec\x0c\x43\x05\xba\x61\x4c\xd9\xf2\x9a\x54\x3c\x64\xf5\xce\x46\x4f\xdd\x96\x15\x59\xf7\xf1\xca\xf9\x18\x54\xeb\x26\xfa\xed\x26\xe9\xdb\x9f\xf7\x8e\x7d\x8c\xd1\x40\xcd\x93\x64\xdc\xd7\xb5\xf6\x4a\xcf\x25\x79\x8e\xc8\x18\x3d\x8b\xdf\x89\xf7\xb2\x7f\x23\x5b\x73\x8c\xd1\xad\x31\x0d\x57\xc3\x83\x73\xa4\x29\x56\xa7\x9a\x21\x8c\x6c\x08\xa3\x89\x8a\x6d\x9e\x7c\x67\xc1\x35\x9a\xa9\x49\xa5\xe2\x69\xcd\x49\xab\x79\xf5\x6f\x80\x37\x51\xee\x65\x37\xc6\x5f\x5a\xf3\x76\xf6\x0b\xe9\x26\xee\x9d\x36\x31\x99\xa0\x24\x57\x98\x28\xbc\x97\xda\x66\x70\xa2\x1d\xf4\x0f\xe4\x1e\x28\x8c\xdb\x85\x1e\xdb\xc4\x07\x36\xb5\x72\x77\x05\x83\x0b\xe8\x1e\xbc\x74\x95\xd2\x96\xb3\x85\x6c\xd9\x55\xfd\x25\xb5\xb9\xd7\x3d\x7e\x05\x00\x00\xff\xff\x6a\xe4\xd9\x86\x8c\x02\x00\x00"

func idtablestakingDelegationDel_stake_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_stake_unstakedCdc,
		"idTableStaking/delegation/del_stake_unstaked.cdc",
	)
}

func idtablestakingDelegationDel_stake_unstakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_stake_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_stake_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0xe, 0x9, 0x3c, 0xdc, 0x72, 0x55, 0xec, 0xc, 0x40, 0x87, 0x8d, 0xf7, 0xf6, 0x9e, 0x7e, 0x88, 0x36, 0xd2, 0xb9, 0xe5, 0xcf, 0xaf, 0xbb, 0x89, 0xb, 0x89, 0x23, 0x6c, 0x82, 0xfa, 0x99}}
	return a, nil
}

var _idtablestakingDelegationDel_withdraw_reward_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6f\xd4\x40\x0c\xc5\xef\xf3\x29\xac\x1c\x56\xc9\x81\xe4\x82\x38\xac\x0a\x15\x50\xad\x84\x54\x51\xd4\x96\x72\xf6\xce\x38\x9b\xa1\x93\x71\xe4\x38\xa4\x12\xea\x77\x47\xf9\xcb\x96\x2e\x08\x21\x7c\x99\x83\x9f\xfd\xde\x6f\xbd\xf1\x75\xc3\xa2\x90\xec\x02\xf7\x1f\x2e\x6e\x71\x1f\xe8\x46\xf1\xde\xc7\x43\x62\x8e\x7b\xb7\x7c\x4f\x31\x31\xc6\xa8\x60\x6c\xd1\xaa\xe7\x98\x62\xcd\x5d\xd4\x2d\x7c\xde\xf9\x87\x57\x2f\x33\xf8\x6e\x0c\x00\x40\x51\xc0\x25\x5b\x0c\xf0\x0d\xc5\x0f\x1b\xa1\x64\x01\x04\xa1\x92\x84\xa2\x25\x50\x06\xad\x08\x1c\x05\x3a\xa0\xb2\x00\xef\xbf\x92\xd5\x71\x3a\x90\xfe\x6c\x5c\x53\xb9\x05\xec\xb4\x4a\x9f\x07\xcc\x2f\x16\xd5\x55\x1f\x49\x32\xd8\x9c\xd0\x7c\x64\x47\xab\xce\xac\x06\xe5\x82\x34\x1a\x6c\x56\xc2\xfc\x0e\xbb\xa0\x93\xae\x11\x6a\x50\x28\x45\x6b\x75\x0e\xf1\x8e\x45\xb8\xbf\xc3\xd0\x51\x06\x9b\xb7\xd6\x0e\xfc\x03\x37\xcc\x55\x14\xb0\x1f\x35\x7f\x8d\x3b\x54\x4b\xa1\xcc\x8f\x99\xe1\x35\x0c\xae\x79\xab\x2c\x78\xa0\x7c\xda\x79\xf6\xdf\x7e\x88\x37\x69\x29\x5c\x6f\xe1\x4f\xbb\x6e\x26\xef\x4f\xa8\x55\xb6\x26\x1d\xea\xfc\x1c\x1a\x8c\xde\xa6\xc9\x7b\xee\x82\x83\xc8\xba\x40\x3f\x41\x6e\xa7\x8d\x80\xae\xf6\x31\xc9\xcc\x53\xdc\xe3\x0b\xfc\x06\xf7\xd7\xb3\x2c\xa9\x8b\x59\x57\xac\x3b\xc6\xf6\xbf\xa5\xdc\x5d\x5e\x7d\x81\x71\x7e\x89\xf8\x38\x3d\xf4\x40\xb6\x53\x5a\xfe\xd4\x27\x83\xe7\x8e\x1a\x6e\xbd\xce\xc1\xce\x5e\x3c\xbb\x64\xde\x7b\xad\x9c\x60\x7f\x4d\x3d\x8a\x23\x37\x8e\xb6\xeb\xa7\x33\xbd\xd9\x6a\xfd\xf8\x23\x00\x00\xff\xff\xc9\xd0\x16\xdd\x91\x03\x00\x00"

func idtablestakingDelegationDel_withdraw_reward_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_withdraw_reward_tokensCdc,
		"idTableStaking/delegation/del_withdraw_reward_tokens.cdc",
	)
}

func idtablestakingDelegationDel_withdraw_reward_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_withdraw_reward_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_withdraw_reward_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xa7, 0x4d, 0x6f, 0xf4, 0xed, 0x12, 0x76, 0xaa, 0x97, 0xad, 0xc2, 0xc8, 0x9f, 0xf3, 0xf, 0x4f, 0x47, 0x55, 0xc9, 0xd1, 0xad, 0x21, 0x75, 0x7f, 0x60, 0x2b, 0xa1, 0xb2, 0x8c, 0x3, 0x96}}
	return a, nil
}

var _idtablestakingDelegationDel_withdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4d\xeb\xd3\x40\x10\xc6\xef\xfb\x29\x86\x1c\x4a\x72\x30\xb9\x88\x87\xf2\xd7\x3f\x6a\x29\x08\xc5\x8a\x7d\xf1\x3c\xdd\x4c\x9a\xb5\x9b\x9d\xb0\x99\x98\x82\xf4\xbb\x4b\x5e\x6d\x6d\x15\x11\xf7\xb2\x87\x79\x66\x9e\xe7\xb7\x93\x98\xa2\x64\x2f\x10\x2c\x2d\x37\x1f\x16\x5b\x3c\x58\xda\x08\x9e\x8c\x3b\x06\xea\xba\xb6\xe5\x13\xb9\x40\x29\x25\x1e\x5d\x85\x5a\x0c\xbb\x10\x0b\xae\x9d\xcc\x61\xb7\x34\xe7\x57\x2f\x23\xf8\xae\x14\x00\x40\x92\xc0\x8a\x35\x5a\xf8\x86\xde\xb4\x13\x21\x63\x0f\x08\x9e\x32\xf2\xe4\x34\x81\x30\x48\x4e\x90\x92\xa5\x23\x0a\x7b\xe0\xc3\x57\xd2\xd2\x75\x5b\x92\x9f\x85\xcf\x94\xcd\x01\x6b\xc9\xc3\xfb\x80\xf1\x62\x54\xad\x1b\x47\x3e\x82\xd9\x03\xcd\x47\x4e\x69\xd2\xa9\xc9\x20\x1b\x91\x3a\x83\xd9\x44\x18\xef\xb1\xb6\xd2\xeb\x4a\x4f\x25\x7a\x0a\x51\x6b\x19\x42\xbc\x63\xef\xb9\xd9\xa3\xad\x29\x82\xd9\x5b\xad\x5b\xfe\x96\x1b\x86\x93\x24\x70\xe8\x34\x7f\x8d\xdb\x9e\x8a\x6c\x16\x5f\x33\xc3\x6b\x68\x5d\xe3\x4a\xd8\xe3\x91\xe2\x7e\xe6\xd3\x7f\x7b\x88\x37\x61\xe6\xb9\x98\xc3\x9f\x66\x6d\x7a\xef\x4f\x28\x79\x34\x25\x6d\xcf\xf3\x33\x94\xe8\x8c\x0e\x83\xf7\x5c\xdb\x14\x1c\xcb\x08\x7d\x83\x5c\xf5\x13\x01\xd3\xc2\xb8\x20\x52\xb7\xb8\xd7\x1b\xf8\x0d\xee\xaf\x6b\x19\x53\x27\x83\x2e\x99\x66\x74\xe5\x7f\x4b\xb9\x5c\xad\xbf\x40\xd7\x3f\x46\xbc\xf4\x17\x9d\x49\xd7\x42\xe3\x47\xfd\x30\x78\x9c\x52\xc9\x95\x91\x21\xd8\xd3\x8b\xbb\x4d\xc6\x8d\x91\x3c\xf5\xd8\xec\x5c\xfb\x1e\x94\x76\xad\xd5\xf4\xeb\xf4\x77\x34\x59\x5f\x7e\x04\x00\x00\xff\xff\xa4\x5d\xe9\x76\x91\x03\x00\x00"

func idtablestakingDelegationDel_withdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationDel_withdraw_unstaked_tokensCdc,
		"idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc",
	)
}

func idtablestakingDelegationDel_withdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationDel_withdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0xa4, 0x4a, 0x51, 0x6c, 0x6b, 0xc, 0x6c, 0x48, 0xcd, 0xb8, 0x32, 0x91, 0xf, 0xbd, 0x29, 0x8a, 0x84, 0x93, 0x9c, 0x73, 0xf5, 0x67, 0x2d, 0x9d, 0xc1, 0xd8, 0x6d, 0x4c, 0xc6, 0x8d, 0x6c}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_committedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x3d\x35\x20\x2d\xa8\x78\x28\x78\x32\x14\x72\x6e\xfb\x03\xa6\x9b\x49\x3a\x74\x33\x53\x76\xa7\x28\x88\xff\x5d\x62\x68\x14\x7b\x5a\xf6\xf1\xf8\xde\x7c\x32\x5c\x2c\x3b\x16\xdb\x64\xef\x4d\xbd\xa7\x63\xe2\x9d\xd3\x59\xb4\x5f\x84\xb0\x5e\x63\x7f\x92\x82\x12\xb3\x5c\x1c\x99\xfd\x9a\xb5\xc0\x4f\x8c\x23\x25\xd2\xc8\xb0\x0e\xd1\x86\x41\xdc\xb9\x85\xdb\x99\xb5\x8c\x19\xa1\xe5\xc4\x3d\xb9\xe5\x10\x28\x46\x2e\x65\x49\x29\x55\xe8\xae\x8a\x81\x44\x97\x6a\x2d\x37\xf5\x06\x3b\xcf\xa2\xfd\xc3\x6f\x7f\x0c\x0f\x8d\xfa\xd3\x63\xb5\xc1\x61\x2b\x1f\x2f\xcf\xf8\x0c\x00\x90\xd8\xc7\x5a\xa3\x9d\xe1\x15\xf7\x17\xaf\xea\x99\xa1\x9d\xcd\x0b\xd3\xfb\x6f\xe1\xcf\xa7\xfa\x81\x4f\x72\x37\xfe\x6a\x52\x79\xbb\xa9\x85\xaf\xef\x00\x00\x00\xff\xff\x30\x0c\xb2\x84\x29\x01\x00\x00"

func idtablestakingDelegationGet_delegator_committedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_committedCdc,
		"idTableStaking/delegation/get_delegator_committed.cdc",
	)
}

func idtablestakingDelegationGet_delegator_committedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_committedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_committed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x91, 0xb1, 0xa4, 0xa4, 0xf9, 0xbd, 0xfc, 0xbe, 0x35, 0x19, 0xc1, 0x1d, 0xe4, 0x45, 0xb0, 0x65, 0x7, 0x9c, 0x25, 0xcf, 0x3, 0x93, 0x3a, 0x43, 0x96, 0x12, 0x21, 0x62, 0x4b, 0x2d, 0xf8}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xb1\x6a\x85\x40\x10\x45\xfb\xfd\x8a\x8b\x95\x42\x88\x90\x74\xd6\x12\xb0\xd6\x7c\xc0\x64\x1d\x75\xc8\x3a\x2b\xbb\x23\x16\x21\xff\x1e\x24\xc1\x84\xbc\xe2\x55\xc3\x5c\x0e\x9c\x23\xeb\x16\x93\xa1\x78\x09\xf1\xe8\xda\x81\xde\x02\xf7\x46\xef\xa2\x73\xe1\x5c\x5d\x63\x58\x24\x23\xfb\x24\x9b\x21\xb1\xed\x49\x33\x28\x04\xd8\xc2\x10\x9d\x22\x28\xe7\xe8\x85\x8c\x47\x1c\x62\x0b\x08\x23\x07\x9e\xc9\x62\x72\x8e\xbc\xe7\x9c\x4b\x0a\xa1\xc2\xb4\x2b\x56\x12\x2d\x35\x8e\xdc\xb5\x0d\x7a\x4b\xa2\xf3\xc3\x2f\x7f\x8e\xaf\x9d\xda\xf3\x53\xd5\xe0\x36\xe8\xb1\xbd\xc0\x53\xfc\xe1\x00\xfc\x34\xdd\xa5\x2f\xe9\xf7\xfd\x27\xfd\xf3\x54\xee\xf3\x2b\x00\x00\xff\xff\x35\xe3\xe7\xa4\x13\x01\x00\x00"

func idtablestakingDelegationGet_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_infoCdc,
		"idTableStaking/delegation/get_delegator_info.cdc",
	)
}

func idtablestakingDelegationGet_delegator_infoCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0xb0, 0x6d, 0xe4, 0xc3, 0x5b, 0xe6, 0x53, 0xdd, 0x56, 0x11, 0xa0, 0x29, 0x40, 0xd6, 0xcb, 0x98, 0x82, 0xe4, 0xf8, 0x20, 0xe2, 0x9a, 0xb6, 0xeb, 0x65, 0x7a, 0x71, 0xa0, 0x9a, 0x8b, 0x87}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_info_from_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\xc1\x87\x62\x43\xb1\xef\xa1\x6d\x08\x0d\x85\x5c\x4a\xa1\xf9\x81\xb5\xb4\x4e\xd4\x2a\x5a\x23\xad\xc9\x21\xe4\xdf\x4b\xe2\x26\x4e\x69\xa1\x3a\x2d\xab\x61\xde\xec\xf8\x5d\x2f\x49\x51\xbc\x04\xd9\xaf\x96\x6b\x6a\x03\xbf\x2b\x7d\xfa\xb8\x29\x8c\x69\x1a\xac\xb7\x3e\x23\xdb\xe4\x7b\xc5\x86\x35\x83\x42\x80\x6e\x19\x3e\x76\x02\x6a\x65\x50\x10\x1c\x07\xde\x90\x4a\x02\x45\x87\xc4\x3a\xa4\x98\xe1\xd5\x18\xb2\x96\x73\x2e\x29\x84\x0a\xdd\x10\xb1\x23\x1f\x4b\x72\x2e\x71\xce\x33\x2c\xc6\xa1\x9a\xe1\x37\xbf\x5e\x5e\x4c\x57\x27\xd4\xc1\x18\x00\x08\xac\x37\xb4\xc7\x53\xa6\x85\xb5\x32\x44\xbd\xb8\x56\x67\xdd\xe9\xd5\x96\x7a\x6a\x7d\xf0\xea\x39\xd7\xad\xa4\x24\xfb\x87\xbb\xc3\x1f\xa8\x57\x71\x7c\xc5\xbd\x0d\x6d\xf0\xf6\xf8\x54\x36\xfd\x79\x6a\xba\x20\xfb\x6f\xe5\x55\x34\x51\xe6\x73\xf4\x14\xbd\x2d\x8b\x67\x19\x82\x43\x14\xc5\xc8\x42\xe2\x8e\x13\x47\xcb\x50\xb9\x49\x2d\xed\x07\x5b\x2d\xaa\xf1\xa2\xb1\xad\x7f\x0b\x28\xa3\x38\x5e\x2d\x67\x93\x4f\x3d\x6e\xee\xa7\xcd\xcf\x6f\xef\x2a\x73\x34\x5f\x01\x00\x00\xff\xff\x3b\x06\xb6\xf7\xe1\x01\x00\x00"

func idtablestakingDelegationGet_delegator_info_from_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_info_from_addressCdc,
		"idTableStaking/delegation/get_delegator_info_from_address.cdc",
	)
}

func idtablestakingDelegationGet_delegator_info_from_addressCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_info_from_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_info_from_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x5e, 0x68, 0x6e, 0x85, 0x7b, 0x72, 0x37, 0x93, 0x25, 0xa2, 0x77, 0x48, 0xef, 0x61, 0xc0, 0x4e, 0x16, 0xc4, 0xcc, 0xcd, 0x9b, 0x19, 0x69, 0x51, 0x51, 0x1f, 0x1a, 0xc1, 0xc3, 0x14, 0xf7}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6a\xc3\x40\x0c\x45\xf7\x73\x8a\x4f\x56\x31\x94\x04\xda\xd2\x45\xa0\x3b\x13\xf0\xb6\xb1\x0f\xa0\xd8\xb2\x33\x64\x22\xa5\x23\x99\x16\x4a\xef\x5e\x12\x13\xb7\x34\xab\x61\xc4\xd7\xfb\x7a\xf1\x74\xd6\xec\x58\x6c\x93\x7e\x54\x65\x4d\xfb\xc4\x3b\xa7\x63\x94\x61\x11\xc2\x7a\x8d\xfa\x10\x0d\xd6\xe6\x78\x76\x64\xf6\x31\x8b\xc1\x0f\x8c\xcc\xef\x23\x9b\x73\x87\x51\x6c\x5a\xc0\x9e\x12\x49\xcb\xd0\x1e\x84\x8e\x13\x0f\xe4\x9a\x43\xa0\xb6\x65\xb3\x25\xa5\x54\xa0\x1f\x05\x27\x8a\xb2\x14\xed\xb8\x2a\x37\xd8\x79\x8e\x32\x3c\xfc\xe6\x2f\xc3\xa6\x12\x7f\x7a\x2c\x36\x68\xb6\xf1\xf3\xe5\x19\x5f\x01\x00\x12\xfb\x25\x56\x49\xaf\x78\xc5\xfd\xc5\xab\x72\x66\x48\xaf\x73\xc3\xf4\xfe\x6b\xf8\xf3\x29\xae\xf0\x49\xee\xc6\x5f\xb9\x1e\x59\xec\xed\x66\x59\x6b\x73\xd5\xe4\xf0\xfd\x13\x00\x00\xff\xff\xc7\x56\x35\x4a\x32\x01\x00\x00"

func idtablestakingDelegationGet_delegator_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_requestCdc,
		"idTableStaking/delegation/get_delegator_request.cdc",
	)
}

func idtablestakingDelegationGet_delegator_requestCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x42, 0x4d, 0xc3, 0xed, 0x37, 0xe4, 0x3d, 0x8e, 0x4c, 0xa3, 0x64, 0xc9, 0xd7, 0xb1, 0x62, 0xe9, 0x76, 0xc1, 0x34, 0xb5, 0xe3, 0x25, 0x51, 0x8b, 0x58, 0x41, 0x56, 0xd1, 0x2b, 0x4b, 0x49}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_rewardedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\x03\x41\x10\x44\xef\xf3\x15\x45\x4e\x59\x90\x04\x54\x3c\x04\xbc\x2d\x81\xbd\x9a\xe4\x03\x3a\x3b\x3d\x9b\x21\x93\xee\xd0\xd3\x21\x82\xf8\xef\xb2\xae\x46\xd1\xd3\x30\x45\xf1\xaa\x5f\x3e\x9d\xd5\x1c\xb3\x75\xd1\x6b\xd7\x6e\x69\x5f\x78\xe3\x74\xcc\x32\xcc\x42\x58\x2e\xb1\x3d\xe4\x8a\xda\x5b\x3e\x3b\x8c\xfd\x62\x52\xe1\x07\xc6\x9e\x0a\x49\xcf\xd0\x04\xe3\x2b\x59\xe4\x08\xd7\x23\x4b\x1d\x23\x42\xe4\xc2\x03\xb9\x5a\x08\xd4\xf7\x5c\xeb\x9c\x4a\x69\x90\x2e\x82\x13\x65\x99\x8b\x46\xee\xda\x15\x36\x6e\x59\x86\xbb\x9f\xfe\x18\xee\x3a\xf1\x87\xfb\x66\x85\xdd\x3a\xbf\x3e\x3d\xe2\x2d\x00\x40\x61\x1f\x6b\x9d\x24\xc5\x33\xfe\x1f\xbc\x68\x6f\x0c\x49\x7a\x5b\x98\xde\x3f\x0b\xbf\x3e\xcd\x27\x7c\x72\xfb\xe6\x2f\x26\x95\x97\x2f\xb3\xf0\xfe\x11\x00\x00\xff\xff\x15\x9b\x4b\x4a\x27\x01\x00\x00"

func idtablestakingDelegationGet_delegator_rewardedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_rewardedCdc,
		"idTableStaking/delegation/get_delegator_rewarded.cdc",
	)
}

func idtablestakingDelegationGet_delegator_rewardedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_rewardedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_rewarded.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x10, 0x99, 0x16, 0xdd, 0x14, 0xc0, 0x6f, 0x1f, 0xa4, 0x4b, 0x8c, 0xd0, 0xd0, 0xa9, 0xa, 0xe8, 0x83, 0x76, 0x9c, 0xd8, 0x73, 0x6a, 0x94, 0xcc, 0x40, 0xc8, 0x2c, 0x82, 0xc2, 0x8e, 0x2d}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_stakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x21\xa7\x18\x4a\x02\x6d\xe9\x21\xd0\x9b\x09\xe8\xec\xe4\x03\x36\xf2\xca\x11\x56\x76\x83\xb4\xa1\x85\xd2\x7f\x2f\x8e\xa9\x5b\xda\x93\xd0\x30\xbc\xd9\x97\x2e\x57\x2d\x86\xd5\x3e\xeb\x9b\x6f\x0f\x74\xca\xdc\x19\x8d\x49\x86\x95\x73\xdb\x2d\x0e\xe7\x54\x51\x43\x49\x57\x43\x61\xbb\x15\xa9\xb0\x33\xe3\x44\x99\x24\x30\x34\xa2\x1a\x8d\xdc\xc3\x74\x64\xa9\x53\x40\xe8\x39\xf3\x40\xa6\xc5\x39\x0a\x81\x6b\x5d\x53\xce\x0d\xe2\x4d\x70\xa1\x24\x6b\xd1\x9e\x7d\xbb\x43\x67\x25\xc9\xf0\xf0\xd3\x9f\xc2\xa3\x17\x7b\x7a\x6c\x76\x38\xee\xd3\xfb\xcb\x33\x3e\x1c\x00\x64\xb6\xa9\xe6\x25\x2a\x5e\xf1\xff\xdc\x4d\xbb\x30\x24\xea\xb2\x30\xbf\x7f\x16\x7e\x7d\x9a\x3b\x7c\x36\xfb\xe6\x6f\x66\x95\xee\xee\xe5\x3e\xbf\x02\x00\x00\xff\xff\x32\x02\x40\x83\x23\x01\x00\x00"

func idtablestakingDelegationGet_delegator_stakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_stakedCdc,
		"idTableStaking/delegation/get_delegator_staked.cdc",
	)
}

func idtablestakingDelegationGet_delegator_stakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_stakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_staked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0x94, 0x7f, 0xe8, 0xde, 0xbb, 0xf0, 0x1a, 0xaf, 0x92, 0xa, 0xcf, 0x88, 0x24, 0x50, 0xd3, 0xbf, 0x44, 0x56, 0xb7, 0x93, 0xf2, 0x35, 0xe, 0xb4, 0x12, 0xad, 0x31, 0x18, 0xf7, 0x4a, 0x9e}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\xc3\x40\x0c\x44\xef\xfb\x15\x43\x4e\x31\x94\x04\xda\xd2\x43\xa0\x37\x13\xf0\x39\xf1\x07\x28\x6b\xd9\x59\xac\x48\x61\x57\xa6\x85\xd2\x7f\x2f\xae\x69\x5a\x9a\x93\xd0\x30\xbc\x99\x49\x97\xab\x65\xc7\x6a\x2f\xf6\xd6\xd4\x47\x3a\x09\x1f\x9c\xc6\xa4\xc3\x2a\x84\xed\x16\xc7\x73\x2a\x28\x31\xa7\xab\x23\xb3\x4f\x59\x0b\xfc\xcc\x38\x91\x90\x46\x86\xf5\x98\x54\x2c\x8e\xdc\xc1\x6d\x64\x2d\xb3\x44\xe8\x58\x78\x20\xb7\x1c\x02\xc5\xc8\xa5\xac\x49\xa4\x42\x3f\x29\x2e\x94\x74\xad\xd6\x71\x53\xef\x70\xf0\x9c\x74\x78\xf8\xf5\xcf\x62\xdb\xa8\x3f\x3d\x56\x3b\xb4\xfb\xf4\xfe\xf2\x8c\x8f\x00\x00\xc2\x3e\xdb\x1a\xed\x0d\xaf\xb8\x2f\xbc\xa9\x6f\x0c\xed\xed\x96\xb0\xdc\x7f\x09\x7f\x9e\xea\x1b\xbe\x6c\xfb\xe1\x6f\x96\x29\xad\x16\xa7\x91\xbb\xf0\xf9\x15\x00\x00\xff\xff\x41\xc0\xd1\x70\x27\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstakedCdc,
		"idTableStaking/delegation/get_delegator_unstaked.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstakedCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xd4, 0xfb, 0xda, 0xa3, 0x70, 0x44, 0x7f, 0x6d, 0x21, 0xac, 0x63, 0xa8, 0x26, 0xf5, 0xfc, 0x78, 0xd, 0xec, 0x46, 0x41, 0x5, 0x22, 0x28, 0xa4, 0x63, 0xf, 0x3c, 0xe4, 0x6, 0xc1, 0x73}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\x03\x31\x0c\x44\xef\xfe\x8a\x21\xa7\x2c\x94\x04\xda\xd2\x43\xa0\xb7\x25\xe0\x73\xb2\x1f\xa0\x38\xf2\xc6\xc4\x91\x82\xad\xa5\x85\xd2\x7f\x2f\x5b\x93\xb4\xb4\x27\xa1\x61\x34\xa3\x97\x2e\x57\x2d\x86\xc5\x36\xeb\x9b\xef\xf7\x74\xc8\xbc\x33\x3a\x27\x19\x17\xce\xad\xd7\xd8\x9f\x52\x45\x0d\x25\x5d\x0d\x85\x6d\x2a\x52\x61\x27\xc6\x81\x32\x49\x60\x68\xc4\x24\xb5\x5d\xc0\xf4\xcc\x52\x67\x8d\x70\xe4\xcc\x23\x99\x16\xe7\x28\x04\xae\x75\x49\x39\x77\x88\x93\xe0\x42\x49\x96\xa2\x47\xf6\xfd\x06\x3b\x2b\x49\xc6\x87\x1f\xff\x2c\x0e\x5e\xec\xe9\xb1\xdb\x60\xd8\xa6\xf7\x97\x67\x7c\x38\x00\xc8\x6c\xb3\xcd\x4b\x54\xbc\xe2\xff\xc7\xab\xfe\x9e\x21\x51\xef\x0d\x6d\xfe\x69\xf8\xb5\x74\xdf\xe1\x0d\xee\x96\xbf\x6a\x28\xc3\x0d\xcd\x7d\x7e\x05\x00\x00\xff\xff\x89\xa3\x14\x9e\x29\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstakingCdc,
		"idTableStaking/delegation/get_delegator_unstaking.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstakingCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x24, 0x7d, 0x5d, 0xe4, 0xd7, 0x45, 0x20, 0x18, 0x8d, 0xf1, 0xe9, 0x97, 0x57, 0x2, 0x3b, 0xf2, 0x92, 0x21, 0xca, 0x60, 0xb7, 0xb, 0x9c, 0x3e, 0x1e, 0x7a, 0x58, 0xe8, 0x12, 0x91, 0xa1}}
	return a, nil
}

var _idtablestakingDelegationGet_delegator_unstaking_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4b\xc3\x50\x10\x84\xef\xef\x57\x0c\x3d\x35\x20\x2d\xa8\x78\x28\x78\x0b\x85\x5c\x6d\xf2\x03\xb6\xc9\x26\x7d\xf4\x75\xb7\xbe\xdd\xa0\x20\xfe\x77\x49\x83\x51\xf4\xb4\xec\x30\x3b\xb3\x5f\xbc\x5c\x35\x3b\x56\xfb\xa4\x6f\x55\x59\xd3\x31\xf1\xc1\xe9\x1c\x65\x58\x85\xb0\xdd\xa2\x3e\x45\x83\xb5\x39\x5e\x1d\x99\x7d\xcc\x62\xf0\x13\xe3\x48\x89\xa4\x65\x68\x8f\x51\x6c\xbe\x80\xeb\x99\xc5\x26\x8d\xd0\x71\xe2\x81\x5c\x73\x08\xd4\xb6\x6c\xb6\xa6\x94\x0a\xf4\xa3\xe0\x42\x51\xd6\xa2\x1d\x57\xe5\x0e\x07\xcf\x51\x86\xbb\x1f\xff\x24\x36\x95\xf8\xc3\x7d\xb1\x43\xb3\x8f\xef\x4f\x8f\xf8\x08\x00\x90\xd8\x27\x5b\x25\xbd\xe2\x19\xff\x3f\xde\x94\x4b\x86\xf4\xba\x34\xcc\xf3\x4f\xc3\xaf\xa5\xb8\x85\xcf\x70\xdf\xf9\x9b\x19\xe5\x85\x5f\x47\x36\xe7\xae\xd6\xe6\x46\xc9\xe1\xf3\x2b\x00\x00\xff\xff\x76\x78\xf2\x00\x32\x01\x00\x00"

func idtablestakingDelegationGet_delegator_unstaking_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationGet_delegator_unstaking_requestCdc,
		"idTableStaking/delegation/get_delegator_unstaking_request.cdc",
	)
}

func idtablestakingDelegationGet_delegator_unstaking_requestCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationGet_delegator_unstaking_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/get_delegator_unstaking_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0xc6, 0x80, 0x13, 0x6e, 0xf8, 0xb6, 0xdd, 0xac, 0xa0, 0xa6, 0xd4, 0x4b, 0x95, 0x18, 0x33, 0xe6, 0x56, 0xac, 0x72, 0xc8, 0xb, 0xdf, 0xd9, 0xb8, 0xdf, 0x18, 0x4c, 0x18, 0x68, 0x1b, 0xa5}}
	return a, nil
}

var _idtablestakingDelegationRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x8b\x9c\x4c\x10\xbe\xfb\x2b\x8a\x39\x0c\x0a\x33\x7a\x79\x79\x0f\x62\x76\x09\x0e\x03\x0b\x61\xb3\x64\x36\xd9\x73\xd9\x96\xda\x59\xed\x92\xb6\x8c\x81\x65\xfe\x7b\xf0\x63\x3a\x9a\xec\x21\x7d\x69\xe8\xaa\x7e\x3e\xaa\x1e\xdd\xb4\x6c\x05\x76\xe7\x9a\x87\x87\xd3\x33\x66\x35\x5d\x04\x5f\xb5\x29\x77\xde\xba\xf6\xcc\xaf\x64\x56\x4f\xbd\x29\x75\x56\xd3\xf2\xec\x89\x45\xd3\xa1\x12\xcd\xc6\x37\x9c\xd3\xc3\x29\x86\x8b\x58\x6d\xca\x03\x60\xc3\xbd\x91\x18\xbe\x9e\xf5\xcf\xff\xff\x0b\xe0\xcd\xf3\x00\x00\x5a\x4b\x2d\x5a\xf2\x51\x29\x89\x01\x7b\xa9\xfc\x8b\xb0\xc5\x92\x0e\x90\x62\x8b\x99\xae\xb5\x68\xea\x02\xd8\x7f\x54\x6a\x84\x70\x5f\xc7\x53\x93\x40\x71\x13\xf6\x85\x0a\xf8\x00\x23\x52\xd8\xcd\x18\x61\xc6\xd6\xf2\x90\x4c\xb8\x1b\xb5\xe1\x8b\x96\x2a\xb7\x38\x04\xb0\x77\xce\xc2\x6f\xd8\xd7\x72\xe7\x17\x96\x9b\x18\xa2\x05\x24\x72\x04\x53\x39\x70\xe4\xe3\xb9\xbf\x87\x16\x8d\x56\xfe\x2e\xe5\xbe\xce\xc1\xb0\xc0\x4c\x0a\x96\x0a\xb2\x64\x14\x81\x30\x9c\x3f\x7d\x7e\x81\xe9\xff\x2e\xf8\x2d\x3f\x8a\x20\xb5\x84\x42\x80\x60\x68\x80\x9c\x6a\x2a\x51\xd8\x02\x67\xdf\x49\x09\x14\x6c\x41\x2a\x82\x71\x9a\x1b\xd3\x86\x86\x93\x6b\x4e\x8e\xf0\xf7\xe6\x42\x4b\xa5\xee\x84\xec\xe3\xaa\xd5\xad\x65\xbe\x0f\x20\xa3\xaf\x2e\xe5\xa6\xd1\x22\x94\xc7\x90\x1c\xd7\xf3\x0c\x87\x65\x4c\xfe\x6d\x7f\xf3\x1d\x6c\x4d\x8c\x2b\xa3\x49\xe8\x9f\x0e\x5c\xd7\x66\x2d\x1d\xfe\x20\x3f\x39\xae\x4d\x8c\x52\xe2\xf7\x6c\xb8\x8e\x25\x17\x4f\x28\x55\xb0\x4d\x80\x23\x4d\xb1\xbd\x25\x40\xad\xc2\xe3\x78\x75\xd7\xf5\x94\xec\xdf\xde\xa1\x79\xe4\x9c\x1c\xd5\x53\x9f\xd5\x5a\x5d\xef\xfc\x7f\xd6\xb3\xb1\xb9\xe1\x6e\x47\xac\xae\xf2\xd7\x22\x0f\x80\x12\x43\x34\x95\xd4\x94\xaf\x05\xdd\x81\xcf\x88\x57\xef\xfa\x2b\x00\x00\xff\xff\xa4\x1f\x77\xdc\x9b\x03\x00\x00"

func idtablestakingDelegationRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationRegister_delegatorCdc,
		"idTableStaking/delegation/register_delegator.cdc",
	)
}

func idtablestakingDelegationRegister_delegatorCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xb7, 0x98, 0x56, 0xce, 0x4a, 0x6c, 0xf5, 0x71, 0xb3, 0x5e, 0x6c, 0xa8, 0x9d, 0x6a, 0xe1, 0x4c, 0xa4, 0xdb, 0x7c, 0x30, 0x92, 0xa4, 0x4a, 0x39, 0x94, 0x5f, 0x32, 0xba, 0x86, 0x6d, 0xcf}}
	return a, nil
}

var _idtablestakingDelegationRegister_many_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x41\x8b\xe2\x40\x10\x85\xef\xfd\x2b\x0a\x0f\x4b\xc2\x6a\x74\xaf\x21\x2e\xbb\xe8\x0c\x78\x19\x06\x14\x2f\xe2\xa1\x6c\xcb\xa4\xc7\x4e\x77\xe8\x54\x22\x22\xfe\xf7\xa1\xa3\x46\x93\xe9\x43\x13\xaa\xde\x4b\xd5\xfb\x5a\xe5\x85\x75\x0c\x83\x77\x6d\x4f\x8b\xf9\x0a\x77\x9a\x96\x8c\x47\x65\xd2\x81\x78\xed\xad\xec\x91\xcc\x40\x08\x76\x68\x4a\x94\xac\xac\x09\x8c\xdd\xd3\x62\x5e\xc6\xb0\x59\xb2\x53\x26\xdd\x0e\xa1\x40\xce\x6e\x05\xeb\x30\xa5\x4f\xe4\x6c\x1b\xc2\x45\x08\x00\x80\xc2\x51\x81\x8e\x02\x94\x92\x63\xc0\x8a\xb3\x60\x89\x35\xad\x51\x57\x14\xc2\xaf\xff\x52\xda\xca\x70\x2b\xf7\xa7\x46\x07\x0a\xa6\x30\x79\x96\x0e\xd6\x35\x63\x40\x99\xdb\x38\xb8\xb4\x3d\x7f\xc6\x63\x98\x39\x42\x26\x40\x30\x74\x82\x3d\x69\x4a\x91\xad\x03\xbb\xfb\x22\xc9\xcd\x0f\x38\x23\xf0\xeb\x77\x9c\x9a\xd8\x3b\xe6\xad\x21\x19\xc1\x4f\x2e\x91\xa3\x54\x95\x4c\xee\xe3\x45\x7a\x67\x11\xc3\x9d\xc9\x46\x6d\x87\xc0\x9e\x59\x39\xb3\x79\xae\x98\x69\x1f\x43\x32\x6a\x51\x46\xb2\xd9\xf1\x2d\x2f\xf8\xbc\xc6\x4a\x73\x50\xfb\x7b\x75\x2e\x28\x06\x7f\x27\xff\x9e\xda\x46\xf0\x37\x08\xc3\x50\xf4\xa3\x7a\xd0\xd4\xc4\xe9\xe7\xec\x28\x3d\xf2\xa8\xbc\x3d\x4a\x54\x62\x4d\x41\x32\x7a\x8d\xea\x97\x8d\x1b\x9c\xbd\x11\x1e\xbe\x82\xdf\xf0\xa7\x5b\x3d\xf8\xc6\xf4\x91\x36\xd2\x64\x52\xce\x7a\x0f\xf1\xb0\x4f\x3a\xd5\xab\xe8\x7e\x5d\x85\xb8\x7e\x07\x00\x00\xff\xff\x5a\xa7\xb6\xed\x85\x02\x00\x00"

func idtablestakingDelegationRegister_many_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingDelegationRegister_many_delegatorsCdc,
		"idTableStaking/delegation/register_many_delegators.cdc",
	)
}

func idtablestakingDelegationRegister_many_delegatorsCdc() (*asset, error) {
	bytes, err := idtablestakingDelegationRegister_many_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/delegation/register_many_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x90, 0xbe, 0x8, 0xa8, 0x61, 0x59, 0xf1, 0xd3, 0x94, 0x46, 0xc2, 0x68, 0x67, 0xb0, 0xc9, 0xe3, 0x5, 0x49, 0xe0, 0x2, 0x4d, 0x41, 0x24, 0xea, 0xc6, 0x71, 0xd7, 0xf, 0xf, 0x64, 0x92}}
	return a, nil
}

var _idtablestakingNodeRegister_many_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x0c\x3e\x04\x89\xc6\x72\x0b\xa5\x94\xc5\x69\x08\x29\x86\x90\xd2\x8a\x24\x6d\x0e\xc6\x87\xb5\x76\x64\x6d\x23\xed\x98\xd5\x28\x6a\x28\xf9\xef\x65\x25\xc5\xd6\x17\xf5\x1c\x7c\x78\xf3\x66\xde\xac\xdf\x93\xce\xf7\x64\x19\x66\xab\x8c\xaa\x9b\xaf\x0f\x72\x9b\xe1\x3d\xcb\x27\x6d\x76\x33\xaf\xdb\x7b\xa0\x27\x34\x1d\xa8\x34\x3b\xbd\xcd\xb0\x85\x3d\xb6\xd2\x14\x32\x66\x4d\xc6\xf7\x00\x00\xb4\x2a\x04\xac\xef\xd9\x6a\xb3\xdb\x9c\xd7\x90\xa5\x0c\x1d\xf8\xf3\xc6\xf0\xe7\x16\x33\xc8\x15\x59\x27\x77\xa5\x94\xc5\xa2\xc0\xd1\xd8\x91\x72\x8b\x2f\xa3\x6e\xd1\x1c\xfb\xff\x56\x44\xd1\xa8\x2b\x73\x2a\x0d\xd7\xf7\xac\xf4\x9f\x4f\x1f\x5b\x78\x2f\x39\x6d\xb8\x64\xe5\x0e\x23\xc9\xe9\xc6\x0b\xe0\xaf\xd7\x74\x2d\xee\xa5\x45\x5f\xc6\x31\x0b\x90\x25\xa7\x7e\x4b\x0c\xe0\xec\x2a\x8e\xdd\xca\x03\xd9\xd5\xb3\xb4\xa0\xe1\x02\xde\x1f\xa1\x84\x6c\xad\x02\xda\x34\x6a\x5d\xbe\xab\x0c\x19\x92\xb7\xbf\xfc\x0e\x13\xb8\x00\xa7\x17\x16\x8d\x52\xb8\x25\x6b\xa9\x5a\xd6\xea\x3d\x1f\xc2\x47\xcd\xa9\xb2\xb2\x0a\xe0\xec\xe0\x59\xf8\x4b\x96\x19\x7f\xf1\x13\x4b\xb9\x80\x45\xbb\x64\x71\x10\xa8\xdb\x41\xef\x00\x57\x97\x97\xb0\x97\x46\xc7\xfe\xec\x9a\xca\x4c\x81\x21\x86\x46\x18\x2c\x26\x68\xd1\xc4\x08\x4c\xb0\xfa\xf6\xe3\x11\xea\x1d\xb3\x60\xfc\x0c\x76\x0a\xc5\x35\xe5\xb9\x66\x46\x05\xcb\x79\xef\x65\x61\xd5\x1e\xec\x37\x6e\x88\x37\x57\xd6\x7a\x33\xb1\xcd\x90\xaa\xc3\x89\xd6\x2d\x1a\x27\x36\x94\x4a\x7d\x27\x85\x77\x18\x93\x55\xfe\xe8\x4d\x5a\x09\x97\xcb\xb5\x6e\xbd\xee\x96\x0b\xa7\x68\x22\x3a\xd9\x1f\x05\x55\x4c\x65\xf7\xc4\xe8\x2d\xbe\x88\x41\x9e\x27\x27\x8e\xc9\x15\xdd\x80\x9f\xe0\x46\x14\x89\x41\xe8\x27\x27\x06\xa6\x08\x58\xce\x07\x50\x6f\x64\x60\xc4\x62\x01\x2e\xf2\x08\x9c\x62\xed\x08\xd0\xf6\x37\xc6\xdc\x23\xf5\xf2\x5a\xc8\x67\xf4\x97\xf3\xa3\x7b\xe7\xc0\x24\xea\xec\x0f\x76\xbb\x2f\x45\xc3\x3b\xf8\x70\x40\x5f\xbd\xe6\xd7\x7b\xfd\x17\x00\x00\xff\xff\x20\x40\x68\x1d\xa9\x04\x00\x00"

func idtablestakingNodeRegister_many_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRegister_many_nodesCdc,
		"idTableStaking/node/register_many_nodes.cdc",
	)
}

func idtablestakingNodeRegister_many_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRegister_many_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/register_many_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0x2d, 0x44, 0x80, 0x62, 0x83, 0x13, 0x85, 0x68, 0x81, 0xcd, 0x21, 0x1e, 0x76, 0x2b, 0x6e, 0x29, 0xb1, 0x61, 0x1d, 0x9e, 0x3a, 0x54, 0xb8, 0x97, 0x83, 0x1d, 0x8d, 0x9, 0x94, 0xf3, 0x8c}}
	return a, nil
}

var _idtablestakingNodeRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x71\xe4\xa1\xd8\x90\x3a\x2f\x63\x8c\x90\xb6\x94\x8c\x42\xd9\x58\x43\x7f\xac\xcf\x8a\x74\x49\xb4\x2a\x3a\x23\x9d\xe7\x95\x92\xff\x7d\xc8\x76\x62\x0b\xa7\xd9\xea\x07\xdb\xba\x3b\xdd\xf7\xe9\xbb\x4f\x7a\x5b\x90\x63\x18\xdd\x18\xaa\x6e\xbf\x3e\x8a\xa5\xc1\x07\x16\x2f\xda\xae\x47\x49\x3f\xf7\x48\x2f\x68\x7b\xa1\xd2\xae\xf5\xd2\x60\x1b\x4e\x26\x13\x78\xdc\x68\x0f\xec\x84\xf5\x42\xb2\x26\x0b\xd2\xa1\x60\xf4\x20\xc0\x62\x05\x96\x14\x82\x67\x57\x4a\x06\x5a\xfe\x42\xc9\x61\x93\xb0\x0a\xca\x42\xd5\x75\xbc\x41\x28\x1c\x15\xe4\x51\xc1\xad\x42\xcb\x9a\x5f\xa1\xa6\x94\x24\xbd\xc6\x69\x02\x00\xa0\xd5\x14\x1e\xd8\x69\xbb\x1e\xd7\x6b\x47\x06\xa7\xf0\x74\x6b\xf9\x4b\x13\xb0\xc8\x15\xb9\x70\x92\x6b\xa5\x1c\x7a\x1f\xd7\x77\xe9\x6f\xf8\x1a\xa7\x7c\x23\xc0\x89\xf8\x82\x16\x71\x4a\x6c\xa9\xb4\x3c\x85\xa7\x1b\xfd\xe7\xf3\xa7\x24\x83\xb7\xa4\x8e\x1b\x64\x58\xed\xe5\xbb\xc7\xd5\x14\x44\xc9\x9b\x34\x92\x2f\x7f\xd6\xbc\x51\x4e\x54\x19\x9c\x1d\xa4\xce\x7f\x8a\xd2\x70\xd3\xa4\x70\x58\x08\x87\xa9\x90\x92\xdb\x06\x0f\x4c\x4e\xac\x71\x0c\x73\x51\x88\xa5\x36\x9a\x35\xfa\x0c\xce\xae\xa5\x0c\x44\x0e\xf8\x35\x6d\x34\xab\xbc\x4f\x02\x2e\x20\xb4\xca\x7d\xd3\x24\x5f\x92\x73\x54\xcd\x3e\xc4\xec\x32\x5d\x39\xda\x4e\x61\xd2\x36\x99\x1c\x00\xea\x74\x76\x40\x0f\xcf\xd5\x15\x14\xc2\x6a\x99\x8e\xe6\x54\x1a\x05\x96\x18\x1a\x50\x70\xb8\x42\x87\x56\x22\x30\xc1\xcd\xf7\xbb\x67\xa8\xf7\x8f\xb2\x8e\x7f\xd0\x30\xb8\x27\xf8\x12\x1d\xcc\xce\x61\x68\xd6\x5c\x28\xf5\x83\x14\xde\xa3\x24\xa7\xd2\x08\x3d\x38\x45\xab\x71\x14\x6b\xdc\x12\xde\x71\xfc\x88\x69\x06\xa1\xf7\x76\xd4\x7e\x89\x96\x71\x65\xdf\x56\xdd\xff\x7b\x35\xb5\xc5\xa2\x65\x5c\xc9\x41\x6b\x3f\xa7\xed\x56\x33\xa3\x9a\xc2\xec\x7c\x30\xe8\xbc\x6a\xe7\x97\xee\xfd\xd9\x7c\xbb\xe9\xf4\x64\xd6\xab\x13\xae\x18\x0a\x1e\xd4\xbe\x2b\xd0\x09\x26\xd7\xda\xe3\x48\x45\x33\xb3\xbd\x59\x4e\x16\xb5\x96\x5e\x08\xde\x64\x70\x71\x01\x56\x9b\xbe\x8b\xeb\x5b\xd6\xe7\xe7\xc5\x6f\x4c\x67\xe7\x9d\x33\xc6\xc0\xf4\x01\x8c\xb8\x75\x6c\xb2\xb9\x28\xf6\x97\x44\xf6\x2e\xd8\x01\x5b\x7b\x5f\xe2\xec\xec\xed\x24\xd8\xa2\x5c\x1a\x2d\x77\x97\xb1\x1b\xc3\xf3\xbf\x1c\xa3\x8d\xd9\x11\x2d\x22\x72\x45\xc0\xf3\x9b\x21\x5c\x74\xae\xf1\x20\x2d\xf8\x1f\xaa\x35\x07\x39\x42\x68\xff\xb7\x03\x34\x1e\xe1\x2d\x4a\x2b\xf4\xec\xe8\xb5\x87\xde\xd5\x27\xcd\x7b\xf7\x37\x00\x00\xff\xff\xed\xdb\x34\xc2\x7e\x06\x00\x00"

func idtablestakingNodeRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRegister_nodeCdc,
		"idTableStaking/node/register_node.cdc",
	)
}

func idtablestakingNodeRegister_nodeCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0xf4, 0x1e, 0x4e, 0x63, 0xcc, 0x89, 0xd0, 0xe5, 0x9a, 0x16, 0x3, 0x76, 0x15, 0xd9, 0x90, 0xac, 0x16, 0x92, 0xa4, 0x86, 0x8f, 0x3e, 0xac, 0x9c, 0x15, 0x20, 0xd6, 0x1c, 0x6a, 0x33}}
	return a, nil
}

var _idtablestakingNodeRequest_unstakeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4d\x4b\xc3\x40\x10\x86\xef\xf9\x15\x2f\x39\x94\xe4\x92\x5c\xc4\x43\x51\x8b\x1f\x14\x04\x51\xb1\xd6\xfb\x74\x33\x69\x63\x93\x9d\x38\x99\xd8\x82\xf4\xbf\x4b\x9a\xb6\x58\x44\xf1\xe0\x5c\xf6\x32\xf3\xcc\xfb\x0c\x5b\x54\xb5\xa8\x21\x1c\x97\xb2\xba\xbd\x79\xa6\x59\xc9\x13\xa3\x65\xe1\xe7\x61\x10\x04\xa6\xe4\x1b\x72\x56\x88\x8f\xa8\x92\xd6\xdb\x10\xd3\x71\xb1\x3e\x3d\x89\xf1\x11\x04\x00\x90\xa6\xb8\x13\x47\x25\xde\x49\x8b\x6e\x1c\xb9\x28\x08\xca\x39\x2b\x7b\xc7\x30\x81\x2d\x18\x5e\x32\x86\xcc\x5e\xd9\xd9\x76\xb0\x64\x43\x63\xb4\x64\x7d\xe2\x7c\x08\x6a\x6d\x11\x7d\x4f\x91\xdc\x4b\xc6\x0f\x35\x2b\x99\x68\x8c\xc1\x0f\x1d\x93\x2d\xa8\x4f\x54\x2b\xd7\xa4\x1c\x91\x73\xb6\xe3\x5e\x89\xaa\xac\x5e\xa8\x6c\x39\xc6\xe0\xd2\xb9\x4e\xa5\x53\xc0\xae\xd2\x14\xb3\x6d\xcf\x5f\x92\x77\xd5\x70\x99\x27\x87\xf8\x38\x47\xb7\x2d\x69\x4c\x94\xe6\x9c\xf4\xac\xb3\xff\x70\xba\x88\x72\x95\x6a\x88\x5f\x9b\x26\xfd\xde\x47\xb2\x45\x7c\x88\xd8\xd5\x68\x84\x9a\x7c\xe1\xa2\xf0\x5a\xda\x32\x83\x17\xdb\x8b\x1e\x69\x36\x3d\x12\x94\x55\x85\x0f\x7b\xc6\xa6\x3f\x27\xaf\xd9\xb5\xc6\x5f\x8e\x75\xec\x9e\x28\xbf\xb5\xdc\xd8\xd4\xef\x20\x87\x9f\xd2\xbf\x7b\xd8\x26\xf8\x0c\x00\x00\xff\xff\x09\xb7\x02\xcc\x6c\x02\x00\x00"

func idtablestakingNodeRequest_unstakeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeRequest_unstakeCdc,
		"idTableStaking/node/request_unstake.cdc",
	)
}

func idtablestakingNodeRequest_unstakeCdc() (*asset, error) {
	bytes, err := idtablestakingNodeRequest_unstakeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/request_unstake.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x46, 0xe3, 0x3f, 0x41, 0x76, 0x61, 0x4f, 0xd1, 0xf5, 0xfc, 0xd, 0x1d, 0x37, 0x5f, 0x6b, 0xbb, 0x80, 0x61, 0x7b, 0x70, 0xe1, 0x89, 0xb1, 0x4c, 0xec, 0xe2, 0x69, 0x4c, 0x72, 0xa6, 0xc4}}
	return a, nil
}

var _idtablestakingNodeStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x6a\xdc\x40\x0c\xc6\xef\x7e\x0a\xe1\x43\xb0\x0f\xb5\x2f\xa5\x87\x25\x6d\xe8\x1f\x16\x0a\x21\x29\xdd\x34\x39\xcb\x63\x79\x3d\xdd\xf1\xc8\xc8\x72\x1d\x28\x79\xf7\x62\x8f\x6d\xbc\x84\x86\x50\xaa\x8b\x8d\x46\xf3\x7d\xfa\x49\x8c\x6d\x5a\x16\x85\x78\xef\x78\xf8\xfa\xe5\x0e\x0b\x47\x07\xc5\x93\xf5\xc7\x38\xda\x9e\xdd\xf1\x89\xfc\x26\xd5\xfb\xa3\x2d\x1c\xcd\xe9\x48\x05\x7d\x87\x46\x2d\xfb\x04\x1b\xee\xbd\xee\xe0\xc7\xde\x3e\xbe\x7b\x9b\xc2\xef\x28\x02\x00\xc8\x73\xb8\x66\x83\x0e\x7e\xa1\xd8\xd1\x07\x2a\x16\x40\x10\xaa\x48\xc8\x1b\x02\x65\xd0\x9a\xc0\x73\x49\xc0\xc5\x4f\x32\x3a\x5d\x74\xa4\xd0\x29\x9e\x48\xbe\x53\xb5\x03\xec\xb5\x4e\x9e\xb7\x9b\xdd\x70\x49\xb7\x2d\x09\x2a\x4b\x0a\x17\x7f\xa9\x38\x4c\x42\xd1\x2a\x5c\x2d\x6c\x1b\xed\x2d\x5b\xf6\x60\xb5\x2e\x05\x87\x59\x32\x24\xef\xb1\x77\x1a\x44\x5a\xa1\x16\x85\x12\x34\x46\x67\x81\x4f\x2c\xc2\xc3\x3d\xba\x9e\x52\xb8\xf8\x68\xcc\x38\x8f\x71\x0e\x30\x47\x9e\x43\x31\xd5\xbc\x06\x7f\x8c\x8e\x5c\x95\xad\x33\x80\xf7\x30\xba\x65\x9d\xb2\xe0\x91\xb2\xa0\x75\xf9\x3f\x06\xf3\x21\xa9\x84\x9b\x1d\xbc\x58\x74\x08\xbe\xdf\x50\xeb\x74\x6d\x71\x8c\xab\x2b\x68\xd1\x5b\x93\xc4\x9f\xb9\x77\x25\x78\xd6\x05\xf4\x0c\xb3\x0b\x92\x80\x65\x63\x7d\x9c\x46\xe7\x9c\xdb\x95\xbc\x88\xfa\xca\x3d\x2d\x4c\xf9\x2c\x92\xaf\x06\xd3\xf1\xbf\x21\xec\xaf\x6f\x1f\x60\xba\x1f\x07\x81\xa7\x40\x41\x8f\x64\x7a\xa5\xcd\xb2\xcf\x77\x17\xfe\x6e\x28\x34\xd0\x25\x97\x6f\x9e\x31\x67\xc3\x8c\xb2\xbe\xa4\xf0\x4d\x17\xa3\xa7\xe8\x4f\x00\x00\x00\xff\xff\xcd\xe5\xf9\xe2\xb6\x03\x00\x00"

func idtablestakingNodeStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_new_tokensCdc,
		"idTableStaking/node/stake_new_tokens.cdc",
	)
}

func idtablestakingNodeStake_new_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xaf, 0x6c, 0xca, 0xb4, 0x72, 0x6d, 0x12, 0x51, 0xd1, 0xaa, 0xc9, 0x5b, 0x5c, 0xe7, 0x15, 0x7c, 0xc5, 0xb0, 0xf9, 0x0, 0x57, 0xbd, 0x59, 0xac, 0x81, 0xab, 0x78, 0x5e, 0x6, 0x9f, 0x64}}
	return a, nil
}

var _idtablestakingNodeStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6a\xe3\x40\x0c\x86\xef\x7e\x8a\x1f\x1f\x82\x7d\xb1\x2f\xcb\x1e\xc2\xee\x86\xdd\x2d\x81\x42\x69\x4b\x92\xf6\xae\x8c\xe5\xc4\x8d\x3d\x32\xb2\xdc\x04\x4a\xde\xbd\x38\x93\x84\x86\xd2\xd2\x43\x75\xb1\x0f\xd2\xa7\xff\x13\x53\x35\xad\xa8\x21\x9e\xd6\xb2\xbd\xbe\x5a\xd0\xb2\xe6\xb9\xd1\xa6\xf2\xab\x38\x8a\x22\x53\xf2\x1d\x39\xab\xc4\x27\xd4\x48\xef\x6d\x8c\x87\x69\xb5\xfb\xf9\x23\xc5\x4b\x14\x01\x40\x9e\xe3\x46\x1c\xd5\x78\x26\xad\x86\x71\x94\xa2\x20\x28\x97\xac\xec\x1d\xc3\x04\xb6\x66\x78\x29\x18\xb2\x7c\x62\x67\x87\xc1\x9a\x0d\x9d\xd1\x86\x75\xc6\xe5\x18\xd4\xdb\x3a\x79\x9f\x22\xbb\x95\x82\xef\x5a\x56\x32\xd1\x14\xa3\x0f\x3a\xe6\x07\x50\x48\xd4\x2a\xb7\xa4\x9c\x90\x73\x76\xe4\xfe\x13\x55\xd9\x3e\x52\xdd\x73\x8a\xd1\x5f\xe7\x06\x95\x41\x01\xc7\xca\x73\x2c\x0f\x3d\x5f\x49\x3e\x54\xc7\x75\x99\x9d\xe3\xe3\x37\x86\x6d\x59\x67\xa2\xb4\xe2\x2c\xb0\x7e\x7d\x87\xd3\x9f\xa4\x54\x69\xc6\xf8\xb4\x69\x1e\xf6\xde\x93\xad\xd3\x73\xc4\xa1\x26\x13\xb4\xe4\x2b\x97\xc4\xff\xa5\xaf\x0b\x78\xb1\x93\xe8\x85\x66\x17\x90\xa0\xa2\xa9\x7c\x1c\x18\xfb\x70\x4e\xde\xb1\xeb\x8d\xdf\x1c\xeb\xd2\x3d\xfc\xcd\x78\x4b\x5a\x70\xb1\x90\x0d\xfb\xee\xfc\x58\xc2\xf7\xc4\xdb\x47\xaf\x01\x00\x00\xff\xff\x39\x51\x62\xc4\x6f\x02\x00\x00"

func idtablestakingNodeStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_rewarded_tokensCdc,
		"idTableStaking/node/stake_rewarded_tokens.cdc",
	)
}

func idtablestakingNodeStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xae, 0xc5, 0x68, 0x33, 0x11, 0xf, 0x33, 0x23, 0xba, 0x2e, 0xb6, 0xa1, 0xe6, 0xc4, 0xa9, 0x87, 0xe0, 0x3d, 0xbc, 0xd7, 0xdb, 0xf0, 0xb2, 0xd6, 0x1e, 0x39, 0xd, 0x41, 0xe5, 0xcc, 0x6c}}
	return a, nil
}

var _idtablestakingNodeStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x4b\xc3\x40\x10\xc5\xef\xf9\x14\x8f\x1c\x4a\x72\x49\x2e\xe2\xa1\xa8\xc5\x3f\x14\x04\x51\xb0\xad\xf7\xe9\x66\xd2\xc6\x6e\x76\xc2\x66\x62\x0b\xd2\xef\x2e\xc9\xb6\xc5\x22\x82\x07\xdf\x65\x02\x99\x79\xf3\x7e\xc3\x56\x75\x23\x5e\x11\x4f\xad\x6c\x1f\x1f\xe6\xb4\xb4\x3c\x53\xda\x54\x6e\x15\x47\x51\xa4\x9e\x5c\x4b\x46\x2b\x71\x09\xd5\xd2\x39\x1d\x63\x31\xad\x76\x97\x17\x29\x3e\xa3\x08\x00\xf2\x1c\x4f\x62\xc8\xe2\x83\x7c\xd5\x8f\xa3\x14\x0f\x82\xe7\x92\x3d\x3b\xc3\x50\x81\xae\x19\x4e\x0a\x86\x2c\xdf\xd9\xe8\x30\x68\x59\xd1\x2a\x6d\xd8\xbf\x72\x39\x06\x75\xba\x4e\x7e\xa6\xc8\x9e\xa5\xe0\x97\x86\x3d\xa9\xf8\x14\xa3\x5f\x3a\x66\x83\x51\x48\xd4\x78\x6e\xc8\x73\x42\xc6\xe8\xc1\xf7\x4e\xbc\x97\xed\x1b\xd9\x8e\x53\x8c\x6e\x8d\xe9\x51\x7a\x04\x1c\x94\xe7\x58\x0e\x3d\x7f\x49\xde\xab\x65\x5b\x66\xa7\xf8\xb8\x46\xbf\x2d\x6b\x55\x3c\xad\x38\x0b\x5e\x57\xff\xc1\x74\x93\x94\x5e\xea\x31\xf2\x83\x77\x5e\x5a\xd9\x86\x5f\xe9\x29\x4d\xaf\xc9\x04\x0d\xb9\xca\x24\xf1\xbd\x74\xb6\x80\x13\x3d\x32\x9d\x11\xb5\x61\x05\xa8\xa8\x2b\x17\x07\x8f\x7d\xb8\x1c\xef\xd8\x74\xca\xdf\xee\x72\x8e\x19\xbe\x16\x6e\x28\xc5\x5c\x36\xec\xda\xd3\xbb\x08\xf5\xe8\xb7\x8f\xbe\x02\x00\x00\xff\xff\xd2\xd6\xed\x63\x5a\x02\x00\x00"

func idtablestakingNodeStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeStake_unstaked_tokensCdc,
		"idTableStaking/node/stake_unstaked_tokens.cdc",
	)
}

func idtablestakingNodeStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0xa6, 0xd2, 0xe6, 0x2d, 0x1c, 0x16, 0x44, 0x2f, 0x73, 0xe, 0xf1, 0x7d, 0xbe, 0x9b, 0x1e, 0x4b, 0x5d, 0x75, 0xd9, 0xa9, 0x8a, 0xee, 0x46, 0xa, 0x35, 0xcf, 0xa0, 0x2c, 0x74, 0xa6, 0x92}}
	return a, nil
}

var _idtablestakingNodeUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x41\x4b\xfb\x50\x10\xc4\xef\xf9\x14\x43\x0e\x25\xb9\xa4\xf7\xf2\xff\x5b\xaa\x22\x08\xa2\x62\xc5\xfb\xf6\x65\xd3\xc6\xbe\xbe\x0d\x9b\x8d\x15\x4a\xbf\xbb\x24\xaf\x2d\x16\x51\x3c\xb8\xa7\x3d\xcc\xce\xcc\x6f\xeb\x4d\x23\x6a\x48\x6f\xbc\x6c\x6f\xaf\x9f\x69\xe1\x79\x6e\xb4\xae\xc3\x32\x4d\x92\xc4\x94\x42\x4b\xce\x6a\x09\xd8\x25\x09\x00\x8c\xc7\xb8\x13\x47\x1e\x6f\xa4\x75\x2f\x47\x25\x0a\x82\x72\xc5\xca\xc1\x31\x4c\x60\x2b\x46\x90\x92\x21\x8b\x57\x76\x36\x1c\x7a\x36\xb4\x46\x6b\xd6\x27\xae\x26\xa0\xce\x56\xd9\xd7\xd4\xe2\x5e\x4a\x7e\x68\x58\xc9\x44\x73\x8c\xbe\x51\xcc\x07\xa3\xd8\xa8\x51\x6e\x48\x39\x23\xe7\xec\xe0\x7b\x29\xaa\xb2\x7d\x21\xdf\x71\x8e\xd1\xcc\x39\xe9\x82\xe5\xd8\x0d\xfa\x03\xc5\x62\xd0\xfc\xa6\x79\x3f\x2d\xfb\xaa\x38\xd5\xc7\x7f\xf4\x69\x45\x6b\xa2\xb4\xe4\x22\x7a\xfd\xfb\x0b\xa6\x8b\xac\x52\xd9\x4c\xf0\xa3\x68\x1e\x73\x1f\xc9\x56\xf9\xa9\x62\x3f\xd3\x29\x1a\x0a\xb5\xcb\xd2\x2b\xe9\x7c\x89\x20\x76\x04\x3d\xc3\x6c\xa3\x25\xa8\xdc\xd4\x21\x8d\x1e\xfb\xf8\x4e\x7e\x67\xd7\x19\x7f\x7a\xd6\x39\x7b\xd1\x85\x61\x9f\x79\x9f\x1d\x0f\xf7\xc9\x47\x00\x00\x00\xff\xff\x73\x8f\x76\x3f\x48\x02\x00\x00"

func idtablestakingNodeUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeUnstake_allCdc,
		"idTableStaking/node/unstake_all.cdc",
	)
}

func idtablestakingNodeUnstake_allCdc() (*asset, error) {
	bytes, err := idtablestakingNodeUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x54, 0xcd, 0x1, 0xdf, 0x90, 0x56, 0xab, 0x30, 0xc9, 0x38, 0xe5, 0x61, 0x13, 0x42, 0x1f, 0xc0, 0xb, 0x41, 0x94, 0x59, 0xa6, 0x46, 0xc9, 0xa, 0x5c, 0x94, 0x4e, 0x63, 0xeb, 0xb, 0x8d}}
	return a, nil
}

var _idtablestakingNodeUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xeb\x50\x10\x85\xf7\xf9\x15\x87\x2c\x4a\xb2\x49\xf6\xe5\xbd\x57\xfa\x14\x41\x90\x2a\x46\xdc\x4f\x6f\x26\x6d\x6c\x7a\x27\xcc\x9d\x18\x41\xfa\xdf\x25\x4d\x5b\x5a\x44\x71\xe1\x59\x9f\xf9\xe6\x9c\x61\xea\x6d\x2b\x6a\x88\x6f\x1a\xe9\x6f\xaf\x9f\x68\xd9\x70\x61\xb4\xa9\xfd\x2a\x8e\x22\x53\xf2\x81\x9c\xd5\xe2\x13\xcf\xfd\xbc\x2c\x95\x43\x98\xa2\x30\xad\xfd\x2a\xc5\x7b\x14\x01\x40\x9e\xe3\x4e\x1c\x35\x78\x25\xad\x07\x02\x2a\x51\x10\x94\x2b\x56\xf6\x8e\x61\x02\x5b\x33\xbc\x94\x0c\x59\xbe\xb0\xb3\xfd\x60\xc3\x86\x60\xb4\x61\x7d\xe4\x6a\x0a\xea\x6c\x9d\x7c\x0e\x92\x2d\xa4\xe4\xfb\x96\x95\x4c\x34\xc5\xe4\x0b\x47\xb1\x07\x8d\x89\x5a\xe5\x96\x94\x13\x72\xce\x0e\xdc\xff\xa2\x2a\xfd\x33\x35\x1d\xa7\x98\xcc\x9d\x93\xce\xdb\x50\x01\x07\xe5\x39\x96\x7b\xcf\x4f\x92\x0f\x0a\xdc\x54\xd9\x29\x3e\xfe\x62\xd8\x96\x05\x13\xa5\x15\x67\x23\xeb\xcf\x6f\x74\xfa\x97\x54\x2a\xdb\x29\xbe\x35\x15\xe3\xde\x07\xb2\x75\x7a\x8a\x38\x68\x36\x43\x4b\xbe\x76\x49\x7c\x25\x5d\x53\xc2\x8b\x1d\x8b\x5e\xd4\x0c\x23\x12\x54\x6e\x6b\x1f\x8f\x8c\xdd\x78\x4e\x7e\x63\xd7\x19\x9f\x1d\xeb\xb2\x7b\xd6\xb5\x25\x19\x2f\xd8\x7a\xd1\x01\x72\xf8\x94\xb3\xa7\x39\xf2\x76\xd1\x47\x00\x00\x00\xff\xff\x9b\xed\xc0\x25\x72\x02\x00\x00"

func idtablestakingNodeUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeUpdate_networking_addressCdc,
		"idTableStaking/node/update_networking_address.cdc",
	)
}

func idtablestakingNodeUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := idtablestakingNodeUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x96, 0x1c, 0xdd, 0xf2, 0x90, 0xca, 0xcc, 0xfd, 0x6, 0xf5, 0x6e, 0xce, 0x94, 0x1e, 0xaf, 0x5c, 0x96, 0x2a, 0xd0, 0x4e, 0xe1, 0xd5, 0x3e, 0xe1, 0x9f, 0x19, 0x1, 0x50, 0x52, 0xc5, 0xd6}}
	return a, nil
}

var _idtablestakingNodeWithdraw_reward_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6b\xdc\x40\x0c\xc5\xef\xf3\x29\x84\x0f\x8b\x7d\xa8\x7d\x29\x3d\x2c\x69\x43\xff\xb0\x50\x08\x4d\xc9\xa6\xe9\x59\x3b\x23\xc7\xd3\x1d\x8f\x8c\x2c\xd7\x81\x92\xef\x5e\xfc\x97\xdd\x86\x94\x52\xa2\x8b\x0f\x7a\x7a\x7a\x3f\x8b\xf1\x75\xc3\xa2\x90\xec\x02\xf7\x9f\x3f\xdd\xe2\x21\xd0\x5e\xf1\xe8\xe3\x7d\x62\x4e\x7b\xb7\x7c\xa4\x98\x18\x63\x54\x30\xb6\x68\xd5\x73\x4c\xb1\xe6\x2e\xea\x16\xbe\xed\xfc\xc3\x9b\xd7\x19\xfc\x32\x06\x00\xa0\x28\xe0\x8a\x2d\x06\xf8\x89\xe2\x07\x47\x28\x59\x00\x41\xa8\x24\xa1\x68\x09\x94\x41\x2b\x82\xc8\x8e\x80\x0f\x3f\xc8\xea\x38\x18\x48\xa1\x55\x3c\x92\xdc\x50\xb9\x05\xec\xb4\x4a\x9f\x06\xcb\xbf\xb0\xa3\xeb\x86\x04\x95\x25\x83\xcd\x33\x8a\xfd\x68\x64\x56\xe3\x72\xa1\x18\xbd\x37\x2b\x54\x7e\x87\x5d\xd0\x49\xd7\x08\x35\x28\x94\xa2\xb5\x3a\xef\xff\xc0\x22\xdc\xdf\x61\xe8\x28\x83\xcd\x7b\x6b\x07\xe4\x01\x15\xe6\x2a\x0a\x38\x8c\x9a\x7f\x21\x1c\xaa\xa5\x50\xe6\x2b\x26\xbc\x85\x61\x5b\xde\x2a\x0b\xde\x53\x3e\x79\x5d\xbc\x04\xfb\xbb\xb4\x14\xae\xb7\xf0\x57\xd1\x7e\xda\xfb\x15\xb5\xca\xd6\x88\x43\x5d\x5e\x42\x83\xd1\xdb\x34\xf9\xc8\x5d\x70\x10\x59\x17\xd0\x33\xcc\x76\xb2\x04\x74\xb5\x8f\x49\x66\xce\x39\x4f\xff\xfa\x33\xa8\x7f\x9e\x62\x89\x5d\xcc\xba\x62\xf5\x18\xdb\xff\x97\x72\x77\x75\xfd\x1d\xc6\xf9\x64\x32\x78\x9c\x82\xd2\x03\xd9\x4e\xe9\xe4\x9e\x4f\x62\xe7\x8e\x1a\x6e\xbd\xce\xb1\x2e\x5e\x9d\x1f\x30\xef\xbd\x56\x4e\xb0\xbf\xa1\x1e\xc5\x91\x1b\xe7\xda\xf5\x71\x4c\xdf\x6c\xd9\xfa\x68\x7e\x07\x00\x00\xff\xff\xc0\x48\xea\x36\x73\x03\x00\x00"

func idtablestakingNodeWithdraw_reward_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeWithdraw_reward_tokensCdc,
		"idTableStaking/node/withdraw_reward_tokens.cdc",
	)
}

func idtablestakingNodeWithdraw_reward_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeWithdraw_reward_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/withdraw_reward_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x19, 0xb2, 0xfe, 0x45, 0x95, 0x6b, 0xfd, 0x3b, 0xc4, 0x69, 0x43, 0x69, 0xc0, 0x9f, 0x7d, 0xf, 0xd1, 0x11, 0x5e, 0x9d, 0x8b, 0xdd, 0xdc, 0x3b, 0x73, 0xa3, 0x21, 0x43, 0xad, 0xb8, 0x35}}
	return a, nil
}

var _idtablestakingNodeWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6b\xdc\x40\x0c\xc5\xef\xf3\x29\x84\x0f\x8b\x7d\xa8\x7d\x29\x3d\x2c\x69\x43\xff\xb0\x50\x08\x4d\xe9\x26\xe9\x59\x3b\x96\xe3\xe9\x8e\x47\x46\x96\xeb\x40\xc9\x77\x2f\x1e\xff\x61\xb7\x21\xa5\x94\xe8\x62\xb0\x9e\x9e\xde\xcf\xc2\xae\x69\x59\x14\x92\x9d\xe7\xe1\xf3\xa7\x1b\x3c\x78\xda\x2b\x1e\x5d\xb8\x4f\xcc\x69\xef\x86\x8f\x14\x12\x63\x8c\x0a\x86\x0e\xad\x3a\x0e\x29\x36\xdc\x07\xdd\xc2\xed\xce\x3d\xbc\x79\x9d\xc1\x2f\x63\x00\x00\x8a\x02\xae\xd8\xa2\x87\x9f\x28\x6e\x74\x84\x8a\x05\x10\x84\x2a\x12\x0a\x96\x40\x19\xb4\x26\x08\x5c\x12\xf0\xe1\x07\x59\x8d\x83\x9e\x14\x3a\xc5\x23\xc9\x37\xaa\xb6\x80\xbd\xd6\xe9\xd3\x60\xf9\x17\x2e\xe9\xba\x25\x41\x65\xc9\x60\xf3\x8c\x62\x1f\x8d\xcc\x6a\x5c\x2d\x14\xd1\x7b\xb3\x42\xe5\x77\xd8\x7b\x9d\x74\xad\x50\x8b\x42\x29\x5a\xab\xf3\xfe\x0f\x2c\xc2\xc3\x1d\xfa\x9e\x32\xd8\xbc\xb7\x76\x44\x1e\x51\x61\xae\xa2\x80\x43\xd4\xfc\x0b\xe1\x58\x1d\xf9\x2a\x5f\x31\xe1\x2d\x8c\xdb\xf2\x4e\x59\xf0\x9e\xf2\xc9\xeb\xe2\x25\xd8\xdf\xa5\x95\x70\xb3\x85\xbf\x8a\xf6\xd3\xde\xaf\xa8\x75\xb6\x46\x1c\xeb\xf2\x12\x5a\x0c\xce\xa6\xc9\x47\xee\x7d\x09\x81\x75\x01\x3d\xc3\xec\x26\x4b\xc0\xb2\x71\x21\xc9\xcc\x39\xe7\xe9\x57\x7f\x06\xf5\xcf\x53\x2c\xb1\x8b\x59\x57\xac\x1e\xb1\xfd\x7f\x29\x77\x57\xd7\xdf\x21\xce\x27\x93\xc1\xe3\x14\x94\x1e\xc8\xf6\x4a\x27\xf7\x7c\x12\x3b\x2f\xa9\xe5\xce\xe9\x1c\xeb\xe2\xd5\xf9\x01\xf3\xc1\x69\x5d\x0a\x0e\xb7\x21\xbe\x2b\xe3\x5c\xb7\xfe\x1c\xd3\x33\x5b\xb6\x3e\x9a\xdf\x01\x00\x00\xff\xff\xad\xc5\x15\x9d\x73\x03\x00\x00"

func idtablestakingNodeWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingNodeWithdraw_unstaked_tokensCdc,
		"idTableStaking/node/withdraw_unstaked_tokens.cdc",
	)
}

func idtablestakingNodeWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingNodeWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/node/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xa4, 0x50, 0x9c, 0x27, 0x9d, 0x50, 0x93, 0x9e, 0x66, 0xdd, 0xf7, 0x10, 0x0, 0xa8, 0x79, 0xaf, 0xa0, 0x5e, 0xfb, 0xce, 0xc1, 0x7d, 0xd7, 0x8, 0x46, 0x3a, 0xdc, 0xa4, 0x1, 0x2f, 0x94}}
	return a, nil
}

var _idtablestakingScriptsGet_approved_but_not_staked_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6b\x83\x40\x10\x85\xef\xfe\x8a\xd7\x9c\xf4\x92\xdc\x03\x1e\x5a\x42\x21\xd0\xf6\x92\xdc\x82\x87\x8d\x8e\x71\xc9\xba\x6b\x67\x67\xd3\x96\xe0\x7f\x2f\x6a\xaa\x86\x40\xf7\x20\x38\x7e\xcf\xef\x39\xa8\xeb\xc6\xb1\x60\xf1\x6a\xdc\xd7\x76\xb3\x57\x47\x43\x3b\x51\x67\x6d\x4f\x8b\x28\x5a\xad\xb0\xaf\xb4\x87\xcf\x59\x37\x02\x26\x09\x6c\x3d\xa4\x22\x18\xed\x05\xae\x84\x75\x05\x75\x13\x25\x50\x4c\x70\xb6\x7f\xaa\x9a\x86\xdd\x85\x8a\x01\x3b\x06\x41\xe1\x60\x9d\x20\x0f\xcc\x64\xc5\xfc\xa0\x52\x17\x82\xb8\x33\x59\x0f\x2f\xea\x4c\x05\xd4\xd1\x75\xb3\x8a\x50\x6b\xab\xeb\x50\x83\xe9\x33\x68\xa6\x9a\xac\x2c\x23\x95\xe7\xe4\x7d\xac\x8c\x49\x50\x06\x8b\x5a\x69\x1b\x27\x6b\x1c\x76\xc2\xda\x9e\x32\x5c\x23\x00\x30\x24\xa3\x7f\xbb\xf1\x48\xf1\xf8\x6d\xcb\x13\xc9\xf3\x8d\x79\xd3\x5e\xe2\x64\x8c\x0e\x5d\xfe\x0b\xee\x7a\xe2\xc3\x15\xb4\xdd\xf8\x38\x89\x1e\xa3\xef\xaa\x59\xe3\x3a\xd4\x5a\xe3\xc5\x39\xd3\x22\xc5\xb5\xed\xc9\xd2\xf1\x48\x42\xdb\x99\x70\xe8\xdf\x9d\xf9\x9b\x0e\x7f\x37\x19\x52\x08\x07\xea\xa9\x76\xd2\xd2\xb7\xb0\xba\xd5\x99\x6d\x23\xc5\x21\x1b\x85\xd3\x42\x3a\xe5\x7c\x3d\x93\x54\x97\xf7\xde\x89\xca\xf0\x34\xa8\x67\x74\x77\xe6\xe6\xa5\x6a\x1a\xb2\x45\x3c\xa5\x92\x91\x6d\xa3\xe9\x3a\xfc\x44\x77\xd1\xa8\xfd\x0d\x00\x00\xff\xff\x22\x74\x43\x66\x86\x02\x00\x00"

func idtablestakingScriptsGet_approved_but_not_staked_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_approved_but_not_staked_nodesCdc,
		"idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc",
	)
}

func idtablestakingScriptsGet_approved_but_not_staked_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_approved_but_not_staked_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x1e, 0xe5, 0xa0, 0x48, 0x9f, 0x50, 0x24, 0x96, 0x59, 0xd2, 0x6a, 0xc0, 0x98, 0x4d, 0xab, 0x27, 0x6a, 0xa2, 0x7d, 0xec, 0x12, 0x2b, 0x8b, 0xd1, 0x23, 0x99, 0x8a, 0x68, 0x4d, 0xfb, 0xb5}}
	return a, nil
}

var _idtablestakingScriptsGet_approved_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4b\x03\x41\x0c\x46\xef\xf3\x2b\x3e\xf6\xb4\x7b\x69\xef\x82\x14\x51\x04\xc1\x5b\x7b\x13\x0f\x71\x36\xdd\x86\xce\xce\x0c\x49\x46\x11\xf1\xbf\xcb\xae\x22\x4a\x73\xce\xcb\x7b\x91\xb9\x16\x75\x74\xf7\xa9\xbc\x3d\xdc\x1d\xe8\x25\xf1\xde\xe9\x2c\x79\xea\x42\xd8\x6e\x71\x38\x89\xc1\xa2\x4a\x75\x28\x7b\xd3\x6c\xf0\x13\x23\x36\x55\xce\x0e\xaa\x55\xcb\x2b\x8f\x48\x62\x1e\x02\xc5\xc8\x66\x3d\xa5\x34\xe0\xd8\x32\x66\x92\xdc\x0f\x57\x78\xda\xbb\x4a\x9e\x9e\xf1\x11\x00\x20\xf1\x2f\xf9\x28\xe6\xb8\xc6\xa5\x7f\x33\xb1\xdf\xfc\x5c\x5f\x96\xfa\x61\x45\x97\xd9\xed\x50\x29\x4b\xec\xbb\xdb\xd2\xd2\x88\x5c\x96\x38\x1a\xff\xd7\xe0\xa8\x65\x86\x79\x51\x9a\xb8\x1b\xc2\x8a\x7f\xff\xf0\x57\xbe\x39\xf3\xbb\x85\xcf\xaf\x00\x00\x00\xff\xff\xee\xe0\x02\xc1\x09\x01\x00\x00"

func idtablestakingScriptsGet_approved_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_approved_nodesCdc,
		"idTableStaking/scripts/get_approved_nodes.cdc",
	)
}

func idtablestakingScriptsGet_approved_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_approved_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_approved_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0xd7, 0x6f, 0xce, 0xbf, 0x1a, 0x43, 0x19, 0x4a, 0x7e, 0x81, 0xa7, 0x0, 0x72, 0xaf, 0xdd, 0x80, 0x4b, 0x38, 0xd5, 0x0, 0x1e, 0x48, 0xf7, 0x94, 0x7f, 0xa9, 0xb3, 0x87, 0x66, 0x7, 0x83}}
	return a, nil
}

var _idtablestakingScriptsGet_candidate_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xc1\x4a\x03\x41\x0c\xc6\xf1\xfb\x3c\xc5\xc7\x9e\x76\x2f\xf6\x22\x22\xbd\xf4\x50\x11\x0a\xe2\xc5\xfa\x00\x71\x26\xed\x06\xb3\xc9\x32\x93\xc5\x43\xe9\xbb\x4b\x5b\x05\xc1\x5c\x02\x81\xf0\xff\xc9\x34\x7b\x0d\x74\xcf\xea\x5f\xbb\xa7\x3d\x7d\x28\xbf\x05\x7d\x8a\x1d\xbb\x94\x56\x2b\xec\x47\x69\x68\xb9\xca\x1c\xa8\x1c\x4b\xb5\x86\x18\x19\x2a\x93\x44\xc3\xc1\x2b\x32\x59\x91\x42\xc1\x30\x2f\x7c\xbb\x31\xe5\x11\xd5\x95\x13\xe5\xcc\xad\xf5\xa4\x3a\xe0\xb0\x18\x26\x12\xeb\x87\x35\x4e\xef\x3b\x8b\xc7\x35\x2e\xeb\xe1\xfe\x8c\x53\x02\xf0\x93\xc0\x7f\xcd\xdd\x91\x63\xfb\x1b\x7a\xf5\xc2\x2f\x57\x40\x3f\x5c\xdf\x2e\xb3\xd9\x60\x26\x93\xdc\x77\x5b\x5f\xb4\xc0\x3c\xa0\x4e\xe5\x8f\xef\x86\xee\x86\x74\xfe\x0e\x00\x00\xff\xff\x48\xeb\xfc\xed\xf7\x00\x00\x00"

func idtablestakingScriptsGet_candidate_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_candidate_limitsCdc,
		"idTableStaking/scripts/get_candidate_limits.cdc",
	)
}

func idtablestakingScriptsGet_candidate_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_candidate_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_candidate_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xbd, 0x86, 0xfb, 0x44, 0xf, 0xb6, 0x30, 0x2, 0x29, 0x8c, 0x27, 0x35, 0x60, 0x6, 0x1, 0x42, 0x9a, 0x23, 0x63, 0x1b, 0xb0, 0x91, 0xc2, 0xbd, 0xc4, 0xff, 0x18, 0x8e, 0xdf, 0x44, 0x12}}
	return a, nil
}

var _idtablestakingScriptsGet_candidate_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x4e\xc4\x30\x10\x85\xe1\xde\xa7\x78\xda\x2a\x69\xd8\x16\xa5\x04\x84\xb4\x12\xa2\xd9\xe5\x00\xc6\x9e\x38\x23\x9c\x19\xcb\x33\x11\x45\x94\xbb\x23\x10\x54\xf4\xef\xe9\xfb\x79\x6d\xda\x1d\xa7\xe7\xaa\x9f\x97\xa7\x5b\x7c\xaf\x74\xf5\xf8\xc1\x52\x4e\x21\x9c\xcf\xb8\x2d\x6c\xb0\xd4\xb9\x39\x3a\xf9\xd6\xc5\xe0\x0b\xa1\xb2\x39\x74\x46\x8a\x92\x39\x47\x27\x88\x66\xb2\xef\xcb\xac\xfd\x67\xb2\xb5\xa4\x2b\x4b\x01\x35\x4d\x4b\x88\x29\x91\xd9\x10\x6b\x1d\x31\x6f\x82\x35\xb2\x0c\xe3\x84\xfd\xed\x22\x7e\x3f\x61\xbf\x7a\x67\x29\x13\x1e\x54\xeb\x71\x60\x0f\x00\x7e\x4d\xfc\xcf\xbb\x2b\xe4\x8f\x7f\xf8\xab\x66\x7a\x61\xf3\x61\x0c\xc7\x57\x00\x00\x00\xff\xff\x17\x86\x5f\x24\xd2\x00\x00\x00"

func idtablestakingScriptsGet_candidate_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_candidate_nodesCdc,
		"idTableStaking/scripts/get_candidate_nodes.cdc",
	)
}

func idtablestakingScriptsGet_candidate_nodesCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_candidate_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_candidate_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0xfe, 0x1f, 0xd7, 0x3b, 0x7b, 0x2, 0xcf, 0x97, 0xd6, 0x97, 0xe0, 0xf0, 0xd1, 0x65, 0xd, 0x48, 0xec, 0xeb, 0xad, 0xaf, 0x85, 0x26, 0xf6, 0x78, 0xab, 0x9b, 0x8f, 0x91, 0x1a, 0x9e, 0x2e}}
	return a, nil
}

var _idtablestakingScriptsGet_current_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x31\x0f\x82\x30\x10\x46\xf7\xfe\x8a\x2f\x4c\xb0\xc8\xee\x4c\x4c\x58\x5c\x60\x33\x0e\xb5\x9c\xe5\x62\x39\xc8\xf5\x1a\x63\x8c\xff\xdd\x90\xb8\xb9\xbd\xe5\xbd\xc7\xcb\xb6\xaa\xa1\x3a\xa5\xf5\xd9\x77\xa3\xbf\x25\x1a\xcc\x3f\x58\x62\xe5\x5c\xdb\x62\x9c\x39\x23\x07\xe5\xcd\xa0\x64\x45\x25\xc3\x66\x42\x28\xaa\x24\x06\x9e\x48\x8c\xed\x05\xdb\x55\x24\x92\x68\xb3\x73\x3e\x04\xca\xb9\xf6\x29\x35\xb8\x17\xc1\xe2\x59\xea\xe6\x88\xcb\x60\xca\x12\xaf\x78\x3b\x00\xbf\x22\xfe\xe7\x87\x48\xb6\x23\x4d\xe7\x75\xa2\xbe\xcb\x75\xe3\x3e\xdf\x00\x00\x00\xff\xff\x18\xff\xfa\x8e\xac\x00\x00\x00"

func idtablestakingScriptsGet_current_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_current_tableCdc,
		"idTableStaking/scripts/get_current_table.cdc",
	)
}

func idtablestakingScriptsGet_current_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_current_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_current_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x12, 0xe7, 0x9a, 0x39, 0x77, 0x3d, 0xee, 0x86, 0x21, 0x19, 0x47, 0x5d, 0xbe, 0x20, 0x56, 0x8a, 0xb4, 0x1e, 0x61, 0xda, 0x5c, 0xa6, 0x9, 0x51, 0xa1, 0x3b, 0xc2, 0x1b, 0xd7, 0x58, 0x3f}}
	return a, nil
}

var _idtablestakingScriptsGet_cut_percentageCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8a\x83\x40\x10\x87\xf1\x7e\x9f\xe2\x8f\x95\x36\x67\x73\x5c\x71\x6d\x82\x90\x2e\x24\xe6\x01\xc6\x75\xd4\xc5\x75\x56\x76\x46\x0c\x84\xbc\x7b\x08\xa4\x4b\xfb\x15\xdf\x2f\x2c\x6b\xca\x86\xa2\x89\x69\x3f\x1d\x5b\xea\x22\x5f\x8d\xe6\x20\x63\xe1\x5c\x5d\xa3\x9d\x82\x42\x7d\x0e\xab\x21\xb3\x6d\x59\x14\x36\x31\x3a\x8a\x24\x9e\x91\x06\xa8\xd1\xcc\x3d\x2c\xcd\x2c\xfa\x0e\x04\x49\x3d\x3b\x47\xde\xb3\x6a\x49\x31\x56\x18\x36\xc1\x42\x41\xca\xea\x1f\xb7\x26\xdc\xff\x7e\xf1\x70\x00\x3e\x53\x7c\xfb\x3f\x23\xdb\x85\x77\xca\xfd\x61\xb3\x33\x67\xcf\x62\x34\x72\x59\xb9\xe7\x2b\x00\x00\xff\xff\x32\xee\x00\xb4\xb5\x00\x00\x00"

func idtablestakingScriptsGet_cut_percentageCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_cut_percentageCdc,
		"idTableStaking/scripts/get_cut_percentage.cdc",
	)
}

func idtablestakingScriptsGet_cut_percentageCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_cut_percentageCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_cut_percentage.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xff, 0x5c, 0x60, 0x6, 0xdf, 0x55, 0x49, 0xc2, 0x65, 0x10, 0x69, 0x1a, 0xd5, 0x56, 0xae, 0x7c, 0xae, 0xfa, 0xb8, 0x3d, 0xeb, 0xf8, 0xdb, 0x24, 0x2f, 0x1b, 0x4c, 0x14, 0x87, 0x5d, 0x6}}
	return a, nil
}

var _idtablestakingScriptsGet_del_stake_requirementsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xbd\xaa\xc2\x40\x10\xc5\xf1\x7e\x9f\xe2\x90\x2a\x69\x6e\x9a\x8b\x85\x75\x08\x58\xd8\x68\x7c\x80\x35\x4e\x92\x21\xfb\x11\x67\x67\x51\x10\xdf\x5d\x44\xc5\xc2\xfa\xc0\xff\x77\xd8\x2f\x51\x14\x45\xeb\xe2\x65\xd3\x74\xf6\xe8\x68\xaf\x76\xe6\x30\x16\xc6\xd4\x35\xba\x89\x13\x52\x2f\xbc\x28\x84\x34\x4b\x48\xd0\x89\xe0\x39\xb0\xcf\x1e\x49\xed\x4c\x10\x3a\x67\x16\xf2\x14\x14\x43\x14\x9c\xc8\xd1\x68\x35\x4a\x32\xc6\xf6\x3d\xa5\x54\x5a\xe7\x2a\x0c\x39\xc0\x5b\x0e\x65\xb5\xc6\xa1\xe5\xeb\xea\x1f\x37\x03\xe0\x9d\xc6\xef\x8b\xbf\x91\xb4\xf9\xd4\xb6\x2f\xf4\x39\xd1\xee\x4b\x96\x95\xb9\x3f\x02\x00\x00\xff\xff\x4c\x08\x72\xa8\xc8\x00\x00\x00"

func idtablestakingScriptsGet_del_stake_requirementsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_del_stake_requirementsCdc,
		"idTableStaking/scripts/get_del_stake_requirements.cdc",
	)
}

func idtablestakingScriptsGet_del_stake_requirementsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_del_stake_requirementsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_del_stake_requirements.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x19, 0x1a, 0x77, 0xac, 0x96, 0x67, 0xb5, 0xa2, 0xe3, 0xbf, 0xde, 0xd5, 0x8b, 0x24, 0xeb, 0x21, 0x56, 0x8f, 0xcd, 0x98, 0x54, 0xe5, 0xe9, 0x86, 0x47, 0x82, 0xfc, 0x54, 0xd8, 0x4d, 0x47}}
	return a, nil
}

var _idtablestakingScriptsGet_delegators_below_minCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x3c\xf6\xb0\xb5\xd9\xe2\x4d\xa1\xdb\x83\x69\x7a\x28\x66\x21\xd0\x8f\x43\x52\x7a\x58\x96\x45\x8e\xe5\x44\x44\x96\x82\x24\x6f\x4a\x97\xfc\xf7\x22\x7f\xc4\x72\xac\x7c\x54\x97\x10\xcd\x9b\x37\x6f\x66\x34\x63\x56\x6e\xa5\x32\xb8\x79\xe4\x72\x37\x4b\x17\x24\xe3\x74\x6e\xc8\x86\x89\xd5\x4d\x10\xdc\xdf\x63\xb1\x66\x1a\x7a\xa9\xd8\xd6\xa0\x60\x22\xd7\x20\x9c\x43\x16\x20\x10\x32\xa7\xef\x34\x72\xca\xe9\x8a\x18\xa9\x34\x76\x6b\x09\xa2\x28\xb4\x21\x1b\x9a\x83\x64\xf2\x95\xe2\x2f\x55\xd2\x32\x65\x95\x41\x46\xb9\xdc\xc1\xac\x29\x4a\x26\x58\x59\x95\x96\xe9\x61\x82\xc7\x6f\x3f\x7f\x83\x88\x1c\x8a\x9a\x4a\x09\x0d\x26\x0a\xa9\x4a\x62\x98\x14\x96\xa6\x32\xd6\xa9\x0c\x02\xb2\x5c\x52\xad\x43\xc2\x79\x04\x6d\x54\xb5\x34\x48\xbb\xf8\x5f\x2d\xf9\x77\x26\x66\xa2\x90\x78\x0b\x02\x00\x70\xf1\xaf\x44\xc1\x48\x43\xf8\xbc\x96\x97\xe0\xd7\x23\xfb\xf3\xe9\xe3\x69\x5c\x47\x68\x85\x1e\xf9\x78\x9d\x44\x55\x1e\xc4\xe8\x04\x33\x61\x2e\xc3\xba\x18\x0d\xdc\x8b\x3f\x14\xd8\x26\xd6\xe3\x9f\xc6\x2d\x8b\x53\x17\xfa\xdc\xd0\x31\xc1\x4c\x38\x96\x16\xe1\xad\x36\xdb\xa3\x29\x2f\x62\xa7\x34\x98\x62\x12\x4f\x3c\xe6\x71\x45\x7c\xd0\x41\x30\x4c\x87\x09\x9f\x81\x76\xec\x96\x73\x08\xf3\x96\x00\x53\x3c\x3d\xd7\xb8\xfd\xb8\x70\x45\x25\x40\xf2\x7c\xd1\x27\x15\xbe\x34\xef\xb2\xeb\xe1\x85\x02\x8c\xae\xee\x1a\xf7\x0b\x01\x3b\x71\xff\x13\xd3\x5b\xd5\xb3\xe6\xeb\xb4\x8c\x26\x23\x1c\xc5\x3f\x55\xff\x33\xc6\x3b\x7c\xb8\x36\xae\xed\x56\xf8\x52\x0f\x73\x82\x4b\xcf\x75\xa4\xcd\xdb\xf4\x98\x6c\xb7\x54\xe4\xa1\xe5\x8c\x5a\x1d\xfb\xe1\x5e\xb0\x2a\x4a\xc2\x44\x68\x17\xd4\x2c\x4d\x30\x37\x8a\x89\x55\x94\x9c\x5c\x15\x96\x86\x53\x53\x6f\xb4\xfa\x6a\xea\x53\xfb\xa3\xb5\x1e\x78\x9b\xdf\x28\x38\xf8\xe7\x83\x57\xdf\xc2\xfb\x3c\x74\x8f\xcc\x9c\x9e\x62\xea\x17\x76\x3c\xb4\x3d\x4f\xcc\xa9\x58\x99\x75\x1b\xb9\x90\xee\x8e\x48\xc1\x84\x2b\xa4\x2f\x6a\xab\xf0\x74\x82\xc3\xbe\x0d\xb3\x7c\xef\x86\x48\xdc\x3f\xad\x0a\x7b\xdc\xac\xe2\xa3\xe9\x6b\x23\xc7\x46\x6e\xa8\xd0\xcd\xa5\xe3\xca\x0a\xf8\x10\xf8\x8c\x87\x49\x3c\xc1\xed\xad\xdf\xfc\xc5\x6e\x1f\x27\x47\x9f\x8a\x61\x5a\x2d\x4d\x74\x9d\x4b\x3f\x39\x67\xf1\x47\x53\xef\xcf\xb5\x73\xde\xbb\xe3\xd3\x7c\xf0\x06\x84\xc1\x3e\xf8\x17\x00\x00\xff\xff\x02\x85\xa4\xe0\x96\x07\x00\x00"

func idtablestakingScriptsGet_delegators_below_minCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_delegators_below_minCdc,
		"idTableStaking/scripts/get_delegators_below_min.cdc",
	)
}

func idtablestakingScriptsGet_delegators_below_minCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_delegators_below_minCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_delegators_below_min.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xe8, 0xca, 0xe1, 0xf5, 0xa7, 0x35, 0x4a, 0xf5, 0xf2, 0x84, 0xb3, 0x3a, 0x3b, 0x1b, 0xe6, 0xae, 0x2e, 0x9e, 0xbb, 0xc5, 0xec, 0x3f, 0x57, 0x3d, 0xc4, 0x73, 0xfb, 0x7c, 0x49, 0xd8, 0x6b}}
	return a, nil
}

var _idtablestakingScriptsGet_moves_pendingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x6a\xc3\x40\x10\x46\xe1\x7e\x4f\xf1\x47\x95\xd4\x44\x90\x74\x2a\x43\x08\x08\x12\x08\x48\x39\xc0\x66\x3d\x5e\x0d\x5e\xcd\x8a\x9d\x91\x5d\x08\xdd\xdd\x18\xbb\xf3\x05\xde\xf7\x78\x5e\x72\x31\x54\x5f\x29\x5f\xfa\xcf\xd1\xff\x27\x1a\xcc\x9f\x58\x62\xe5\x5c\xdb\x62\x9c\x58\xa1\xa1\xf0\x62\x28\x64\x6b\x11\x85\x4d\x84\xb0\x96\x42\x62\x98\xf3\x99\x14\x0b\xc9\x81\x25\x22\xb1\x9a\x73\x3e\x04\x52\xad\x7d\x4a\x0d\x8e\xab\x60\xf6\x2c\x75\xd3\x61\x1b\xac\xb0\xc4\x0e\xdb\x5f\x2f\xf6\xfe\xd6\xe1\x23\xe7\xb4\xef\xd8\x1c\x80\x47\x1e\xcf\x27\xaf\x91\xec\xe7\xe6\xfc\xde\x99\x6f\x56\xab\x9b\x17\xb7\x5f\x03\x00\x00\xff\xff\xa1\x24\xa3\x84\xbd\x00\x00\x00"

func idtablestakingScriptsGet_moves_pendingCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_moves_pendingCdc,
		"idTableStaking/scripts/get_moves_pending.cdc",
	)
}

func idtablestakingScriptsGet_moves_pendingCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_moves_pendingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_moves_pending.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x1b, 0xe4, 0x8b, 0xed, 0xd6, 0x2c, 0x98, 0xfe, 0x7b, 0x2c, 0x7e, 0xa6, 0x66, 0xd7, 0xfc, 0x98, 0x76, 0xf1, 0x73, 0xe1, 0xd3, 0x29, 0x7d, 0xf5, 0x4d, 0x91, 0xb2, 0x90, 0xb0, 0x69, 0x55}}
	return a, nil
}

var _idtablestakingScriptsGet_node_committed_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6a\xc3\x40\x10\x45\xfb\x3d\xc5\xc7\x95\xd5\xd8\x4d\x48\x61\x48\x15\x63\x50\x93\xc6\xce\x01\x46\xab\x91\x34\x68\x77\x56\xec\x8e\x48\x20\xe4\xee\x41\x52\x50\xe3\x6a\x60\x3e\xef\xf1\x24\x4e\x29\x1b\x0e\xb7\x90\xbe\xea\xeb\x83\x9a\xc0\x77\xa3\x51\xb4\x3f\x38\x77\x3e\xe3\x31\x48\x41\xf1\x59\x26\x43\x66\x9b\xb3\x16\xd8\xc0\x68\x28\x90\x7a\x46\xea\x50\x8c\x46\x6e\x61\x69\x64\x2d\xcb\x83\xa0\xa9\x65\xe7\xc8\x7b\x2e\xe5\x48\x21\x54\xe8\x66\x45\x24\xd1\xe3\x32\xd5\xd7\x0b\xee\x96\x45\xfb\xea\x82\xcf\x9b\x7c\xbf\xbe\xe0\xc7\x01\x40\x60\x5b\xe1\x5a\xbb\x84\x37\x3c\x57\x9d\x3e\xfe\xd7\x5d\xb4\xdd\x6a\xc5\xb7\xc2\xdd\x70\xda\x9a\xde\x53\x8c\x62\xc6\xad\xfb\xfd\x0b\x00\x00\xff\xff\xdd\x0a\x31\x2e\xef\x00\x00\x00"

func idtablestakingScriptsGet_node_committed_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_committed_tokensCdc,
		"idTableStaking/scripts/get_node_committed_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_committed_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_committed_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_committed_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x94, 0xd8, 0xe8, 0x95, 0xba, 0xfa, 0xd6, 0xfe, 0x41, 0xf6, 0x6, 0x3c, 0xc4, 0x5f, 0x83, 0x12, 0x69, 0x7f, 0x7f, 0x4f, 0x8, 0xc, 0xd5, 0x3, 0x8d, 0x24, 0x4f, 0xef, 0xcd, 0x0, 0xf8}}
	return a, nil
}

var _idtablestakingScriptsGet_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xb1\xaa\x83\x40\x10\x85\xe1\x7e\x9e\xe2\x60\xa5\xcd\xb5\xb7\x96\x0b\x36\x69\xf4\x05\x46\x5d\x75\xc8\x3a\x2b\xbb\x23\x29\x42\xde\x3d\x2c\x09\x69\x02\xa9\x4e\xf3\xf3\x1d\xd9\x8f\x10\x0d\xc5\xbf\x0f\xb7\xae\x1d\x78\xf4\xae\x37\xbe\x8a\xae\x05\x51\x5d\x63\xd8\x24\x21\x4d\x51\x0e\xc3\xea\x2c\x81\xbd\x87\x6d\x0e\xa2\x4b\x00\x8f\xe1\x34\x30\x34\xcc\x0e\xac\x33\xa2\xb3\x33\x6a\x82\x18\x11\x4f\x93\x4b\xa9\x64\xef\x2b\x2c\xa7\x62\x67\xd1\x32\x97\x5d\xdb\xa0\xb7\x28\xba\x56\x0d\xbe\x8f\xff\x2e\xb9\xc9\xfc\x9d\x00\xbc\xcd\x5f\xe1\x47\x7d\x6d\x45\x0f\x7a\x06\x00\x00\xff\xff\x0f\xe4\xc5\xf2\xd8\x00\x00\x00"

func idtablestakingScriptsGet_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_infoCdc,
		"idTableStaking/scripts/get_node_info.cdc",
	)
}

func idtablestakingScriptsGet_node_infoCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x4a, 0xde, 0x8b, 0xcc, 0x8d, 0x66, 0x72, 0x2e, 0xba, 0xb7, 0x87, 0x6f, 0xa8, 0x75, 0x87, 0x4f, 0xc, 0x78, 0x23, 0xa0, 0xbb, 0x6f, 0x78, 0x7, 0x51, 0x27, 0xf8, 0xe7, 0x64, 0xcb, 0x60}}
	return a, nil
}

var _idtablestakingScriptsGet_node_info_from_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfa\x8a\x8b\x17\x0f\x7b\xe3\xec\xc3\x7b\x2f\x84\x86\x42\x36\x25\xd0\xfc\xc0\x58\x9a\x24\xd3\x2a\x1a\x23\x8d\xc9\x22\xe4\xdf\x8b\x23\x4a\x0b\xa5\xa5\x5a\x09\x34\xba\xe7\xce\x91\xf3\xa8\xd9\xd0\x3c\x46\xbd\x6c\x37\x7b\x1a\x22\x3f\x1b\xbd\x4a\x3a\x36\xce\x2d\x16\xd8\x9f\xa4\xa0\xf8\x2c\xa3\xe1\xc8\x56\x40\x31\xc2\x4e\x0c\x49\x07\x05\x0d\x3a\x19\x08\x49\x03\x83\x52\x40\x66\x9b\x72\x2a\x10\x73\x8e\xbc\xe7\x52\x5a\x8a\xb1\xc3\x61\x4a\x38\x93\xa4\x96\x42\xc8\x5c\xca\x12\xeb\x7a\xe9\x96\xf8\x8a\xee\x9f\x34\xf0\x76\x06\x5c\x9d\x03\x80\xc8\x76\x67\xcc\xef\x9c\xf1\x6f\xae\xb2\xf6\x5e\xa7\x64\xef\x89\xdd\x7d\x70\x3e\xbd\xa7\x91\x06\x89\x62\xc2\xa5\x1f\x34\x67\xbd\xfc\xfd\x73\xfd\x06\x53\x23\x77\xd3\x10\xc5\xdf\xfe\xb7\xbf\x98\xda\x91\x9d\x3e\x68\xab\x15\x46\x4a\xe2\xdb\xe6\x41\xa7\x18\x90\xd4\x50\x99\xc8\x7c\xe0\xcc\xc9\x33\x4c\xab\xa2\x52\xfb\xeb\xf0\xc2\xde\x9a\xae\x2e\x57\x9d\xfd\xa4\xa1\x9d\x3f\x6f\x37\xcb\x4f\x0e\x7a\x09\x9d\xbb\xb9\xb7\x00\x00\x00\xff\xff\xa5\xbf\xfd\x13\xbf\x01\x00\x00"

func idtablestakingScriptsGet_node_info_from_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_info_from_addressCdc,
		"idTableStaking/scripts/get_node_info_from_address.cdc",
	)
}

func idtablestakingScriptsGet_node_info_from_addressCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_info_from_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_info_from_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0x8b, 0x9b, 0x4c, 0x7d, 0xe9, 0x43, 0x4a, 0x69, 0xaf, 0x6e, 0x3c, 0xdd, 0x27, 0xa0, 0x10, 0xbb, 0x10, 0xd9, 0xc1, 0x7f, 0x34, 0x49, 0x1a, 0x18, 0xa7, 0x20, 0x74, 0x21, 0xd1, 0x2c, 0x44}}
	return a, nil
}

var _idtablestakingScriptsGet_node_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\xeb\x83\x30\x14\x04\xf0\x3d\x9f\xe2\x70\xd2\x45\x97\x3f\xff\x41\xe8\x26\x85\x2c\x5d\xb4\x74\x4e\x6d\xd4\x47\xe3\x8b\x24\x4f\x1c\x4a\xbf\x7b\xa9\x8a\x4b\xa7\x1b\x8e\x3b\x7e\x34\x4e\x3e\x08\x92\xb3\xf3\x8b\xae\x1a\x73\x77\xb6\x16\xf3\x24\xee\x13\xa5\x8a\x02\xcd\x40\x11\xb1\x0d\x34\x09\x82\x95\x39\x70\x84\x0c\x16\xc4\x24\x64\x1c\x16\x4b\xfd\x20\xf0\x1d\x0c\xd8\x3f\xac\x52\xa6\x6d\x6d\x8c\xa9\x71\x2e\x43\x37\x33\x46\x43\x9c\x7e\x2b\x5d\x95\xa8\x25\x10\xf7\x59\x89\xab\x66\xf9\xff\xc3\x4b\x01\x80\xb3\xb2\x8e\x35\x77\x1e\x27\xfc\x5a\xf2\xcb\xde\x1e\x47\x5b\x66\xeb\x7c\x73\x1d\x0f\xf9\x6e\xbb\xad\x34\xf5\xfe\x04\x00\x00\xff\xff\xcb\xe9\x38\x5b\xe3\x00\x00\x00"

func idtablestakingScriptsGet_node_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_initial_weightCdc,
		"idTableStaking/scripts/get_node_initial_weight.cdc",
	)
}

func idtablestakingScriptsGet_node_initial_weightCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x80, 0x8f, 0x41, 0x13, 0x9f, 0xce, 0x80, 0x4, 0x9a, 0xfd, 0x5b, 0x4d, 0x14, 0x9b, 0xce, 0x16, 0x8b, 0x67, 0x39, 0xe4, 0x94, 0xe5, 0x95, 0xf1, 0x44, 0x33, 0xd8, 0xe, 0x36, 0xd6, 0xb3}}
	return a, nil
}

var _idtablestakingScriptsGet_node_networking_addrCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xbd\x8a\x84\x40\x10\x84\xf3\x79\x8a\xc2\x48\x13\xcd\x0f\x2e\x38\x90\x03\x93\x4b\xf4\x05\xe6\xb4\xd5\x61\xc7\x1e\x99\x6e\x31\x58\xf6\xdd\x17\x7f\xd6\x0d\x36\xea\x86\xaa\xfa\xf8\xdc\x34\x87\xa8\x48\x7e\x7d\x58\xab\xb2\xb1\xff\x9e\x6a\xb5\x37\xc7\x43\x62\x4c\x51\xa0\x19\x9d\x40\xda\xe8\x66\x45\x24\x5d\x22\x0b\x74\x24\x30\xe9\x1a\xe2\xd6\xc3\x4f\xd7\x45\x12\x41\xe8\x61\xc1\xa1\x23\x63\x6c\xdb\x92\x48\x6a\xbd\xcf\xd0\x2f\x8c\xc9\x3a\x4e\xb7\xa8\x2a\xbf\x50\x6b\x74\x3c\x64\xaf\x07\x77\x03\x00\x9e\x74\x1f\x57\xdc\x07\x7c\xe3\xd3\x27\xff\x3b\xd3\x0b\x74\xdc\x6c\x9f\x1f\x6e\x17\x21\x7f\xfb\x9d\x7a\xe6\xf1\x0c\x00\x00\xff\xff\xb6\xa7\x7e\x59\xeb\x00\x00\x00"

func idtablestakingScriptsGet_node_networking_addrCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_networking_addrCdc,
		"idTableStaking/scripts/get_node_networking_addr.cdc",
	)
}

func idtablestakingScriptsGet_node_networking_addrCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_networking_addrCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_networking_addr.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x23, 0x15, 0x47, 0xba, 0x42, 0x1c, 0xc8, 0xa4, 0xc8, 0x1e, 0xf9, 0xfc, 0xc6, 0x21, 0x69, 0xeb, 0x29, 0xb6, 0x47, 0x5c, 0x29, 0xd3, 0xed, 0x14, 0x59, 0x2, 0x6, 0x33, 0x77, 0x8b, 0xeb}}
	return a, nil
}

var _idtablestakingScriptsGet_node_networking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\x83\x40\x10\x44\xfb\xfb\x8a\xc1\x4a\x1b\xed\x03\xe9\x24\x20\x81\x34\xfa\x03\x17\xb3\xea\xe1\xb9\x27\x77\x2b\x22\x21\xff\x1e\xd4\xc4\x14\xa9\x76\x61\x66\x1e\xcf\x0c\xa3\xf3\x82\xe8\x62\xdd\x5c\xe4\x95\xbe\x5b\x2a\x45\xf7\x86\xdb\x48\xa9\x2c\x43\xd5\x99\x80\x50\x7b\x33\x0a\x3c\xc9\xe4\x39\x40\x3a\x02\x93\xcc\xce\xaf\x3d\xf4\xb4\xc0\x35\xd0\x60\xf7\x20\xa5\x74\x5d\x53\x08\xb1\xb6\x36\x41\x33\x31\x06\x6d\x38\x5e\xa3\x22\x3f\xa1\x14\x6f\xb8\x4d\xbe\x0f\x9e\x0a\x00\x2c\xc9\x36\x2e\xb8\x71\x38\xe3\xdf\x25\xbd\x7d\xd2\x03\xb4\xdf\x64\x9b\xef\x5e\x07\x21\xfd\xb9\x5d\x69\x51\xaf\x77\x00\x00\x00\xff\xff\x22\xb6\xa3\xdd\xe3\x00\x00\x00"

func idtablestakingScriptsGet_node_networking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_networking_keyCdc,
		"idTableStaking/scripts/get_node_networking_key.cdc",
	)
}

func idtablestakingScriptsGet_node_networking_keyCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_networking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_networking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x10, 0x3e, 0xf4, 0x2a, 0x7a, 0x92, 0x34, 0x8f, 0x7b, 0x87, 0x2b, 0x26, 0xa9, 0x92, 0xaa, 0x10, 0x99, 0xbe, 0x4a, 0x7c, 0xbb, 0xb3, 0xe7, 0x6c, 0x77, 0x2f, 0x73, 0x6b, 0x7b, 0xec, 0x21}}
	return a, nil
}

var _idtablestakingScriptsGet_node_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3f\x6b\x84\x40\x10\x05\xf0\x7e\x3f\xc5\xe3\xaa\xb3\xb9\x6b\x42\x8a\x83\x74\x87\x60\x93\x22\x9a\x0f\x30\xae\xa3\x2e\xae\xb3\xb2\x3b\x62\x20\xe4\xbb\x07\xff\x60\x73\xd5\xc0\x3c\xde\xe3\xe7\xc6\x29\x44\xc5\x25\xf7\x61\x29\x9e\x15\xd5\x9e\x4b\xa5\xc1\x49\x77\x31\xe6\x7e\x47\xd5\xbb\x84\x64\xa3\x9b\x14\x91\x75\x8e\x92\xa0\x3d\xa3\x26\x4f\x62\x19\xa1\x45\xe4\x85\x62\xc3\x0d\x34\x0c\x2c\x69\x7d\x11\x24\x34\x6c\x0c\x59\xcb\x29\x5d\xc9\xfb\x0c\xed\x2c\x18\xc9\xc9\x75\x8d\x8a\xe7\x03\xa5\x46\x27\x5d\xf6\xc0\x77\xee\x7e\xde\xdf\xf0\x6b\x00\xc0\xb3\x6e\xe5\x42\xda\x80\x0f\xbc\xba\x6e\x9f\x47\x7a\x0e\xed\x37\xdb\xea\xbb\xf1\x5c\xb8\xed\xa6\xaf\x83\x68\xfe\xfe\x03\x00\x00\xff\xff\xe6\x33\x30\x2b\xf0\x00\x00\x00"

func idtablestakingScriptsGet_node_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_rewarded_tokensCdc,
		"idTableStaking/scripts/get_node_rewarded_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_rewarded_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x4c, 0x57, 0xc5, 0x7d, 0xd9, 0xa5, 0x74, 0xe9, 0x2f, 0x6d, 0xbf, 0xe1, 0xa2, 0x3b, 0x4c, 0x84, 0x8, 0x58, 0xee, 0xcb, 0x31, 0x38, 0x27, 0x8c, 0xb2, 0xc1, 0xcb, 0x2a, 0x45, 0x2d, 0x38}}
	return a, nil
}

var _idtablestakingScriptsGet_node_roleCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\x83\x30\x14\x45\xf7\x7c\xc5\xc5\x49\x17\x5d\x8b\xd0\x4d\x0a\x59\xba\x68\x3f\x20\xb5\x2f\x1a\x1a\x5f\x24\x79\xd2\xa1\xf4\xdf\x8b\x5a\x5c\x3a\xdd\xe1\x72\x0e\xc7\x4d\x73\x88\x82\xec\xe2\xc3\x4b\x37\x9d\xb9\x7b\x6a\xc5\x3c\x1d\x0f\x99\x52\x55\x85\x6e\x74\x09\xa9\x8f\x6e\x16\x44\x92\x25\x72\x82\x8c\x84\x18\x3c\x21\x58\x18\x70\x78\x90\x52\xa6\xef\x29\xa5\xdc\x78\x5f\xc0\x2e\x8c\xc9\x38\xce\xd7\x4b\x37\x35\x5a\x89\x8e\x87\xa2\xc6\x4d\xb3\x9c\xf0\x56\x00\xe0\x49\x36\x56\xb3\x0d\x38\xe3\x3f\xa0\xbc\xfe\xde\xc3\xb3\x6f\xb1\xe1\x7b\xcc\x61\x28\xd7\x20\xf5\xf9\x06\x00\x00\xff\xff\xf7\xad\x25\xaf\xcf\x00\x00\x00"

func idtablestakingScriptsGet_node_roleCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_roleCdc,
		"idTableStaking/scripts/get_node_role.cdc",
	)
}

func idtablestakingScriptsGet_node_roleCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_roleCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_role.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0xb2, 0xf3, 0xfe, 0x17, 0x7b, 0xc7, 0x94, 0xa4, 0xc8, 0x22, 0xc1, 0x2, 0x58, 0x53, 0x3a, 0x85, 0xfb, 0xcb, 0x79, 0x49, 0x2d, 0xf4, 0xa3, 0x7c, 0xac, 0x81, 0x2d, 0xf3, 0x38, 0xb, 0xc5}}
	return a, nil
}

var _idtablestakingScriptsGet_node_staked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\x6a\x86\x40\x10\x04\xe0\xfe\x9e\x62\xf8\xab\xdf\x46\x9b\x90\x42\x48\x27\x82\x4d\x1a\xcd\x03\xac\xe7\xaa\x87\xe7\x9e\xdc\xad\x24\x10\xf2\xee\x41\x0d\x36\xa9\x16\x76\x98\xe1\x73\xeb\x16\xa2\xe2\x51\xfb\xf0\xd9\x54\x1d\xf5\x9e\x5b\xa5\xc5\xc9\xf4\x30\xa6\x28\xd0\xcd\x2e\x21\xd9\xe8\x36\x45\x64\xdd\xa3\x24\xe8\xcc\xe8\xc9\x93\x58\x46\x18\x91\x94\x16\x1e\xa0\x61\x61\x49\xc7\x83\x20\x61\x60\x63\xc8\x5a\x4e\xe9\x49\xde\x67\x18\x77\xc1\x4a\x4e\x9e\x47\xd4\x54\x25\x5a\x8d\x4e\xa6\xac\xc4\x47\xed\xbe\x5e\x5f\xf0\x6d\x00\xc0\xb3\x9e\xe5\x46\xc6\x80\x37\xfc\x57\xe5\xef\x7f\xe9\x3d\x74\xdd\xec\xac\x5f\xc2\x7b\x21\xbf\x4c\xed\x09\x34\x3f\xbf\x01\x00\x00\xff\xff\x64\x42\xd4\xf8\xec\x00\x00\x00"

func idtablestakingScriptsGet_node_staked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_staked_tokensCdc,
		"idTableStaking/scripts/get_node_staked_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_staked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_staked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_staked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x2b, 0xa6, 0xd0, 0x2, 0xb9, 0xaf, 0x8d, 0x56, 0x2a, 0x2c, 0x9e, 0xd7, 0xa8, 0x33, 0xb, 0xb1, 0x35, 0xc3, 0xf8, 0xc2, 0x4e, 0x6f, 0x7a, 0xa5, 0xda, 0x66, 0x31, 0x1, 0x55, 0x9d, 0xc8}}
	return a, nil
}

var _idtablestakingScriptsGet_node_staking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x0a\x83\x40\x10\x44\xfb\xfb\x8a\xc1\x4a\x1b\xed\x03\xe9\x24\x20\x42\x1a\xfd\x81\x8b\x59\xf5\xc8\xb9\x27\x77\x2b\x41\x42\xfe\x3d\xc4\x33\x36\xa9\x76\x61\x66\x1e\xcf\x4c\xb3\xf3\x82\xe4\x62\xdd\xb3\x2a\x5b\x7d\xb3\xd4\x88\x7e\x18\x1e\x12\xa5\x8a\x02\xed\x68\x02\x42\xe7\xcd\x2c\xf0\x24\x8b\xe7\x00\x19\x09\x21\x96\x50\xd3\x0a\xd7\x43\x83\xdd\x9d\x94\xd2\x5d\x47\x21\xa4\xda\xda\x0c\xfd\xc2\x98\xb4\xe1\xf4\x1b\x55\xe5\x09\x8d\x78\xc3\x43\xf6\x7b\xf0\x52\x00\x60\x49\xb6\x71\xc5\xbd\xc3\x19\xff\x22\xf9\x75\x4f\x0f\x50\xbc\xd9\x36\x8f\x52\x07\x21\xdf\xc5\x6a\x5a\xd5\xfb\x13\x00\x00\xff\xff\x13\x9d\x4b\x98\xdd\x00\x00\x00"

func idtablestakingScriptsGet_node_staking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_staking_keyCdc,
		"idTableStaking/scripts/get_node_staking_key.cdc",
	)
}

func idtablestakingScriptsGet_node_staking_keyCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_staking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_staking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xd3, 0x57, 0xd9, 0x9d, 0x53, 0xd1, 0x34, 0x87, 0x9a, 0xe7, 0xd6, 0xdf, 0xdf, 0x9f, 0xb0, 0x17, 0xf2, 0x8f, 0xa9, 0x2c, 0x17, 0x33, 0x42, 0xdb, 0x5f, 0x36, 0x71, 0xc3, 0x5, 0x4, 0x32}}
	return a, nil
}

var _idtablestakingScriptsGet_node_total_commitmentCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6a\xc3\x50\x0c\x45\xf7\xf7\x15\x97\x4c\xf6\x92\x2c\xa5\x43\xa0\x53\x4d\xc0\x4b\x97\xa4\x74\x56\x6c\xd9\x16\x7e\x96\xc2\x93\x42\x0b\xa5\xff\x5e\x92\x14\x2f\x9d\x04\xba\x9c\xc3\x91\xe5\x62\x25\xb0\x39\x64\xfb\x6c\x9b\x13\x9d\x33\x1f\x83\x66\xd1\x71\x93\xd2\x6e\x87\xd3\x24\x0e\xef\x8a\x5c\x02\x85\xe3\x5a\xd4\x11\x13\xe3\x4c\x99\xb4\x63\xd8\x00\x0f\x9a\xb9\x47\xd8\xcc\xea\xb7\x07\x41\xad\xe7\x94\xa8\xeb\xd8\xbd\xa2\x9c\x6b\x0c\x57\xc5\x42\xa2\xd5\x6d\x6a\x9b\x3d\x8e\x51\x44\xc7\x7a\x8f\xf7\x83\x7c\x3d\x3f\xe1\x3b\x01\x40\xe6\xb8\xc3\xad\x0e\x86\x17\xfc\xaf\xda\xbe\xfd\xad\xab\xe8\x71\xeb\x3b\xfe\x28\x5c\x0d\xdb\xb0\xa0\xfc\x6a\xcb\x22\x11\xdc\x7f\x48\x4c\x0d\x67\x1e\x29\xac\x78\x55\xa7\x9f\xf4\x1b\x00\x00\xff\xff\xd5\xe6\x75\x18\xff\x00\x00\x00"

func idtablestakingScriptsGet_node_total_commitmentCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_total_commitmentCdc,
		"idTableStaking/scripts/get_node_total_commitment.cdc",
	)
}

func idtablestakingScriptsGet_node_total_commitmentCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_total_commitmentCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_total_commitment.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x9f, 0x71, 0x57, 0x93, 0x5f, 0xbd, 0x7e, 0x63, 0xda, 0x25, 0x94, 0x81, 0x82, 0x78, 0x7f, 0xae, 0xfa, 0x80, 0x9, 0x12, 0xfa, 0x88, 0x0, 0xca, 0x2a, 0x38, 0xf1, 0x6a, 0x19, 0x8, 0x55}}
	return a, nil
}

var _idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6a\xc3\x50\x0c\x45\xf7\xf7\x15\x97\x4c\xf6\x92\x2c\xa5\x43\xa0\x53\x4d\xc0\x4b\x97\xa4\x74\x56\x6c\xd9\x16\x7e\x96\xc2\x93\x4c\x0b\xa5\xff\x5e\x92\x94\x2c\x9d\x04\xba\x9c\xc3\x91\xe5\x62\x25\xb0\x39\x64\xfb\x6c\x9b\x13\x9d\x33\x1f\x83\x66\xd1\x71\x93\xd2\x6e\x87\xd3\x24\x0e\xef\x8a\x5c\x02\x85\x63\x2d\xea\x88\x89\x71\xa6\x4c\xda\x31\x6c\x80\x07\xcd\xdc\x23\x6c\x66\xf5\xeb\x83\xa0\xd6\x73\x4a\xd4\x75\xec\x5e\x51\xce\x35\x86\x55\xb1\x90\x68\x75\x9d\xda\x66\x8f\x63\x14\xd1\xb1\xde\xe3\xfd\x20\x5f\xcf\x4f\xf8\x4e\x00\x90\x39\x6e\x70\xab\x83\xe1\x05\xff\xab\xb6\x6f\x7f\xeb\x43\x74\xbf\xf5\x0d\xbf\x17\x3e\x0c\xdb\xb0\xa0\xfc\x6a\xcb\x22\x11\xdc\x7f\x48\x4c\xb6\x46\xc3\x99\x47\x0a\x2b\x5e\xd5\xe9\x27\xfd\x06\x00\x00\xff\xff\x03\x5b\x46\x77\x02\x01\x00\x00"

func idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc,
		"idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc",
	)
}

func idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xf1, 0x3b, 0xa6, 0x3d, 0xfd, 0x2b, 0x41, 0x58, 0x5a, 0x37, 0x67, 0xe3, 0xf8, 0x5, 0xa0, 0x4e, 0x39, 0xcc, 0x6c, 0xe8, 0x5e, 0x44, 0x8e, 0x87, 0x99, 0xf9, 0x8d, 0x6e, 0x5c, 0x17, 0x16}}
	return a, nil
}

var _idtablestakingScriptsGet_node_type_ratioCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6b\x84\x40\x10\x85\xfb\xfd\x15\x2f\x57\x69\x93\x6b\x42\x08\x07\xe9\xc2\xc1\xb5\x46\xab\x90\x62\x5c\x47\x5d\x5c\x67\x65\x67\xc4\x40\xc8\x7f\x0f\x9a\x74\xd7\x3e\xde\xf7\xf1\x85\x79\x49\xd9\x70\xba\xc6\xb4\xdd\xde\x6a\x6a\x23\xbf\x1b\x4d\x41\x86\x93\x73\xe7\x33\xea\x31\x28\xd4\xe7\xb0\x18\x32\xdb\x9a\x45\x61\x23\xa3\xa5\x48\xe2\x19\xa9\x87\x1a\x4d\xdc\xc1\xd2\xc4\xa2\xfb\x40\x90\xd4\xb1\x73\xe4\x3d\xab\x16\x14\x63\x89\x7e\x15\xcc\x14\xa4\xc8\x29\xf2\x05\xcd\x4d\xec\xa5\xbc\xa0\xb9\x86\xaf\xe7\x27\x7c\x3b\x00\x88\x6c\xc8\x64\x21\x29\x5e\x71\x1f\xf4\x38\xb0\x55\xbc\x51\xee\xaa\xe3\x54\x94\xee\xc0\xfe\xb2\xfe\xc9\x8f\xdd\xff\xf9\xe0\x7e\x7e\x03\x00\x00\xff\xff\x94\xb1\xc7\x23\xd9\x00\x00\x00"

func idtablestakingScriptsGet_node_type_ratioCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_type_ratioCdc,
		"idTableStaking/scripts/get_node_type_ratio.cdc",
	)
}

func idtablestakingScriptsGet_node_type_ratioCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_type_ratioCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_type_ratio.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xf8, 0xab, 0x86, 0xe2, 0xbd, 0xdf, 0xe4, 0x12, 0xd7, 0xef, 0x9d, 0x89, 0x73, 0x39, 0xd7, 0xf0, 0x81, 0x28, 0x41, 0xe1, 0xf0, 0x64, 0xfc, 0x1d, 0x8f, 0xa1, 0x5e, 0x3a, 0x72, 0x2c, 0xd9}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3f\x6b\x84\x40\x10\x05\xf0\x7e\x3f\xc5\xe3\xaa\xb3\xb9\x6b\x42\x8a\x83\x74\x22\xd8\xa4\x51\x3f\xc0\xb8\x8e\xba\xb8\xce\xca\xee\x48\x02\x21\xdf\x3d\xf8\x07\x9b\x54\x03\xf3\x78\x8f\x9f\x9b\x97\x10\x15\xb7\xc2\x87\xaf\x32\xaf\xa9\xf5\x5c\x29\x4d\x4e\x86\x9b\x31\xcf\x27\xea\xd1\x25\x24\x1b\xdd\xa2\x88\xac\x6b\x94\x04\x1d\x19\x2d\x79\x12\xcb\x08\x3d\x56\x49\x4a\x13\x77\xd0\x30\xb1\xa4\xed\x45\x90\xd0\xb1\x31\x64\x2d\xa7\x74\x27\xef\x33\xf4\xab\x60\x26\x27\xf7\x2d\x2a\xf3\x17\x2a\x8d\x4e\x86\xec\x85\xa6\x70\xdf\xef\x6f\xf8\x31\x00\xe0\x59\xf7\x72\x29\x7d\xc0\x07\xfe\xbb\x1e\x9f\x67\x7a\x0d\x1d\x37\xdb\xeb\x87\xf1\x5a\x78\x1c\xa6\xe6\x24\x9a\xdf\xbf\x00\x00\x00\xff\xff\xb0\xf5\x58\x39\xf0\x00\x00\x00"

func idtablestakingScriptsGet_node_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaked_tokensCdc,
		"idTableStaking/scripts/get_node_unstaked_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaked_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xb3, 0x50, 0x4d, 0x4f, 0x8, 0x67, 0xb0, 0xfd, 0x58, 0x1f, 0x64, 0xc3, 0x68, 0xe4, 0x90, 0x65, 0xc0, 0xa2, 0x8c, 0x6c, 0x9f, 0x3f, 0xf8, 0xe9, 0x46, 0x37, 0xd, 0xb, 0x68, 0xfb, 0x5a}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaking_requestCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x4e\x84\x40\x14\x45\xfb\xf9\x8a\x9b\xad\x96\x66\xb7\x31\x16\x9b\xd8\x6d\x48\x68\x2c\x04\x3e\x60\x84\x07\x4c\x18\xde\xc3\x79\x6f\xa2\x89\xf1\xdf\x8d\xa0\x34\x56\xb7\xb8\x39\x27\x27\x2c\xab\x24\xc3\xa9\x8c\xf2\x5e\xdd\x1b\xff\x1a\xa9\x36\x3f\x07\x1e\x4f\xce\x5d\xaf\x68\xa6\xa0\xd0\x2e\x85\xd5\x90\xc8\x72\x62\x85\x4d\x84\x44\x6f\x99\xd4\xa8\x47\x66\xdd\x01\xf8\x45\x32\x1b\x06\x49\xf0\x60\xe9\xc9\x39\xdf\x75\xa4\x7a\xf6\x31\x16\x18\x32\x63\xf1\x81\xcf\x3f\x57\x75\xbf\xa1\xb6\x14\x78\x2c\x6e\x68\xcb\xf0\xf1\xf8\x80\x4f\x07\x00\x91\x6c\x83\x2b\x1e\x04\x4f\xf8\x1f\x76\x79\xfe\x7d\x0f\xd1\xbe\xc5\x86\xef\x91\x87\xe1\x62\x32\x13\xeb\xcb\x5f\x6e\x23\xed\xd6\x4b\xee\xeb\x3b\x00\x00\xff\xff\x1a\x51\xbc\x4b\xfb\x00\x00\x00"

func idtablestakingScriptsGet_node_unstaking_requestCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaking_requestCdc,
		"idTableStaking/scripts/get_node_unstaking_request.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaking_requestCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaking_requestCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaking_request.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x76, 0xe2, 0x9a, 0x7e, 0xa, 0x47, 0xb4, 0xbc, 0x8f, 0x70, 0x79, 0x30, 0x20, 0x30, 0x32, 0xd0, 0x90, 0x94, 0x81, 0x1c, 0x4a, 0x82, 0xd7, 0x91, 0xb9, 0x66, 0xec, 0x61, 0xd1, 0x20, 0x9b}}
	return a, nil
}

var _idtablestakingScriptsGet_node_unstaking_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6a\x84\x40\x10\x86\xfb\x7d\x8a\x9f\xab\xce\xe6\xae\x09\x29\x0e\xd2\x89\x60\x93\x46\x7d\x80\x71\x33\xea\xe2\x3a\x2b\xbb\x23\x09\x84\xbc\x7b\xd0\x4d\x6c\xae\x1a\x98\x9f\xef\xe3\x73\xcb\x1a\xa2\xe2\x52\xf9\xf0\x59\x97\x2d\xf5\x9e\x1b\xa5\xd9\xc9\x78\x31\xe6\x7e\x47\x3b\xb9\x84\x64\xa3\x5b\x15\x91\x75\x8b\x92\xa0\x13\xa3\x27\x4f\x62\x19\x61\xc0\x26\x29\x13\xd0\x30\xb3\xa4\xfd\x47\x90\xf0\xc1\xc6\x90\xb5\x9c\xd2\x95\xbc\x2f\x30\x6c\x82\x85\x9c\x5c\xf7\xa9\x2e\x1f\x68\x34\x3a\x19\x8b\x07\xba\xca\x7d\xbd\xbe\xe0\xdb\x00\x80\x67\x3d\xe0\x5a\x86\x80\x37\x3c\x87\xdd\xde\xff\xd6\x53\x94\x6f\x71\xe0\x39\xf2\x34\xdc\x72\x53\xf7\xdf\x68\x7e\x7e\x03\x00\x00\xff\xff\x9f\x08\x7c\x52\xf2\x00\x00\x00"

func idtablestakingScriptsGet_node_unstaking_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_node_unstaking_tokensCdc,
		"idTableStaking/scripts/get_node_unstaking_tokens.cdc",
	)
}

func idtablestakingScriptsGet_node_unstaking_tokensCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_node_unstaking_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_node_unstaking_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0x4f, 0xf8, 0xb3, 0x7b, 0x51, 0xf2, 0x75, 0xb9, 0x7f, 0x1c, 0xf8, 0x3c, 0x43, 0xf8, 0xdc, 0x6f, 0xa1, 0xb8, 0xc0, 0x8b, 0x7f, 0xe7, 0xe9, 0x16, 0xd2, 0x58, 0xdb, 0xf2, 0xbb, 0x83, 0xec}}
	return a, nil
}

var _idtablestakingScriptsGet_non_operationalCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8a\x83\x40\x10\x06\xe0\x7e\x9f\xe2\xc7\x4a\x8b\xd3\xfe\xea\xe3\xe0\xe0\xf0\x0a\xed\x8e\x14\x1b\x33\xea\xe0\x3a\x23\x3b\x23\x21\x84\xbc\x7b\x08\x04\x52\xe4\x05\xbe\x8f\xd7\x4d\xb3\xa3\xf8\x4e\x7a\xfe\xf9\xea\xe3\x31\x51\xe7\x71\x61\x99\x8a\x10\x9a\x06\xfd\xcc\x06\x1b\x32\x6f\x8e\x4c\xbe\x67\x31\xf8\x4c\x48\x6c\x0e\x1d\x21\x2a\x1f\xba\x51\x8e\xce\x2a\x31\x41\xf4\x44\x16\x42\x1c\x06\x32\x2b\x63\x4a\x15\xc6\x5d\xb0\x46\x96\xb2\xfa\xc4\x7f\xe7\x99\x65\x3a\xe0\x1a\x00\x3c\x45\xbc\xe7\xf5\x44\xde\xaa\xfc\xbd\xe4\xf6\x01\xff\xb2\x79\x59\xd5\x0b\x5d\x2c\xdc\xee\x01\x00\x00\xff\xff\xe0\x3e\x82\x5c\xbb\x00\x00\x00"

func idtablestakingScriptsGet_non_operationalCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_non_operationalCdc,
		"idTableStaking/scripts/get_non_operational.cdc",
	)
}

func idtablestakingScriptsGet_non_operationalCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_non_operationalCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_non_operational.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0xaa, 0x54, 0xe, 0x12, 0x5c, 0x67, 0x2a, 0x4a, 0xad, 0xf3, 0xca, 0xbb, 0xd6, 0xf3, 0xb7, 0xde, 0x77, 0xe6, 0xca, 0x57, 0x1a, 0xc9, 0xfd, 0xf5, 0xb3, 0x39, 0x22, 0x7e, 0x63, 0x2f, 0xa7}}
	return a, nil
}

var _idtablestakingScriptsGet_proposed_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x87\xf1\x3d\x4f\xf1\xa7\x53\xbb\xd8\xdd\xb9\x08\x5d\x44\x68\x37\x71\x88\xe9\x99\x1e\xa6\x97\x72\xb9\x22\x22\xbe\xbb\x08\x6e\x3e\xc0\xf7\xfd\x78\x59\xb3\x1a\xaa\x43\xca\x8f\xbe\x1b\xfd\x35\xd1\x60\xfe\xce\x12\x2b\xe7\xda\x16\xe3\xcc\x05\x25\x28\xaf\x06\x25\xdb\x54\x0a\x6c\x26\x84\x4d\x95\xc4\xc0\x13\x89\xb1\x3d\x61\xdf\x14\x89\x24\xda\xec\x9c\x0f\x81\x4a\xa9\x7d\x4a\x0d\x6e\x9b\x60\xf1\x2c\x75\xb3\xc7\x79\x30\x65\x89\x17\xbc\x1c\x80\xdf\x11\xff\xf8\x2e\x92\x9d\x34\xaf\xb9\xd0\x74\xcc\x13\xf5\x5d\xa9\x1b\xf7\xfe\x04\x00\x00\xff\xff\x89\x21\x47\x7e\xae\x00\x00\x00"

func idtablestakingScriptsGet_proposed_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_proposed_tableCdc,
		"idTableStaking/scripts/get_proposed_table.cdc",
	)
}

func idtablestakingScriptsGet_proposed_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_proposed_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_proposed_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xf6, 0x34, 0x33, 0x4c, 0xec, 0x4e, 0x58, 0x80, 0x3a, 0xe9, 0xdb, 0x6f, 0x1, 0x1e, 0x5d, 0x9, 0xcd, 0xe0, 0x3d, 0xe9, 0x20, 0x33, 0x19, 0x1e, 0xc3, 0xf3, 0xc7, 0xc4, 0xf, 0xb8, 0xd5}}
	return a, nil
}

var _idtablestakingScriptsGet_role_countsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\x4a\xc4\x40\x10\x87\xf1\x7e\x9f\xe2\xcf\x55\x49\xe3\x61\x23\x72\x6d\x44\x48\x63\xa1\xf1\x01\xd6\x64\x92\x2c\x4e\x66\xc2\xcc\x2c\x16\x21\xef\x2e\x82\xdd\x55\x5f\xf7\xf1\x2b\xdb\xae\x16\xb8\xbc\xb2\xfe\xf4\x2f\x43\xfe\x62\xfa\x88\xfc\x5d\x64\xb9\xa4\x74\xbd\x62\x58\x8b\xc3\x47\x2b\x7b\xc0\x28\xaa\x89\x23\x56\x82\xb3\x06\xb8\x6c\x25\x1c\xb3\x1a\x44\x27\x82\x29\x93\xa7\x94\xc7\x91\xdc\x9b\xcc\xdc\x62\xae\x82\x2d\x17\x69\xda\x1b\x8e\xcf\x5e\xe2\xf9\x86\xbf\x3c\x3e\x9d\x38\x12\x80\xff\x2b\xee\x01\x0f\x0b\x45\x57\xcd\x48\xe2\x5d\x99\xde\x74\xa2\x4e\xab\x84\x37\x6d\x3a\x7f\x03\x00\x00\xff\xff\xf4\xa2\x16\xdb\xb8\x00\x00\x00"

func idtablestakingScriptsGet_role_countsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_role_countsCdc,
		"idTableStaking/scripts/get_role_counts.cdc",
	)
}

func idtablestakingScriptsGet_role_countsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_role_countsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_role_counts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0x63, 0xc2, 0xd5, 0x5c, 0x31, 0xd0, 0x0, 0x9e, 0x55, 0x75, 0x55, 0x42, 0x21, 0x1f, 0xc6, 0xd5, 0x57, 0x9, 0xf3, 0xb4, 0xd1, 0x54, 0xe0, 0x49, 0x78, 0x92, 0x3e, 0x74, 0x32, 0x4a, 0xdf}}
	return a, nil
}

var _idtablestakingScriptsGet_slot_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xb1\x4a\xc4\x40\x10\xc6\xf1\x7e\x9f\xe2\x23\x55\xd2\x78\xd8\x88\x08\x72\x85\x22\x1c\x58\x79\x67\x25\x16\x6b\x32\xb9\x1b\x9c\xcc\x84\x9d\x09\x16\xe2\xbb\x4b\xf6\x10\x05\xb7\xd9\x62\x86\x3f\xbf\xe1\x69\xb6\x12\x68\x1e\xc4\x3e\x76\xf7\x87\xfc\x26\xb4\x8f\xfc\xce\x7a\x6c\x52\xda\x6c\x70\x38\xb1\xc3\xfb\xc2\x73\xa0\x50\x2c\x45\x1d\x71\x22\xb8\x58\x40\x78\xe2\x70\x8c\x56\xa0\x36\x10\x8a\x09\x79\x4a\xb9\xef\xc9\xbd\xcd\x22\x1d\xc6\x45\x31\x65\xd6\x76\x9d\xdd\xe0\x79\xa7\x71\xdd\x9d\xff\xcb\x2b\x7c\x26\x00\x10\x8a\xda\x7b\x5c\x73\xb8\xc5\x7f\xcb\xc5\x91\xe2\xc9\x84\xf6\x3f\x5b\xde\x76\x2f\x6b\xf1\xb5\x06\xd6\xb7\xdd\x62\xce\xca\x7d\xdb\xdc\xd9\x22\x03\xd4\x02\x23\xeb\xf0\x47\x5a\xa1\x15\x3f\x53\xcf\x23\xd3\x50\xc5\x4d\x97\x6a\xe5\x7c\xde\xaf\x24\x7d\x7d\x07\x00\x00\xff\xff\x84\xbc\x14\x45\x1d\x01\x00\x00"

func idtablestakingScriptsGet_slot_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_slot_limitsCdc,
		"idTableStaking/scripts/get_slot_limits.cdc",
	)
}

func idtablestakingScriptsGet_slot_limitsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_slot_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_slot_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0xc9, 0x79, 0x49, 0xde, 0x12, 0x19, 0x78, 0x5a, 0xba, 0x4a, 0x90, 0xfa, 0xff, 0xa4, 0xd4, 0xe6, 0x3, 0x8d, 0x9c, 0xc0, 0x3a, 0x7d, 0x26, 0xd1, 0x67, 0xfd, 0xe8, 0xf6, 0xfb, 0x44, 0x48}}
	return a, nil
}

var _idtablestakingScriptsGet_stake_requirementsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x4b\x03\x41\x10\x85\xfb\xfd\x15\xcf\x54\x77\x8d\x69\x44\x24\x60\x27\x81\x14\x36\x9a\x54\x62\x31\xd9\x4c\x92\xe1\x76\x67\xef\x76\x66\x51\x10\xff\xbb\xac\x96\xb6\x1f\xbc\xf7\x7d\x92\xe7\x52\x1d\xab\x6d\x2a\x1f\xbb\xa7\x3d\x1d\x13\xbf\x3a\x4d\xa2\x97\x55\x08\xeb\x35\xf6\x57\x31\x58\xac\x32\x3b\x2a\x7b\xab\x6a\xf0\x2b\xe3\x48\x89\x34\x32\xca\x19\xe6\x34\xf1\x09\x5e\x26\x56\xeb\x80\xa0\xe5\xc4\x21\x50\x8c\x6c\x36\x50\x4a\x23\xce\x4d\x91\x49\x74\xa8\x25\xf1\x06\x87\x9d\xfa\xc3\xb8\xc1\x61\x2b\x9f\xf7\x77\xf8\x0a\x00\x90\xb8\x3b\x16\x3c\xe2\x7f\xcd\xed\x85\xfd\x59\x54\x72\xcb\x9d\xf0\x0b\x2f\x4d\x2a\x67\x56\xb7\x61\x0c\xbf\xfb\xbf\xbe\x7e\xf1\xd6\x2d\xef\x37\xe1\xfb\x27\x00\x00\xff\xff\x54\xb2\xe0\x6e\xdf\x00\x00\x00"

func idtablestakingScriptsGet_stake_requirementsCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_stake_requirementsCdc,
		"idTableStaking/scripts/get_stake_requirements.cdc",
	)
}

func idtablestakingScriptsGet_stake_requirementsCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_stake_requirementsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_stake_requirements.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xe0, 0x54, 0xcd, 0x40, 0xc8, 0xdd, 0xd1, 0x62, 0xbb, 0xad, 0x25, 0x79, 0xfc, 0x65, 0x8b, 0x3f, 0x67, 0xbe, 0x44, 0x4c, 0xa8, 0x57, 0x2, 0xc9, 0x3e, 0x3e, 0x87, 0xbf, 0xff, 0x31, 0xf7}}
	return a, nil
}

var _idtablestakingScriptsGet_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\xae\x82\x40\x10\x46\xe1\x7e\x9f\xe2\x0f\x15\x34\x97\xfe\xd6\xc4\x84\xc6\x06\x3a\x63\xb1\x2e\xe3\x32\x71\x19\xc8\xcc\x10\x63\x8c\xef\x6e\x4c\xec\x7c\x80\x73\x3e\x5e\xb6\x55\x1d\xd5\xa1\xac\xf7\xbe\x1b\xe3\xa5\xd0\xe0\xf1\xc6\x92\xab\x10\xda\x16\xe3\xcc\x06\x4b\xca\x9b\x43\xc9\x77\x15\x83\xcf\x84\xb4\xab\x92\x38\x78\x22\x71\xf6\x07\xfc\x93\xa2\x90\x64\x9f\x43\x88\x29\x91\x59\x1d\x4b\x69\x70\xdd\x05\x4b\x64\xa9\x9b\x7f\x9c\x06\x57\x96\x7c\xc6\x33\x00\xf8\x1e\xf1\x8b\xff\x65\xf2\xe3\x3a\x51\xdf\x59\xdd\x84\xd7\x3b\x00\x00\xff\xff\x62\x09\x58\x6d\xa6\x00\x00\x00"

func idtablestakingScriptsGet_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_tableCdc,
		"idTableStaking/scripts/get_table.cdc",
	)
}

func idtablestakingScriptsGet_tableCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x46, 0x31, 0x31, 0x3f, 0x9c, 0xa8, 0xa8, 0xd0, 0x98, 0x50, 0x9e, 0xf4, 0xb8, 0x75, 0x9, 0xb9, 0x59, 0xc3, 0x95, 0x81, 0x1a, 0xdb, 0x64, 0xb7, 0x91, 0x29, 0x72, 0x20, 0x24, 0xe0, 0xbf}}
	return a, nil
}

var _idtablestakingScriptsGet_total_stakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xb1\x6a\xf3\x30\x14\x85\x77\x3d\xc5\x49\x26\x9b\x1f\x92\x0c\x7f\x4b\x29\x78\x29\x21\x90\xa5\x4b\x9c\xa9\x74\x50\x9c\xeb\x54\x58\xb9\x0a\xd2\x75\x5b\x53\xf2\xee\x25\x92\xeb\xda\x54\x83\x84\xe0\x9c\xef\x7e\x92\x39\x5f\x9c\x17\xcc\x37\xd6\x7d\x6c\xd7\xa5\x3e\x58\xda\x89\x6e\x0c\x9f\xe6\x4a\xe9\xaa\xa2\x10\x32\x6d\x6d\x8e\xba\x65\x9c\xb5\xe1\x2c\x7f\xc4\x7e\x63\x3e\xef\xff\xe3\x4b\x01\x80\x25\x41\x10\xdd\xd0\xb1\x74\x0d\x71\x40\x81\xbf\xb0\xc5\x89\xa4\x74\xa2\x6d\xca\xec\x62\xfe\xa9\x7b\x76\x47\x2a\xbb\x0b\x65\xb9\x8a\xac\xe5\x12\x95\xb6\x55\x6b\xb5\x10\xe4\x8d\x20\xb7\x0e\xb8\x3d\x1f\xc8\xc3\xd5\x90\x34\x22\xcd\x8b\x95\x77\xed\x53\x2a\x31\x07\xb9\x02\xab\xc5\x2a\x26\x6a\xe7\xc1\xfd\x20\x18\x9e\xc8\x2e\x1a\xea\x42\xff\x90\x5e\x60\xed\xc0\x4e\x50\xb9\x96\x05\xe9\x07\x62\x3d\x0c\x21\x53\xff\xf2\x66\x05\xf6\x5b\x96\x87\xec\x2e\x1f\x61\x6e\x6b\x24\x85\x62\x72\xfb\x37\x51\x78\xf9\x61\xbd\xce\x86\xfe\x55\xa5\x3d\x1e\x9e\xa4\xf5\x3c\x26\xa8\xeb\x77\x00\x00\x00\xff\xff\xc2\x0c\x3f\x1d\xb7\x01\x00\x00"

func idtablestakingScriptsGet_total_stakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_total_stakedCdc,
		"idTableStaking/scripts/get_total_staked.cdc",
	)
}

func idtablestakingScriptsGet_total_stakedCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_total_stakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_total_staked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xe7, 0x67, 0x71, 0xb, 0x7d, 0x30, 0x3c, 0x28, 0x4f, 0xd4, 0x6f, 0x85, 0x76, 0x57, 0x89, 0x26, 0x56, 0x72, 0x5a, 0x2c, 0x0, 0xe, 0x40, 0xd0, 0xfd, 0xdc, 0x12, 0x8e, 0xb8, 0xa8, 0x8f}}
	return a, nil
}

var _idtablestakingScriptsGet_total_staked_by_typeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x4b\x03\x41\x10\x85\xfb\xfd\x15\xcf\x54\x77\x8d\x69\x44\x24\x60\x23\x12\x48\x63\x93\x4d\x25\x16\x93\xbd\x49\xb2\xdc\x64\xe6\xd8\x9d\x43\x0f\xf1\xbf\xcb\x9d\x5a\xd9\x3e\x1e\xdf\xf7\xe5\xeb\x60\xc5\xb1\xda\x8a\xbd\xef\x9e\x23\x1d\x85\xf7\x4e\x7d\xd6\xf3\x2a\x84\xf5\x1a\xf1\x92\x2b\x6a\x2a\x79\x70\x14\xf6\xb1\x68\x85\x5f\x18\x47\x12\xd2\xc4\xb0\x13\xaa\x53\xcf\x1d\xdc\x7a\xd6\x3a\x0f\x04\xb5\x8e\x43\xa0\x94\xb8\xd6\x86\x44\x5a\x9c\x46\xc5\x95\xb2\x36\xc5\x84\x37\x38\xec\xd4\x1f\xda\x0d\x0e\xdb\xfc\x71\x7f\x87\xcf\x00\x00\xc2\xfe\x07\x7b\xc4\xff\xa0\xdb\x33\x7b\x34\x27\x89\x8b\x69\xbf\x3c\x9f\xa6\x17\xeb\x38\x4e\x03\x37\x6d\x58\x28\x3f\x95\xbf\xa0\xd7\x59\xf7\x76\x13\xbe\xbe\x03\x00\x00\xff\xff\x7a\xdd\xbd\x62\xe8\x00\x00\x00"

func idtablestakingScriptsGet_total_staked_by_typeCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_total_staked_by_typeCdc,
		"idTableStaking/scripts/get_total_staked_by_type.cdc",
	)
}

func idtablestakingScriptsGet_total_staked_by_typeCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_total_staked_by_typeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_total_staked_by_type.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x27, 0x47, 0xf, 0x1b, 0x82, 0xc2, 0xec, 0x75, 0x53, 0xe1, 0x7f, 0xcd, 0x96, 0xb0, 0xfc, 0x38, 0x40, 0xdd, 0x13, 0xa3, 0xd3, 0x8b, 0x39, 0x13, 0x45, 0xf2, 0x52, 0x85, 0xb2, 0xf5, 0x6c}}
	return a, nil
}

var _idtablestakingScriptsGet_weekly_payoutCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8e\x82\x40\x10\x87\xf1\x7e\x9f\xe2\x1f\x2a\x68\x8e\xe6\x72\xc5\xd5\x4a\x62\x67\x22\x3e\xc0\xb0\x0c\xb0\x61\xd9\x21\x3b\x43\xd4\x18\xdf\xdd\x90\xd8\xd9\x7e\xc5\xef\x0b\xcb\x2a\xd9\x50\x34\x51\x6e\xa7\x43\x4b\x5d\xe4\x8b\xd1\x1c\xd2\x58\x38\x57\xd7\x68\xa7\xa0\x50\x9f\xc3\x6a\xc8\x6c\x5b\x4e\x0a\x9b\x18\x1d\x45\x4a\x9e\x21\x03\xd4\x68\xe6\x1e\x26\x33\x27\xdd\x03\x21\x49\xcf\xce\x91\xf7\xac\x5a\x52\x8c\x15\x86\x2d\x61\xa1\x90\xca\xea\x1f\xd7\x26\xdc\xff\x7e\xf1\x74\x00\x3e\x28\xbe\xff\x3f\x23\xdb\x71\x15\x3f\xb5\x3b\x7c\xa6\x87\x6c\x56\x56\xee\xf5\x0e\x00\x00\xff\xff\xfe\x5a\x5e\x3d\xb2\x00\x00\x00"

func idtablestakingScriptsGet_weekly_payoutCdcBytes() ([]byte, error) {
	return bindataRead(
		_idtablestakingScriptsGet_weekly_payoutCdc,
		"idTableStaking/scripts/get_weekly_payout.cdc",
	)
}

func idtablestakingScriptsGet_weekly_payoutCdc() (*asset, error) {
	bytes, err := idtablestakingScriptsGet_weekly_payoutCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idTableStaking/scripts/get_weekly_payout.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xb1, 0x80, 0x94, 0x4, 0x62, 0x17, 0xdb, 0x39, 0xbb, 0x3, 0xb3, 0x4f, 0x38, 0xb, 0x72, 0xe7, 0xd8, 0x78, 0x72, 0xb5, 0xfa, 0xb8, 0xe, 0xf9, 0x59, 0x34, 0xae, 0xe5, 0xc4, 0xfb, 0xa7}}
	return a, nil
}

var _lockedtokensAdminAdmin_create_shared_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5f\x6f\xe3\x36\x0c\x7f\xf7\xa7\x20\xf2\x10\x38\x40\x6a\xe7\x1e\x17\xb4\x3d\x64\xc1\x0e\x1b\xae\xc3\x0e\x5b\xef\xee\x99\xb5\x99\x58\x88\x22\x79\x92\x9c\x20\x28\xfa\xdd\x07\x59\xfe\x27\xc7\x76\x97\x6d\x6f\xf3\x43\xd1\xc8\xa4\x48\xfe\x48\xfe\x48\xb3\x63\x2e\x95\x81\xad\xba\xe4\x46\x06\xd5\xaf\xd9\x27\x2e\xcf\xcf\xf2\x40\x62\xd6\x1e\x15\x62\xcf\x5e\x38\xf5\x8e\x9f\x64\x72\xa0\xb4\x3c\xd4\xb3\x20\x88\xe3\x18\x9e\x15\x0a\x8d\x89\x61\x52\x80\xc9\xd0\x80\xc9\x08\x8e\xc8\x04\x18\x2b\x06\x98\x1e\x99\x80\xb3\x2c\x78\x0a\x9a\xed\x45\xa9\x64\x24\x24\x8a\xd0\x10\x20\xe8\x0c\x15\xa5\x80\x49\x22\x0b\x61\x00\x45\x0a\x28\xa0\x10\xbc\xb4\x55\x8a\xa3\x7b\xb5\x93\x0a\x10\x0a\x4d\x2a\x08\x4c\x6b\x36\x0c\x00\x00\x72\x54\x86\x21\xdf\x58\x73\x5f\x8a\x17\xce\x92\xcf\x74\x59\x57\xa1\x46\x9f\xe9\xf2\xc4\xb4\xf9\x49\x18\x75\x59\x42\x1c\xc3\x77\x62\xfb\xcc\xac\xe1\xc3\x6a\xd5\x55\xff\xaa\x49\xdd\xa0\xfd\x43\xa5\xbd\x2b\xf8\xad\xaa\x1f\x56\xab\x55\xb0\x00\x78\x0d\x9c\x7d\x45\x39\x2a\x0a\x4b\xb8\xd6\x80\x85\xc9\xc2\x1f\xa5\x52\xf2\xfc\x0d\x79\x41\x0b\x98\x6f\x1c\x40\x8b\x5a\xc3\x3e\x71\x0c\x5b\x87\xa3\x45\x5d\xd0\xb9\x86\x51\x3b\x1c\xd3\xd4\xbe\x60\x0a\x0e\x74\xd1\x8d\x16\x27\x53\xa1\x5e\xdd\x09\x0f\x50\xfd\x17\xe6\x78\x21\xb5\x76\x59\x5b\x78\x1a\x16\xf7\xf7\xe4\x1b\x05\xef\xfa\xc8\x5a\x8f\x30\x4d\xc3\xbc\xc5\x67\x30\x5f\x51\x23\xb0\x84\x0c\x75\xb6\xe1\x7b\xa9\x98\xc9\x8e\x63\xf2\x9e\xd0\x12\xce\x15\xb8\xc3\xc2\xee\xed\xe2\x76\x27\xbd\xd4\xbe\xef\xa3\x2f\x3e\xed\xa2\x2f\x5b\x7b\xd8\xb8\xd8\x01\x7d\xd0\xc1\xab\xc2\x9b\xf0\xee\x5a\x76\xc4\xb5\x6b\xc1\x2b\xbf\xda\xc2\x43\xc8\x15\x3b\xd9\xff\x38\x13\x07\xdb\xd9\xb6\x14\xb5\x91\xb6\xa9\x4f\x58\x70\xe3\x55\x51\x79\xb2\xc5\x1c\x5f\x18\x67\xe6\x02\x0f\xbd\x2c\x24\xf5\x2b\x46\x3a\xb2\xb7\xe0\x9e\x22\xa6\x75\x41\xcd\x35\xf6\xb9\x2f\x1b\xc4\x63\xa9\xe8\x3b\x33\x59\xaa\xf0\xbc\x80\x79\xc3\x68\xd1\x37\x6b\xef\xd1\xd3\x0d\xe3\xea\xde\x78\x57\x8b\x95\x52\x7e\x78\x0d\x3f\x39\x1e\xaa\xd8\xec\x88\x02\xf7\xa4\xca\xee\xaa\x62\x64\x06\x2c\xd9\xd9\xa0\x3d\x26\xf3\xc2\xe6\x2d\x71\xfe\x5a\x5d\x71\x7f\x07\x5d\x3a\x8d\x9c\xc1\xa7\x2b\xc1\xb0\x84\x6c\xdd\x47\x6e\xac\x8c\x6b\xcc\x34\x9e\x28\xbc\xbf\xbb\x36\xbc\x04\x23\xd7\xbe\xe9\x6b\xa3\x7f\xb8\x5b\xbe\xa0\xc9\x3a\xb0\xd8\x48\x4c\x47\x6a\x3c\x8f\x1e\xe0\x13\x49\x9d\xca\xe3\xd2\x77\xf2\x6b\x39\x11\xdc\x8f\x05\xcc\xdf\x09\xe0\x31\xf4\x5c\xb0\xcf\xbf\x0b\xf9\x67\xc9\xd3\xd1\xac\x3d\xb7\x12\xbe\x5d\x07\xff\x26\x4d\x15\x69\xbd\xee\xa5\x0a\xdd\xf1\xd2\xd3\xe8\xe2\xbb\x1e\x41\xbb\x51\x18\x61\x0a\xaf\x06\xfc\xbe\xb9\xeb\x04\xd3\x37\xdc\xab\x8a\x4e\x50\x1d\x6c\x86\x6c\x5b\x90\x98\xd8\xc9\x2d\xe6\xf0\xe0\x79\x32\x91\xf9\xf9\x98\xb1\x5e\xea\x6e\xf3\x69\x08\x0e\xcf\x89\x92\x1f\x75\x16\x56\xfe\x2e\x01\xcd\x60\x37\x54\xca\xbf\x88\x9d\x74\x3c\x38\x56\x18\xe5\x90\xd9\x4a\xce\xc9\x2d\x41\x0f\x6e\x18\xd6\xd1\xfa\x9d\xf0\x52\x8e\x74\x57\xf5\x9e\xd1\xca\x5c\x49\xaa\x52\xf5\xeb\xfb\x79\xc0\xd0\x40\x85\xef\x94\x3c\x8e\xb7\x76\x4f\x7f\x08\x3f\x1f\x43\xfb\x7c\xfc\x08\x39\x0a\x96\x84\xb3\x6d\xb9\xc2\x09\x69\xc0\x05\x01\x8a\x76\xa4\x48\x24\x64\x49\xdf\xad\x79\x49\x73\xfb\x6c\x82\x36\x5c\x27\xff\x0f\xc8\x63\xa8\x3e\x6c\xd7\xd7\xcb\x93\x67\xc5\x83\xe0\x16\xc6\xa8\x57\xe5\xbe\x6a\xb7\x05\xc6\xa9\x66\xe3\x16\xce\xa9\xfc\x0c\xb5\x7c\x1c\xc3\x6f\x27\x52\x8a\xa5\x6e\xf7\x4c\x69\x67\xe7\x13\x34\x93\x17\x14\x25\xc4\x4e\xa4\x46\xe6\x94\x97\xd6\x42\xd4\x6d\x19\xbb\xfd\xa5\x1d\xcd\xbf\x57\xd7\x0c\x4e\x67\xbb\xf1\xd6\x76\xdc\xd7\xc7\x11\xd5\x41\xd7\x67\xd5\xd4\xd6\x80\xba\xfd\xa0\xe8\x56\x65\x67\x3a\xea\x96\x65\x6f\x58\x4a\xee\xe7\xaf\x7e\xfd\xd5\xee\xbe\x3d\x86\xb7\x94\xcc\xdf\xc0\xa8\x46\x68\x60\xbe\xf4\x03\xf0\xd3\x6c\x09\x6e\x14\xd6\x91\xdc\xe6\x85\x01\x21\xd5\x11\x79\x8b\x2f\x13\xf6\x6b\xcd\x7e\xa6\x58\xe8\x0b\xc1\xfe\x2c\x08\xf2\x2e\x7d\x34\x8d\x5e\xdf\xfe\xdf\x81\x39\xba\xb3\xfd\x53\xe4\xfa\x7e\x8e\x63\xe6\x30\xfe\x34\x81\x9c\xfd\xfb\x16\xbc\x05\x7f\x05\x00\x00\xff\xff\x83\xad\x3d\x9d\x5f\x0f\x00\x00"

func lockedtokensAdminAdmin_create_shared_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_create_shared_accountsCdc,
		"lockedTokens/admin/admin_create_shared_accounts.cdc",
	)
}

func lockedtokensAdminAdmin_create_shared_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_create_shared_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_create_shared_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xd0, 0x28, 0xc7, 0x6, 0xd, 0xc0, 0x8d, 0xdf, 0x7e, 0x2b, 0x53, 0x13, 0x3d, 0x9c, 0xc8, 0xb7, 0x49, 0x2a, 0x31, 0xfe, 0x7f, 0x3, 0xa3, 0x12, 0x32, 0xf, 0x83, 0x98, 0x75, 0xd1, 0x40}}
	return a, nil
}

var _lockedtokensAdminAdmin_deploy_contractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\x39\x49\x0b\xa5\x0f\x50\xf0\xb0\x8a\x20\xac\x78\x59\xf1\x22\x1e\xc6\x64\x6c\x43\xdb\x4c\x98\x4c\x59\x83\xec\xbb\x4b\x37\x76\xb7\x62\x0f\x7f\x33\x99\x7f\xfe\xc9\xe7\xa6\xc0\xa2\x70\x2f\x29\x28\x17\x85\x0a\xfa\x88\x46\x1d\xfb\xd2\xb0\x57\x41\xa3\xcf\x38\x51\x0b\x07\x15\xe7\xbb\x1a\x0c\xdb\x4d\x15\xe6\x8f\xd1\x99\x3d\xa5\xd8\xc2\x5b\x0e\x69\xf6\x94\x9e\x5c\xd4\x07\xaf\x92\xde\x2b\xf8\x2e\x00\x00\xce\x12\x84\x02\x0a\x95\x68\x27\xe7\x5b\xc0\x59\xfb\xf2\xa0\x2c\xd8\x51\x0d\x77\x2c\xc2\xc7\x57\x1c\x67\xaa\xe0\x66\x67\x0c\xcf\x5e\xd7\xf1\xe5\x1b\x49\x61\x64\x33\x90\x7d\xe1\x81\x7c\x84\x5b\xf8\x75\x95\x01\x13\x49\x0b\xe7\xdc\xea\x3a\xb0\x31\x37\x2b\x4d\x6c\xd0\xda\xd2\x9f\x99\xb6\x84\x2b\xd9\xa2\x8d\xa5\xe5\xf7\x48\x5f\x65\x55\xaf\xa9\x97\xd8\x4f\x16\x18\x28\x81\xf3\x1b\xfc\xcd\x3b\xff\xad\x1e\x28\xe5\xad\x17\x7b\xbb\x04\x34\x97\xb2\x86\x1e\x63\xbf\x1b\x3b\x16\xa7\xfd\x94\xbb\x7f\xae\x6a\x38\x92\xeb\x7a\xcd\xad\x7c\xbe\x82\x9e\x8a\xac\xa7\xe2\x27\x00\x00\xff\xff\x8f\x01\xaf\x74\xcf\x01\x00\x00"

func lockedtokensAdminAdmin_deploy_contractCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_deploy_contractCdc,
		"lockedTokens/admin/admin_deploy_contract.cdc",
	)
}

func lockedtokensAdminAdmin_deploy_contractCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_deploy_contractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_deploy_contract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x61, 0x8, 0x4c, 0x45, 0x80, 0x10, 0x34, 0x60, 0xc1, 0xb0, 0xed, 0xeb, 0xc8, 0x43, 0x86, 0xb6, 0xd9, 0xa4, 0x12, 0x84, 0xc4, 0x57, 0x3, 0xce, 0xb7, 0x53, 0x94, 0x20, 0x92, 0x33, 0x8}}
	return a, nil
}

var _lockedtokensAdminAdmin_deposit_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\xb8\x1c\x3a\x1b\x18\x9c\x7b\xd0\xae\xc8\x72\xdd\x21\xd8\x8a\xdd\x19\x89\x8b\x85\x2a\xa2\x40\xd1\x2d\x82\xa1\xff\x3e\xc8\xf2\x32\x6b\xf3\x30\x9e\x24\x41\xef\xf1\xbd\x47\xba\x4b\x64\x51\xd8\x7c\x66\xf3\x4c\xf6\x89\x9f\x29\xa4\x4d\xd3\x6c\xb7\x5b\xd0\x7c\x01\xb4\x17\x17\x20\xb9\x73\x48\xa0\x83\x4b\xa0\x82\x21\xa1\x51\xc7\x01\x94\xc1\x52\xe4\xe4\x14\x10\x0c\x46\x3c\x39\xef\xf4\x3a\xc1\x5d\x50\xce\xaf\x63\x52\xb6\x57\x88\xc2\x2f\xce\x92\xbc\x4f\x80\xc6\xf0\x18\x14\x74\x40\x05\xf4\x9e\x5f\x33\x35\x5d\x32\x1d\x5a\x3b\xa1\xe7\x3f\x29\xbf\xe9\x40\x20\x64\x58\x6c\xd3\x2c\xba\xb7\x33\xf5\x71\x66\xde\x5b\x2b\x94\xd2\x0e\xe6\x43\x07\x3f\x9a\x06\x00\x20\x0a\x45\x14\x6a\x27\x2b\x3b\xc0\x51\x87\xf6\x13\x8b\xf0\xeb\x37\xf4\x23\x7d\x80\xc3\x2f\xe5\x8e\x52\x07\x77\xfb\xd2\xfb\x86\xcf\xe5\x49\x17\x06\xbf\x90\x21\xf7\x42\x02\x0f\x70\x26\x9d\xff\xff\x43\x4f\x77\xe3\xc8\xd5\x9b\x45\xaf\xfe\x34\xa9\xb8\xbf\x5b\xa6\xdf\x97\xcb\x4c\x7a\x10\x42\x65\xf9\xd8\x56\x2c\xb9\xfe\x8b\x39\x8e\x27\xef\xcc\x11\x75\xa8\xb0\xb5\x9e\xc7\x47\x88\x18\x9c\x69\x37\x07\x1e\xbd\x85\xc0\x0a\x45\xd5\xc2\x6e\x4e\xbf\xf8\x15\xfa\x4e\x42\xc1\xd0\xa6\xab\xb3\x99\x96\x65\x9f\x03\x3e\xb0\xf7\x54\xd6\xe3\xa1\x6c\x4f\xed\x39\x29\x0b\x9e\xa9\x77\x29\x8d\x74\x3f\x0d\xa3\xb2\x52\x9b\xe8\xa0\x0e\xe7\x69\xa5\xcf\x1f\xe1\xac\x04\xb3\x86\xfa\x5a\x74\x54\xf9\x74\xef\x7e\xbb\xfa\x7b\xda\x3d\x5a\x7b\x5b\x95\x6b\x6b\x30\xee\x56\x7d\x97\x84\xdf\x9a\xb7\xe6\x67\x00\x00\x00\xff\xff\x67\xa5\x05\x14\x5e\x03\x00\x00"

func lockedtokensAdminAdmin_deposit_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_deposit_account_creatorCdc,
		"lockedTokens/admin/admin_deposit_account_creator.cdc",
	)
}

func lockedtokensAdminAdmin_deposit_account_creatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_deposit_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_deposit_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xbb, 0x35, 0xbf, 0x13, 0xf3, 0x83, 0x88, 0x8a, 0x90, 0xff, 0x2, 0x47, 0x96, 0xb2, 0xd0, 0xa2, 0x7e, 0xf9, 0xe0, 0x9a, 0x32, 0xb, 0xa, 0xa6, 0x4c, 0xe6, 0xc9, 0xc1, 0xfc, 0x56, 0xed}}
	return a, nil
}

var _lockedtokensAdminAdmin_remove_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xdf\x4a\xf3\x40\x10\xc5\xef\xf7\x29\xe6\xcb\x45\xc9\x5e\x7c\x79\x80\x52\x2d\x6a\x11\x04\x05\xb1\xd5\xfb\xe9\x66\xf2\x87\x6c\x76\xc2\x64\x62\x11\xe9\xbb\x4b\xb2\xc4\xa6\x57\xce\xdd\x70\xf6\xfc\xf6\x9c\xa9\xdb\x8e\x45\x21\x79\xf4\x7c\x7a\xda\x1d\xf0\xe8\x69\xaf\xd8\xd4\xa1\x4c\xcc\xac\x3d\xb3\x6b\x28\x3f\x70\x43\xa1\x4f\x8c\x51\xc1\xd0\xa3\xd3\x9a\x03\x7c\x1b\x03\x00\xd0\x09\x75\x28\x94\xf6\x75\x19\x48\xd6\x80\x83\x56\xe9\x3d\x8b\xf0\xe9\x03\xfd\x40\x16\x56\x77\xce\xf1\x10\xd4\xce\x96\x71\x3c\x29\xb4\x18\xb0\x24\x79\xa3\x02\x6e\x20\xfa\xb3\x5e\x59\xb0\xa4\xec\x38\x11\x36\x13\x6d\x19\x22\x7b\x0f\x9e\x5d\x13\x17\x0b\xab\x2b\x6d\xb1\xbc\x44\xf6\x6d\x5a\x08\xb7\x6b\xf8\xe3\xd9\x3e\xfe\xfa\x8a\x5a\xd9\xdf\x88\xe3\x6c\xb7\xd0\x61\xa8\x5d\x9a\x3c\xf0\xe0\x73\x08\xac\x10\xa3\x01\x82\x50\x41\x42\xc1\x11\x28\x83\x56\x04\x7e\x02\x83\x8e\xe4\xb9\x5d\x62\xaf\x4b\xe7\xe4\xa9\x44\x65\x81\xcd\xff\xc5\x05\x32\xa1\x96\x3f\x69\x37\xab\xa9\xfd\x77\xf1\xe5\xd4\xab\xf0\xd7\xc5\x1b\xa5\xb3\x39\x9b\x9f\x00\x00\x00\xff\xff\x68\xf5\x3b\x23\xc5\x01\x00\x00"

func lockedtokensAdminAdmin_remove_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminAdmin_remove_delegatorCdc,
		"lockedTokens/admin/admin_remove_delegator.cdc",
	)
}

func lockedtokensAdminAdmin_remove_delegatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminAdmin_remove_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/admin_remove_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xad, 0x83, 0x8d, 0x7e, 0xdf, 0xf3, 0xfb, 0x32, 0x3, 0x96, 0xe3, 0x58, 0xa0, 0xb4, 0xd6, 0xa3, 0xef, 0xf1, 0xbc, 0x38, 0xcc, 0x51, 0x45, 0xe7, 0xca, 0x3a, 0x23, 0xb4, 0xa7, 0x10, 0x32}}
	return a, nil
}

var _lockedtokensAdminCheck_main_registrationCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xc1\x6e\x9d\x30\x10\xbc\xf3\x15\x1b\x0e\x91\x91\x2a\x3e\x00\xf5\x25\x7a\x7d\x52\xd5\x4a\x3d\x44\x6d\xd4\xfb\x62\x2f\x60\xc5\x78\x91\xbd\x28\x87\x2a\xff\x5e\x81\x09\xc2\xed\xd3\xbb\xc4\x17\xc4\xe0\x99\x9d\x19\xd6\x8e\x13\x07\x81\xf2\xeb\xec\x7b\xdb\x3a\x7a\xe6\x17\xf2\x65\xb1\xc3\x8e\x5f\x37\x68\xc7\x7e\xb0\x7e\x21\xb3\xa2\xb1\x2c\x0a\x09\xe8\x23\x6a\xb1\xec\xd5\x88\xd6\x9f\xb5\xe6\xd9\x4b\x03\x67\x63\x02\xc5\x58\xc1\x9f\xa2\x00\x00\x98\x02\x4d\x18\x48\x45\xdb\x7b\x0a\x0d\xe0\x2c\x83\xfa\xc2\x21\xf0\xeb\x6f\x74\x33\x55\x70\xbf\x71\x77\xca\x72\x1c\x09\xa0\x19\xad\xff\x49\x1d\x9c\x20\xb1\xeb\x28\x1c\xb0\xa7\xba\x5d\xf9\x9f\xef\x8f\xa6\xea\xf5\x71\x5e\x38\x17\x76\x8e\x56\x6f\x0f\xaa\x0b\x3c\x36\x90\x5d\x3c\xbc\xfc\x73\xfd\x57\xd2\x7f\x42\x19\xaa\xdd\xca\x72\x1e\x1f\x61\x42\x6f\xb5\x2a\x2f\x3c\x3b\x03\x9e\x05\x92\x09\x40\x08\xd4\x51\x20\xaf\x09\x84\x41\x06\x02\xb7\x0e\x00\x59\x26\xa4\x14\xa0\xf7\x19\x65\x95\xa7\x4c\x97\xb7\x0e\xbe\xfb\x8e\x53\xe2\x9e\x64\xc3\x8e\xfd\xe6\xae\x6a\x8d\x13\xb6\xd6\x59\xb1\x14\x6f\x94\xf2\x8d\x9d\xa1\xf0\xa0\xae\xb4\x70\x98\xfb\x34\xb7\xce\xea\x8f\x64\x9f\x56\x05\xf8\x4f\xf9\x66\x64\x38\x5d\xad\xa0\xee\x49\x32\xa1\x6d\xb1\xd4\x41\x0b\x63\xa4\x20\x2a\x73\xfb\xbe\x34\xf5\xa1\x40\x4c\xd4\x26\x1f\x54\xc1\xdd\x09\xbc\x75\x9f\x32\xfe\x48\x31\x62\x4f\x0d\x94\xcf\x03\x41\x9c\x48\xdb\xce\x92\x01\xdc\xdc\xda\xb8\x16\x80\xef\x3f\x79\xc3\xef\xe0\x82\x7e\xf9\x10\xc9\x9b\x6c\x01\x62\xb9\xeb\xa7\x5e\xdf\x8a\xb7\xe2\x6f\x00\x00\x00\xff\xff\x3c\x08\x34\x69\x81\x03\x00\x00"

func lockedtokensAdminCheck_main_registrationCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCheck_main_registrationCdc,
		"lockedTokens/admin/check_main_registration.cdc",
	)
}

func lockedtokensAdminCheck_main_registrationCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCheck_main_registrationCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/check_main_registration.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0xff, 0x7a, 0x65, 0xef, 0x1, 0xfb, 0xb6, 0x45, 0xec, 0x8b, 0x39, 0x41, 0xd6, 0x9b, 0x72, 0xcf, 0xee, 0x35, 0x97, 0xaa, 0x45, 0x59, 0xc8, 0x8e, 0xfc, 0xd2, 0x50, 0x8a, 0xff, 0x4, 0x96}}
	return a, nil
}

var _lockedtokensAdminCheck_shared_registrationCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\x41\x6e\x83\x30\x10\xbc\xf3\x8a\x09\x87\x08\xa4\x8a\x07\xa0\xa6\x51\x1a\xa9\xa7\x1e\xaa\x36\xea\x7d\x63\x16\xb0\x62\x6c\x64\x2f\xca\xa1\xca\xdf\x2b\x30\xa1\xa1\x7b\xb1\x3c\xbb\xb3\x3b\x33\xba\xeb\x9d\x17\xa4\x6f\x83\x6d\xf4\xd9\xf0\xc9\x5d\xd8\xa6\xc9\x02\x1b\x77\x9d\xa1\x05\x7b\x77\xea\xc2\xd5\x84\x86\x34\x49\xc4\x93\x0d\xa4\x44\x3b\x9b\x99\xa9\x75\x50\xca\x0d\x56\x4a\x1c\xaa\xca\x73\x08\x39\x7e\x92\x04\x00\x7a\xcf\x3d\x79\xce\x82\x6e\x2c\xfb\x12\x34\x48\x9b\xbd\x3a\xef\xdd\xf5\x9b\xcc\xc0\x39\xb6\x33\x77\xa1\x8c\x65\x58\x40\x55\xa7\xed\x27\xd7\xd8\x21\xb2\x8b\x20\xce\x53\xc3\xc5\x79\xe2\x3f\x6f\x1f\x65\x15\xd3\x73\x18\x39\x47\x67\x0c\x4f\xea\x5e\xb2\xda\xbb\xae\xc4\x6a\xf0\xe1\xf3\x6f\xfc\x2b\xee\xff\x20\x69\xf3\x45\xca\x58\xfb\x3d\x7a\xb2\x5a\x65\xe9\xd1\x0d\xa6\x82\x75\x82\x28\x02\x04\xcf\x35\x7b\xb6\x8a\x21\x0e\xd2\x32\x62\x24\x90\xf1\x42\x74\x01\xb5\xdc\x48\xf3\x3f\x97\x14\x02\x7b\x41\xb6\xba\x75\xb7\x5d\x34\x2c\x73\x34\x19\xc5\x54\x4b\xac\xd2\xce\xb1\xd9\xc1\x6a\xf3\xb4\xe2\x77\x1c\x02\x35\x5c\x22\x3d\xb5\x8c\xd0\xb3\xd2\xb5\xe6\x0a\x14\x49\xd0\x61\x92\x4f\x77\x99\x33\xbe\xc1\x91\xec\xd8\x08\x6c\xab\x95\x85\x90\x2e\xfb\x63\x2a\xb7\xe4\x96\xfc\x06\x00\x00\xff\xff\x55\x2a\x61\x3c\x45\x02\x00\x00"

func lockedtokensAdminCheck_shared_registrationCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCheck_shared_registrationCdc,
		"lockedTokens/admin/check_shared_registration.cdc",
	)
}

func lockedtokensAdminCheck_shared_registrationCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCheck_shared_registrationCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/check_shared_registration.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xad, 0x7a, 0xd9, 0xe7, 0x7e, 0xe7, 0x1d, 0x7b, 0xa3, 0x85, 0xd3, 0x14, 0x25, 0x66, 0x5f, 0x6f, 0x3, 0x50, 0x4d, 0xb4, 0xe3, 0xea, 0x31, 0x1b, 0xa4, 0xd3, 0x56, 0x75, 0xd7, 0x75, 0x9d}}
	return a, nil
}

var _lockedtokensAdminCustody_create_account_with_lease_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x7c\x08\x64\xc0\x91\xd2\xab\x91\x64\x91\x1a\x5d\xb4\xd8\x14\x0d\xda\xec\xee\x79\x22\x8d\x2d\x22\x34\xa9\xf2\x61\x43\x08\xf2\xdf\x0b\x4a\xd4\x83\xb2\x14\xbb\x45\x7b\xaa\x0e\x41\x4c\xce\xe3\xfb\x3e\xce\x70\xc8\xf6\xa5\x54\x06\x36\xaa\x2a\x8d\x8c\xfc\xaf\xc5\x67\x2e\x8f\xcf\xf2\x95\xc4\xa2\x5f\xb2\x62\xc7\x5e\x38\x8d\x96\x1f\x65\xf6\x4a\x79\xbd\xa8\x17\x51\x94\xa6\x29\x3c\x2b\x14\x1a\x33\xc3\xa4\x00\x53\xa0\x01\x84\xcc\x6a\x23\xf3\x0a\x4a\x25\x0f\x2c\x27\x05\x47\x69\x79\x0e\x9a\xed\x44\xed\x62\x24\x64\x8a\xd0\x10\x20\xe8\x02\x15\xe5\x80\x59\x26\xad\x30\x80\x22\x07\x14\x60\x05\xaf\x33\xd5\xe6\xed\xde\x56\x2a\x40\xb0\x9a\x54\x14\x99\x3e\x6b\x1c\x01\x00\x6c\x2d\xe7\x0f\xf9\x9e\x89\x27\xfb\xc2\x59\xf6\x85\xaa\xb5\xa7\x99\x7c\xa1\xea\x91\x69\xf3\x93\x30\xaa\x5a\x41\x9a\xc2\x77\x62\xbb\xc2\xac\xe1\x87\x9b\x9b\x9b\xce\xf9\xab\x26\xf5\x77\x7d\x97\x00\x6f\x51\x1d\xa1\x54\x54\xa2\xa2\xd8\x53\x7f\xf2\xcc\xd7\x80\xd6\x14\xf1\x8f\x52\x29\x79\xfc\x86\xdc\xd2\x12\xae\x1e\x1a\x3e\xcb\xd6\xd7\x7d\x9c\x8c\x97\xc2\xef\xc2\x1d\xf8\xff\xe2\x12\x2b\x17\x69\x14\x7a\x19\xf8\x3a\x55\x2e\xf7\xec\x5c\x83\x94\xc9\x2b\x55\x3a\xc1\x3c\x8f\xcb\x5e\x87\x53\x5d\x93\x6e\x77\x05\x05\xea\xe2\x81\xef\xa4\x62\xa6\xd8\x4f\x1a\x07\x16\x2b\x38\x7a\xf9\x26\x2c\x9b\xad\x01\xb8\x01\xa7\x59\x68\xc1\xa9\x9d\x41\x16\xda\x7e\x00\x2c\x34\x3c\xc1\xe5\xf4\x3e\xa0\xe5\x66\x83\x25\xbe\x30\xce\x4c\x05\x77\x23\x29\xb3\x76\x8b\x91\x4e\xb4\x91\x0a\x77\xd4\x05\x70\x5f\xc2\xb4\xb6\x74\x5b\x97\x47\xd0\x6c\xc9\x77\x66\x8a\x5c\xe1\x71\x09\x57\x5d\x63\x26\xdf\x5c\xbe\xfb\x38\xf5\xa1\xd2\x6d\xbb\x53\x6f\x8c\xc0\xf1\xbe\x4b\x7f\x45\x81\x3b\x52\x70\x7b\x0d\xc3\xde\x4d\x9a\xfe\x7b\x3c\x31\x8c\x6b\x62\xeb\x31\xbf\xd9\x92\xf1\x78\x12\x8d\x07\x8a\x6f\xaf\x4f\x33\xaf\xc0\xc8\x75\x98\xfb\x34\xeb\x1f\x4d\x94\x27\x34\xc5\x88\x8a\x19\x58\xfd\xb7\x72\xaf\x42\x90\x5f\xeb\x1b\xa8\xf9\xb1\x84\xab\x33\x04\xee\xe3\x20\x9b\xfb\x2e\xa7\x1c\xb8\x4e\xf1\xff\x59\xf2\x7c\xf6\x0c\x9f\x7b\x8b\xb8\x91\xff\x21\xcf\x15\x69\xbd\x1e\x69\x84\xcd\xf2\x2a\xd0\x74\x3d\xa3\xf0\x4c\x1b\x06\xc7\x1d\xe0\xbe\xbd\x1e\x40\x5d\x05\x5b\x27\x05\x30\x80\x3c\x25\xc3\xbc\x04\x1b\x2c\xe1\x2e\x00\x34\x75\xf0\xfe\xac\xaf\xe6\x72\xde\xc7\x17\xa0\x59\x4e\xf2\x0f\xd2\xd5\xb7\x8d\x2e\xe2\x10\xe0\x0a\xd0\x4c\x16\xbc\x8f\xf1\x8b\xd8\xca\xe6\x72\x99\x2b\xf7\xfa\x5e\xfc\x3f\x16\x3b\x1f\xea\xb4\x71\xd5\x2d\x15\xdc\x8d\xc7\xd7\x34\xe5\x97\x7a\xc4\x36\x9c\x03\x34\x61\xb8\x69\x76\xa1\xcd\x7d\xbc\x55\x72\xff\xd1\x19\x7a\xc3\xc9\x72\x71\xdf\xa7\x4f\x50\xa2\x60\x59\xbc\xd8\xd4\x2f\x1f\x21\x0d\x34\x00\x3d\xc7\xee\x4d\x93\x35\x91\x16\x43\x25\x26\x32\xb9\xe6\x6d\x87\x7a\x90\x29\xa8\x8c\x33\x8d\x1f\x38\xb6\x2f\xac\xb1\xeb\xb0\xda\x27\x1d\xfb\x12\x5d\x4f\x96\xeb\x54\x1b\xa7\x29\xfc\x76\x20\xa5\x58\x4e\x60\x0a\x82\x9c\xb6\x6e\xbe\x40\x37\xdf\x40\x51\x46\xec\x40\x2a\x99\x99\x33\x41\xcd\x5b\xd1\xb6\x5e\xda\x4c\xfc\x7e\x1c\xfe\xee\xe3\x84\xc9\xfd\x6b\x53\xd0\xb1\x4b\xd4\xbc\x55\xf7\xa8\x5e\x75\xbb\x96\x37\x7c\x34\xa0\xee\xe4\x49\xe6\x06\xab\xee\xaf\xcc\x8b\x1a\xb4\xbd\x94\xde\xc2\x86\x6c\xf1\xbe\x8f\x2e\xa5\x33\x33\xf2\x02\x91\x5a\x89\x82\xc3\x9b\x26\x10\x1e\xb0\xbb\xbe\x66\x75\x9d\x39\xdd\xd2\x1a\x10\x52\xed\x91\xf7\x02\x33\xe1\x9e\xf7\xee\x59\xec\xb4\xb7\x82\xfd\x69\x09\x4a\x34\x45\x72\x7a\xe5\xb5\xe1\xff\x3d\x35\x67\x5f\x4a\xff\x54\xba\x31\xce\x79\xd1\x1a\x91\x3f\x7f\x20\x9d\xfb\xfb\x1e\xbd\x47\x7f\x05\x00\x00\xff\xff\x8a\x1b\x63\x30\x8f\x0d\x00\x00"

func lockedtokensAdminCustody_create_account_with_lease_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_account_with_lease_accountCdc,
		"lockedTokens/admin/custody_create_account_with_lease_account.cdc",
	)
}

func lockedtokensAdminCustody_create_account_with_lease_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_account_with_lease_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_account_with_lease_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0x66, 0xb6, 0x65, 0x56, 0xed, 0x12, 0x7a, 0x1e, 0xe2, 0x6f, 0xe9, 0x34, 0xb7, 0xe4, 0x37, 0xbc, 0xa9, 0xa4, 0x34, 0x90, 0xde, 0x1d, 0x9c, 0xd8, 0x94, 0xc7, 0xfa, 0xaa, 0x1f, 0x1c, 0x3c}}
	return a, nil
}

var _lockedtokensAdminCustody_create_only_lease_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x7c\x08\x64\x40\x91\xd2\xab\x91\x64\x91\x1a\x5d\xb4\xd8\x14\x0d\xda\x74\xf7\x3c\x11\x69\x8b\x08\x4d\xaa\x24\x65\x43\x58\xe4\xbf\x17\xa4\xa8\x07\x65\x6a\xe3\x16\xed\x69\x75\x08\x62\x72\x1e\xdf\x7c\x9c\x17\x3b\xd4\x52\x19\xd8\xaa\xb6\x36\x32\xf1\xbf\x56\x1f\xb9\x3c\x3d\xcb\x57\x2a\x56\xe3\x51\x23\xf6\xec\x85\xd3\xd9\xf1\xa3\x2c\x5f\x29\x71\x87\x7a\x95\x24\x45\x51\xc0\xb3\x42\xa1\xb1\x34\x4c\x0a\x30\x15\x1a\x40\x28\x1b\x6d\x24\x69\xa1\x56\xf2\xc8\x08\x55\x70\x92\x0d\x27\xa0\xd9\x5e\x38\x15\x23\xa1\x54\x14\x0d\x05\x04\x5d\xa1\xa2\x04\xb0\x2c\x65\x23\x0c\xec\xa4\x02\x84\x46\x5b\xa5\x4a\x02\x72\x45\x91\xb4\x4e\xab\x42\x0d\xa6\xa2\x4c\x41\x23\xb8\xc3\x31\x68\x75\xd6\x88\x15\xeb\x30\x55\xf4\x5c\xc8\xe9\x4b\x87\xc2\xda\x01\x33\x01\x8e\x5c\xcb\x24\x99\x9c\xa4\x09\x00\xc0\xae\xe1\xfc\x81\x1c\x98\x78\x6a\x5e\x38\x2b\x3f\xd1\x76\xe3\xb9\xcb\x3f\xd1\xf6\x91\x69\xf3\x93\x30\xaa\xcd\xa0\x28\xe0\x0b\x65\xfb\xca\x6c\xe0\x87\x9b\x9b\x9b\x64\x0d\xf0\x35\x71\x26\x6a\x45\x6b\x54\x34\xf5\x9c\x3c\x79\x4a\x36\x80\x8d\xa9\xd2\x1f\xa5\x52\xf2\xf4\x19\x79\x43\xd7\x70\xf5\xd0\x21\xcd\x5c\xfc\xfe\x87\x17\xfc\xc3\x48\x85\x7b\x9a\xc1\x16\x6b\x7c\x61\x9c\x19\x46\xf5\xa8\xb2\xee\xdd\xd9\x8f\x53\xe3\x69\xf5\xb7\x70\x07\xfe\xbf\xb4\xc6\xd6\x3a\x9f\xa1\x59\x8f\xca\x81\x62\xfe\x4a\x5b\x9d\x23\x21\x69\x3d\x12\x70\x4e\x4a\x3e\xdc\x66\x96\xe5\xea\x81\xef\xa5\x62\xa6\x3a\x44\x85\x03\x89\x0c\x4e\x9e\xb7\x88\x64\x77\xb5\x0e\x23\x3b\x62\xc3\xcd\xc0\x42\x0b\x77\x33\xc8\xe5\x84\xa0\x5c\x77\xb4\x0d\x06\xec\x97\x33\xad\x1b\x7a\xeb\x68\x0d\xd2\x3c\xff\xc2\x4c\x45\x14\x9e\xd6\x70\x35\x94\x44\xfe\xd9\xfa\xbb\x4f\x0b\x6f\xaa\xd8\xf5\x37\xee\x62\x06\x8e\x8f\xf5\xf1\x2b\x0a\xdc\x53\x05\xb7\xd7\x30\xad\x9a\xbc\xcb\xd5\xc7\x33\xc1\xd4\x05\xb6\x99\xc7\xb7\xf8\x34\x1e\x4f\xae\xf1\x48\xd3\xdb\xeb\x73\xcf\x19\x18\xb9\x09\x7d\x9f\x7b\xf5\x79\xf5\x84\xa6\x9a\x85\x62\x26\x52\xff\x2f\xdd\x59\x08\xf2\x4f\x57\xb8\xdd\x8f\x35\x5c\xbd\x13\xc0\x7d\x1a\x78\xb3\xdf\xe5\x21\x07\xaa\xb1\xf8\x7f\x96\x9c\x2c\xbe\xe1\xf3\x28\x11\x82\xe8\xde\xe2\x81\x10\x45\xb5\xde\xcc\x08\xc3\xee\x38\x0b\x34\xa6\x64\x6f\x16\xa8\x4f\x22\x40\x27\x8d\x22\x4c\x88\xc0\xfa\xed\xf5\x24\x98\xb9\xe3\x59\x8a\x4c\x82\x8a\x11\xb5\x4c\xd2\x16\x6b\xb8\x0b\x00\xc5\x52\xc3\x67\xc3\xd5\x92\xcf\xfb\xf4\x02\x34\xeb\x68\xfc\x81\x3b\xd7\x91\x74\x95\x86\x00\x33\x40\x13\x2d\x09\x6f\xe3\x17\xb1\x93\x5d\xfb\x59\x2a\x08\xd7\xa1\xbe\xc7\x72\xe0\x53\x9e\xb6\x36\xff\xa5\x82\xbb\xf9\x20\x89\x87\xfc\xe2\xa6\x5c\x17\x73\x80\x26\x34\x17\x8f\x2e\x94\xb9\x4f\x77\x4a\x1e\xbe\xf5\x86\x5e\x30\x9a\x2e\xf6\xfb\xf0\x01\x6a\x14\xac\x4c\x57\x5b\xb7\x95\x08\x69\xa0\x03\x08\xb1\xad\x42\xaa\xd5\x94\x89\x88\x27\x5b\xd1\xfd\x78\x0d\x3c\x05\x99\xf1\x4f\xba\x41\xbf\xba\xcc\x55\xa7\xd9\xbe\xdc\x46\x5c\x8a\x6e\xa2\xe9\x1a\x2b\xe3\xa2\x80\xdf\x8e\x54\x29\x46\xa8\x5b\x8b\x08\xdd\xd9\x09\x04\xc3\x04\x04\x45\x4b\xca\x8e\x54\xe5\x0b\x93\x28\xc8\xf9\x46\xf4\xa5\x57\x74\x5b\xc1\x38\x30\x7f\xf7\x76\x42\xe7\x7e\x13\x14\xf4\x34\x38\xea\xf6\xc8\x03\xaa\x57\xdd\x9f\x91\x2e\x1e\x0d\xa8\x07\x7a\xf2\xa5\xd1\xab\xc7\xde\x79\x51\x81\xf6\x4d\xe9\x6b\x58\x90\x3d\xde\xb7\x59\x53\x7a\x67\x8a\x5e\x40\x52\x4f\x51\x64\x6a\xcc\x03\x08\x1f\xd8\xb6\xaf\x45\x5e\x17\x5e\xb7\x6e\x0c\x08\xa9\x0e\xc8\x47\x82\x99\xb0\xab\xb7\xdd\x4c\x2d\xf7\x8d\x60\x7f\x35\x14\x6a\x34\x55\x7e\xde\xf2\x7a\xf3\xff\x1d\x9b\x8b\xbb\xd4\xbf\xa5\x6e\x8e\x73\x99\xb4\x8e\xe4\x8f\xdf\xa0\xce\xfe\x7d\x4b\xde\x92\xbf\x03\x00\x00\xff\xff\x8a\xbc\x58\xf6\x2b\x0d\x00\x00"

func lockedtokensAdminCustody_create_only_lease_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_only_lease_accountCdc,
		"lockedTokens/admin/custody_create_only_lease_account.cdc",
	)
}

func lockedtokensAdminCustody_create_only_lease_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_only_lease_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_only_lease_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0x0, 0x2f, 0x1b, 0xfb, 0xf5, 0xd6, 0x32, 0x77, 0xd3, 0x6b, 0x1d, 0x62, 0xbe, 0x8f, 0x15, 0xe7, 0xbd, 0x48, 0xb8, 0xcb, 0x92, 0xcb, 0xfe, 0x1f, 0x2e, 0x37, 0x61, 0xb, 0x55, 0xa9, 0x4e}}
	return a, nil
}

var _lockedtokensAdminCustody_create_only_shared_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x7c\x08\x64\x40\x91\xd2\x63\x8d\x24\x8b\xd4\xe8\xa2\xc5\xa6\x68\xd0\x66\x77\xcf\x13\x91\xb6\x88\xd0\xa4\x4a\x52\x36\x84\x20\xff\xbd\xe0\x43\x96\x28\x4b\x89\x53\xb4\xa7\xea\x10\x44\xd4\x3c\xbe\xf9\xe6\xc1\x31\xdb\xd5\x52\x19\x58\xab\xb6\x36\x32\x09\x6f\x8b\xcf\x5c\x1e\x1e\xe5\x33\x15\x8b\xfe\xa8\x11\x5b\xf6\xc4\xe9\xe8\xf8\x5e\x96\xcf\x94\xb8\x43\xbd\x48\x92\xa2\x28\xe0\x51\xa1\xd0\x58\x1a\x26\x05\x98\x0a\x0d\x20\x94\x8d\x36\x92\xb4\x50\x2b\xb9\x67\x84\x2a\x38\xc8\x86\x13\xd0\x6c\x2b\x9c\x8a\x91\x50\x2a\x8a\x86\x02\x82\xae\x50\x51\x02\x58\x96\xb2\x11\x06\x36\x52\x01\x42\xa3\xad\x52\x25\x01\xb9\xa2\x48\x5a\xa7\x55\xa1\x06\x53\x51\xa6\xa0\x11\xdc\xe1\x38\x6a\x79\x6b\xc4\x8a\x79\x4c\x15\x3d\x15\x72\xfa\xd2\xa1\xb0\x76\xc0\x0c\x80\x23\xd7\x32\x49\x06\x27\x69\x02\x00\x50\xa3\x32\x0c\xf9\x1d\xd9\x31\xf1\xd0\x3c\x71\x56\x7e\xa1\xed\x2a\xd0\x97\x7f\xa1\xed\x3d\xd3\xe6\x67\x61\x54\x9b\x41\x51\xc0\x77\xca\xb6\x95\x59\xc1\x0f\x57\x57\x43\xf5\xaf\x9a\xaa\x0f\x68\xff\x78\x75\x95\x2c\x01\x5e\x12\x6f\x43\xd1\x1a\x15\x4d\x03\xa7\x0f\x81\xd2\x15\x60\x63\xaa\xf4\x27\xa9\x94\x3c\x7c\x43\xde\xd0\x25\x5c\xdc\xf9\x48\x33\xc7\x5f\x78\x09\x82\x7f\x1a\xa9\x70\x4b\x33\x58\x63\x8d\x4f\x8c\x33\xc3\xa8\xee\x55\x96\x9d\x3b\xfb\x70\x6a\x42\x5a\xc2\x57\xb8\x81\xf0\x5f\x5a\x63\x6b\x9d\x8f\xd0\x2c\x7b\xe5\x48\x31\x7f\xa6\xad\xce\x91\x90\xb4\xee\xe3\x9f\x24\x35\x3f\x0a\x64\x36\x51\xd5\x1d\xdf\x4a\xc5\x4c\xb5\x9b\x93\x8f\x84\x32\x38\x04\xf2\xa6\x85\xfd\xd7\xe5\xc7\x41\x46\xa9\x7b\x1f\x63\x2c\xfe\x36\xc4\x58\xb6\x43\x18\x25\x61\x8f\x0d\x37\xc7\x84\xb5\x70\x33\x02\x5e\x0e\x72\x99\x6b\x9f\xe1\xa3\x01\xfb\xe4\x4c\xeb\x86\x5e\xbb\x0a\x88\x3a\x3a\xff\xce\x4c\x45\x14\x1e\x96\x70\x71\xec\xfe\xfc\x9b\xf5\x77\x9b\x16\xc1\x54\xb1\xe9\xbe\xb8\x0f\x23\x70\xbc\x1f\x05\xbf\xa1\xc0\x2d\x55\x70\x7d\x09\xc3\x01\x91\xfb\xb6\xbc\x3f\x11\x4c\x5d\x60\xab\x71\x7c\xb3\x55\x14\xf0\xe4\x1a\xf7\x34\xbd\xbe\x3c\xf5\x9c\x81\x91\xab\xd8\xf7\xa9\xd7\xd0\x02\x0f\x68\xaa\x51\x28\x66\x20\xf5\xdf\xd2\x9d\xc5\x20\xbf\xba\x19\xe5\x5f\x96\x70\xf1\x4e\x00\xb7\x69\xe4\xcd\x3e\xe7\x87\x1c\xa9\x4e\xc5\xff\x8b\xe4\x64\x36\x87\x8f\xbd\x44\x0c\xc2\xe7\xe2\x8e\x10\x45\xb5\x5e\x8d\x08\x43\x7f\x9c\x45\x1a\x43\xb2\x57\x33\xd4\x27\x13\x40\x07\x33\x2d\x2e\x88\xc8\xfa\xf5\xe5\x20\x98\xb1\xe3\x51\x89\x0c\x82\x9a\x22\x6a\x9e\xa4\x35\xd6\x70\x13\x01\x9a\x2a\x8d\x50\x0d\x17\x73\x3e\x6f\xd3\x33\xd0\x2c\x27\xe3\x8f\xdc\xb9\xa9\xa4\xab\x34\x06\x98\x01\x9a\xc9\x96\x08\x36\x7e\x15\x1b\xe9\xc7\xcf\x5c\x43\xb8\x19\xfa\x7f\x6c\x07\x3e\xe4\x69\x6d\xeb\x5f\x2a\xb8\x19\xdf\x79\xd3\x21\x3f\xb9\x0b\xd9\xc7\x1c\xa1\x89\xcd\x4d\x47\x17\xcb\xdc\xa6\x1b\x25\x77\x6f\xe5\x30\x08\x4e\x96\x8b\x7d\x3e\x7d\x82\x1a\x05\x2b\xd3\xc5\xda\x2d\x60\x42\x1a\xf0\x00\x61\x6a\x81\x92\x6a\x31\x64\x62\xc2\x93\xed\xe8\x6e\x13\x88\x3c\x45\x95\xf1\x91\x69\xd0\x6d\x69\x63\xd5\x61\xb5\xcf\x8f\x11\x57\xa2\xab\xc9\x72\x9d\x6a\xe3\xa2\x80\xdf\xf7\x54\x29\x46\xa8\xdb\x00\x09\xdd\xd8\x1b\x08\x8e\x37\x20\x28\x5a\x52\xb6\xa7\x2a\x9f\xb9\x89\xa2\x9a\x6f\x44\xd7\x7a\x85\xdf\x0c\xfa\x0b\xf3\x8f\x60\x27\x76\x1e\x96\x5e\x41\x0f\x47\x47\x7e\x65\xde\xa1\x7a\xd6\xdd\x19\xf1\xf1\x68\x40\x7d\xa4\x27\x9f\xbb\x7a\x75\x3f\x3b\xcf\x6a\xd0\x6e\x28\xbd\xc4\x0d\xd9\xe1\x7d\x1d\x0d\xa5\x77\x6e\xd1\x33\x48\xea\x28\x9a\xb8\x35\xc6\x01\xc4\x09\xb6\xe3\x6b\x96\xd7\x99\xec\xd6\x8d\x01\x21\xd5\x0e\x79\x4f\x30\x13\xf6\x57\x86\x5d\xa2\x2d\xf7\x8d\x60\x7f\x35\x14\x6a\x34\x55\x7e\x3a\xf2\x3a\xf3\xff\x1e\x9b\xb3\xbb\xd4\x3f\xa5\x6e\x8c\x73\x9e\x34\x4f\xf2\xe7\x37\xa8\xb3\x7f\x5f\x93\xd7\xe4\xef\x00\x00\x00\xff\xff\x9e\x8b\x36\xa9\x16\x0e\x00\x00"

func lockedtokensAdminCustody_create_only_shared_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_only_shared_accountCdc,
		"lockedTokens/admin/custody_create_only_shared_account.cdc",
	)
}

func lockedtokensAdminCustody_create_only_shared_accountCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_only_shared_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_only_shared_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xf8, 0x34, 0xa3, 0x2d, 0x40, 0x81, 0x87, 0xe, 0x4, 0x36, 0x33, 0xc8, 0xb, 0x9e, 0x23, 0x1e, 0xf1, 0x24, 0x6e, 0x61, 0x36, 0x80, 0x99, 0x68, 0x99, 0xf3, 0xff, 0x3b, 0x44, 0xb2, 0x53}}
	return a, nil
}

var _lockedtokensAdminCustody_create_shared_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\x3e\x04\x32\xe0\x48\xde\x63\x8d\x24\x8b\xd4\xe8\xa2\xc5\xa6\x68\xd0\x66\x77\xcf\x13\x69\x6c\x11\x91\x49\x95\x3f\x36\x8c\x45\xde\xbd\xa0\x44\xc9\xa2\x44\x25\x76\xd1\x9e\x96\x87\x20\x22\xe7\xe7\x9b\x8f\x33\xc3\x31\xdb\x55\x42\x6a\x58\xcb\x63\xa5\x45\xe4\xbe\x66\x9f\x4a\x71\x78\x12\x2f\xc4\x67\xa7\x2d\xc3\xb7\xec\xb9\xa4\xc1\xf6\x83\xc8\x5e\x28\xaf\x37\xd5\x2c\x8a\xd2\x34\x85\x27\x89\x5c\x61\xa6\x99\xe0\xa0\x0b\xd4\x80\x90\x19\xa5\x45\x7e\x84\x4a\x8a\x3d\xcb\x49\xc2\x41\x98\x32\x07\xc5\xb6\xbc\x56\xd1\x02\x32\x49\xa8\x09\x10\x54\x81\x92\x72\xc0\x2c\x13\x86\x6b\x40\x9e\x03\x72\x30\xbc\xac\x3d\xd5\xe2\xed\xd9\x46\x48\x40\x30\x8a\x64\x14\xe9\x93\xd7\x38\x02\x00\xa8\x50\x6a\x86\xe5\x7d\xbe\x63\xfc\xd1\x3c\x97\x2c\xfb\x4c\xc7\x95\x8b\x34\xf9\x4c\xc7\x07\xa6\xf4\x2f\x5c\xcb\xe3\x02\xd2\x14\xbe\x11\xdb\x16\x7a\x05\x1f\x96\xcb\xbe\xfa\x17\x45\xf2\x02\xed\x9f\x9c\xf6\xc6\x94\x97\xaa\x7e\x58\x2e\x97\xd1\x1c\xbe\x47\x8d\x7b\x49\x15\x4a\x8a\x1d\x73\x8f\x8e\xb8\x15\xa0\xd1\x45\xfc\xb3\x90\x52\x1c\xbe\x62\x69\x68\x0e\x57\xf7\x0d\x1d\x9d\xae\x5d\x25\x69\xc7\xa4\x3b\x85\x5b\x70\xff\xc5\x15\x1e\xad\xa5\x81\xe9\xb9\xa7\x6b\x49\x3d\x5f\xb3\x53\xf5\x5c\x26\x2f\x74\x54\x09\xe6\x79\x5c\x9d\x68\x08\x5e\x4b\xd2\x09\x2c\xa0\x40\x55\xdc\x97\x5b\x21\x99\x2e\x76\x53\xf2\x9e\xd0\x02\x0e\x8e\xc3\xb0\x70\x73\x3a\xbf\x1c\xa4\x77\x83\xef\x63\xf4\xc5\xdf\x86\xe8\xcb\xb6\x08\x3b\x88\x3d\xfa\x83\x00\x47\xf9\xf5\x06\xba\xb1\xec\x04\xb4\xb1\xe0\x08\x97\x4d\x8d\x3d\x9a\x52\xaf\xb1\xc2\x67\x56\x32\x7d\x84\xdb\x01\xa1\x59\x7b\xc4\x48\x25\x4a\x0b\x89\x5b\xea\x0c\xd8\x95\x30\xa5\x0c\xdd\xd4\x99\xec\xb5\x95\xe4\x1b\xd3\x45\x2e\xf1\x30\x87\xab\xae\x05\x25\x5f\xad\xbf\xbb\x38\x75\xa6\xd2\x4d\x7b\x52\x1f\x0c\xc0\x95\xa7\x7e\xf4\x3b\x72\xdc\x92\x84\x9b\x6b\xe8\x77\xa9\xa4\xe9\x34\x0f\x23\xc1\xb8\x0e\x6c\x35\x8c\x6f\x32\xbb\x1d\x9e\x44\xe1\x9e\xe2\x9b\xeb\xb1\xe7\x05\x68\xb1\xf2\x7d\x8f\xbd\xfe\xd5\x58\x79\x44\x5d\x0c\x42\xd1\x3d\xa9\xff\x97\xee\x85\x0f\xf2\x4b\xdd\x6b\x9b\x8f\x39\x5c\xbd\x13\xc0\x5d\xec\x79\xb3\xeb\xfc\x90\x3d\xd5\x50\xfc\xbf\x8a\x32\x9f\xbc\xc3\xa7\x93\x84\x0f\xa2\xb9\x8b\xfb\x3c\x97\xa4\xd4\x6a\x40\x18\x36\xdb\x0b\x4f\xa3\x4f\xf6\x6a\x82\xfa\x28\x00\xb4\x5f\xa8\x5e\x42\x78\xd6\x6f\xae\x7b\xc1\x0c\x1d\x0f\x52\xa4\x17\x54\x88\xa8\x69\x92\xd6\x58\xc1\xad\x07\x28\x94\x1a\x2e\x1b\xae\xa6\x7c\xde\xc5\x67\xa0\x99\x07\xe3\xf7\xdc\xd5\xfd\x48\x15\xb1\x0f\x70\x01\xa8\x83\x25\xe1\x6c\xfc\xc6\x37\xa2\x69\x3f\x53\x05\x51\xf7\xf6\x1f\xb1\x1c\xca\x3e\x4f\x6b\x9b\xff\x42\xc2\xed\xf0\x2d\x0e\x87\xfc\x5c\xcf\x0b\x4d\xcc\x1e\x1a\xdf\x5c\x38\x3a\x5f\xe6\x2e\xde\x48\xb1\x7b\xeb\x0e\x9d\x60\x30\x5d\xec\xfa\xf8\x11\x2a\xe4\x2c\x8b\x67\xeb\x7a\x0a\xe4\x42\x43\x03\xb0\x1b\xec\x32\x17\x9e\xa4\x0d\x49\xe2\x19\xcd\xfa\x64\x04\x9c\xd9\xa2\x6e\x87\x14\xcf\x99\x97\x1c\x97\x34\x84\x76\xe0\x1c\xaa\xf6\x13\x7e\xba\x93\xd4\x59\xba\x0a\x66\x6c\xa8\x92\xd3\x14\xfe\xd8\x93\x94\x2c\x27\xd0\x05\x41\x4e\x1b\xfb\x08\x41\xf7\x08\x82\xa4\x8c\xd8\x9e\x64\x32\xf1\x18\x79\x69\x6f\x78\x5b\x7d\x69\x33\x16\x9c\xde\xcc\x3f\x9d\x1d\xdf\xb9\x1b\xbe\x39\x1d\x3a\x47\xcd\xe8\xbe\x43\xf9\xa2\xda\xbd\xbc\x89\x47\x01\xaa\x8e\x9e\x64\xea\xf5\x55\xa7\xf6\x79\x56\x8d\xb6\x7d\xe9\xbb\x5f\x93\x2d\xde\xd7\x41\x5f\x7a\xe7\x21\x3d\x83\xa4\x96\xa2\xc0\xc3\x31\x0c\xc0\xbf\x60\xdb\xc1\x26\x79\x9d\xb8\xdd\xca\x68\xe0\x42\xee\xb0\x3c\x11\xcc\xb8\xfd\xb5\x63\xc7\x7c\xcb\xbd\xe1\xec\x6f\x43\x50\xa1\x2e\x92\x71\xd7\x6b\xcd\xff\x77\x6c\x4e\x8e\x53\xff\x96\xba\x21\xce\x69\xd2\x1a\x92\x3f\xbd\x41\x9d\xfd\xfb\x1a\xbd\x46\xff\x04\x00\x00\xff\xff\xd1\x4f\x6e\x6a\x9e\x0e\x00\x00"

func lockedtokensAdminCustody_create_shared_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_create_shared_accountsCdc,
		"lockedTokens/admin/custody_create_shared_accounts.cdc",
	)
}

func lockedtokensAdminCustody_create_shared_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_create_shared_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_create_shared_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0xc9, 0xf9, 0x1c, 0x2, 0x35, 0xee, 0x87, 0xed, 0xab, 0xfa, 0x37, 0x4f, 0xe4, 0x2d, 0x9c, 0xc, 0x17, 0x68, 0x19, 0xfb, 0xbb, 0xcb, 0x5c, 0x53, 0x65, 0xd9, 0xa1, 0xf2, 0xbb, 0x54, 0x7d}}
	return a, nil
}

var _lockedtokensAdminCustody_setup_account_creatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x4d\x6b\xf3\x30\x10\x84\xef\xfa\x15\x4b\x0e\xc1\x81\x7c\xdc\x43\xde\x17\x82\xaf\x3d\x18\x52\x7a\xdf\xc8\x4b\x2d\xac\x48\x62\xb5\x72\x29\x25\xff\xbd\x38\x26\xae\x95\xa6\x1f\x50\x1d\x7c\x18\x4b\xf3\xcc\xec\x9a\x53\xf0\x2c\x30\x7b\xf0\xba\xa5\xfa\xd1\xb7\xe4\xe2\x4c\x29\x61\x74\x11\xb5\x18\xef\xe0\x4d\x29\x00\x80\xc0\x14\x90\xa9\xd0\x29\x8a\xaf\x5f\x2b\xf6\x9d\xa9\x89\xb7\x80\x49\x9a\xe2\x80\x1d\x3d\xa1\x4d\xb4\x84\x12\x03\x1e\x8d\x35\x62\x28\x2e\x60\xbe\xd7\xda\x27\x27\x8b\xab\x4f\x7f\x2c\x09\xe0\xa0\x97\x4c\x28\x9e\x61\xb7\x82\x69\x86\xb5\xee\x75\x1a\xa4\x7d\x76\xb5\x58\x7c\x18\xdd\x84\x59\x47\xf1\x8c\xcf\xb4\x8e\xd8\x51\x31\xde\xea\xcf\x6e\x95\x03\x97\xd9\x5f\xf1\xdb\x1c\x7f\x0f\x7c\x18\xcc\x2b\x94\x66\x7c\x3c\xc9\xb2\xd9\xc0\x10\x1a\x1c\xbd\x00\x93\x26\xd3\x11\x83\x34\x28\x70\x42\x6e\xe3\x55\xab\x41\x2e\x10\xc0\x08\xc9\xd9\x0b\x29\x1b\x8d\xbd\x03\x2f\x31\xc0\xbf\x4f\x7d\xf5\x64\xd6\x63\x79\x13\x63\xa2\xdd\xfc\xc7\x3e\xff\xf3\x09\xfd\xb5\xff\xb7\xd9\x42\x3a\x5a\x13\x9b\x9c\xf8\x45\xcf\x7c\x35\x28\xbf\x58\x4d\xd5\xdb\xeb\x9b\x64\xfd\xf7\xac\xce\xea\x3d\x00\x00\xff\xff\x00\x26\xb0\x35\xe4\x02\x00\x00"

func lockedtokensAdminCustody_setup_account_creatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminCustody_setup_account_creatorCdc,
		"lockedTokens/admin/custody_setup_account_creator.cdc",
	)
}

func lockedtokensAdminCustody_setup_account_creatorCdc() (*asset, error) {
	bytes, err := lockedtokensAdminCustody_setup_account_creatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/custody_setup_account_creator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xe3, 0x1b, 0x12, 0x38, 0x7c, 0x7d, 0xcc, 0xe2, 0xc2, 0xd9, 0x83, 0x6f, 0x5d, 0xd1, 0x3d, 0x3b, 0x97, 0xba, 0xb4, 0xd3, 0xd1, 0xe8, 0xf3, 0xa5, 0x2, 0x19, 0x9f, 0xa0, 0xc2, 0xd8, 0xdf}}
	return a, nil
}

var _lockedtokensAdminDeposit_locked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xdc\x3e\x10\x3d\x93\x4f\x31\xe4\x00\x89\x04\xd9\xcb\x4f\xbf\x43\xc4\x9f\x52\x2a\x7a\xe9\xa1\xa2\x94\x9e\x1d\x67\xb2\x71\xf1\xda\x91\x3d\x61\x91\x10\xdf\xbd\xb2\x9d\xb8\xf1\xee\x0a\x9a\x4b\x94\xb1\xe7\xcd\x7b\x33\x6f\x22\x36\x83\x36\x04\xf9\xdd\xa8\xd6\xa2\x91\xf8\xa0\x9f\x50\xe5\x59\x0c\x4b\xbd\x9d\x42\x31\xf6\x4d\xf3\x27\x6c\x7d\xd4\xe6\x59\x46\x86\x29\xcb\x38\x09\xad\x0a\xd2\x35\xdc\xb4\xad\x41\x6b\xcf\x80\x6d\xf4\xa8\xa8\x86\x9f\x77\xe2\xe5\xff\xff\x4a\x78\xcd\x32\x00\x80\xd5\x0a\x1e\x7a\x84\x47\x36\x4a\x02\x83\x56\x8f\x86\x23\x50\xcf\x08\x7a\x2d\x5b\x0b\xd4\x23\x90\x47\x0f\x51\x66\x10\x1a\x14\x6a\x0d\xbe\x54\x87\xc6\x60\xeb\xa1\x24\x12\x58\x54\xe4\xb1\x6a\xf8\xf4\x9a\xa8\xa8\x7c\xf8\x2d\x54\x1d\x0c\x0e\xcc\x60\xc1\xda\x8d\x50\x35\xb0\x91\xfa\xe2\xb3\x36\x46\x6f\x1f\x99\x1c\xb1\x84\x93\x1b\xce\x1d\xdf\xc8\x73\xe2\xfa\x15\x09\x18\x18\xec\xd0\xa0\x72\x44\xb5\x27\xe8\x71\x4e\x2d\x58\xd2\x06\x5b\x78\x76\xa5\x62\x9a\xe3\xe5\x23\xf7\xd8\xc1\x65\xb8\x5b\xb9\x9b\x6c\x8d\x55\xe3\xab\x5e\x78\x06\x29\xdf\x5f\x82\xfa\xd6\xb0\x6d\x09\x27\xb1\xef\x41\xc4\x55\xd1\x19\xbd\xa9\x61\x35\x81\xac\xba\xf9\xdc\x1f\x97\xd9\xd1\xd1\xd1\xf5\x35\x0c\x4c\x09\x5e\xe4\xb7\x7a\x94\x2d\x28\x4d\x10\x6a\xed\xb3\xd7\x5b\x85\xe6\xd4\x86\x21\x1c\xe7\x65\x96\x50\xf7\x7c\x0f\x50\x8f\x97\xdc\x33\xeb\x38\x59\xda\xa1\xf2\xaf\x1b\x97\x74\xab\xa5\x44\xef\x8a\xab\x22\x49\x74\x4f\x50\x93\x64\x2e\x3e\x76\xf2\x7f\x84\xea\xdf\x19\xf5\x09\x50\x99\x7c\xbd\x23\xff\xc0\xf8\xa4\xaf\x16\x6c\x16\x44\x02\x8f\x05\x97\xfd\x60\xd6\xa2\xa1\x54\xc1\xdc\x9f\x6a\x8d\x34\xb9\xa6\x60\xc1\xf5\x35\x90\x2e\xe1\xf8\x12\x94\x90\x67\x49\xd2\x06\xad\x65\x6b\xac\x21\x77\xee\xb7\x03\x72\xd1\x09\x6c\x81\x05\x00\x10\xd6\x53\x66\x33\xb5\x29\x7e\x0c\xb7\x4c\xb9\x03\x8b\xaa\x4d\x68\xdb\x3c\xfb\xdb\x89\xa5\x63\x67\x1b\xcd\x4b\xe4\x9a\xfd\xb1\x67\x2d\xca\xae\x8a\xcb\x04\x17\xe7\xd1\xc1\xd5\x76\x02\x2c\xe6\x8d\x0e\xef\xd0\xff\x69\xbf\xf0\x05\xf9\x48\x78\x60\x79\x5c\x65\x83\x5c\x0c\x02\x15\x9d\x5a\x18\xc6\x46\x0a\x1e\x75\xeb\xe6\x37\xf2\x74\x75\xe2\x6d\xb8\x84\x45\x8b\x49\x97\xff\xb2\x99\xcb\x5a\xf7\xc8\x51\x3c\xa3\xd9\x85\xf7\xc1\xe0\xf0\x78\x3d\x75\x37\x67\x03\x6b\x84\x14\x24\xd0\x46\xab\xef\xfc\x5f\x66\xf4\xb7\x03\x0e\x5f\x05\x99\xab\x30\xb1\xb8\xce\x7b\x84\xc2\xf8\x3e\x5a\xdf\x90\xf4\xbe\xd6\xc9\x1b\x7e\x7c\x79\xda\xa9\x2f\x38\x68\x2b\xc2\x28\xe6\x61\xaa\xd9\x1e\x42\xed\x41\x99\x5d\x96\x8b\x96\x55\x6d\x00\x9b\xfe\x48\x17\xe7\xa9\x71\x66\x53\xbc\x65\x7f\x02\x00\x00\xff\xff\x4f\x71\x5d\x45\x5a\x06\x00\x00"

func lockedtokensAdminDeposit_locked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminDeposit_locked_tokensCdc,
		"lockedTokens/admin/deposit_locked_tokens.cdc",
	)
}

func lockedtokensAdminDeposit_locked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensAdminDeposit_locked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/deposit_locked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xab, 0xae, 0x39, 0x36, 0xa7, 0x9a, 0x59, 0xd4, 0x38, 0x6f, 0xf0, 0x6, 0xea, 0x2b, 0x78, 0x5a, 0xb6, 0x1f, 0x65, 0xab, 0x77, 0x2b, 0x8c, 0x4b, 0x51, 0x7f, 0x90, 0xd5, 0xc, 0xeb, 0x92}}
	return a, nil
}

var _lockedtokensAdminRecover_lease_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\x51\x6f\xdb\x46\x0c\xc7\xdf\xfd\x29\x18\x3d\xb4\x12\x90\xca\x19\x30\xec\xc1\xc8\xda\xb5\x2b\xb2\x97\x76\x18\xd2\xb4\x7b\xa6\x4f\x94\x74\xb3\x7c\x14\x78\x54\xdc\x20\xc8\x77\x1f\x74\xd2\x29\x96\xed\x64\x79\xd8\xc3\x30\x3f\xd8\xf0\x9d\x8e\xfc\x93\xfc\xf1\x28\xbb\x6d\x59\x14\x92\xab\xce\x55\x76\xdd\xd0\x0d\x6f\xc8\x25\x8b\x69\xb9\xe1\xdd\xc1\xd2\x27\x36\x1b\x2a\xc2\xa2\x4f\x16\x0b\x15\x74\x1e\x8d\x5a\x76\x69\x41\x0d\x55\xa8\x2c\x2b\xf8\xc0\xdc\x9c\x03\x6e\xb9\x73\xba\x82\xaf\x57\xf6\xfb\x4f\x3f\x9e\x83\xf2\x0a\xde\x17\x85\x90\xf7\x19\xdc\x2f\x16\x00\x00\xcb\x25\xdc\xd4\x04\xdf\xb0\x6b\x14\x84\x3c\x77\x62\x08\xb4\x46\x85\x9a\x9b\xc2\x83\xd6\x04\x1a\xdc\x0d\xab\x28\x04\x6b\xb2\xae\x82\xe0\xbb\x24\x11\x2a\x82\xa9\x86\x14\x3c\x39\x0d\xb6\x56\xf0\xcb\xfd\x2c\xaa\x3c\x2c\x3f\x0c\x5e\x5b\xa1\x16\x85\x52\x6f\x2b\x47\xb2\x02\xec\xb4\x4e\x3f\xb0\x08\xef\xbe\x61\xd3\x51\x06\xaf\xde\x1b\xd3\xab\x9f\x84\x8e\x62\x7f\x23\x05\x04\xa1\x92\x84\x5c\xaf\x94\x83\xc2\xc1\xd0\x6b\x0f\x4d\xc8\xcf\xa0\x18\xb6\xe8\xb0\x22\x99\xce\xf7\x0a\xc3\xce\xe7\x61\xe3\x9a\x4a\xf8\x79\x3c\x9b\x7b\x65\xc1\x8a\xf2\x75\x90\x71\x19\x24\xcd\x23\xf8\xd3\x6a\x5d\x08\xee\xce\x61\xbf\x0a\xf9\x35\x19\xbe\x25\xf9\x44\xe8\x7b\xe1\xb3\xbd\xbd\x3f\xa3\xcf\xb7\x69\x29\xbc\x5d\xc1\x3f\x3c\xf6\x65\x50\xf3\x07\x6a\x9d\x4d\xfa\xfb\xcf\xbb\x77\xd0\xa2\xb3\x26\x4d\x6e\xa6\xb8\xa1\x60\xf2\xe0\x58\xa1\x0f\x82\x00\xe1\xd8\x20\xf0\xfa\x2f\x32\x0a\xa8\x21\x61\x2d\x6a\x0d\xc9\xcc\x72\xfc\xe4\x86\x9d\x41\x4d\x5f\xae\x30\x57\xfe\xa2\x62\x5d\x95\x66\x59\xf6\x58\x2e\x5b\xc2\xd9\x04\x25\xdc\xcf\x9c\xf5\xa5\x70\x5c\xd0\x50\x82\x83\xa2\x8c\x35\xf8\x9d\x0b\xba\xe2\x21\xb1\x69\x76\xa4\xf5\x31\x13\xbf\x72\xd7\x14\x21\xfe\xe1\xe0\x21\x21\x18\x5c\x81\x75\x21\xf4\x53\xb9\x29\xe7\x14\xe1\x00\x5f\xb2\x17\xcc\xc8\x5f\x64\x00\xc8\x71\x57\xd5\x53\x6b\x30\xb4\x78\x07\x25\x0b\x94\x44\xfe\x1c\xd0\xfb\x6e\x1b\xba\xa4\xa6\xbe\x22\x42\xe0\x79\x4b\x20\xb4\x43\x29\x7c\xd4\x12\xff\xae\x3b\xb3\x21\x9d\x39\x3b\xcc\x49\x41\x2d\x7b\xab\x23\x3e\x97\x6f\xc6\xec\xe5\xbb\x51\xd1\x75\x30\x15\x0b\x96\xc6\xe6\xbf\xc8\x2f\x2e\x2e\x7e\xc8\xce\x9e\x09\x65\x8c\xa1\x37\x3c\x4f\x43\xa0\xa9\x80\xdb\xbe\x73\x67\xa7\x3d\x35\x65\x3e\xf5\x3a\x5c\xbe\x81\x43\x35\x5f\x9d\x57\xdc\x1c\xa9\x19\x7e\xb3\xb3\xc9\xda\x03\x50\xe3\xe9\x04\x1c\x13\x38\xcf\x11\xf2\x31\x3e\xf4\x2f\x61\xf2\x48\xeb\xff\x8b\x95\xfd\x64\xfe\x47\x80\x39\x29\xe9\xc5\xd4\x2c\x86\xef\xf0\x43\xdf\xc9\x74\x4a\x2f\x1b\x14\x42\xc6\xb6\x96\x9c\xbe\xf6\x70\x4d\x86\xec\xed\xc1\x7c\x90\x71\x71\xc0\x0e\x2a\xd2\x71\x12\xa5\xca\x73\xb8\x72\x83\x2d\xae\x6d\x63\xd5\x92\x8f\x63\xe3\xd5\xc1\xd4\x8b\x3e\x1e\xde\xa6\xcb\xb6\x5b\x37\xd6\x2c\xcb\x38\xd5\xe3\xde\x53\x17\xfc\x09\x5e\xe3\x91\xe3\xc0\xa6\x77\x85\x71\x96\x5b\x17\xc9\x3c\x71\xcd\xc7\x2b\x5e\x79\xff\xea\x8e\xab\x49\x3f\x24\xc2\x80\x78\x52\x72\x72\xdc\x67\xd3\xe9\x1c\x3e\xe3\x86\xc0\x77\x42\x70\xc7\xdd\xc0\x33\xb9\x22\x10\xce\x80\x0e\x70\x78\x09\x19\x5f\x33\xd0\xc3\x73\xe6\xf0\x28\x34\x4f\x0a\x5d\x0b\xad\x70\x4b\xd2\xdc\xc5\x91\xe6\x5b\x32\xb6\xb4\x54\x04\xed\x79\xb2\x3f\x8a\x96\x4b\xf8\x38\xf4\x44\x78\x34\xf2\xe6\x22\xca\x53\x8b\x3d\xd2\x21\x87\x74\xec\x91\x71\xd4\x60\x73\xbe\xb3\x11\xcf\x87\xbf\x03\x00\x00\xff\xff\x96\xb1\x06\xa4\xe0\x09\x00\x00"

func lockedtokensAdminRecover_lease_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminRecover_lease_tokensCdc,
		"lockedTokens/admin/recover_lease_tokens.cdc",
	)
}

func lockedtokensAdminRecover_lease_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensAdminRecover_lease_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/recover_lease_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x58, 0xf0, 0x53, 0xba, 0x2a, 0xec, 0x73, 0xba, 0xaf, 0x49, 0x45, 0xd0, 0x7f, 0x48, 0x5e, 0xab, 0x10, 0x3, 0x85, 0x8a, 0x7c, 0x3b, 0x9, 0xe9, 0x4b, 0xcb, 0x28, 0xd3, 0x72, 0xd1, 0xdd}}
	return a, nil
}

var _lockedtokensAdminUnlock_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x63\x0e\x75\x03\x92\x93\x78\x08\x6a\xa9\x05\x4f\x15\xa4\x5a\xef\xe3\x66\xd2\x2e\xdd\xec\x84\xd9\x09\x0a\xd2\xff\x2e\xc9\x96\x9a\xf6\xea\x5c\x66\x17\x66\xde\x7e\xef\xad\x6b\x3b\x16\x85\x7c\xc5\x76\x4f\xf5\x3b\xef\x29\xc4\x3c\xcb\x54\x30\x44\xb4\xea\x38\x18\x45\xd9\x92\x2e\xac\xe5\x3e\x68\x05\x8b\xba\x16\x8a\xf1\x06\x6a\xf2\x8a\x15\x6c\x9e\xdd\xf7\xdd\x6d\x01\x3f\x59\x06\x00\xd0\x09\x75\x28\x64\xb0\x6e\x5d\xa8\x00\x7b\xdd\x99\x27\x16\xe1\xaf\x0f\xf4\x3d\x15\x30\x3b\x2a\x9d\x36\x86\xf2\xa4\x30\x6e\xac\xa9\x81\x87\x74\x2c\xa3\xb2\xe0\x96\xca\xcf\x71\xfd\x7e\x36\x65\x2c\xc7\xb6\x18\xe6\x96\xec\x3d\x8d\xa8\x8f\xa6\x11\x6e\x2b\x38\x1b\x9c\x5c\x2e\xc6\xdf\x92\xfe\x2b\xea\xae\x38\x91\x0c\x35\x9f\x43\x87\xc1\x59\x93\x2f\xb9\xf7\x35\x04\x56\x48\x10\x80\x20\xd4\x90\x50\xb0\x04\xca\xa0\x3b\x4a\xb0\x60\x4f\xb2\x79\x71\xee\x4b\x87\xa7\x5f\x30\xe0\x96\x64\x62\x6f\x4d\x4d\xf9\x97\xab\xc1\x14\x6b\x05\x67\x71\x17\x57\x47\xf7\xe6\x3f\x84\x7d\x24\xb9\x8e\x09\x04\xda\x44\x32\xa5\xbc\x20\x2c\x5d\xb0\x42\x18\x69\x13\x3c\xdb\xfd\xca\xb5\x4e\xcd\xf1\xb7\xc7\x96\x58\x0e\xd9\x21\xfb\x0d\x00\x00\xff\xff\x33\xb8\xa5\xaa\x3f\x02\x00\x00"

func lockedtokensAdminUnlock_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminUnlock_tokensCdc,
		"lockedTokens/admin/unlock_tokens.cdc",
	)
}

func lockedtokensAdminUnlock_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensAdminUnlock_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/unlock_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x82, 0xab, 0xae, 0xb2, 0xe6, 0xd0, 0x49, 0x9c, 0xe4, 0x9b, 0xba, 0x84, 0x39, 0xe6, 0x89, 0x46, 0xa3, 0x75, 0x57, 0xf7, 0x73, 0xbb, 0x84, 0xee, 0xf5, 0x9a, 0x0, 0xcf, 0xdb, 0xd, 0x76}}
	return a, nil
}

var _lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4f\x6f\xe3\xc6\x0f\xbd\xfb\x53\x70\x73\xc8\x4f\x06\x02\xfb\xf2\x43\x0f\x46\xb2\x0b\x37\x40\xdb\x00\x29\xb0\xd8\xee\x9e\x8a\x1e\xe8\x11\x65\x0d\x2c\xcd\x08\x33\x54\x9c\x20\xf0\x77\x2f\x38\x23\xd9\xa3\x3f\xc9\xa6\xba\x24\x96\xc9\x47\xf2\xf1\x91\xb4\xae\x1b\xeb\x18\xae\x1e\xad\x3a\x50\xfe\xdd\x1e\xc8\xf8\xab\xc5\x62\xbd\x86\xef\xa5\xf6\xc0\x0e\x8d\x47\xc5\xda\x1a\x68\x3d\x79\xe0\x92\xa0\x0a\xb6\xc0\xc1\x18\x30\xaf\xb5\x11\x07\xb6\xe0\x89\x83\x45\x6b\xc4\x06\x2a\x5d\x6b\x86\xc2\x3a\xa8\xdb\x8a\x75\x53\x11\xa0\x52\xb6\x35\xec\xc5\x41\x1b\x40\xf0\xda\xec\x2b\x4a\x03\xc5\xe0\x67\x53\xc0\x3c\x77\xe4\x25\x78\xeb\x29\x07\xf4\x70\xa0\x97\x00\xe0\x4b\xdb\x56\x39\xec\x28\x09\x2a\x16\x63\xc7\xc5\x22\x81\xcf\xa2\xdd\x83\x29\xec\x06\x5e\xb7\xd1\x66\x03\x3f\x7e\xd3\xcf\xbf\xfc\xff\xb4\x84\xd7\xc5\x02\x00\xa0\x71\xd4\xa0\xa3\x2c\x94\xb7\x01\x6c\xb9\xcc\xfe\x62\xeb\x70\x4f\x37\x70\x8f\x0d\xee\x74\xa5\x59\x93\x5f\xc2\xf5\x36\x06\x3c\xfb\xca\xb3\x5e\xc3\x8f\x3e\xa1\xed\xa4\x12\x2e\x91\xa1\xc4\x1c\xbc\xad\x09\xbc\xb4\xc0\x16\x40\xce\x59\x97\x22\xa0\x23\xf0\x6c\x1d\xe5\x42\x16\x4b\x47\x72\x1d\xaa\x40\xf7\x02\xde\x4a\xdd\x2f\xa0\xd0\x08\x07\xda\xf8\x86\x14\x53\x0e\x15\x32\x0d\x70\x1e\x8a\xc0\x50\xda\x4d\x43\x94\x7b\xe9\x99\x6b\xcd\xa5\x3d\xac\x6b\xf2\x37\xa9\x2b\x97\x64\x82\x73\x12\x58\x7b\x30\x96\xc1\x3e\x91\x3b\x3a\xcd\x4c\xe6\xec\xf1\x84\x0e\x76\x98\x77\x15\xfb\x19\x86\xe1\x2e\x4a\x66\xe5\x23\x9b\xab\xca\x62\x7e\x3b\x31\xfb\x9c\x15\xce\xd6\x1b\x58\x77\x66\xeb\xd8\x36\x6d\xf6\xbf\x5e\xe0\x97\xe7\xb8\xf2\x7c\xf9\x02\xaf\x27\xd1\xc7\x04\xec\xd2\x96\x8a\x38\x86\xff\x46\xc5\x24\x93\x9d\x75\xce\x1e\x6f\xaf\xd3\x61\x58\x85\x3f\x5b\xb1\xbb\xb7\x55\x45\x81\x84\x3e\xb9\x81\x61\xf2\x61\x64\xde\xe9\xe6\x2b\x72\x39\xc9\xb8\x41\xa3\x55\x76\x75\x1f\x94\x2c\xac\xc6\x24\x00\xc1\x51\x41\x8e\x8c\x22\xe9\x92\x74\x20\x24\x0b\xea\x0c\x7b\xb5\xbc\xd4\x25\x43\xd6\x0f\x40\x57\xbd\x48\xe6\xa2\xf5\x95\x0c\x4d\x2a\xd0\xae\xbf\xdb\xaa\x12\xe9\x09\xbe\x2e\x84\x1e\x1f\x54\xb7\x23\x85\xad\x27\x38\x12\xe4\xd6\xfc\x8f\x01\x8e\x68\x18\xd8\x8e\xfd\x1d\x3d\x91\x8b\x53\x4f\x86\xb5\x1b\xaa\x4c\x17\x20\x1b\x00\x75\xe5\xc7\x8e\x6c\x61\xdf\xad\x0b\x6d\x0a\xeb\x6a\x0c\x1e\x52\xc8\x79\x2b\x74\x03\x33\x70\x8d\x59\x76\x4b\xa8\x13\x82\x14\x18\x1b\xba\x27\xee\xde\x65\x23\x3a\x86\xcc\xcb\xb3\x52\xc9\x18\xbf\xd3\xfc\x3f\x6c\x95\x93\xfb\x9c\xcd\x74\x3b\x89\xff\xb5\xdd\x55\x5a\x85\x1e\x8f\x69\xee\x85\x37\xc8\xb9\xef\xd2\xdd\x6c\x29\xab\x3d\xf1\xe3\x8c\x79\xb6\x9c\x42\x0f\x18\x89\xfa\x8b\x3e\xdf\x48\x59\x97\xf7\x32\xef\x50\x7b\x7a\xb0\x9f\x91\xb9\xac\xa4\x84\x71\x18\x79\x66\x5f\x76\xf1\xc3\x3d\xf8\x13\x0d\xee\xc9\xc5\x66\xbc\x95\x51\xc7\x75\x36\x4b\x54\x22\x91\xdf\x87\xe7\x04\xeb\xb0\x45\x65\xf4\x26\xeb\x0c\xdd\xbe\xad\xc9\x70\xb2\xa6\xde\x44\x96\x1d\x15\x21\xb7\x11\xf1\x2e\x99\x93\xbf\x47\xb2\xf9\xe7\xd3\xbb\x29\x3e\x18\xe5\x08\x3d\x4d\xcf\xde\xee\x25\x0e\x6d\x08\xf1\x26\xc4\x88\xb4\x95\xee\xf0\xe2\xed\x78\x14\xa4\x2c\xa7\x8a\x71\x33\x48\x79\x46\x05\x49\x52\xf7\xd6\xb0\x36\xed\x79\x71\x18\x7a\x66\xd0\x4c\x2e\x8e\x58\x37\xee\x95\xb5\xcd\x7b\x28\xfd\x0a\xe0\xe4\x16\xfb\x56\x29\xa2\x5c\x8e\xac\xc9\x21\xb7\x14\x2f\x81\x1c\x93\xf7\xa0\xd8\xca\x81\xaa\xd1\x1d\xe2\x01\xdf\xe1\xdb\xe6\xaa\x4b\x7e\xd6\xe0\x34\x79\x7b\x1a\x6a\xf2\x34\x59\x70\xdd\xed\xa3\x67\x52\x6d\x28\xbf\xc6\x03\x79\x59\x4b\x25\x39\x82\xec\x5c\x84\x23\x54\x65\xb0\xed\x53\x00\xdc\xd9\x27\x5a\x8e\x11\x35\x43\x4d\x68\x7c\x38\xde\x5c\x6a\xb3\x87\xa3\x48\xef\xe8\xac\xfc\xab\xb9\x4c\xd4\x20\xdf\xca\x4e\x4b\x58\x1c\xe3\x09\x95\x9a\x2f\x17\x79\x47\xe0\xf1\x69\xc4\x68\x72\x54\x27\x12\x7d\x5f\xc0\x8b\x19\x6e\x86\x77\x4f\xa2\xcd\x5d\xe0\x24\xe6\x0d\xb0\xfd\xe9\x31\x1e\x5c\xd9\x19\x93\x7b\x6c\xce\x37\x77\xb0\x7b\xf7\xc4\xb7\xd7\x33\x09\xac\x9b\xb0\x54\x7f\x72\xfb\x75\x01\x9f\xe6\xa3\xad\x54\x49\xea\x90\x8d\xb7\xd9\x7f\x4d\xaf\xe7\x49\x7b\xdf\xd2\x7c\xa2\x1f\xff\x95\x32\x83\xdf\x9a\x50\xa7\x2f\x3f\x58\xf0\x1b\x30\x3d\xc8\x7c\x69\x37\x80\xbc\x81\x8f\x05\x88\x63\x76\x5a\x9c\x16\xff\x06\x00\x00\xff\xff\x17\x88\x40\xfa\x20\x0c\x00\x00"

func lockedtokensAdminUnlock_tokens_for_multiple_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc,
		"lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc",
	)
}

func lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc() (*asset, error) {
	bytes, err := lockedtokensAdminUnlock_tokens_for_multiple_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x89, 0x7b, 0x77, 0x99, 0x28, 0x10, 0x19, 0xc3, 0x79, 0x5c, 0x60, 0xbe, 0x14, 0x47, 0x7a, 0x30, 0x84, 0x70, 0x1c, 0x5e, 0xbd, 0x40, 0xdd, 0xab, 0x4a, 0x19, 0xa5, 0x9a, 0x79, 0xe0, 0x4a}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4b\x6b\xdb\x40\x10\xbe\xeb\x57\x4c\x75\x08\x12\x34\xca\xa5\xf4\x60\xec\x86\xa6\x25\xf4\x50\xd2\xd0\x47\x7a\x1e\x4b\xa3\x07\x5e\xef\x88\xdd\x51\xed\x62\xfc\xdf\xcb\x6a\xd7\xb2\x24\x13\x1a\x28\xd5\x45\xb0\xb3\xf3\x3d\xe6\x9b\x6d\xb6\x2d\x1b\x81\xf8\x5e\xf1\xee\x3b\x6f\x48\xc7\xd1\x70\xd4\xe9\xaa\x59\x2b\x9a\x1d\x7f\xe6\x7c\x43\x45\x7f\x68\xe3\x28\x12\x83\xda\x62\x2e\x0d\xeb\x04\xb7\xdc\x69\x59\xc0\x8f\xfb\x66\xff\xf6\x4d\x0a\x87\x28\x02\x00\x50\x24\x50\xb3\x2a\xc8\x7c\xa5\x72\x01\xd8\x49\x9d\x8c\x51\xb2\xfe\xf7\xa5\x25\x83\x0e\xc6\xbe\x86\x09\x75\xf6\xb3\x91\xba\x30\xb8\x4b\xe1\xea\xb2\xed\x53\x0f\x7c\x26\xfa\x85\x9d\x92\x33\xcf\xb3\x48\x83\xe1\xec\xc9\x75\x78\x80\xd6\x50\x8b\x86\x12\xcc\x73\xef\xa4\xc7\xb8\x63\x63\x78\xf7\x84\xaa\xa3\x14\xae\xde\xfb\x9a\x73\x07\xe1\xb3\xa4\xca\x6c\x70\x08\x2b\x08\xfd\x99\x15\x36\x58\x51\xb6\xee\x11\x96\xff\xc3\xf9\xbb\xa4\x34\xbc\x5d\xc0\x73\xf5\x6f\x5e\xc2\x23\x4a\x9d\x0e\x82\xdd\x77\x7b\x0b\x2d\xea\x26\x4f\xe2\x0f\xdc\xa9\x02\x34\x0b\x78\x9d\x60\xa8\x24\x43\x3a\x27\x10\x86\x11\x56\x9c\x46\x53\xcf\xa7\x61\xff\xc5\xf2\x4b\x43\x38\x79\xb9\x09\x20\x37\xe5\xa9\xde\x97\x5f\xac\xdf\xb5\x81\xb8\x3e\xbf\x0e\x67\x43\xb1\xc7\x38\x7a\x1f\xb4\xa7\xbc\x13\x1a\x25\xe9\x36\xc8\x0a\x6e\xc8\x3c\x1a\xde\xff\x86\xd5\x2c\xdb\x60\xeb\x23\x29\xaa\x50\xd8\x24\xa3\x89\xb8\x5e\xd5\xa7\x70\x87\x0a\xdd\xf4\x2e\xba\x2b\x12\x9f\x53\x58\xa2\x70\x71\x8c\xd2\x94\xe0\x9f\x11\x2c\x57\x33\xb8\x43\x34\x19\xc0\x48\x67\x56\x78\x41\xf4\x40\x7e\x5e\x76\x78\x8b\xfe\x3f\x22\x38\x02\x29\x4b\x8e\x27\x09\x97\xe0\x7a\x4a\x94\x3a\xea\x49\xbe\xd9\xfa\x54\x99\x6b\x98\xfa\x2b\xa8\x65\xdb\x48\x88\x71\x79\x3d\x05\xd9\x85\xe0\x67\xda\x2e\xe8\xd3\x7f\xf1\x39\xb3\x79\x98\x40\x85\x85\x79\x60\x01\xd2\xdc\x55\xb5\xdf\x12\xeb\xf6\xbc\xa7\x79\x15\x8f\x10\xc2\xaa\x1c\xa3\x3f\x01\x00\x00\xff\xff\xa8\xc8\x57\xb3\x25\x05\x00\x00"

func lockedtokensDelegatorDelegate_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_new_tokensCdc,
		"lockedTokens/delegator/delegate_new_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_new_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x82, 0x5f, 0x57, 0x9d, 0x97, 0x80, 0xce, 0x7, 0xe8, 0xe2, 0x48, 0xf6, 0xda, 0x39, 0xb7, 0xae, 0x2e, 0x74, 0x83, 0xc0, 0x22, 0x3c, 0x3d, 0xce, 0x48, 0x95, 0x3, 0x68, 0x1b, 0x5e, 0x89}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xf2\x40\x10\xc6\xef\xf9\x14\x43\x0e\x92\xc0\x4b\x4e\x2f\x3d\x48\xad\xb4\x14\xe9\xa1\xb4\x62\xff\x9d\xc7\xec\xc4\x2c\xc6\x9d\x30\x3b\xa9\x96\xe2\x77\x2f\x66\x4d\x8c\x95\xe6\xb2\xd9\xdd\x99\xdf\x33\xcf\xc3\xda\x4d\xcd\xa2\x10\x3f\x72\xbe\x26\xf3\xca\x6b\x72\x3e\x8e\xba\xd3\x59\xe3\x56\x76\x59\x51\x7b\x1e\x47\x91\x0a\x3a\x8f\xb9\x5a\x76\x09\x6e\xb8\x71\x3a\x86\xb7\x99\xdd\x5d\xfd\x4f\xe1\x3b\x02\x00\xa8\x48\xc1\xb1\xa1\x7b\xaa\x68\x85\xca\x32\x17\xde\x7d\x8d\x61\xc8\xcf\xc2\xe6\xe9\xa2\x2c\x6a\x11\xb5\x50\x8d\x42\x09\xe6\x79\x50\xc0\x46\xcb\xe4\x8e\x45\x78\xfb\x8e\x55\x43\x29\x8c\x6e\xc3\x5d\xa7\xda\x29\x97\x5c\x19\x92\x05\x15\x30\x81\x63\x7b\xe6\x95\x05\x57\x94\x2d\x5b\xc0\x75\x0b\x3b\x9b\xa6\x5d\x9e\x6b\x12\x3c\xf8\xf2\xff\xe0\xcc\x75\xf6\x61\xb5\x34\x82\xdb\x14\x46\x97\x6d\x0f\xad\xe0\x4d\x52\x08\x6f\x7e\x99\x1c\xdc\xbf\x84\x11\xe6\xa8\x65\xda\xcf\x7b\xf8\xa6\x53\xa8\xd1\xd9\x3c\x89\x07\xd5\x60\x3d\x38\x56\xf0\xf8\x49\x06\x50\xc1\xd7\x94\xdb\xc2\x92\x81\x1a\xb5\x8c\x4f\x88\xfe\xc7\x53\x55\x64\x97\xb1\xc3\xe4\x94\xc8\xd1\x7f\x5f\x90\x04\xcc\x3e\x64\x4e\x3b\xca\x1b\xa5\x41\x9c\x7f\x20\x33\x13\xb6\xb4\xa0\x2d\x8a\xe9\xdc\xf6\xaf\x21\xac\x1d\x7b\x1f\xfd\x04\x00\x00\xff\xff\xde\xa3\xcf\xae\x60\x02\x00\x00"

func lockedtokensDelegatorDelegate_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_rewarded_tokensCdc,
		"lockedTokens/delegator/delegate_rewarded_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xdc, 0xfc, 0xd8, 0xe, 0x86, 0xce, 0x79, 0xa8, 0xd6, 0x6b, 0xbd, 0x9d, 0xc4, 0x50, 0xf4, 0x54, 0x27, 0xe7, 0xbe, 0xcf, 0x11, 0x33, 0x8, 0x76, 0x2f, 0x31, 0xdc, 0x91, 0xcd, 0x62, 0xbd}}
	return a, nil
}

var _lockedtokensDelegatorDelegate_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\x43\x0e\x25\x01\xc9\x49\x3c\x14\x6b\x51\xa4\x78\x10\x2d\x6a\xf5\x3c\xdd\x9d\x34\x4b\xd3\x9d\x65\x77\x62\x2b\xd2\xff\x2e\xcd\x36\x31\xb5\x98\xcb\xb2\x3b\x33\xdf\x7b\x6f\x88\xd9\x38\xf6\x02\xe9\x23\xab\x35\xe9\x37\x5e\x93\x0d\x69\xd2\xbd\xce\x1a\xbb\x32\xcb\x9a\xda\xf7\x34\x49\xc4\xa3\x0d\xa8\xc4\xb0\xcd\x70\xc3\x8d\x95\x31\x2c\x66\x66\x77\x75\x99\xc3\x77\x02\x00\x50\x93\x80\x65\x4d\xf7\x54\xd3\x0a\x85\xfd\xdc\xf3\xee\x6b\x0c\x43\x7e\x11\x2f\x4f\x67\x6d\x49\x8b\x70\x9e\x1c\x7a\xca\x50\xa9\xa8\x80\x8d\x54\xd9\x1d\x7b\xcf\xdb\x77\xac\x1b\xca\x61\x74\x1b\x6b\x9d\x6a\xa7\x5c\x71\xad\xc9\xbf\x50\x09\x13\x38\x8e\x17\x41\xd8\xe3\x8a\x8a\x65\x0b\xb8\x6e\x61\x27\x6e\xda\xe3\xd9\x91\xc7\x43\xae\x70\x01\x27\xa9\x8b\x0f\x23\x95\xf6\xb8\xcd\x61\x74\x3e\xf6\xd0\x0a\xde\x64\xa5\xe7\xcd\x9f\x90\x83\xfa\x6b\xb4\x30\x47\xa9\xf2\xde\xef\xe1\x9b\x4e\xc1\xa1\x35\x2a\x4b\x07\xdd\x60\x02\x58\x16\x08\xf8\x49\x1a\x50\x20\x38\x52\xa6\x34\xa4\xc1\xa1\x54\x69\x9e\xf4\x8c\x40\x75\x59\x9c\xaf\x1b\x26\xbf\x9b\x38\xe6\xee\x1b\xb2\xe8\x60\x1f\x21\xb4\x23\xd5\x08\x0d\xd6\xf8\x0f\xb2\xd0\xf1\x4a\x0b\x1b\x04\xfb\x94\xfd\x5f\x10\xcf\x8e\xbd\x4f\x7e\x02\x00\x00\xff\xff\x6f\x7c\x08\x25\x58\x02\x00\x00"

func lockedtokensDelegatorDelegate_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorDelegate_unstaked_tokensCdc,
		"lockedTokens/delegator/delegate_unstaked_tokens.cdc",
	)
}

func lockedtokensDelegatorDelegate_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorDelegate_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/delegate_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0x86, 0x7e, 0x5f, 0x5f, 0xd4, 0x2f, 0xe7, 0xbd, 0xa4, 0x9b, 0x57, 0x82, 0xd1, 0x7d, 0x6c, 0xed, 0x75, 0x41, 0x8e, 0xb8, 0xde, 0xe9, 0xff, 0x4b, 0xf, 0x7f, 0x66, 0x2, 0x5e, 0x2a, 0x15}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbf\x4e\xf3\x40\x10\xc4\xfb\x7b\x8a\xf9\x5c\x7c\xb2\x1b\x17\xd0\x45\x40\x14\x91\x02\x4b\x29\x22\x04\x0f\x70\x3e\xaf\xcd\x29\x97\x5d\x6b\x6f\x2d\x0a\xc4\xbb\xa3\xd8\x10\xfe\x4e\x73\xd2\x69\xe6\x37\x3b\xf1\x38\x8a\x1a\x8a\x9d\x84\x03\x75\x0f\x72\x20\xce\x85\x73\x3e\x04\xca\xb9\xf4\x29\x55\xe8\x27\xc6\xd1\x47\x2e\x7d\x08\x32\xb1\xad\xb0\xe9\x3a\xa5\x9c\xab\x15\x1e\x1b\xb6\xcb\x0b\xbc\x38\x07\x00\x89\x0c\x69\x06\x6d\x16\x6b\xc3\xbd\xdc\x53\x8f\x6b\x0c\x64\xef\x7f\x1f\x98\x6a\x8e\x9c\x54\x07\x3f\xfa\x36\xa6\x68\x91\x72\xdd\x8a\xaa\x3c\x5f\xfd\xff\x7a\x51\x3d\x3f\x77\x92\x3a\xd2\x9b\xf2\x1c\x3c\xe9\x9b\x6d\xf7\xb3\x7c\x3f\xb5\x29\x86\xbd\xb7\xa7\x73\xe8\xb3\x77\xbd\xc6\xe8\x39\x86\xb2\xb8\x95\x29\x75\x60\x31\x2c\xed\xf0\x50\xea\x49\x89\x03\xc1\x04\xe3\x8c\xc1\x2f\x7c\x51\x2d\xc3\x95\x6c\x52\xfe\x73\x7b\x3d\x90\x6d\x29\xd1\xe0\x4d\xb4\xd9\x96\xd5\x3f\xf7\xea\xde\x02\x00\x00\xff\xff\x5e\x62\x94\xa0\x76\x01\x00\x00"

func lockedtokensDelegatorGet_delegator_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_idCdc,
		"lockedTokens/delegator/get_delegator_id.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_idCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xdf, 0x4b, 0xe2, 0x2c, 0xfa, 0xfb, 0x94, 0x94, 0x3c, 0x92, 0xd5, 0xb7, 0xd3, 0xb8, 0x76, 0x40, 0x87, 0x83, 0x34, 0xf0, 0x77, 0xac, 0xd, 0x63, 0x54, 0x15, 0xc6, 0x85, 0xdc, 0xe9, 0xf6}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8b\xdb\x30\x14\xbc\xfb\x57\xbc\xe4\x10\x62\x58\x9c\x7b\xa8\x0b\x81\x50\x1a\x28\xcb\xb2\xdd\xdb\xb2\x87\x67\xeb\x39\x51\xa3\xe8\x19\x49\x26\x94\x90\xff\x5e\xfc\xa5\x58\x6b\xa7\xdd\xae\x2f\x26\xd2\xcc\x68\xf4\x66\x62\x79\x2a\xd9\x38\x98\x7f\x53\x7c\xde\x6d\x5f\x30\x53\xf4\xd3\xe1\x51\xea\xfd\x3c\xea\xf7\x7e\x70\x7e\x24\xf1\xc2\x47\xd2\x76\x1e\x45\xab\x15\x3c\x93\xab\x8c\xb6\x80\x1a\xd0\x18\xfc\x0d\x5c\xc0\x96\x14\xed\xd1\xb1\xd9\xe9\x82\x81\xb3\x5f\x94\x3b\x0b\xee\x80\x0e\xdc\x81\x00\xf3\x9c\x2b\xed\x20\x67\xed\x0c\x2b\x5b\xcb\x48\x0d\xd2\x59\xd0\x6c\x4e\xa8\x3c\x02\xb5\x00\x7b\x40\x43\xa2\x5f\x8a\x22\xcc\x73\xb2\x76\x89\x4a\xc5\x50\x54\x1a\x4e\x28\xf5\xb2\xdb\x5d\xc3\x46\x08\x43\xd6\xc6\x6b\x78\x1d\xdf\x23\x09\x8c\xbd\xc1\x25\x8a\x00\x00\x14\x39\x10\xc3\x9d\x4d\x7d\x91\x0f\x29\xa4\xf0\xfa\x76\x13\x29\xab\x6c\xd3\x39\x4f\x61\x4f\xae\xfb\xd1\xbb\x8b\x6f\x48\x2e\x9d\x64\x8d\xca\xcb\x3d\x53\x01\xe9\x40\xa0\x41\xd6\x4f\x92\x63\x89\x99\x54\xd2\x49\xb2\x49\xc6\xc6\xf0\xf9\xcb\xe2\x32\x61\xed\x91\x05\x79\xbd\xa7\x2a\x53\x32\xbf\x7e\x5d\x7a\xa1\xfa\x59\x95\xcd\xf2\xaa\x50\x7c\xee\x68\x9e\xe1\x81\x9d\x4d\x59\x84\x83\x69\x1d\x4e\x1a\xbf\x78\x6e\xcd\x90\x75\xe8\x29\xfc\x6b\x78\xa1\x33\xcd\x82\x76\xdb\x75\x70\x5c\xd2\x2e\x3e\x04\xc0\x5b\x50\xef\xd1\x52\x0c\xae\x30\x86\xf7\xb9\x26\x58\x96\xa4\xc5\xb2\xb6\xd9\xe2\xae\xe3\x5c\xda\x9e\x77\x59\xd4\xd4\xff\xcc\x67\xf8\x3f\x49\x9a\xd7\x77\x56\x82\xcc\xbb\x3c\x02\xd8\xe8\xcc\x36\xc3\x27\x74\x87\x3b\xd9\xa8\x69\x97\x7f\xbd\x44\x98\x55\x3b\x61\x48\x27\xa5\x92\x3d\x39\x1f\xd9\x63\x83\x5c\xc6\x01\x7d\x10\xc6\x47\x34\x1a\xbe\x17\x90\x45\x7f\xfc\x2c\x05\x2d\x15\x2c\x16\x81\x60\xb7\x7a\x09\x26\xf6\xe9\x82\x0d\x4b\xd6\xbe\x67\x0f\x23\xc0\x74\xb9\x76\xdb\x59\x80\x8c\xef\x14\xf2\x7e\xc3\xda\x96\x0d\xba\x66\x9a\xaf\xe6\x04\x37\xba\x46\x7f\x02\x00\x00\xff\xff\x3b\xb2\xfd\x9b\x88\x05\x00\x00"

func lockedtokensDelegatorGet_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_infoCdc,
		"lockedTokens/delegator/get_delegator_info.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_infoCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xc7, 0xbf, 0x3a, 0x71, 0x3c, 0xfc, 0x74, 0xb2, 0xc5, 0xc5, 0x2d, 0xc9, 0xe0, 0x2f, 0x18, 0x42, 0x27, 0xba, 0x87, 0x45, 0xb, 0xe2, 0x9a, 0x90, 0x5c, 0xc4, 0x78, 0x34, 0x4f, 0xe, 0xa2}}
	return a, nil
}

var _lockedtokensDelegatorGet_delegator_node_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x21\x07\x94\x5c\xf2\x00\x15\x50\x55\xf4\x40\xa5\x0a\x55\xc0\x0b\xb8\xf6\x26\x58\x75\x77\xa3\xf5\x46\x1c\x10\xef\x8e\x9a\x40\xf9\x9d\x8b\x25\x6b\xe6\x9b\x9d\x74\x1c\x44\x0d\xd5\x56\xc2\x81\xe2\x93\x1c\x88\x4b\xe5\x9c\x0f\x81\x4a\xa9\x7d\xce\x0d\xba\x91\x71\xf4\x89\x6b\x1f\x82\x8c\x6c\x0b\xac\x62\x54\x2a\xa5\x59\xe0\xd1\x34\x71\x8f\x57\xe7\x00\x20\x93\x21\x4f\xa0\xd5\x6c\xdd\x70\x27\x0f\xd4\xe1\x1a\x3d\xd9\xc7\xdf\x27\xa6\x99\x22\x27\xb5\xc1\x0f\x7e\x9f\x72\xb2\x44\xa5\xdd\x8b\xaa\xbc\x5c\x5d\x7e\xbf\xa8\x9d\x9e\x3b\xc9\x91\xf4\xa6\x3e\x07\x4f\xfa\x61\xdb\xfe\x2e\xdf\x8d\xfb\x9c\xc2\xce\xdb\xf3\x39\xf4\xd5\xbb\x5c\x62\xf0\x9c\x42\x5d\xdd\xca\x98\x23\x58\x0c\x73\x3b\x3c\x94\x3a\x52\xe2\x40\x30\xc1\x30\x61\xf0\x07\x5f\x35\xf3\x70\x25\x1b\x95\xff\xdd\xde\xf6\x64\x6b\xca\xd4\x7b\x13\xbd\x97\x48\x9b\x75\xdd\x5c\xb8\x37\xf7\x1e\x00\x00\xff\xff\xb5\x59\xec\x31\x7a\x01\x00\x00"

func lockedtokensDelegatorGet_delegator_node_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorGet_delegator_node_idCdc,
		"lockedTokens/delegator/get_delegator_node_id.cdc",
	)
}

func lockedtokensDelegatorGet_delegator_node_idCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorGet_delegator_node_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/get_delegator_node_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x34, 0xe4, 0xe8, 0x73, 0xb0, 0x40, 0xa6, 0x2f, 0xc3, 0x9c, 0xcd, 0x15, 0x60, 0x8, 0xf7, 0x71, 0xdb, 0x32, 0x7a, 0x48, 0xee, 0xf4, 0x2a, 0xa8, 0xab, 0x46, 0xd4, 0xd8, 0x60, 0x9c, 0x60}}
	return a, nil
}

var _lockedtokensDelegatorRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xb1\x6e\xdb\x30\x10\xdd\xf5\x15\x57\x0d\x81\x04\x24\xca\x52\x74\x30\xe2\x06\x4d\x8d\xa0\x01\x5a\x37\x88\xd3\x74\xa6\xc5\x93\x44\x98\x22\x55\xf2\x14\xbb\x30\xfc\xef\x05\x45\xca\x96\x6c\xb8\xed\xd2\xa9\x5a\x0c\xf0\xf8\xde\xbd\xf7\x78\x67\x51\x37\xda\x10\xc4\xf7\x52\xaf\x9f\xf5\x0a\x55\x1c\xf5\x47\x9f\x75\xbe\x42\xde\x1d\xda\xc3\xa9\xbb\xf8\x30\x7b\x66\x4b\x89\x0b\x62\x2b\xa1\xca\x41\xad\x55\xa5\x58\x4a\x0c\x44\x11\x19\xa6\x2c\xcb\x49\x68\x95\x08\x3e\x81\x05\x19\xa1\xca\x4b\x60\xb5\x6e\x15\x4d\xe0\xdb\xbd\xd8\xbc\x7b\x9b\xc2\x36\x8a\x00\x00\x24\x12\x54\x5a\x72\x34\x4f\x58\x4c\x80\xb5\x54\x25\x43\x11\x59\xf7\xf3\xb5\x41\xc3\x1c\xa5\xbd\x84\x51\xc3\xec\xbb\xa0\x8a\x1b\xb6\x4e\xe1\xe2\x14\xf6\xa9\x23\x3e\x34\x7a\x65\xad\xa4\x43\x9f\xb3\x4c\xfb\x60\xb2\x17\x87\xf0\x04\x8d\xc1\x86\x19\x4c\x58\x9e\x7b\x27\x1d\xc7\x9d\x36\x46\xaf\x5f\x98\x6c\x31\x85\x8b\x0f\xbe\xe6\xdc\x41\xf8\x2c\xca\x22\xdb\x3b\x84\x29\x04\x7c\x66\x49\x1b\x56\x62\xb6\xec\x18\x6e\xfe\x85\xf3\xf7\x49\x61\x74\x3d\x81\x73\xf5\x85\x97\xf0\xc8\xa8\x4a\xf7\x82\xdd\x77\x7b\x0b\x0d\x53\x22\x4f\xe2\xc1\x6d\x10\x16\x94\x26\xb0\xec\x15\x39\x30\x02\xdb\x60\x2e\x0a\x81\x1c\x1a\x46\x55\x9c\x46\x63\xd3\x7d\xda\x7f\xf0\xfc\xb7\xaf\xd0\x9b\xb9\x0e\x24\xd7\x45\x5f\xef\xca\xe7\x0c\x7c\xd4\xad\xe4\x9d\x6e\xdf\x14\x1c\x0c\xc8\xe1\xfc\x3c\x80\xc1\x02\x0d\xaa\x1c\x63\xcf\xb1\xf3\x3e\x70\x83\x79\x4b\x38\x78\x4a\x37\x42\xb2\x8b\xf2\x8e\x49\xa6\x72\x84\xe9\xd1\xf3\x66\x25\x92\x0f\x3b\x4c\x42\xb8\x98\x0c\xb2\x11\x45\xd8\x05\xb8\x99\x1e\xd1\x6d\xa3\x91\x89\x23\xee\xdc\x20\x23\x9c\x6b\x8e\x33\x94\x58\x32\xd2\x26\x51\x9a\xe3\xc3\x6c\x02\x82\xa7\x63\xac\xd3\x6a\x89\xad\xd0\x3c\x1a\xbd\xf9\x79\xaa\xd4\xa7\x71\x60\x3a\xc2\x0f\xb0\x19\xf7\x97\x70\x8e\x3e\x6f\x9b\xf4\xcb\x1c\x8c\x5c\xc1\xe9\x3f\x84\x8b\x62\xcf\xfe\x45\x28\x51\xb7\xb5\x2b\xe1\x13\xfe\x68\x85\xc1\x1a\x15\x25\xe9\xa0\xeb\x0e\x50\x5a\x74\xf1\x24\xc9\x9e\x77\x94\x4f\xea\x12\x1b\x8d\x56\xb6\xec\x2b\xbf\x8f\x8e\x63\xa3\xad\xa0\x30\x41\x37\x57\x63\x92\x75\x98\xb9\x53\x5b\xe3\xf6\xc7\x11\xfd\x8f\xcf\xb3\x1d\xc9\x08\x3b\x36\xd7\x04\xa8\x74\x5b\x56\x7e\xb1\x2c\x90\xf6\x12\xdf\xc4\x87\xbd\xdc\x85\xed\xda\x45\xbf\x02\x00\x00\xff\xff\x67\xce\xb1\x3a\x81\x06\x00\x00"

func lockedtokensDelegatorRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorRegister_delegatorCdc,
		"lockedTokens/delegator/register_delegator.cdc",
	)
}

func lockedtokensDelegatorRegister_delegatorCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x8c, 0xb7, 0xc5, 0x69, 0x6b, 0xca, 0x31, 0x72, 0x84, 0x4a, 0x2b, 0x57, 0xf8, 0xd2, 0x6a, 0x13, 0xb2, 0x49, 0x1b, 0x73, 0x65, 0x56, 0x9, 0x40, 0x6e, 0x60, 0xd5, 0x85, 0x5f, 0x94, 0xdb}}
	return a, nil
}

var _lockedtokensDelegatorRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x4f\x83\x40\x10\x85\xef\xfc\x8a\x09\x87\x06\x12\xc3\xc9\x78\x68\xac\x8d\xc6\x34\x1e\x8c\x36\x6a\xf5\x3c\x85\x01\x36\xa5\x3b\x38\x3b\xd8\x1a\xd3\xff\x6e\xca\x16\x4a\x6d\xe4\xb2\xb0\x33\xf3\xbd\x79\x2f\x98\x75\xcd\xa2\x10\x3e\x72\xba\xa2\xec\x8d\x57\x64\x5d\x18\x74\xb7\xb3\xc6\x16\x66\x59\x51\x7b\x1f\x06\x81\x0a\x5a\x87\xa9\x1a\xb6\x11\xae\xb9\xb1\x3a\x86\xc5\xcc\x6c\xaf\x2e\x63\xf8\x09\x00\x00\x2a\x52\xb0\x9c\xd1\x3d\x55\x54\xa0\xb2\xcc\x85\xb7\xdf\x63\x18\xf2\x13\xff\xf1\x74\xd6\x16\xb4\x88\x5a\xa8\x46\xa1\x08\xd3\xd4\x2b\x60\xa3\x65\x74\xc7\x22\xbc\x79\xc7\xaa\xa1\x18\x46\xb7\xbe\xd6\xa9\x76\xca\x25\x57\x19\xc9\x0b\xe5\x30\x81\xc3\x78\xe2\x94\x05\x0b\x4a\x96\x2d\xe0\xba\x85\x9d\x6c\xd3\x1e\xcf\x35\x09\xee\x7d\xb9\x0b\x38\x71\x9d\x7c\x18\x2d\x33\xc1\x4d\x0c\xa3\xf3\xb1\x87\x56\xf0\x26\xca\x85\xd7\x7f\x4c\x0e\xea\xaf\x7e\x85\x39\x6a\x19\xf7\xfb\xee\x9f\xe9\x14\x6a\xb4\x26\x8d\xc2\x41\x37\x18\x07\x96\x15\x1c\x7e\x51\x06\xa8\xe0\x6a\x4a\x4d\x6e\x28\x83\x1a\xb5\x0c\x8f\x88\xfe\xc5\x51\x95\x27\xe7\xb1\xc3\xe4\x98\xc8\xc1\x7f\xdf\x10\x79\xcc\xce\x67\x4e\x5b\x4a\x1b\xa5\x41\x9c\xff\x20\x13\xa1\xcf\x86\x9c\x2e\xac\x53\x5c\x19\x5b\xf4\xff\x81\x3f\x3b\xea\x2e\xf8\x0d\x00\x00\xff\xff\x49\xdb\xf5\x6e\x5a\x02\x00\x00"

func lockedtokensDelegatorRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorRequest_unstakingCdc,
		"lockedTokens/delegator/request_unstaking.cdc",
	)
}

func lockedtokensDelegatorRequest_unstakingCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xbb, 0x43, 0xaa, 0x1, 0xf0, 0xb5, 0x1e, 0x51, 0x87, 0x12, 0xb, 0xa6, 0x43, 0x10, 0xc5, 0x40, 0xd7, 0x66, 0x98, 0xae, 0xac, 0xa0, 0xa3, 0x94, 0xec, 0x3d, 0x6, 0xb2, 0xf, 0xe5, 0x60}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6b\xf3\x30\x0c\xc6\xef\xf9\x14\x22\x87\x92\xc0\xfb\xba\x97\xb1\x43\x69\x57\xf6\x87\xb2\xc3\x60\xa5\xdb\xba\xb3\x9b\x28\x4d\xa8\x6b\x05\xc5\x69\x3a\x46\xbf\xfb\x48\x1c\x87\x34\x5b\x2f\x83\xf9\x62\x90\xac\x47\xbf\x47\x72\xb6\xcf\x89\x0d\xf8\x4f\x14\xed\x30\x7e\xa5\x1d\xea\xc2\xf7\x5c\x74\xa1\xa8\x6a\x62\xbd\x50\xa9\xb7\xd9\x46\x61\x1b\xf6\x0c\x4b\x5d\xc8\xc8\x64\xa4\x03\xb9\xa7\x52\x9b\x09\xbc\x2d\xb2\xe3\xf5\x55\x08\x9f\x9e\x07\x00\xa0\xd0\x40\x4a\x2a\x46\x5e\x61\x32\x01\x59\x9a\x34\xe8\xf7\x13\xcd\xf5\x9c\x23\xcb\x5a\xa6\xf8\x07\x67\x4d\xc4\x7b\x66\xd2\x98\x65\x15\xc2\xe8\x7b\xd9\x63\x23\xdc\xf5\x39\xc8\x52\x99\xa6\xcd\xa8\x83\x17\xeb\x3a\x68\x59\x72\xc6\x5c\x32\x06\x32\x8a\x2c\x6b\x43\x73\x47\xcc\x54\xad\xa5\x2a\x31\x84\xd1\xad\xcd\xd5\xfc\xd0\x9e\x02\x55\x22\x3a\x0f\x30\x83\xb6\x5e\x14\x86\x58\x6e\x51\x6c\x1a\x85\xe9\x5f\x78\xbb\x09\x12\xa6\xfd\x04\x2e\xe5\x5f\x2c\xc2\x52\x9a\x34\xec\x80\xeb\x33\x9f\x43\x2e\x75\x16\x05\xfe\x3d\x95\x2a\x06\x4d\x06\x2c\x27\x30\x26\xc8\xa8\x23\x04\x43\xd0\xd3\xf2\x43\xef\xdc\xb3\x9b\xe7\x65\xcb\xc3\x39\x3b\xdc\x71\xfb\x6e\x9c\xb8\x7c\x93\xfe\x1d\x62\xd7\x03\x0e\xf5\x92\x7c\xab\x72\xb2\xb0\x78\xc4\xa8\x34\xd8\x5b\x57\xfd\x13\x62\x54\xb8\x95\x86\x78\xc9\x74\xfc\x80\xd9\x60\x87\x2d\xfe\x83\x7b\x15\xf4\x9c\x9f\x97\x8a\xaa\xdd\xd1\x0a\x2b\xc9\xb1\x5b\x41\xf7\xdb\xed\x1d\xfe\x3c\x37\x11\x63\x4e\x45\x66\xda\xa1\x4c\xff\x0f\x28\x9c\xf6\x50\xcd\x19\x3c\x79\x5f\x01\x00\x00\xff\xff\x97\xf5\xd3\xf9\xa2\x03\x00\x00"

func lockedtokensDelegatorWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_rewarded_tokensCdc,
		"lockedTokens/delegator/withdraw_rewarded_tokens.cdc",
	)
}

func lockedtokensDelegatorWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xa5, 0x13, 0x27, 0xf2, 0x9d, 0xb3, 0xf5, 0x14, 0x95, 0x40, 0xb1, 0xa2, 0xe3, 0x3a, 0x95, 0x4c, 0xaf, 0x6, 0x37, 0x84, 0x3a, 0x9a, 0x9a, 0xda, 0x10, 0x8f, 0xaf, 0x6e, 0x73, 0x20, 0xc2}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\xa3\x40\x0c\xc5\xef\x7c\x0a\x8b\x43\x04\xd2\x8a\xd3\x6a\x0f\xd1\x66\xa3\xad\xaa\xa8\x87\xaa\x8d\xd2\x7f\x67\x07\x4c\x18\x85\x8c\x47\x1e\x53\x52\x55\xf9\xee\x55\x98\x40\x48\xa3\x72\x19\x18\xdb\xbf\xe7\xf7\x84\xd9\x39\x16\x85\xf8\x9e\xf3\x2d\x15\xcf\xbc\x25\xeb\xe3\xa8\xbf\x5d\x34\x76\x63\xd6\x35\x75\xf7\x71\x14\xa9\xa0\xf5\x98\xab\x61\x9b\xe0\x8e\x1b\xab\x53\x78\x59\x98\xfd\x9f\xdf\x29\x7c\x46\x00\x00\x35\x29\x58\x2e\xe8\x96\x6a\xda\xa0\xb2\x2c\x85\xf7\x1f\x53\x18\xf3\xb3\xf0\xf1\x70\xd5\x16\x75\x08\x27\xe4\x50\x28\xc1\x3c\x0f\x0a\xd8\x68\x95\xdc\xb0\x08\xb7\xaf\x58\x37\x94\xc2\xe4\x7f\xa8\xf5\xaa\xbd\x72\xc5\x75\x41\xb2\xa2\x12\x66\x70\x1a\xcf\xbc\xb2\xe0\x86\xb2\x75\x07\xf8\xdb\xc1\x2e\xb6\xe9\x8e\x47\x47\x82\x47\x5f\xfe\x17\x5c\xb8\xce\xde\x8c\x56\x85\x60\x9b\xc2\xe4\x7a\xec\xae\x13\xfc\x97\x94\xc2\xbb\x6f\x26\x47\xf5\xa7\xb0\xc2\x12\xb5\x4a\x87\x7d\x8f\xcf\x7c\x0e\x0e\xad\xc9\x93\x78\xd4\x0d\xc6\x83\x65\x05\x8f\xef\x54\x00\x2a\x78\x47\xb9\x29\x0d\x15\xe0\x50\xab\xf8\x8c\x18\x5e\x3c\xd5\x65\x76\x1d\x3b\xcc\xce\x89\x9c\xfc\x0f\x0d\x49\xc0\x1c\x42\xe6\xb4\xa7\xbc\x51\x1a\xc5\xf9\x03\x32\x6b\x4f\x71\xac\xa8\x45\x29\x7a\xb7\xc3\xdf\x10\xce\x9e\x7d\x88\xbe\x02\x00\x00\xff\xff\xbf\x7f\x76\x42\x60\x02\x00\x00"

func lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc,
		"lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc",
	)
}

func lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x9a, 0x4, 0xf1, 0x5d, 0xe5, 0x4a, 0xbb, 0x9c, 0x3e, 0xf6, 0x75, 0xc3, 0xd9, 0x1c, 0xc1, 0x4f, 0x1c, 0x47, 0x59, 0x66, 0x22, 0x63, 0x20, 0xdf, 0x86, 0x1, 0x7a, 0x2, 0xb5, 0x74, 0xec}}
	return a, nil
}

var _lockedtokensDelegatorWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x4b\xfb\x40\x10\xc5\xef\xf9\x14\x43\x0e\x25\x81\x3f\x39\xfd\xf1\x50\xac\x45\x91\xe2\x41\xb4\xa8\xd5\xf3\x34\x99\x34\x4b\xd3\x9d\x65\x76\x62\x2b\xd2\xef\x2e\xcd\x36\x69\x6a\x31\x97\x4d\x76\x66\x7e\x6f\xde\x23\x66\xe3\x58\x14\xe2\x47\xce\xd7\x54\xbc\xf1\x9a\xac\x8f\xa3\xee\x76\xd6\xd8\x95\x59\xd6\xd4\xde\xc7\x51\xa4\x82\xd6\x63\xae\x86\x6d\x82\x1b\x6e\xac\x8e\x61\x31\x33\xbb\xab\xff\x29\x7c\x47\x00\x00\x35\x29\x58\x2e\xe8\x9e\x6a\x5a\xa1\xb2\xcc\x85\x77\x5f\x63\x18\xf2\xb3\xf0\xf1\x74\xd1\x16\xb5\x08\x27\xe4\x50\x28\xc1\x3c\x0f\x0a\xd8\x68\x95\xdc\xb1\x08\x6f\xdf\xb1\x6e\x28\x85\xd1\x6d\xa8\x75\xaa\x9d\x72\xc5\x75\x41\xf2\x42\x25\x4c\xe0\x38\x9e\x79\x65\xc1\x15\x65\xcb\x16\x70\xdd\xc2\xce\xb6\x69\x8f\x67\x47\x82\x07\x5f\xfe\x1f\x9c\xb9\xce\x3e\x8c\x56\x85\xe0\x36\x85\xd1\xe5\xd8\x43\x2b\x78\x93\x94\xc2\x9b\x5f\x26\x07\xf5\xd7\xb0\xc2\x1c\xb5\x4a\xfb\x7d\x0f\xcf\x74\x0a\x0e\xad\xc9\x93\x78\xd0\x0d\xc6\x83\x65\x05\x8f\x9f\x54\x00\x2a\x78\x47\xb9\x29\x0d\x15\xe0\x50\xab\xf8\x84\xe8\x5f\x3c\xd5\x65\x76\x19\x3b\x4c\x4e\x89\x1c\xfd\xf7\x0d\x49\xc0\xec\x43\xe6\xb4\xa3\xbc\x51\x1a\xc4\xf9\x07\x32\xdb\x1e\xe3\x58\x58\xaf\xd8\xbb\xed\xff\x86\x70\x76\xec\x7d\xf4\x13\x00\x00\xff\xff\x90\x4b\xc6\x6c\x60\x02\x00\x00"

func lockedtokensDelegatorWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensDelegatorWithdraw_unstaked_tokensCdc,
		"lockedTokens/delegator/withdraw_unstaked_tokens.cdc",
	)
}

func lockedtokensDelegatorWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensDelegatorWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/delegator/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xe4, 0xa2, 0x36, 0xa0, 0xd3, 0x4f, 0xcf, 0x9, 0x8f, 0xec, 0xf3, 0x86, 0x38, 0x45, 0xd9, 0xda, 0x5e, 0x9c, 0x1e, 0x28, 0x7f, 0x36, 0x37, 0xc2, 0xac, 0x61, 0x78, 0x3, 0x9a, 0x4a, 0x53}}
	return a, nil
}

var _lockedtokensStakerGet_node_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4e\xf3\x30\x10\xc4\xef\x7e\x8a\xf9\x72\xf8\x94\x5c\xf2\x00\x15\x50\x55\x70\xa0\x52\x85\x2a\xe0\x05\x1c\x7b\x13\xac\xba\xbb\xd1\x7a\x23\x0e\x88\x77\x47\x4d\xa0\xfc\x9d\x8b\x25\x6b\xe6\x37\x3b\xe9\x38\x8a\x1a\xaa\x9d\x84\x03\xc5\x47\x39\x10\x97\xca\x39\x1f\x02\x95\x52\xfb\x9c\x1b\xf4\x13\xe3\xe8\x13\xd7\x3e\x04\x99\xd8\x56\xd8\xc4\xa8\x54\x4a\xb3\xc2\x83\x69\xe2\x01\x2f\xce\x01\x40\x26\x43\x9e\x41\x9b\xc5\xba\xe5\x5e\xee\xa9\xc7\x25\x06\xb2\xf7\xbf\x0f\x4c\x33\x47\x4e\x6a\x83\x1f\x7d\x97\x72\xb2\x44\xa5\xed\x44\x55\x9e\x2f\xfe\x7f\xbd\xa8\x9d\x9f\x5b\xc9\x91\xf4\xaa\x3e\x07\x4f\xfa\x66\xdb\xfd\x2c\xdf\x4f\x5d\x4e\x61\xef\xed\xe9\x1c\xfa\xec\x5d\xaf\x31\x7a\x4e\xa1\xae\xae\x65\xca\x11\x2c\x86\xa5\x1d\x1e\x4a\x3d\x29\x71\x20\x98\x60\x9c\x31\xf8\x85\xaf\x9a\x65\xb8\x92\x4d\xca\x7f\x6e\x6f\x07\xb2\x3b\x89\xb4\xbd\xa9\x9b\x7f\xee\xd5\xbd\x05\x00\x00\xff\xff\xb2\x67\x4e\xb8\x71\x01\x00\x00"

func lockedtokensStakerGet_node_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerGet_node_idCdc,
		"lockedTokens/staker/get_node_id.cdc",
	)
}

func lockedtokensStakerGet_node_idCdc() (*asset, error) {
	bytes, err := lockedtokensStakerGet_node_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/get_node_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xe9, 0x6, 0x40, 0xb1, 0x50, 0xb, 0x25, 0xe1, 0x10, 0x1c, 0xb3, 0xde, 0xfc, 0x81, 0x82, 0x1e, 0xa0, 0xef, 0xc0, 0x6c, 0xdf, 0x4d, 0x2, 0x16, 0xb9, 0x58, 0xfd, 0x75, 0xf2, 0xdf, 0xe4}}
	return a, nil
}

var _lockedtokensStakerGet_staker_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8a\xdb\x30\x10\xbd\xeb\x2b\x86\x1c\x8a\x7d\xf1\xde\x43\x5d\x08\x98\xd2\x40\x29\xcb\x76\x6f\xcb\x1e\xc6\xd2\x38\x51\xa3\x68\x8c\x34\x66\x29\x21\xff\x5e\xe4\x38\x8e\xdd\x64\x9b\xb6\xba\x84\x48\xef\x3d\xbd\x79\x4f\xd8\xee\x5b\x0e\x02\x8b\xcf\x8e\xdf\xd6\xd5\x33\xd6\x8e\xbe\x0b\xee\xac\xdf\x2c\xd4\xf9\xec\x2b\xeb\x1d\x99\x67\xde\x91\x8f\x0b\xa5\x1e\x1e\xe0\x89\xa4\x0b\x3e\x02\x7a\xc0\x10\xf0\x27\x70\x03\xdf\xd8\xd0\xda\x37\x0c\x5c\xff\x20\x2d\x11\x64\x8b\x02\xb2\x25\x40\xad\xb9\xf3\x02\x9a\xbd\x04\x76\x31\x29\x58\x0f\x56\x22\x78\x0e\x7b\x74\x23\x02\xbd\x81\xb8\xc5\x40\xe6\xbc\xa5\x14\x6a\x4d\x31\x66\xe8\x5c\x0e\x4d\xe7\x61\x8f\xd6\x67\xc3\xe9\x12\x56\xc6\x04\x8a\x31\x5f\xc2\xcb\xf5\x08\xc5\xd9\xd3\x2b\x1c\x94\x02\x00\x70\x24\xe0\x87\xcd\x55\x72\x7e\x8f\x57\xc2\xcb\xeb\x85\xda\x76\xf5\x6a\xb0\x5a\xc2\x86\x64\xf8\x73\xb6\x93\x5f\x90\xdc\x8a\x65\x8f\x2e\x29\x25\x55\x0a\x4f\xd4\x40\x39\x51\xe8\xa1\x69\x15\x1a\x5b\xac\xad\xb3\x62\x29\x16\x35\x87\xc0\x6f\x1f\x3f\x1c\xde\xb1\x75\x12\x7b\xec\x6a\x67\xf5\xf1\x53\x36\xaa\xa4\xf5\x17\x94\x47\x94\xed\xc8\x19\xfc\xda\x66\xcc\x65\x6a\xf5\xf6\x08\x87\x91\x9d\x38\x36\x15\x5e\xbe\x77\x71\x8a\x30\xeb\xe3\xae\x96\x73\xf9\xc2\x9a\x7c\x14\x9a\x15\x52\x60\xdb\x92\x37\x59\x52\x3e\x41\x8e\xd7\xa9\x9e\x5e\xe4\x10\x64\xa2\xfe\x63\xb8\xd3\x17\x5d\xf4\x3f\x5f\xd8\x19\x0a\xbf\xe5\x39\x83\x5d\xdd\x79\x37\x50\x77\xdb\xe5\x1f\x87\xb8\xc4\x3b\x69\x65\x5d\x41\x79\x53\xad\xd8\x90\xf4\x41\x57\x59\x3e\xa1\xfe\x67\x3b\xeb\x2a\x9f\x49\xdc\xe9\xe5\xd4\xcd\xa4\xa1\xd0\x7f\x15\xe6\x34\x75\x54\xbf\x02\x00\x00\xff\xff\x57\x50\xae\x73\x63\x04\x00\x00"

func lockedtokensStakerGet_staker_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerGet_staker_infoCdc,
		"lockedTokens/staker/get_staker_info.cdc",
	)
}

func lockedtokensStakerGet_staker_infoCdc() (*asset, error) {
	bytes, err := lockedtokensStakerGet_staker_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/get_staker_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0xb1, 0x4, 0x3, 0x64, 0xf9, 0xa6, 0x1f, 0x98, 0x59, 0xd3, 0x9a, 0xcc, 0x75, 0xd2, 0x22, 0x81, 0x7c, 0xd4, 0xf2, 0x2c, 0xa7, 0x28, 0xee, 0x90, 0xfe, 0xde, 0xe6, 0xfe, 0x7b, 0xec, 0x66}}
	return a, nil
}

var _lockedtokensStakerRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x51\x6f\xd3\x30\x10\x7e\xcf\xaf\x38\xf2\x30\x25\x52\x97\xbd\x20\x84\xa2\x95\x69\x03\x4d\x4c\xa0\x51\x31\x36\x9e\xbd\xe4\x92\x5a\x75\x7d\x91\xe3\xd0\x4e\x55\xff\x3b\x72\xec\x26\x76\xdb\x41\x5f\x10\x7d\x68\x92\xbb\xf3\xe7\xef\x3e\xdf\x67\xbe\x6c\x48\x69\x88\x6f\x05\xad\x7e\xd0\x02\x65\x1c\x0d\xa1\x4e\xd6\xfc\x59\xe0\x5e\xf8\x2b\x15\x0b\x2c\xfb\x60\x3b\x46\x1f\x34\x5b\x70\x59\xcf\x14\xad\x5f\xe2\x28\xd2\x8a\xc9\x96\x15\x9a\x93\x4c\x78\x99\xc3\x83\x56\x5c\xd6\x93\x08\xbc\x9f\x22\x81\x39\x3c\xde\x49\xfd\x3e\x4c\x48\xd4\x2b\x52\x06\xee\xba\x2c\x15\xb6\xed\xf1\xf5\x63\xd9\x17\x7c\x39\x5e\xd2\x5a\x56\x27\xe4\x67\x34\x3b\x5e\xc2\x96\xd4\x49\x9d\xc3\xe3\x2d\x5f\xbf\x7b\x9b\xc2\x26\xea\xd3\x02\x35\xcc\x49\x94\xa8\xbe\x63\x95\x03\xeb\xf4\x3c\xf1\x95\xc9\xfa\xc7\xb7\x06\x15\x33\x22\xb4\x13\x08\xe4\xcc\x7e\x72\x3d\x2f\x15\x5b\xa5\x70\x76\xb8\xec\x73\x0f\x3c\x6e\xf4\x8b\x75\x42\x8f\xfb\xbc\x8a\x34\x1c\x62\xf6\x64\x56\x58\x80\x46\x61\xc3\x14\x26\xac\x28\x6c\x27\x3d\xc6\x0d\x29\x45\xab\x27\x26\x3a\x4c\xe1\xec\xda\xe6\x4c\x77\x83\x34\x28\xaa\x6c\xe8\x10\xa6\xe0\xd6\x67\xad\x26\xc5\x6a\xcc\x9e\x7b\x84\xcb\x7f\xd1\xf9\x87\xa4\x52\xb4\xcc\xe1\xb5\xfc\x83\xa5\x30\x63\x7a\x9e\x06\x87\x75\x75\x05\x0d\x93\xbc\x48\xe2\x8f\xd4\x89\x12\x24\x69\xb0\x3c\x41\x61\x05\x9a\xc0\x43\x89\xd3\x28\xec\x76\x27\xf3\x5f\x9a\x3d\x55\xfe\x5d\x17\x17\x0e\xe4\xa2\xda\xe5\xfb\xf4\xc9\xcc\xcd\x32\xd0\x66\x9d\x1d\x04\xd3\x0a\x2a\x94\x05\xc6\x16\x63\x6b\xfb\xc0\x35\x16\x9d\x46\xef\x0c\xcd\xec\x48\x2a\xf1\x4e\x56\x04\x53\xf0\x3d\x9a\xdd\xbb\x78\xe2\xd1\xe8\x6b\x3f\xe5\xc0\x4b\xdf\x03\xd6\xa7\xe6\xdf\x8f\x1e\x31\xe9\x41\xe8\x78\x7d\xef\xc6\xe0\xd3\xaf\xf3\x2d\x3b\xbe\x0f\x05\xde\x99\x99\xee\x44\x3f\x21\x37\x4c\x30\x59\x20\x4c\xf7\xa6\x36\xab\x51\xdb\x19\x72\x03\xee\x0a\x13\x0f\x85\x57\xce\xe2\x70\x39\xdd\x83\xdb\x44\xe1\x65\x11\x62\x17\x0a\x99\x46\x23\xa3\xd1\x15\x55\xb2\x53\x3a\x1f\x34\x9f\xec\x5f\x30\xc1\xe7\x64\xb8\x5b\xec\xd3\x23\xb5\x05\x14\x2d\x1a\x6e\x49\xe2\xd8\x9d\x87\xe4\x52\x43\x37\x98\xda\xec\x79\x97\xf9\x33\xef\x12\x1b\x6a\xb9\x76\xc3\x79\x79\x1e\x82\xac\xdc\x38\x27\x21\xb7\x83\xed\xd3\xff\xad\xcd\x26\xd8\xdf\x79\xe7\x9e\x34\xa0\xa4\xae\x9e\x5b\xc3\xb4\xc6\xf2\x06\x18\xdf\xc4\xa3\xdf\xb6\xc3\x9b\xb3\xcf\x36\xfa\x1d\x00\x00\xff\xff\xf7\x2f\x46\xaf\x07\x07\x00\x00"

func lockedtokensStakerRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerRegister_nodeCdc,
		"lockedTokens/staker/register_node.cdc",
	)
}

func lockedtokensStakerRegister_nodeCdc() (*asset, error) {
	bytes, err := lockedtokensStakerRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x31, 0x27, 0x4, 0x14, 0xa9, 0x6c, 0xb2, 0xcb, 0x5b, 0x3, 0x1e, 0x62, 0xbd, 0xae, 0x2, 0x66, 0x9f, 0xf, 0xac, 0xd3, 0x96, 0xbd, 0xa4, 0x9a, 0xb3, 0xb2, 0x51, 0xb9, 0xff, 0xbb, 0x55}}
	return a, nil
}

var _lockedtokensStakerRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfe\x14\x83\x0f\xc1\x86\xc5\xa7\x65\x0f\x61\xd3\xd0\x16\x42\x0f\x85\x86\xa6\x69\xcf\x13\x7b\x1c\x0b\x3b\x1a\x77\x34\x22\x29\x25\xdf\xbd\x58\xca\xbf\xb6\xf4\x58\x5d\x04\xd2\xcc\x7b\x3f\xde\x8c\xd9\xf4\x2c\x0a\xe9\x3d\x97\x2d\x55\x4f\xdc\x92\x75\x69\x72\x7c\x5d\x28\xb6\xc6\xae\xe7\xc2\xbb\xb7\xf3\xeb\xcc\xdb\xb5\x59\x75\x14\xaa\xd3\x24\x51\x41\xeb\xb0\x54\xc3\x36\xc3\x0d\x7b\xab\x63\x58\xce\xcc\xee\xdf\xdf\x1c\xde\x93\x04\x00\xa0\x23\x85\x86\xbb\x8a\xe4\x91\xea\x31\xa0\xd7\x26\xbb\xb4\x2c\xc2\xf5\xd0\x93\xe0\x20\xe3\xfe\xc0\x27\x93\xe2\xc5\x68\x53\x09\x6e\x73\x18\x7d\x6f\xbb\x0b\xc2\xd1\xa8\x17\xea\x51\x28\xc3\xb2\x8c\x20\xc1\xea\x86\x45\x78\xfb\x8c\x9d\xa7\x1c\x46\xd7\xf1\x6f\x80\x83\xc3\x71\xd4\xd5\xc5\x09\x10\x26\x70\xe8\x2f\x9c\xb2\xe0\x9a\x8a\x55\x50\xf8\xff\x1b\xe0\x57\x59\x2d\xbc\x19\xc3\x4f\xff\x8b\x88\x30\x47\x6d\xf2\x13\xf0\x70\xa6\x53\xe8\xd1\x9a\x32\x4b\x6f\xd9\x77\x15\x58\x56\x88\x9c\x20\x54\x93\x90\x2d\x09\x94\xe1\x42\x2b\x8d\x0a\xfb\x18\x16\xed\xa8\xf4\x4a\x17\x39\x0c\x73\x72\x8a\x2d\x49\x98\x39\x4c\xbe\x24\x73\xc8\x61\x11\x4a\xb2\x3c\x39\x07\x78\x6e\x2a\x84\x5e\x3d\x39\x5d\x5a\x17\xd7\xe7\xb4\x14\xf1\x3e\x22\xec\x93\x8f\x00\x00\x00\xff\xff\x72\x74\x6a\xa1\x7d\x02\x00\x00"

func lockedtokensStakerRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerRequest_unstakingCdc,
		"lockedTokens/staker/request_unstaking.cdc",
	)
}

func lockedtokensStakerRequest_unstakingCdc() (*asset, error) {
	bytes, err := lockedtokensStakerRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x2a, 0x24, 0xb1, 0x88, 0x4f, 0x15, 0xbd, 0x8, 0xd1, 0xa3, 0xf1, 0xd7, 0xa9, 0x43, 0xff, 0x4a, 0x37, 0xb7, 0x49, 0x55, 0x4a, 0x4c, 0x8f, 0xd5, 0x78, 0x60, 0x87, 0x8c, 0x20, 0x53, 0xfc}}
	return a, nil
}

var _lockedtokensStakerStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x75\x08\x12\x34\xca\xa5\xf4\x60\xec\x86\xa6\x10\x7a\x28\x69\xa8\xdb\xf4\xbc\x96\x46\x1f\x78\xbd\x23\x76\x47\xb5\x8b\xf1\x7f\x2f\xfb\x61\x7d\x99\x50\x53\xa8\x2e\x12\x3b\x3b\x6f\xde\x9b\xf7\xd4\xec\x5a\xd2\x0c\xf1\xa3\xa4\xfd\x77\xda\xa2\x8a\xa3\xfe\xa8\x53\x55\xb3\x91\x38\x3b\xfe\x42\xf9\x16\x0b\x77\x68\x86\xd3\x35\x8b\x6d\xa3\xaa\x67\x4d\x87\xdf\x71\x14\xb1\x16\xca\x88\x9c\x1b\x52\x89\xd8\x51\xa7\x78\x01\x3f\x1e\x9b\xc3\xfb\x77\x29\x1c\xa3\x08\x00\x40\x22\x43\x4d\xb2\x40\xfd\x0d\xcb\x05\x88\x8e\xeb\x64\x8c\x9d\xb9\xd7\xd7\x16\xb5\xb0\x30\xe6\x2d\x4c\x08\x65\x3f\x1b\xae\x0b\x2d\xf6\x29\xdc\x5c\xb6\x7d\x76\xc0\xc3\xa0\x5f\xa2\x93\x3c\xcc\x79\x15\xa9\x5f\x43\xf6\x62\x3b\x3c\x40\xab\xb1\x15\x1a\x13\x91\xe7\x5e\x89\xc3\x78\x20\xad\x69\xff\x22\x64\x87\x29\xdc\x7c\xf4\x35\xab\x0e\xc2\x63\x50\x96\x59\xaf\x10\x56\x10\xfa\x33\xc3\xa4\x45\x85\xd9\xc6\x21\x2c\xff\x87\xf2\x0f\x49\xa9\x69\xb7\x80\xd7\xea\x6b\x4f\xe1\x59\x70\x9d\xf6\x84\xed\x73\x7f\x0f\xad\x50\x4d\x9e\xc4\x9f\xa8\x93\x05\x28\x62\xf0\x3c\x41\x63\x89\x1a\x55\x8e\xc0\x04\x23\xac\x38\x8d\xa6\x9a\xcf\xcb\xfe\x8b\xe4\x6b\x4d\x38\x6b\xb9\x0b\x20\x77\xe5\xb9\xee\xca\x57\xf3\xb7\x6d\xc0\xb6\xcf\xc7\x61\x10\x14\x7b\x8c\x93\xd7\x81\x07\xcc\x3b\xc6\x91\x93\x36\x41\x86\xc5\x16\xb5\xcb\x37\xac\x66\xde\x06\x59\x6b\x77\x25\x19\xad\xc3\x36\x4a\x67\xc1\x83\x90\xc2\xae\xee\xa2\xb5\x42\xf6\x26\x85\x04\x85\x8b\x63\x94\xa6\x04\xff\x0f\xc1\x72\x35\x83\x3b\x46\x13\xf5\x23\x92\x99\xfb\x7e\x42\xbf\x29\xd3\xff\x85\xfe\x3d\x42\x3f\x01\x4a\x83\x76\x48\x12\x2e\xc1\xed\x74\x4a\x6a\xe7\x4e\x9c\xcd\x36\xe7\xca\x9c\xc0\x54\x5c\x81\x2d\x99\x86\x83\x81\xcb\xdb\x29\xc8\x3e\x58\x3e\xe3\x76\x31\x3e\xfd\x67\x91\xe3\xb6\xb9\xe0\xe3\xa4\x1a\x42\xf3\x44\x0c\xa8\xa8\xab\x6a\x9f\x14\x63\xb3\xee\x86\xbc\x89\x07\xb8\x53\x88\xcb\x29\xfa\x13\x00\x00\xff\xff\xb2\xdc\x59\xe0\x3f\x05\x00\x00"

func lockedtokensStakerStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_new_tokensCdc,
		"lockedTokens/staker/stake_new_tokens.cdc",
	)
}

func lockedtokensStakerStake_new_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0xaa, 0x29, 0x80, 0xde, 0x9d, 0xb7, 0x82, 0x6c, 0x74, 0x3e, 0x35, 0x92, 0xff, 0x18, 0xb8, 0x5e, 0x40, 0x44, 0xcb, 0x95, 0xcf, 0xd, 0x61, 0xdc, 0x39, 0x6f, 0x73, 0xb8, 0xf0, 0x64, 0x1}}
	return a, nil
}

var _lockedtokensStakerStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcb\x6a\xf3\x30\x10\x85\xf7\x7a\x8a\xc1\x8b\x60\xc3\x8f\x57\x3f\x5d\x84\xa6\xa1\x2d\x84\x2e\x0a\x0d\x49\x2f\xeb\x89\x3c\x8e\x85\x1d\x8d\x19\x8f\x49\x4a\xc9\xbb\x17\x4b\xb9\xb5\xa5\xcb\x6a\x23\x23\xcd\x9c\xf3\xf9\x8c\xdc\xa6\x65\x51\x48\x1e\xd9\xd6\x54\x3c\x73\x4d\xbe\x4b\xcc\xf1\x74\xa9\x58\x3b\xbf\x9e\x0b\xef\xde\xcf\xa7\xb3\xde\xaf\xdd\xaa\xa1\x50\x9d\x18\xa3\x82\xbe\x43\xab\x8e\x7d\x8a\x1b\xee\xbd\x8e\xe1\x65\xe6\x76\x57\xff\x33\xf8\x30\x06\x00\xa0\x21\x85\x8a\x9b\x82\x64\x41\xe5\x18\xb0\xd7\x2a\xbd\xb4\xcc\xc3\xf6\xd4\x92\xe0\x20\xd3\xfd\x83\x2f\x26\xf9\x9b\xd3\xaa\x10\xdc\x66\x30\xfa\xd9\xf6\x10\x84\xa3\x51\x2b\xd4\xa2\x50\x8a\xd6\x46\x90\x60\x75\xc7\x22\xbc\x7d\xc5\xa6\xa7\x0c\x46\xb7\xf1\x6e\x80\x83\xc3\xea\xa8\x29\xf3\x13\x20\x4c\xe0\xd0\x9f\x77\xca\x82\x6b\xca\x57\x41\xe1\xfa\x2f\xc0\x6f\xd2\x52\x78\x33\x86\xdf\xee\x97\x11\x61\x8e\x5a\x65\x27\xe0\x61\x4d\xa7\xd0\xa2\x77\x36\x4d\xee\xb9\x6f\x0a\xf0\xac\x10\x39\x41\xa8\x24\x21\x6f\x09\x94\xe1\x42\x2b\x89\x0a\xfb\x18\x16\xed\xc8\xf6\x4a\x17\x39\x0c\x73\xea\x14\x6b\x92\x30\x73\x98\x7c\x4b\xe6\x90\xc3\x32\x94\xa4\x99\x39\x07\x78\x6e\xca\xc3\xf7\x82\xb6\x28\xc5\xf1\x7f\x4e\xef\x22\xee\x47\x8a\xbd\xf9\x0c\x00\x00\xff\xff\x02\xbb\x78\x3f\x80\x02\x00\x00"

func lockedtokensStakerStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_rewarded_tokensCdc,
		"lockedTokens/staker/stake_rewarded_tokens.cdc",
	)
}

func lockedtokensStakerStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x47, 0xfc, 0x71, 0xcb, 0x90, 0x85, 0xe2, 0x87, 0xf3, 0x1a, 0x29, 0x4c, 0x92, 0xa4, 0x75, 0xac, 0xd, 0x2e, 0x29, 0x15, 0x64, 0xb3, 0xc0, 0xd2, 0x3a, 0xee, 0x9c, 0xea, 0x14, 0x6f, 0x7d}}
	return a, nil
}

var _lockedtokensStakerStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x83\x0f\xc1\x86\xc5\xa7\x65\x0f\x61\xb3\x61\x5b\x08\x3d\x14\x1a\x9a\xa6\x3d\x4f\xe4\x71\x2c\xec\x68\xcc\x78\x4c\x52\x4a\xbe\x7b\xb1\xe4\xfc\x69\x4b\x8f\xd5\x65\x8c\xa4\x79\xef\xe7\x37\x72\xbb\x96\x45\x21\xb9\x67\x5b\x53\xf1\xc4\x35\xf9\x2e\x31\xa7\xdd\x95\x62\xed\xfc\x76\x29\x7c\x78\xbd\xec\x2e\x7a\xbf\x75\x9b\x86\xc2\xed\xc4\x18\x15\xf4\x1d\x5a\x75\xec\x53\xdc\x71\xef\x75\x0a\xeb\x85\x3b\xfc\xf9\x9d\xc1\x9b\x31\x00\x00\x0d\x29\x54\xdc\x14\x24\x8f\x54\x4e\x01\x7b\xad\xd2\x6b\xcb\x3c\x94\x87\x96\x04\x07\x99\xee\x17\x7c\x30\xc9\x5f\x9c\x56\x85\xe0\x3e\x83\xc9\xd7\xb6\xbb\x20\x1c\x8d\x5a\xa1\x16\x85\x52\xb4\x36\x82\x04\xab\x1b\x16\xe1\xfd\x33\x36\x3d\x65\x30\xf9\x1f\xcf\x06\x38\x18\x57\x47\x4d\x99\x9f\x01\x61\x06\x63\x7f\xde\x29\x0b\x6e\x29\xdf\x04\x85\xbf\x3f\x01\xfe\x2f\x2d\x85\x77\x53\xf8\xee\x7c\x15\x11\x96\xa8\x55\x76\x06\x1e\xd6\x7c\x0e\x2d\x7a\x67\xd3\xe4\x96\xfb\xa6\x00\xcf\x0a\x91\x13\x84\x4a\x12\xf2\x96\x40\x19\xae\xb4\x92\xa8\x70\x8c\x61\xd1\x81\x6c\xaf\x74\x95\xc3\x30\xa7\x4e\xb1\x26\x09\x33\x87\xd9\xa7\x64\xc6\x1c\x56\xe1\x4a\x9a\x99\x4b\x80\x97\xa6\x3c\x7c\xaf\x7d\x28\xe3\xff\x9c\xdf\x45\xac\x27\x8a\xa3\x79\x0f\x00\x00\xff\xff\x2d\x8f\xc8\x11\x80\x02\x00\x00"

func lockedtokensStakerStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerStake_unstaked_tokensCdc,
		"lockedTokens/staker/stake_unstaked_tokens.cdc",
	)
}

func lockedtokensStakerStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x7, 0x6b, 0x2a, 0x8f, 0x92, 0x5b, 0xa9, 0x6f, 0x6f, 0x15, 0xd3, 0x4e, 0xf2, 0xa2, 0x33, 0xf, 0x12, 0x66, 0xc9, 0xc4, 0x72, 0x3b, 0xf2, 0xed, 0xab, 0x6f, 0x12, 0xdb, 0x2c, 0xf6, 0x45}}
	return a, nil
}

var _lockedtokensStakerUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4f\x6b\xf3\x30\x0c\xc6\xef\xfe\x14\x22\x87\xe2\xc0\x4b\x3e\x40\x79\xbb\xd2\x0d\xc6\x0e\x83\x95\x75\x6c\x67\xd5\x51\x9a\x50\xd7\x0a\x8a\x4c\x3b\x46\xbf\xfb\x48\x9c\xfe\xd9\xc6\x8e\xd3\xc5\x58\xf2\xf3\xe8\xc7\xe3\x66\xd7\xb2\x28\x64\x8f\xec\xb6\x54\xbe\xf0\x96\x42\x97\x99\x53\xf7\x3e\x86\x4d\xb3\xf6\x34\xf4\x33\x63\x54\x30\x74\xe8\xb4\xe1\x60\x73\xf8\x30\x06\x00\xc0\x93\x42\xcd\xbe\x24\x79\xa6\x6a\x0a\x18\xb5\xb6\xd7\x76\xc5\x70\x3c\xb5\x24\xd8\x0b\xbb\x7f\xf0\xc5\xb6\x78\x6b\xb4\x2e\x05\xf7\x39\x4c\x7e\xca\x1e\x06\xe3\xb4\xa8\x15\x6a\x51\xc8\xa2\x73\x1c\x83\x8e\xab\x6e\x59\x84\xf7\xaf\xe8\x23\xe5\x30\x59\xa4\x59\x0f\x07\x63\x75\xe4\xab\xe2\x0c\x08\x33\x18\xf5\x45\xa7\x2c\xb8\xa1\x62\x3d\x38\xfc\xff\x0b\xf0\x1b\x5b\x09\xef\xa6\xf0\xdb\x7c\x95\x10\x96\xa8\x75\x7e\x06\xee\x6b\x3e\x87\x16\x43\xe3\x6c\x76\xc7\xd1\x97\x10\x58\x21\x71\x82\x50\x45\x42\xc1\x11\x28\xc3\x95\x57\x96\x1c\x8e\x29\x2c\x3a\x90\x8b\x4a\x57\x39\xf4\xff\xd4\x29\x6e\x49\x96\xc2\x87\x77\x98\x7d\x4b\x66\xcc\x61\x35\x3c\xb1\xb9\xb9\x04\x78\x11\x15\x31\x0c\xb7\x85\xf7\xf6\xb4\xee\x68\x3e\x03\x00\x00\xff\xff\x40\xd9\x15\x73\x45\x02\x00\x00"

func lockedtokensStakerUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerUnstake_allCdc,
		"lockedTokens/staker/unstake_all.cdc",
	)
}

func lockedtokensStakerUnstake_allCdc() (*asset, error) {
	bytes, err := lockedtokensStakerUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x9d, 0x39, 0x6, 0xb0, 0x13, 0x75, 0x8b, 0xc, 0xb, 0x5c, 0x52, 0x3a, 0x2, 0x39, 0x3e, 0x3d, 0xa9, 0x71, 0xa7, 0xf5, 0x6b, 0x68, 0xda, 0xa8, 0x8b, 0xed, 0xf, 0x29, 0x2d, 0x3c, 0x7d}}
	return a, nil
}

var _lockedtokensStakerUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcd\x6a\xeb\x40\x0c\x85\xf7\xf3\x14\xc2\x8b\x60\xc3\xc5\x0f\x10\x6e\x6e\xc8\x2d\x94\x2e\x4a\x1b\x9a\xd2\xae\x27\x33\xb2\x3d\xd8\x19\x19\x8d\x06\xa7\x94\xbc\x7b\xf1\x4f\x12\xb7\xa5\xcb\x6a\x63\x90\xac\x73\x3e\xce\xc8\x1d\x5a\x62\x81\xe4\x9e\x4c\x8d\xf6\x99\x6a\xf4\x21\x51\xe7\xee\x6d\xf4\xa5\xdb\x37\x38\xf4\x13\xa5\x84\xb5\x0f\xda\x88\x23\x9f\x7a\xec\x36\xd6\x32\x86\xb0\x84\x9d\xb0\xf3\x65\x06\xef\x4a\x01\x00\x34\x28\x50\x51\x63\x91\x9f\xb0\x58\x82\x8e\x52\xa5\x73\x83\x7c\xf8\x3c\xb6\xc8\xba\x97\x0a\x7f\xe0\x93\x51\xfe\xea\xa4\xb2\xac\xbb\x0c\x16\xdf\xd7\xee\x06\xe1\xd1\xa8\x65\x6c\x35\x63\xaa\x8d\xa1\xe8\x65\xb2\xfa\x4f\xcc\xd4\xbd\xe8\x26\x62\x06\x8b\xcd\x38\xeb\xe1\x60\xaa\x80\x4d\x91\x5f\x00\x61\x05\xd3\x7e\x1e\x84\x58\x97\x98\xef\x07\x85\xbf\xbf\x01\xfe\x2f\x2d\x98\x0e\x4b\xf8\x69\xbe\x1b\x11\xb6\x5a\xaa\xec\x02\xdc\xd7\x7a\x0d\xad\xf6\xce\xa4\xc9\x0d\xc5\xc6\x82\x27\x81\x91\x13\x18\x0b\x64\xf4\x06\x41\x08\x66\x5a\xc9\xa8\x70\x1a\xc3\xc2\x23\x9a\x28\x38\xcb\xa1\x7f\xa7\x20\xba\x46\xde\x32\x1d\xdf\x60\xf5\x25\x99\x29\x87\xdd\xf0\x4b\x9a\xa9\x6b\x80\xd7\xa5\x3c\xb6\x56\x0b\x3e\xa0\x74\xc4\xb5\xf3\xe5\x74\x14\xb3\xfb\x38\x53\x9c\xd4\x47\x00\x00\x00\xff\xff\x43\xb8\xb0\x57\x6e\x02\x00\x00"

func lockedtokensStakerUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerUpdate_networking_addressCdc,
		"lockedTokens/staker/update_networking_address.cdc",
	)
}

func lockedtokensStakerUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := lockedtokensStakerUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xf5, 0x1d, 0x39, 0x4c, 0x38, 0xb, 0x41, 0x66, 0x7, 0xb9, 0x76, 0xc9, 0x38, 0x57, 0x24, 0xd4, 0xe7, 0x36, 0xeb, 0x78, 0x14, 0x2a, 0xd4, 0x12, 0xab, 0x83, 0x9e, 0x9c, 0x35, 0x27, 0x5f}}
	return a, nil
}

var _lockedtokensStakerWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6b\xeb\x30\x0c\xc7\xef\xf9\x14\x22\x87\x92\xc0\x7b\xee\xe5\xf1\x0e\xa5\x5d\xd9\x06\x65\x87\xc1\x4a\xbb\x75\x67\x37\x51\x9a\x50\xd7\x0a\x8a\xd3\x74\x8c\x7e\xf7\x11\x3b\xc9\xd2\x6c\xbd\x0c\xe6\x8b\x41\xb2\xfe\xfa\xfd\x25\x67\x87\x9c\xd8\x80\xff\x48\xd1\x1e\xe3\x67\xda\xa3\x2e\x7c\xaf\x8d\x2e\x14\x55\x36\xd6\x0b\x95\x7a\x97\x6d\x15\x36\x61\xcf\xb0\xd4\x85\x8c\x4c\x46\x3a\x90\x07\x2a\xb5\x99\xc0\xcb\x22\x3b\xfd\xff\x17\xc2\xbb\xe7\x01\x00\x28\x34\x90\x92\x8a\x91\x57\x98\x4c\x40\x96\x26\x0d\xfa\xfd\x84\xbd\x9e\x72\x64\x59\xcb\x14\x7f\xe0\xa2\x89\x78\xcd\x4c\x1a\xb3\xac\x42\x18\x7d\x2d\x7b\xb0\xc2\x5d\x9f\xa3\x2c\x95\xb1\x6d\x46\x1d\xbc\xd8\xd4\x41\xc7\x92\x33\xe6\x92\x31\x90\x51\xe4\x58\x2d\xcd\x1d\x31\x53\xb5\x91\xaa\xc4\x10\x46\xb7\x2e\x57\xf3\x43\x73\x0a\x54\x89\xe8\x3c\xc0\x0c\x9a\x7a\x51\x18\x62\xb9\x43\xb1\xb5\x0a\xd3\xdf\xf0\x76\x13\x24\x4c\x87\x09\x5c\xcb\xaf\x1d\xc2\x52\x9a\x34\xec\x80\xeb\x33\x9f\x43\x2e\x75\x16\x05\xfe\x3d\x95\x2a\x06\x4d\x06\x1c\x27\x30\x26\xc8\xa8\x23\x04\x43\xd0\xd3\xf2\x43\xef\xd2\x73\x3b\xcf\xeb\x96\x87\x73\x6e\x71\xc7\xcd\xbb\x71\xd2\xe6\x6d\xfa\x67\x88\x5d\x0f\x38\xd6\x4b\xf2\x9d\xca\xd9\xc1\xe2\x09\xa3\xd2\x60\x6f\x5d\xf5\x4f\x28\x8c\xdc\x23\x2f\x99\x4e\x6f\x30\x1b\x2c\xb0\x61\x5f\xdb\x27\x41\xdf\xf3\x67\x91\xa8\x9a\xd5\xac\xb0\x92\x1c\xb7\x93\xef\x3e\xb9\xbb\xc3\xef\xc7\x25\x62\xcc\xa9\xc8\x4c\x33\x8b\xe9\xdf\x41\xff\x56\x7b\xa8\xd6\xfa\x3a\x7b\x1f\x01\x00\x00\xff\xff\xe7\x57\x43\x9e\x99\x03\x00\x00"

func lockedtokensStakerWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_rewarded_tokensCdc,
		"lockedTokens/staker/withdraw_rewarded_tokens.cdc",
	)
}

func lockedtokensStakerWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x27, 0xf1, 0x93, 0xed, 0x96, 0x61, 0x29, 0x18, 0xc8, 0x11, 0xd8, 0x28, 0x9a, 0xd9, 0x4e, 0x58, 0xd3, 0x57, 0xd7, 0xc8, 0x5e, 0xcd, 0xb, 0xb7, 0x26, 0xfd, 0x4a, 0xa8, 0x4b, 0x72, 0x57}}
	return a, nil
}

var _lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xf3\x40\x0c\xc6\xf7\xfb\x14\xc2\x43\xb0\xe1\xc5\xd3\x4b\x87\xd0\x34\xb4\x85\xd0\xa1\xd0\x90\xf4\xcf\xac\x9c\xe5\xd8\xc4\x39\x19\x59\xc6\x29\x25\xdf\xbd\xf8\xce\x49\xdc\x96\x8e\xd5\x22\x90\xac\x47\x3f\x3d\xbe\x72\x5f\xb3\x28\x44\x8f\x6c\x77\x94\x3d\xf3\x8e\x5c\x13\x99\x53\x75\xd1\xba\x6d\xb9\xa9\xc8\xd7\x23\x63\x54\xd0\x35\x68\xb5\x64\x17\xe3\x9e\x5b\xa7\x53\x78\x59\x94\x87\xab\xff\x09\x7c\x18\x03\x00\x50\x91\x42\xc1\x55\x46\xb2\xa2\x7c\x0a\xd8\x6a\x11\x8f\xc5\x53\x9f\x9e\x6a\x12\xec\x65\x9a\x7f\xf0\x65\x49\xfa\x56\x6a\x91\x09\x76\x09\x4c\x7e\x8e\x3d\x78\xe1\xb0\xa8\x16\xaa\x51\x28\x46\x6b\x03\x88\x5f\x75\xc7\x22\xdc\xbd\x62\xd5\x52\x02\x93\xdb\xd0\xeb\xe1\x60\x88\x86\xaa\x3c\x3d\x03\xc2\x0c\x86\xf9\xb4\x51\x16\xdc\x52\xba\xf1\x0a\xd7\x7f\x01\x7e\x13\xe7\xc2\xfb\x29\xfc\xd6\x5f\x07\x84\x25\x6a\x91\x9c\x81\xfb\x98\xcf\xa1\x46\x57\xda\x38\xba\xe7\xb6\xca\xc0\xb1\x42\xe0\x04\xa1\x9c\x84\x9c\x25\x50\x86\x91\x56\x14\x14\x8e\xc1\x2c\x3a\x90\x6d\x95\x46\x3e\xf4\xff\xa9\x51\xdc\x91\x2c\x85\x0f\xef\x30\xfb\xe6\xcc\xe0\xc3\xda\x7f\x12\x27\xe6\x62\xe0\x65\x28\xed\x86\x9b\x57\xd4\xa1\x64\xa7\x93\xce\x4f\x23\xe4\x13\xc8\xd1\x7c\x06\x00\x00\xff\xff\x5f\xca\x8b\x12\x6d\x02\x00\x00"

func lockedtokensStakerWithdraw_rewarded_tokens_lockedCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc,
		"lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc",
	)
}

func lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_rewarded_tokens_lockedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x4d, 0x7f, 0x9b, 0xc2, 0x8d, 0x75, 0x49, 0x1d, 0x4d, 0x40, 0xce, 0x8e, 0x12, 0x7d, 0xe2, 0xe, 0xc0, 0xff, 0xc0, 0x74, 0x82, 0xf3, 0xa8, 0x83, 0xc0, 0xf5, 0xe4, 0xa4, 0xba, 0x9d, 0x27}}
	return a, nil
}

var _lockedtokensStakerWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x4b\xf3\x40\x10\xc6\xef\xfb\x29\x86\x1c\x4a\x02\x2f\x39\xbd\x78\x28\xd6\xa2\x42\xf1\x20\x58\xac\xd5\xf3\x74\x33\x69\x42\xd3\x9d\x30\x99\xa5\x15\xe9\x77\x97\xec\xa6\x7f\x54\x3c\x3a\x97\x81\x99\xcc\x33\xbf\x79\xb2\xf5\xb6\x65\x51\x48\x1e\xd9\x6e\xa8\x78\xe1\x0d\xb9\x2e\x31\xc7\xea\xcc\xbb\x75\xbd\x6a\x28\xd4\x13\x63\x54\xd0\x75\x68\xb5\x66\x97\xe2\x96\xbd\xd3\x31\x2c\x67\xf5\xfe\xea\x7f\x06\x1f\xc6\x00\x00\x34\xa4\x50\x71\x53\x90\x3c\x53\x39\x06\xf4\x5a\xa5\x97\xe2\x79\x48\x4f\x2d\x09\xf6\x32\xdd\x3f\xf8\xb2\x24\x7f\xab\xb5\x2a\x04\x77\x19\x8c\x7e\x8e\x3d\x04\xe1\xb8\xa8\x15\x6a\x51\x28\x45\x6b\x23\x48\x58\x75\xc7\x22\xbc\x7b\xc5\xc6\x53\x06\xa3\xdb\xd8\xeb\xe1\x60\x88\x8e\x9a\x32\x3f\x01\xc2\x04\x86\xf9\xbc\x53\x16\x5c\x53\xbe\x0a\x0a\xd7\x7f\x01\x7e\x93\x96\xc2\xdb\x31\xfc\xd6\x5f\x44\x84\x39\x6a\x95\x9d\x80\xfb\x98\x4e\xa1\x45\x57\xdb\x34\xb9\x67\xdf\x14\xe0\x58\x21\x72\x82\x50\x49\x42\xce\x12\x28\xc3\x85\x56\x12\x15\x0e\xd1\x2c\xda\x93\xf5\x4a\x17\x3e\xf4\xff\xa9\x53\xdc\x90\xcc\x85\xf7\xef\x30\xf9\xe6\xcc\xe0\xc3\x22\x7c\x92\x66\xe6\x6c\xe0\x79\x28\xdf\x0d\x37\x2f\x5d\xa8\x0e\x27\x9d\x9e\x46\xcc\x47\x90\x83\xf9\x0c\x00\x00\xff\xff\x70\xfe\x3b\x3c\x6d\x02\x00\x00"

func lockedtokensStakerWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensStakerWithdraw_unstaked_tokensCdc,
		"lockedTokens/staker/withdraw_unstaked_tokens.cdc",
	)
}

func lockedtokensStakerWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensStakerWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/staker/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x81, 0x10, 0xf5, 0x64, 0xbe, 0xa9, 0x87, 0xcd, 0xa4, 0x96, 0x1a, 0xb, 0x8, 0xd, 0x75, 0x9d, 0x1d, 0x98, 0xbf, 0x1f, 0xb, 0xd, 0xf3, 0xb4, 0x1e, 0x48, 0xcd, 0x8a, 0xeb, 0x50, 0xb9}}
	return a, nil
}

var _lockedtokensUserDeposit_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6f\xd4\x3e\x10\xc5\xef\xf9\x14\xaf\x39\xac\x12\xe9\xff\x4f\x2f\x88\xc3\xaa\x50\x01\x52\xc5\x81\x03\x82\x52\xce\xb3\xce\x64\x63\x9a\xf5\x44\xf6\xa4\xa9\x40\xfd\xee\xc8\x4e\x36\xec\x56\x0a\x15\xbe\x38\xf2\xd8\xef\x3d\xff\x26\xb6\x87\x5e\xbc\x22\xbf\x19\xdc\xde\xee\x3a\xbe\x95\x7b\x76\x79\xb6\x2c\x77\x32\x3e\x5b\xfa\x24\xe6\x9e\xeb\xb4\x18\xf2\x2c\x53\x4f\x2e\x90\x51\x2b\xae\xa0\x83\x0c\x4e\xb7\xf8\x76\x63\x1f\x5f\xbf\x2a\xf1\x2b\xcb\x00\xa0\x63\x45\x2b\x5d\xcd\xfe\x0b\x37\x5b\x6c\x4e\x15\xaa\x34\x7d\x4c\xd5\x65\xf3\x03\x0d\x9d\xa6\xbd\x34\x68\x5b\x9c\x65\xab\xbe\x5b\x6d\x6b\x4f\x63\x89\xcd\x92\xae\xba\x8b\x27\x26\xb7\xde\x73\x4f\x9e\x0b\x32\x46\x67\x81\xf7\xe2\xbd\x8c\x77\xd4\x0d\x5c\x62\xf3\xce\x98\x18\x33\xc6\xc3\x3c\x02\x77\x4d\xb5\x44\xc4\x1b\xc4\xc3\x55\x50\xf1\xb4\xe7\x6a\x97\x8e\x5f\xad\xe6\x7e\x5b\x34\x5e\x0e\x5b\xac\xd5\xbf\x4e\x3a\x9f\x49\xdb\x72\xb1\x8c\xe3\xfa\x1a\x3d\x39\x6b\x8a\xfc\x03\x39\x27\x8a\x9a\x7b\x09\x56\xa1\x49\x03\x2a\x20\x74\x49\x35\x26\x8a\xa9\x2f\x70\xdb\x32\x82\xdd\x3b\xf6\x90\x06\xda\x32\x4e\x5a\x80\xfc\xcc\xe0\x38\x2a\x23\xce\x90\x16\x79\x2d\x1c\x10\x9d\x5a\x7a\x60\x90\x03\x85\x20\xc6\x92\x72\xfd\xcc\xe8\x3f\xe4\xe5\xdf\xb5\x82\x44\x77\xcf\xb0\x51\x72\x4c\x9f\x2a\x7f\xee\x10\x93\x4d\x2c\xf2\xb2\xcc\xce\x59\x1f\x3b\xbc\x82\xfa\x9f\xda\x7e\xc4\x7f\x39\x8b\x5c\x36\xc7\x7a\x2a\xaf\x21\x3f\xe1\xb8\x50\x89\x0a\x0c\xc2\xe2\x80\x24\x01\xd9\xfd\x60\xa3\xa0\xe9\x56\x3d\x69\xfb\x12\xe8\x95\x30\xd5\x8b\x54\x4f\x62\x1d\x86\xa0\xb0\xce\xaa\xa5\xce\xfe\xe4\xe8\x6d\xfd\xb1\x3f\x18\xad\xb6\xd0\xd6\x86\xe9\xb9\xa0\xb1\x3e\xe8\x45\x44\x1d\xf5\x9e\x26\xe0\xfc\xc8\x66\x50\x5e\xfd\xd5\xab\xb9\x5b\x33\xc2\xab\xff\xcf\xba\x53\x8d\x33\xf4\xe5\x65\x4f\xf3\xe2\xf1\x94\xfd\x0e\x00\x00\xff\xff\xb3\xfa\x94\xc3\x40\x04\x00\x00"

func lockedtokensUserDeposit_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserDeposit_tokensCdc,
		"lockedTokens/user/deposit_tokens.cdc",
	)
}

func lockedtokensUserDeposit_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensUserDeposit_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/deposit_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xcd, 0xb7, 0x9c, 0x7a, 0xb0, 0x16, 0x8e, 0xea, 0xab, 0x24, 0xad, 0xbb, 0xd, 0x63, 0xdc, 0x9d, 0x1, 0x29, 0xe9, 0x1f, 0xd5, 0x8, 0x93, 0xd2, 0xa9, 0xbc, 0x8, 0x57, 0xab, 0x83, 0xec}}
	return a, nil
}

var _lockedtokensUserGet_locked_account_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4e\xeb\x30\x10\x86\xf7\x3e\xc5\xaf\x2c\x9e\xec\x4d\x0e\xf0\x04\x54\x15\x1b\x90\xba\xa8\x10\x17\x70\xec\x49\xb1\xea\x7a\xa2\xf1\x58\x2c\x10\x77\x47\x4d\x4a\xa0\xc0\x6c\x6c\x59\xf3\x7d\xbf\x67\xd2\x69\x62\x51\x74\x3b\x0e\x47\x8a\xcf\x7c\xa4\x52\x3b\x63\x7c\x08\x54\xab\xf5\x39\x3b\x8c\xad\xe0\xe4\x53\xb1\x3e\x04\x6e\x45\xff\x63\x1b\xa3\x50\xad\x6e\xbd\xe1\xcd\x18\x00\xc8\xa4\xc8\xb3\x69\xbb\xf4\x3e\x96\x91\x9f\x68\xc4\x2d\x0e\xa4\x97\xb7\x4f\x8f\x9b\x91\x73\xf5\xc1\x4f\x7e\x48\x39\x69\xa2\xda\x0f\x2c\xc2\xaf\x37\xff\xbe\x7f\xa9\x9f\x8f\x07\xce\x91\xe4\xce\xae\xe0\xb9\xae\xda\x76\x3f\xc3\xf7\x6d\xc8\x29\xec\xbd\xbe\xac\xd0\x57\xee\x66\x83\xc9\x97\x14\x6c\x77\xcf\x2d\x47\x14\x56\x2c\xe9\xf0\x10\x1a\x49\xa8\x04\x82\x32\xa6\x59\x83\x5f\xfa\xce\x2d\x83\x0b\x69\x93\xf2\xe7\xec\xfd\x81\xf4\x8a\xbb\xec\xcc\x3a\xf3\x6e\x3e\x02\x00\x00\xff\xff\x07\x36\xed\x4e\x7f\x01\x00\x00"

func lockedtokensUserGet_locked_account_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_locked_account_addressCdc,
		"lockedTokens/user/get_locked_account_address.cdc",
	)
}

func lockedtokensUserGet_locked_account_addressCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_locked_account_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_locked_account_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0xcd, 0x6e, 0x84, 0xbc, 0x4c, 0xe8, 0x2, 0xf1, 0x8a, 0x85, 0x63, 0xae, 0xfc, 0xb, 0x69, 0x33, 0x87, 0x87, 0x21, 0xd2, 0x6c, 0xab, 0xf4, 0xe7, 0x1c, 0xb8, 0xe1, 0x53, 0x89, 0x8, 0x42}}
	return a, nil
}

var _lockedtokensUserGet_locked_account_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xf3\x40\x10\x86\xef\xfb\x2b\x5e\x72\xf8\x48\x2e\x39\x7d\x78\x28\x6a\xa9\x82\x28\xf4\x50\x44\x7f\xc0\x64\x33\xa9\x4b\xb7\x33\x61\x77\x16\x05\xf1\xbf\x4b\x13\xad\x56\x9d\xcb\xc2\x32\xcf\xf3\xce\x1b\xf6\xa3\x26\x43\xb5\x56\xbf\xe3\xfe\x41\x77\x2c\xb9\x72\x8e\xbc\xe7\x9c\x6b\x8a\xb1\xc1\x50\x04\x7b\x0a\x52\x93\xf7\x5a\xc4\x16\x58\xf5\x7d\xe2\x9c\x9b\x05\x1e\x6f\xc2\xcb\xd9\x7f\xbc\x3a\x07\x00\x91\x0d\x71\x12\xad\xe6\xd5\x3b\x19\xf4\x9e\x07\x5c\x60\xcb\xf6\xf1\xf7\xa9\x69\x26\xe4\x30\xad\xa7\x91\xba\x10\x83\x05\xce\x6d\xa7\x29\xe9\xf3\xf9\xbf\xef\x17\xb5\xd3\x73\xab\xb1\xe7\x74\x59\x1f\xc1\xc3\x9c\xac\xad\x7f\x86\x6f\x4a\x17\x83\xdf\x90\x3d\x1d\xa1\xaf\xdc\xe5\x12\x23\x49\xf0\x75\x75\xad\x25\xf6\x10\x35\xcc\xe9\x20\x24\x1e\x38\xb1\x78\x86\x29\xc6\x49\x83\x5f\xfa\xaa\x99\x8b\x27\xb6\x92\xe4\xcf\xee\xed\x96\xed\x84\xbb\xa2\x48\xe2\xb9\x6e\xdc\x9b\x7b\x0f\x00\x00\xff\xff\x1d\xd0\xf8\x22\x7e\x01\x00\x00"

func lockedtokensUserGet_locked_account_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_locked_account_balanceCdc,
		"lockedTokens/user/get_locked_account_balance.cdc",
	)
}

func lockedtokensUserGet_locked_account_balanceCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_locked_account_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_locked_account_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xff, 0xe, 0x6b, 0x73, 0x74, 0x8b, 0xd7, 0x57, 0xc3, 0x90, 0x84, 0xd1, 0xe7, 0x2e, 0x75, 0x71, 0x6b, 0x5, 0x27, 0xe0, 0x4e, 0x9c, 0x14, 0xe8, 0x57, 0x2b, 0x6c, 0x67, 0x74, 0xbb, 0xa7}}
	return a, nil
}

var _lockedtokensUserGet_multiple_unlock_limitsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x3d\xc8\xee\x65\x4f\xe2\xa1\x58\x4b\x11\x44\xa1\x87\x22\xf6\x54\x7a\x48\xb3\xb3\x35\x34\x9d\x09\x49\x56\x85\xd2\xff\x2e\x9b\x6d\xd5\x55\xe7\xb2\x4b\xde\xbc\x97\x2f\xcf\x1e\xbc\x84\x84\x62\x21\x66\x4f\xcd\x8b\xec\x89\x63\xa1\x94\x36\x86\x62\x2c\xb5\x73\x15\xda\x8e\x71\xd0\x96\x4b\x6d\x8c\x74\x9c\xe2\x04\xeb\x79\xd3\x04\x8a\x71\x53\x4d\xb0\x5e\x3d\xd8\x8f\x9b\xeb\x0d\x8e\x4a\x01\xc0\x9b\x0e\x70\xf6\x60\xf3\xde\x45\x9b\x62\xbd\x19\xe4\x56\x02\xce\x41\xb0\x7c\xf9\x8d\x38\x66\xb5\x1f\x47\x09\x2e\xe3\xcc\x07\xf1\x89\x5b\x79\xa6\x16\x53\xec\x28\x9d\xcf\x2e\x30\xd5\x97\xad\x9f\xda\x68\xaf\xb7\xd6\xd9\x64\x29\xd6\x5b\x09\x41\xde\x6f\xaf\x7e\xbe\xad\xce\x9f\x47\x71\x0d\x85\xbb\x72\x64\xee\x67\xb4\xba\xf8\x0d\xb1\xec\xb6\xce\x9a\xa5\x4e\xaf\x23\xe3\x98\x61\x36\x83\xd7\x6c\x4d\x59\xdc\x4b\xe7\x1a\xb0\x24\x0c\x24\xd0\x08\xd4\x52\x20\x36\x84\x24\xf0\x39\x0e\x7f\xae\x29\x2a\xf5\x5d\x46\x6e\xb2\xd6\xde\x13\x37\xe5\x7f\xb5\xd4\x3b\x4a\x2b\xee\x95\x45\xbf\x5b\x56\x03\xce\x69\xc8\x08\x94\xba\xc0\xe7\x18\x75\x52\x9f\x01\x00\x00\xff\xff\xfa\x74\x3c\xea\xf0\x01\x00\x00"

func lockedtokensUserGet_multiple_unlock_limitsCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_multiple_unlock_limitsCdc,
		"lockedTokens/user/get_multiple_unlock_limits.cdc",
	)
}

func lockedtokensUserGet_multiple_unlock_limitsCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_multiple_unlock_limitsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_multiple_unlock_limits.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x9b, 0x6e, 0xc1, 0xda, 0xeb, 0x96, 0xaa, 0x4c, 0x28, 0x28, 0x77, 0xce, 0x62, 0x9f, 0x3e, 0x50, 0xbb, 0x7, 0xd0, 0x64, 0xe4, 0x59, 0x31, 0xce, 0x26, 0x75, 0xbe, 0x2, 0x73, 0xa5, 0xf2}}
	return a, nil
}

var _lockedtokensUserGet_total_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x6f\x9b\x30\x14\xbe\xf3\x2b\x9e\x7a\xd8\x40\x8b\x48\x0f\xd3\x0e\xd1\x52\xa9\x13\xea\x16\xa9\x5a\xab\x2e\xdb\xce\x06\x9b\xc4\xaa\x63\x23\xdb\xb4\x9b\xaa\xfc\xf7\x09\x83\x0d\x26\x26\x4d\xdb\x71\x68\xa8\xfd\xde\xf7\x7d\x7e\x9f\xdf\x83\xee\x2a\x21\x35\x9c\x5d\xd5\x7c\x43\x73\x46\xd6\xe2\x9e\xf0\xb3\xc8\x2d\x33\xf1\x18\x58\x5a\x65\x6b\x94\x33\xf2\x43\xa3\x7b\xca\x37\xfd\xde\xb5\x28\xee\x09\x36\x09\xea\x2c\x8a\xe6\x73\x58\x6f\xa9\x02\x55\x48\x5a\x69\xd8\x10\xad\x40\x6f\x09\xac\x6f\xd6\x97\xd7\xc0\xeb\x5d\x4e\x24\x88\x12\xae\xae\x6f\x7e\x03\xe2\x80\x8a\x42\xd4\x5c\x83\x78\xe4\x6a\x06\xa8\x90\x42\x29\xa8\x39\x33\xa8\x33\xb0\xbf\x88\x63\x50\x2d\x75\x6a\x48\x2e\x31\x56\x50\x57\x0d\xb6\x22\x1d\xae\x5a\x98\x2d\x6d\xb4\x00\xe5\xc0\x85\xdc\x21\x66\x39\x8e\xed\x59\xf0\xa3\x31\x98\x30\xb2\x41\xfa\x20\x4c\x6d\x91\x24\x38\x4c\xe3\xef\x85\x69\x46\x31\x03\x9a\x28\x42\x45\x41\x94\x8a\x11\x63\x09\x94\x35\x87\x1d\xa2\x3c\x46\x18\x4b\xa2\xd4\xa2\xa9\x42\xf3\x92\x2c\xe0\xe7\x15\xfd\xf3\xe9\x23\x3c\x45\x11\x00\xc0\x03\x92\xa0\xea\x1d\x2c\xe1\x3c\x3d\x6f\x97\x18\xd1\x8e\x61\xd9\xf8\x72\xd9\xfe\x63\xc1\x92\x36\x8c\x96\x26\xf2\x01\xd5\x4c\xdf\x91\x12\x96\x36\x29\x2d\x50\x85\x72\xca\xa8\xa6\x44\xa5\xb9\x90\x52\x3c\x7e\x7e\xe7\x2e\x4b\xfa\xab\xc9\xb8\x88\xe7\x55\x9d\x33\x5a\xcc\x4b\xbb\xf1\x05\x31\xc4\x0b\x92\xc0\x93\xc1\x6f\x9e\x56\x59\xf3\xf7\x83\x23\x4a\xf3\x36\xce\x04\xed\x5b\x2d\xf3\x39\x7c\x25\xba\x2d\x14\x74\xfb\x50\x4a\xb1\x33\x37\xca\x5e\x12\x2b\xf0\xbd\x02\x2e\x30\xb1\x25\x86\x4a\x08\xa6\xdc\xd1\x45\xa5\xa9\xe0\x88\x7d\x17\xd8\xdc\x61\x22\xbd\xd3\x39\x6d\xe1\x63\x3e\x1d\x76\x40\xda\x23\xdd\x9a\x23\xef\x2f\x62\x87\xd2\x3c\x27\xa4\xdc\x22\xbd\x75\x39\xbe\x01\x7c\xa4\x33\xac\xbf\xaf\xa9\xcd\x59\xf1\x52\xc0\x72\x8a\xbc\xd9\x8d\x4d\x58\xb6\xf0\x29\x52\x8a\x93\xa0\x41\x16\x34\xd5\x42\x23\xd6\xf6\xf9\x8a\xdf\x91\x42\x48\x1c\x27\x6f\xb2\xab\xbb\xe8\x42\x3e\xe3\x59\x66\xe3\xfe\x87\x65\x0e\x2c\xec\xda\xf0\xfe\x76\x69\x2e\x63\xc2\x2a\xec\xcb\x0b\xaa\xf6\x8d\x72\x19\xd3\x6e\x65\xc3\x10\x5f\xa2\xf5\x6f\xc8\x9b\xb6\x8b\x33\x2f\xb0\xa7\x19\x47\x53\x3c\x38\x4b\xc8\x75\x4f\xe1\x94\xf5\x21\xf3\xb7\x04\x7c\x9f\xa1\x2d\x28\x38\x93\xfe\x1e\xf8\xdb\x7e\x42\xba\x79\xd4\x10\xbe\xc4\xe7\xe1\xf7\x27\x35\x3f\xdf\x04\xc3\x44\x8e\x7c\xf5\xc2\x0e\x08\x9f\x6d\x47\x16\x96\x78\xf4\x04\xbd\xe7\xed\xf7\x2a\x54\x9c\xe1\xd4\x1b\x7b\x10\xe2\x4c\x37\x44\x7b\x64\xdd\x78\x8d\x3b\xb9\x23\x36\xdb\x85\xa2\x04\xc4\x98\x59\x3a\x9c\x91\x7d\x8f\xfa\xe2\x1c\xe0\x60\x24\xad\x32\x58\x4e\x0a\x33\x13\x26\x8b\x87\xa3\xfe\x0d\xa3\x69\x95\x25\x1e\xcc\x0b\x87\xd2\xe0\x6e\x3e\x5f\x94\x89\x49\x74\x6a\x65\x06\x8d\x76\xa4\x3c\x7d\x4b\x1f\xd6\xe8\xd4\x12\x3b\x8c\x89\x5a\xbf\x7a\xc2\xf8\x95\x9f\x4d\xcc\x8e\xb1\x27\xaf\x1a\x1b\x83\x67\x1f\xf9\x6f\x9d\x61\x92\xe8\x5a\xf2\x06\x33\xda\x47\xff\x02\x00\x00\xff\xff\xb5\x00\x6c\xdd\xaf\x0a\x00\x00"

func lockedtokensUserGet_total_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_total_balanceCdc,
		"lockedTokens/user/get_total_balance.cdc",
	)
}

func lockedtokensUserGet_total_balanceCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_total_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_total_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x8d, 0x50, 0xe9, 0xb7, 0x17, 0xcc, 0x7f, 0xd0, 0xf3, 0x3f, 0xcd, 0xa5, 0x8c, 0x1a, 0x15, 0x7c, 0x76, 0x60, 0xcc, 0x47, 0x2c, 0xbd, 0x93, 0x77, 0x20, 0x1b, 0xd0, 0xaa, 0xfd, 0x7f, 0x48}}
	return a, nil
}

var _lockedtokensUserGet_unlock_limitCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4f\x4b\xc4\x30\x14\xc4\xef\xf9\x14\x43\x0f\xd2\x5e\x7a\x12\x0f\x8b\xba\x2c\x82\x28\xec\x61\x11\xf7\x03\xa4\xe9\xeb\xfa\xd8\xf4\xbd\x92\xbc\xa2\x20\x7e\x77\x69\xab\xeb\xdf\xb9\x04\x92\x99\xdf\x64\xb8\x1f\x34\x19\x8a\xad\x86\x23\xb5\x8f\x7a\x24\xc9\x85\x73\x3e\x04\xca\xb9\xf4\x31\x56\xe8\x46\x41\xef\x59\x4a\x1f\x82\x8e\x62\x2b\x6c\xda\x36\x51\xce\xd5\x0a\xfb\x5b\x7e\xb9\x38\xc7\xab\x73\x00\x10\xc9\x10\x67\xd0\x66\xb1\xde\x4b\xa7\x0f\xd4\xe1\x0a\x07\xb2\x8f\xbb\x4f\x4c\x35\x47\x26\xd5\xc1\x0f\xbe\xe1\xc8\xc6\x94\xeb\x46\x53\xd2\xe7\xcb\xb3\xef\x3f\xaa\xe7\xe3\x4e\x63\x4b\xe9\xba\x3c\x05\x27\xfd\xb0\x6d\x7f\x97\xef\xc6\x26\x72\xd8\x79\x7b\x3a\x85\xbe\x7a\xd7\x6b\x0c\x5e\x38\x94\xc5\x8d\x8e\xb1\x85\xa8\x61\x69\x87\x47\xa2\x8e\x12\x49\x20\x98\x62\x98\x31\xf8\x83\x2f\xaa\x65\x78\x22\x1b\x93\xfc\xbb\xbd\x3e\x90\xed\x65\x7a\xd9\x72\xcf\x56\x56\xee\xcd\xbd\x07\x00\x00\xff\xff\x3d\x40\x2a\x6a\x75\x01\x00\x00"

func lockedtokensUserGet_unlock_limitCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserGet_unlock_limitCdc,
		"lockedTokens/user/get_unlock_limit.cdc",
	)
}

func lockedtokensUserGet_unlock_limitCdc() (*asset, error) {
	bytes, err := lockedtokensUserGet_unlock_limitCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/get_unlock_limit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x1c, 0x3d, 0xcf, 0x56, 0x53, 0x36, 0x98, 0xa7, 0x51, 0xc4, 0x13, 0xbb, 0x82, 0x18, 0xd9, 0xc2, 0x0, 0x46, 0xc6, 0xe, 0x43, 0xd2, 0x98, 0xa3, 0x3c, 0xe7, 0x7d, 0x3a, 0xd1, 0x20, 0x6d}}
	return a, nil
}

var _lockedtokensUserWithdraw_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x41\x6f\xd4\x30\x10\x85\xef\xf9\x15\xaf\x39\x54\x89\x54\xdc\x0b\xe2\xb0\x2a\x54\x80\x54\x71\x40\x02\x41\x29\xe7\x59\x67\xb2\x31\xcd\x7a\x22\x7b\xd2\xad\x40\xfd\xef\xc8\xc9\x26\x6c\x8a\xb6\xe5\x82\x2f\x91\x6c\xcd\xf7\xde\xbc\xb1\xe3\xb6\x9d\x04\x45\x7e\xd5\xfb\x8d\x5b\xb7\x7c\x2d\xb7\xec\xf3\x6c\xde\x6e\x65\xf7\x68\xeb\xa3\xd8\x5b\xae\x86\xcd\x98\x67\x99\x06\xf2\x91\xac\x3a\xf1\x05\x6d\xa5\xf7\xba\xc2\xb7\x2b\x77\xff\xea\x65\x89\x5f\x59\x06\x00\x2d\x2b\x1a\x69\x2b\x0e\x5f\xb8\x5e\x81\x7a\x6d\x8a\x43\x8a\x19\x3e\x9f\x3a\x0e\x94\x30\xf1\x0c\x0b\x37\xe6\xbb\xd3\xa6\x0a\xb4\x2b\x71\xfa\x77\xd9\x87\x01\x3c\xeb\xdc\x51\xdf\xea\x1f\x99\xa3\xa0\xb9\x31\x73\x93\x2a\x46\xa3\x5d\xe0\x8e\x02\x17\x64\xad\xee\x01\xef\x24\x04\xd9\xdd\x50\xdb\x73\x89\xd3\xb7\xd6\xa6\x0e\x53\x67\xd8\xaf\xc8\x6d\x6d\xe6\xee\xf0\x1a\xa9\xd8\x44\x95\x40\x1b\x36\xeb\xa1\xfc\xe2\x7f\xb4\xfc\xa6\xa8\x83\x6c\x57\x38\x76\xfe\x75\xb4\xf0\x99\xb4\x29\x67\xb7\x69\x5d\x5e\xa2\x23\xef\x6c\x91\xbf\x27\xef\x45\xb1\xdb\x8b\xa1\x1d\x50\xd0\x81\x75\x82\xeb\x86\x11\xdd\xc6\x73\x80\xd4\xd0\x86\x71\x30\x6c\xe4\x0b\xe8\xb4\x8c\x15\x6f\x49\x8b\xbc\x12\x8e\x48\xf4\x86\xee\x18\xe4\x41\x31\x8a\x75\xa4\x5c\x4d\x3a\x34\xa6\x79\x86\xbc\x7c\x9a\x15\x25\xa9\x07\x06\x05\x86\x97\xa5\x4f\xa8\xcc\x1d\x98\xbc\x2c\xb3\xe5\x68\xa6\x0b\xf1\xd4\x64\xfe\xf5\x96\x4c\x91\x9f\xef\x21\xe7\xf5\x74\x3e\x1c\x1f\x8b\xf9\x20\xc7\x39\x95\x44\x60\x10\x66\x05\x0c\x08\xc8\xfa\x07\x5b\x05\xe9\x90\x77\x47\xda\x3c\x17\xf4\x11\x33\xe6\xd9\x54\x0f\x6c\x6d\xfb\xa8\x70\xde\xa9\xa3\xd6\xfd\xe4\xa4\xed\xc2\x34\x9f\x21\x5d\x68\xe3\xe2\xf8\xba\x50\xbb\x10\xf5\x24\x45\x9d\x78\x0f\x63\xe0\x7c\xcf\xb6\x57\x7e\xfc\x32\xa6\xf8\x4d\xc5\x9d\x44\xa7\xfb\x04\x2f\x5e\x2c\xdf\x8d\x99\x26\x38\xff\x43\xc6\xef\xac\xf1\x90\xfd\x0e\x00\x00\xff\xff\x29\xbf\x49\x67\xaa\x04\x00\x00"

func lockedtokensUserWithdraw_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_lockedtokensUserWithdraw_tokensCdc,
		"lockedTokens/user/withdraw_tokens.cdc",
	)
}

func lockedtokensUserWithdraw_tokensCdc() (*asset, error) {
	bytes, err := lockedtokensUserWithdraw_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lockedTokens/user/withdraw_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xd7, 0x20, 0x55, 0xc1, 0x98, 0x77, 0xe9, 0xd8, 0xfa, 0xf6, 0x50, 0x2c, 0x28, 0xe8, 0xdb, 0xbd, 0xa6, 0xc9, 0x33, 0x14, 0x5d, 0xe, 0x35, 0x3e, 0xfd, 0x9f, 0x48, 0x27, 0x8b, 0xe5, 0x8f}}
	return a, nil
}

var _nodeversionbeaconAdminChange_version_freeze_periodCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x6f\xd4\x40\x0c\xc5\xef\xf9\x14\x4f\x39\x94\xec\x25\xb9\x20\x0e\x11\x4b\xd5\x45\x42\xe2\x82\xaa\x42\x7b\x1f\x66\x9c\xcd\x48\x89\x1d\x79\x3c\x2c\x7f\xd4\xef\x8e\x92\x2c\xb4\x6a\xb4\x3d\x66\x6c\xbf\xdf\x7b\x76\xe2\x38\x89\x1a\xca\x2f\x12\xe8\x81\x34\x45\xe1\x03\x39\x2f\x5c\x16\x45\xd3\x34\xf8\xa6\x8e\x93\xf3\x16\x85\x61\xbd\x33\xb8\x61\x90\x53\xc2\xb3\xfe\x9b\x30\x46\x86\x09\x7c\xef\xf8\x48\xcb\x98\xf5\x84\x40\x5d\x64\x0a\xf8\xb1\xb6\xdd\x4f\xc1\x19\x1d\x72\xd7\x91\x16\x85\x3d\xe9\x56\x4c\xa7\x4f\x4a\xf4\x9b\x6e\x49\xa3\x84\x16\xf7\x9f\xd9\xde\xbd\xdd\xe1\x4f\x51\x00\x03\x19\x36\xee\x16\xe6\x1d\x75\x2d\xae\x36\xb5\x7a\x29\xce\xa3\x93\xd2\xe4\x94\x2a\xe7\xbd\xb5\x70\xd9\xfa\xea\x20\xaa\x72\x7a\x70\x43\xa6\x1d\xae\x6e\xbc\x97\xcc\x36\x93\x00\xa0\x69\xb0\xd6\xe1\xa0\xd4\x91\x12\x7b\x9a\x93\xcd\x71\x36\x89\xe3\x38\x0d\x34\x12\x5b\xe4\x23\x94\x92\x64\xf5\xb4\xe8\x24\x1a\xba\xfa\xa2\x67\xec\x31\x1b\xaa\x93\x89\xba\x23\xd5\xdf\x17\xe4\xfb\x4b\x41\x3e\x2c\x92\x40\xd5\xa9\x8c\xed\x76\x15\x6b\xd7\xd7\x55\xec\xd6\x59\xbf\x3b\x0f\x5c\x5f\x63\x72\x1c\x7d\x55\x7e\x94\x3c\x04\x7e\x63\x58\x51\x97\x34\x70\x77\x0e\x51\xce\x12\x8f\xf3\x06\xe9\x27\xf9\x6c\x74\xde\xcf\xeb\xb9\xea\x44\xf6\xaf\x20\x99\x83\xd3\x5f\xcf\xcf\xba\x3d\xf3\x8b\x87\xff\xd0\x49\x92\xad\xc0\xad\xd1\xe3\xeb\x8c\x1d\xf6\xfb\x97\xba\x68\x51\xae\xdf\x98\xd6\x87\x93\x4b\x60\x31\xe4\xe5\x97\x0c\xe5\x02\x7e\x2c\xfe\x06\x00\x00\xff\xff\x5d\x1e\x9f\xbf\x0c\x03\x00\x00"

func nodeversionbeaconAdminChange_version_freeze_periodCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminChange_version_freeze_periodCdc,
		"nodeVersionBeacon/admin/change_version_freeze_period.cdc",
	)
}

func nodeversionbeaconAdminChange_version_freeze_periodCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminChange_version_freeze_periodCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/change_version_freeze_period.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x32, 0x76, 0xe6, 0x7c, 0x7e, 0x5, 0xbd, 0x8f, 0xf6, 0x57, 0xf4, 0xb, 0xa7, 0x80, 0x41, 0xab, 0xb9, 0x30, 0xf2, 0xc8, 0xf9, 0x68, 0x86, 0xfd, 0x7e, 0x6d, 0x61, 0x26, 0x91, 0x73, 0x57}}
	return a, nil
}

var _nodeversionbeaconAdminDelete_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x6e\xd4\x40\x10\xed\xfd\x15\x4f\x57\x04\x5f\x63\x37\x88\xc2\x02\xa2\x1c\x29\xa0\x41\x28\x1c\xe9\xe7\xd6\xe3\xf3\x8a\xf5\xce\x6a\x3d\x26\x20\x94\x7f\x47\xbb\xf6\x25\x39\x99\x43\xb4\xf3\xe6\xcd\xbc\xf7\xf4\xec\x10\x24\x2a\x36\x9f\xa5\xe5\x7b\x8e\xa3\x15\xbf\x63\x32\xe2\x37\x45\x51\xd7\x35\xf6\x91\xfc\x48\x46\xad\x78\x68\x4f\x0a\x72\x4e\x1e\x46\xbc\xd8\xbf\x69\x07\xeb\xa1\x82\x96\x1d\x2b\x43\x7b\xce\xd4\x1f\x33\x8c\x83\x4c\xbe\xa5\xf8\x0b\x03\x85\x60\xfd\x11\x69\xbb\xe7\x13\xbe\xa7\x83\x63\x90\xe6\xd9\x18\xd8\xd8\xce\x72\x9b\x2f\x1c\x9c\x98\xef\xe8\xd9\x1e\x7b\x45\xa0\x48\x03\x2b\xc7\xa2\xd0\x67\x51\x65\xde\xf9\x98\x57\x76\xcb\xa3\xbd\xdc\x66\x25\x0d\xbe\x7d\xf2\xfa\xe6\xf5\x16\xbf\x8b\x02\x70\xac\x58\xd9\xcc\xe2\xef\xb8\x6b\x70\xb5\xc2\xaa\x0c\x26\x6a\x88\x1c\x28\x72\x49\xc6\x68\x03\x9a\xb4\x2f\x77\x12\xa3\x3c\xdc\x93\x9b\x78\x8b\xab\x1b\x63\x64\xf2\x9a\x3e\x01\x40\x5d\x63\xc6\x41\x88\xdc\x71\x64\x6f\x38\x45\x94\x3c\xae\xa2\x8b\x3c\xca\x14\x0d\x67\xea\xc8\xae\xab\x2e\xca\xc4\x3b\x24\x0d\xd5\xa8\x12\xe9\xc8\xd5\x21\x7f\x79\x7b\x49\xfb\xfb\x7c\x12\x28\xbb\x28\x43\xb3\x76\x3f\x6f\x7d\x9d\x8f\x7d\x21\xed\xb7\x0b\xe1\xfa\x1a\x81\xbc\x35\xe5\xe6\x83\x4c\xae\xf5\xaf\x14\xf3\xab\x0b\x09\xe2\x6e\xf1\xb0\x49\x17\x1e\x53\x66\xfc\x93\xcd\xa4\xfc\x9c\xc8\xed\x53\x3d\x9e\xaa\x91\x64\x9d\x0d\xf4\xaf\x65\x38\x2f\xc2\xa9\x4f\xff\x11\x57\x35\x57\xf2\x84\x2d\xc4\x97\x9d\x69\xf0\x8f\x02\x2d\x5e\x1e\xff\x04\x00\x00\xff\xff\xac\xd5\xd1\xe7\x25\x03\x00\x00"

func nodeversionbeaconAdminDelete_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminDelete_version_boundaryCdc,
		"nodeVersionBeacon/admin/delete_version_boundary.cdc",
	)
}

func nodeversionbeaconAdminDelete_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminDelete_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/delete_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xb6, 0x2b, 0x65, 0xd0, 0x19, 0x1d, 0xbb, 0xca, 0xf, 0xbc, 0xfb, 0x24, 0x52, 0x6f, 0x2e, 0x58, 0xe5, 0xc5, 0xc0, 0xd2, 0xf9, 0x1c, 0x8f, 0x7f, 0xc2, 0xa0, 0x1c, 0x5e, 0x2, 0xb2, 0x54}}
	return a, nil
}

var _nodeversionbeaconAdminHeartbeatCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6b\xfa\x40\x10\xc5\xef\xf9\x14\x8f\x1c\xfc\xc7\x4b\x72\x97\x7f\x2b\xea\xa5\xa7\x52\x2c\x78\x1f\x37\x13\xb3\x90\xec\x84\xd9\x49\x2d\x14\xbf\x7b\x31\x6b\xad\x20\xd8\x3d\xed\xec\xce\xfc\xde\x7b\xe3\xfb\x41\xd4\x90\xbf\x4a\xcd\x3b\xd6\xe8\x25\xac\x99\x9c\x84\x3c\xcb\xaa\x0a\x1b\xea\xba\x08\x6b\x19\x3d\x5b\x2b\x35\xac\x25\x03\xf7\xde\xd2\xab\xd1\xbe\x63\x1c\xbd\xb5\x53\xe9\x83\x93\xde\x87\x03\x3e\x12\x2a\x66\xa6\x14\x22\x39\xf3\x12\x8a\x39\xbe\xb2\x0c\x00\x3a\x36\xdc\x09\xbe\x30\xa9\xed\x99\x6c\xcb\xcd\x02\xb3\xbb\xff\xf2\xda\x90\x20\x83\xf2\x40\xca\x05\x39\x67\x0b\xd0\x68\x6d\xb1\x16\x55\x39\xee\xa8\x1b\x79\x8e\xd9\xca\x39\x19\x83\x9d\x55\x71\x39\x55\x85\xd4\x03\x82\x72\xc3\xca\xc1\x31\x4c\x26\xf3\x37\x8a\xab\xba\xf7\x01\xca\x51\x46\x75\x7c\x1d\x8f\xdc\x35\xe5\x43\xe3\x78\xc2\xd9\x4f\x19\x4d\x94\x0e\x5c\xee\x27\xb5\xff\x8f\xd2\x3c\x5f\xf1\x40\xd1\xa8\xf4\x8b\xfb\xdd\xfc\x76\xbf\x27\xf0\x1b\x59\x3b\xbf\x19\x5c\x2e\x31\x50\xf0\xae\xc8\x37\x32\x76\x75\xf8\x67\x48\xd2\x8f\x58\xd8\x5e\x02\xe6\x09\x75\x02\x30\x5d\xf8\x93\xdd\x68\x7c\xb3\xb8\xbf\x93\x97\xed\x4f\x51\x5c\x68\xd9\xe9\x3b\x00\x00\xff\xff\x34\xcd\xeb\xa9\x5d\x02\x00\x00"

func nodeversionbeaconAdminHeartbeatCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminHeartbeatCdc,
		"nodeVersionBeacon/admin/heartbeat.cdc",
	)
}

func nodeversionbeaconAdminHeartbeatCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminHeartbeatCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/heartbeat.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xd9, 0x3, 0x59, 0x56, 0x76, 0x9e, 0xab, 0xb6, 0x1b, 0xa4, 0xf4, 0x58, 0x85, 0x9c, 0x88, 0x39, 0x7b, 0x95, 0x32, 0xe2, 0xbd, 0x2b, 0xf3, 0xbc, 0xd5, 0xb, 0x76, 0x3b, 0x69, 0xe1, 0x9a}}
	return a, nil
}

var _nodeversionbeaconAdminSet_protocol_state_versionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xd3\x40\x14\xbc\xe7\x2b\x46\x39\x94\x54\xb4\xce\x05\x71\x88\x0a\x55\xc3\x89\x0b\xaa\x5a\xda\x73\x5e\x77\xc7\xf1\x0a\x7b\xd7\xda\x7d\x8e\xa9\x50\xaf\x88\xef\xe4\x4b\xd0\xda\x0e\x4d\x09\xbd\xd9\xbb\xb3\x33\xf3\x66\x9e\x6b\xda\x10\x15\xf3\x2f\xc1\xf2\x9e\x31\xb9\xe0\xd7\x14\x13\xfc\x7c\x36\x5b\x2e\x97\xf8\x1a\xc5\x27\x31\xea\x82\x87\x56\xa2\x90\xba\x0e\x7d\xc2\x01\xfe\xca\x36\xce\x43\x03\x52\x4b\xe3\xca\x47\x08\x3c\x7b\xb4\x31\x68\x30\xa1\x46\x52\x51\x62\x37\x82\x8b\x91\xb5\xe2\x80\x99\x0e\xd1\xbb\xba\xc6\x03\x4d\x68\x88\x2c\xb6\x23\x44\xb1\x73\xec\xb1\x19\xff\xef\x1d\xfb\x0d\x5c\xb9\x1a\xde\xe3\x3c\x3f\xbf\x9e\x14\x26\x1f\x70\x09\xc1\x13\xdb\x48\x51\xc6\x6c\x37\x7b\x26\x4c\x17\x23\xbd\x3e\x3b\x9a\x64\xf7\x54\x19\x93\x18\x77\xce\x10\xdc\x65\xa4\x4b\x19\x6c\x98\x12\x2d\xc4\x5b\x48\xdb\xd6\x8e\x36\x4f\x99\xd1\xff\xcc\xd6\x3b\xad\x9c\x87\xe0\xa1\x0e\xe6\x1b\x36\xeb\x0d\x46\x6e\x20\x75\xa6\x1a\x83\xdb\xac\x8b\x61\xa0\xb7\xf8\xfd\xeb\x27\x2e\x70\x30\xd7\x19\xca\x10\x21\x7f\x69\xcf\x2d\x4b\xe7\x69\x91\xa4\xa4\x3e\x42\xab\xc8\x54\x85\xda\xe6\xa7\x63\x82\xb7\x87\x7e\x13\x7c\x50\x34\xa4\x3a\xbf\xcd\x06\x13\x61\x82\xb7\x2e\xd7\x96\x20\x91\xb0\x2e\x19\x89\x96\xb6\x98\xcd\xf4\xb9\xd3\xc5\x71\x8c\x2b\xdc\x7d\xf6\xfa\xfe\xdd\xd9\x81\xc3\xfd\xd9\x29\x7e\xcc\x66\x40\x4d\x85\xe4\xd6\x6f\x58\xae\x70\x72\xb4\x3b\xc5\xb0\x12\x19\xd9\x46\xb6\x12\xb9\x10\x63\x74\x05\xe9\xb4\x5a\xac\x43\x8c\xa1\xbf\x97\xba\xe3\x29\x4e\xae\x8c\x09\x9d\xd7\x4c\x9c\xe3\x5a\x2e\x31\xde\x43\x10\x59\x32\xd2\x1b\xee\x53\x3f\xda\x39\xd7\xb4\x35\x1b\xfa\x61\xec\xc8\x14\xba\x68\x38\xf0\x24\xd6\x65\xb1\xb7\x88\x0f\xc8\xfa\x45\xd2\x10\x65\xcb\xe2\x61\x50\xb8\x78\xcd\xf7\xc7\x45\x19\x43\xb3\xc2\x2b\xd7\xb7\x23\xcb\xb5\x68\x75\x3a\x68\x01\x97\x97\x68\xc5\x3b\xb3\x98\x7f\x0a\x5d\x6d\xfd\x1b\xc5\xa8\xf1\x1a\x07\x6e\x26\xb3\xf3\x4c\xf1\x94\x93\xe2\x77\x9a\x4e\x39\xe5\xf0\xc2\x7f\xc1\xc6\xe9\xbe\xa5\xdb\xbc\x71\x13\xe5\x5d\xbb\x8d\x62\xf9\xdf\x12\x8f\xcf\x5e\x16\xfa\xfc\x3d\x5a\x78\x9a\xfd\x09\x00\x00\xff\xff\x7f\x43\xd1\x10\x0b\x04\x00\x00"

func nodeversionbeaconAdminSet_protocol_state_versionCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminSet_protocol_state_versionCdc,
		"nodeVersionBeacon/admin/set_protocol_state_version.cdc",
	)
}

func nodeversionbeaconAdminSet_protocol_state_versionCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminSet_protocol_state_versionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/set_protocol_state_version.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x2d, 0x41, 0x1b, 0x4e, 0xe1, 0x2e, 0xea, 0x77, 0x9e, 0xbb, 0x8c, 0x9a, 0x94, 0x86, 0xfa, 0xf1, 0x39, 0x57, 0xbc, 0xbf, 0xa2, 0x1f, 0x94, 0x64, 0x9d, 0x18, 0xdf, 0x8c, 0xf, 0x8d, 0xf9}}
	return a, nil
}

var _nodeversionbeaconAdminSet_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6a\xdb\x4c\x14\xdd\xeb\x29\x0e\x5e\xe4\x93\xc1\x48\x9b\x8f\x52\x44\xd3\xe0\x84\x42\xbb\x68\x08\x49\x9a\xfd\xf5\xe8\xca\x56\x2b\xcd\xa8\x33\x57\x76\x4b\xc9\xbb\x97\x19\x8d\xff\xa4\x18\xba\x32\xbe\xbf\xe7\x9e\x73\x34\x75\xdb\x19\x2b\x98\xdd\x9b\x92\x5f\xd8\xba\xda\xe8\x5b\x26\x65\xf4\x2c\x49\xf2\x3c\xc7\xb3\x25\xed\x48\x49\x6d\x34\x64\x43\x02\x6a\x1a\xb3\x73\x38\xa9\x5f\x96\x6d\xad\x21\x06\x54\x96\x20\x68\xde\x61\x3b\x64\x7c\x50\x36\x1c\x06\x1d\x42\xb4\x6a\x18\x25\x57\xb5\xae\xf5\x1a\x74\x48\xac\x4c\xaf\x4b\xb2\xbf\x41\xe2\x9b\x20\x64\xd7\x2c\xb7\x8d\x51\x3f\x3e\x73\xbd\xde\x48\x92\xc8\x11\x4c\x9a\xc0\x6f\xfa\x4a\xdf\x8d\x2d\xf0\xed\x8b\x96\xf7\x8b\x18\xaa\xf5\x38\xf4\x40\xa2\x36\xa3\x90\xe5\x47\x6e\x98\x1c\x17\x78\x12\x5b\xeb\xb5\x4f\xac\x8e\xdb\x86\xf2\x77\xff\x27\x73\xfc\x49\x12\xa0\x61\xc1\x84\xa4\x70\xfa\x23\x57\x05\xae\x26\xb9\x2c\x24\x63\xa7\xe6\xdd\x3e\x19\xcf\x2c\xa6\xd3\xb2\x51\x89\x5f\xdb\x59\xee\xc8\x72\x4a\x4a\x49\x01\xea\x65\x93\xde\x1a\x6b\xcd\xee\x85\x9a\x9e\xe7\xb8\x5a\x2a\x65\x7a\x2d\x1e\x25\x00\xe4\x39\xee\x2c\x93\x70\xe0\xf0\x54\x8b\xca\x9a\x36\x04\x3b\x72\x8e\x4b\x74\x64\xa9\x65\x61\xeb\x42\xe3\x39\x4a\x5c\xbf\x01\xef\x89\xdb\x2d\xdb\x34\x94\x03\xed\x40\xfd\x5e\x84\x05\xda\x81\xf8\xbd\x04\x0b\x74\x03\xed\x7b\x01\x16\xfe\x98\x03\xe9\x67\x1a\x84\x91\xf3\x24\xfc\x38\x6e\xaa\x6c\xca\xd7\x9b\x88\x46\x35\xe9\x99\x7e\x27\x7f\x16\x7b\x16\x8a\x93\x1b\xe3\xbe\x3c\xc7\xc0\x28\x08\x96\x2b\xb6\xac\x15\x47\xe7\x4e\x6d\x6e\xd9\x99\xde\x2a\x3e\x42\xbd\x68\x0a\x5c\xc3\xab\x96\x39\x31\x96\xd6\x9c\xad\xc2\x96\x0f\x97\x9c\xf2\x31\xf2\x9a\x7a\xa1\xde\x72\x47\xa8\x7a\x1a\x86\x3d\x90\x6c\xe6\xb1\xe1\xe6\x06\x1d\xe9\x5a\xa5\xb3\x3b\xd3\x37\xa5\xfe\x4f\x30\xac\xba\x34\x03\x8f\xf1\x88\x99\x1f\xf1\xea\x69\xe0\x5f\xac\x7a\xe1\xa3\x89\x96\x65\x39\x71\x50\xe4\xe4\xec\x4b\xfe\x07\x1e\x32\xc7\x32\x16\x6a\x3b\xfe\x18\x2e\xa8\x7e\x00\xd8\x19\x27\x11\xdd\xf4\xaa\xf5\x74\x01\x57\x15\x2b\xa9\xb7\xbc\x3c\x7d\x42\xce\x4c\x31\xcf\x22\x8a\xc8\x23\x90\x39\xb1\xb5\x92\x4f\x3f\x7b\x6a\x9e\x4d\x7a\x01\xd3\xbe\x6d\x8e\x02\xb3\xfb\x13\x7e\x76\xe4\xa0\x8d\xf8\x77\x90\xcb\x11\x5b\xcf\x9e\xac\x59\xb8\xe6\x35\xf9\x1b\x00\x00\xff\xff\xb2\xc7\x86\x5b\x75\x05\x00\x00"

func nodeversionbeaconAdminSet_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconAdminSet_version_boundaryCdc,
		"nodeVersionBeacon/admin/set_version_boundary.cdc",
	)
}

func nodeversionbeaconAdminSet_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconAdminSet_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/admin/set_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xe, 0xcb, 0xf1, 0x6b, 0x5c, 0x2a, 0xe9, 0x6, 0xb1, 0xde, 0xa, 0x62, 0x31, 0x3, 0x6c, 0x77, 0x2a, 0x23, 0x8d, 0x54, 0xa9, 0xf3, 0xf9, 0xcf, 0x68, 0x16, 0x9b, 0xc6, 0xdd, 0x31, 0x8f}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_current_node_versionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x8e\xc2\x30\x10\x84\xe1\xde\x4f\x31\x4a\x73\x49\x93\xf4\x57\xde\x15\x74\x34\x20\x7a\x63\x4f\xc0\x52\xb2\x46\xeb\x75\x24\x84\x78\x77\x8a\x90\x0a\xda\xdd\x4f\xfa\x27\xcd\xb7\xac\x86\x66\x9f\x23\x4f\xd4\x92\xb2\xfc\xd1\x87\x2c\x8d\x73\xc3\x30\x60\x47\x2b\xb0\x2b\x11\xaa\x2a\xc5\xb0\xac\x08\x91\x63\x12\x46\x24\x59\xdf\x59\x4c\x7d\xb0\x9f\xb2\x89\xa3\x3f\x4f\x74\x3e\x04\x96\xd2\xfa\x69\xea\x30\x56\xc1\xec\x93\xb4\xdd\x2f\x3e\x7a\xfd\x81\xf3\x42\xc5\xc3\x01\x80\xd2\xaa\xca\x17\x75\xa1\xfd\xaf\x4b\xb6\x7b\xae\x12\xbd\xde\xdb\xae\x7f\x87\xdd\xd3\xbd\x02\x00\x00\xff\xff\x83\xcc\xe9\xa9\xd6\x00\x00\x00"

func nodeversionbeaconScriptsGet_current_node_versionCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_current_node_versionCdc,
		"nodeVersionBeacon/scripts/get_current_node_version.cdc",
	)
}

func nodeversionbeaconScriptsGet_current_node_versionCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_current_node_versionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_current_node_version.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x36, 0x10, 0x65, 0x4d, 0x54, 0x25, 0x91, 0xb4, 0x4c, 0xce, 0xf8, 0x19, 0x90, 0xa3, 0xcd, 0x10, 0x2b, 0x66, 0x66, 0xf6, 0x99, 0xb5, 0x6d, 0x72, 0xa3, 0x9c, 0x54, 0x6a, 0xbf, 0x41, 0xf9}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_current_node_version_as_stringCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\xc5\xe8\xaa\xa4\xc9\xf6\x48\x34\x50\xd0\xd1\x80\xe8\x7d\x89\x77\x89\x94\x75\x90\xe3\x20\x21\xc4\xbf\x23\xed\x06\x9a\x6b\x67\xc6\xcf\xaf\xec\x1f\x4d\x0d\x97\xe7\x96\xf9\x8d\xb5\x97\x26\x0f\x4c\xa9\xc9\xc5\xb9\x65\x59\xf0\xc4\xd6\x61\xef\x8c\x34\x54\x59\x0c\x9f\xe7\x08\x99\xd7\x22\x9c\x51\xe4\xa8\x67\xfc\x4a\xd7\xca\xc7\x21\x75\x10\x5e\x4c\x8b\x6c\xd1\x51\x4a\xdc\xbb\xa7\x5a\x03\xd6\x21\xd8\xa9\x88\x0f\x77\xb3\xc7\xb7\x03\x80\xca\x86\x6b\x1b\x92\x49\xbf\x70\x8f\x1b\xa3\xb8\xb1\x3d\x9e\x16\x7f\xf9\x5c\xfb\x70\x00\x94\x6d\xa8\xfc\x33\xe2\x74\x8a\xd6\xce\x3f\x3e\xb8\x1f\xf7\x1b\x00\x00\xff\xff\x7e\x34\x52\x74\xf1\x00\x00\x00"

func nodeversionbeaconScriptsGet_current_node_version_as_stringCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_current_node_version_as_stringCdc,
		"nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc",
	)
}

func nodeversionbeaconScriptsGet_current_node_version_as_stringCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_current_node_version_as_stringCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0xf5, 0x69, 0xe0, 0xff, 0x95, 0x23, 0xf7, 0xb4, 0xaa, 0x8, 0xa4, 0x8a, 0x2f, 0x3e, 0x22, 0xce, 0xe6, 0x65, 0x43, 0x35, 0x10, 0xd, 0x39, 0x92, 0x55, 0x96, 0xca, 0xab, 0xea, 0x2c, 0xa4}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_next_version_boundaryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbd\xae\xc2\x30\x0c\xc5\xf1\x3d\x4f\x71\xd4\xa9\x5d\x6e\xf7\xbb\x20\xf1\x00\x1d\x18\xd8\x43\xe2\x16\x4b\xad\x5d\x39\x49\x55\x84\x78\x77\xc4\xd7\x42\x19\x2d\xfd\xfe\xd6\xe1\x69\x56\xcb\xa8\x3a\x8d\x74\x24\x4b\xac\xb2\x27\x1f\x54\x2a\xe7\xda\xb6\xc5\x81\xb2\x31\x2d\x94\x90\xcf\x04\xa1\x35\x63\x79\x31\x9c\xb4\x48\xf4\x76\x81\x1a\x84\xc7\x27\xe7\xfe\xe1\x8c\xc0\x09\xa2\x28\x73\xd0\x89\x65\xd8\x36\x91\x7a\x16\x8a\xce\x87\x40\x29\xd5\x7e\x1c\x1b\xf4\x45\x30\x79\x96\xba\xf9\xc7\x66\xcf\xdf\xe7\x7a\x7f\xd8\xe1\xea\x00\xc0\x28\x17\x93\x1f\x7e\xa0\xdc\xd1\x9a\xbf\xb2\xba\x71\x37\x77\x0f\x00\x00\xff\xff\xe8\x01\xf5\x8e\xf5\x00\x00\x00"

func nodeversionbeaconScriptsGet_next_version_boundaryCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_next_version_boundaryCdc,
		"nodeVersionBeacon/scripts/get_next_version_boundary.cdc",
	)
}

func nodeversionbeaconScriptsGet_next_version_boundaryCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_next_version_boundaryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_next_version_boundary.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x29, 0xc7, 0x32, 0x7e, 0xcf, 0x27, 0x5f, 0xec, 0x56, 0x5c, 0xca, 0xe, 0xa7, 0xb8, 0xb9, 0xe5, 0x50, 0x34, 0xf8, 0xcf, 0xe3, 0x6f, 0x12, 0x0, 0x8b, 0xfb, 0xde, 0x18, 0xc6, 0x60, 0xbb}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_next_version_update_sequenceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\xca\xc2\x30\x14\x86\xe1\x3d\x57\xf1\xd1\xa9\x5d\xfe\x2e\x3f\x0e\x8e\x2e\xe2\xd2\x45\x74\x4f\xd3\xaf\x5a\x68\x4e\xea\xc9\x89\x14\xc4\x7b\x17\xc4\x45\x5c\xdf\x77\x78\xa6\xb8\x24\x35\x54\x5d\x1a\x78\xa6\xe6\x29\xc9\x8e\x3e\x24\xa9\x9c\x6b\xdb\x16\x7b\x5a\x86\x5d\x09\xe1\x6a\xc8\xbc\x15\x4a\x20\xa4\xc4\x9e\x8a\x31\xe9\x7b\x9a\xef\x67\xa2\x2c\x83\x37\x0e\xe0\x9d\x62\xce\x87\xc0\x9c\x6b\x3f\xcf\x0d\xc6\x22\x88\x7e\x92\xba\xd9\xe2\x74\x10\xdb\xfc\xe3\xe1\x00\x40\x69\x45\x05\x3f\xfa\xdf\x85\xd6\x71\xb5\xaf\x78\xfc\xe8\x75\xe3\x9e\xaf\x00\x00\x00\xff\xff\xd8\xb5\xd9\x0f\xb8\x00\x00\x00"

func nodeversionbeaconScriptsGet_next_version_update_sequenceCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_next_version_update_sequenceCdc,
		"nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc",
	)
}

func nodeversionbeaconScriptsGet_next_version_update_sequenceCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_next_version_update_sequenceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xc, 0x3b, 0xfb, 0x8c, 0x44, 0xb3, 0x93, 0x76, 0x6f, 0xcf, 0xe6, 0x3, 0x54, 0x6e, 0x7e, 0x6f, 0x3a, 0xcd, 0x77, 0xfb, 0x66, 0xfe, 0x65, 0xe2, 0xa0, 0xe9, 0xae, 0x3, 0x1f, 0xc4, 0xf2}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_version_boundariesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xbd\x0a\x83\x40\x10\x84\xfb\x7b\x8a\xc1\x4a\x21\x68\x6f\x99\x2e\x4d\x08\x29\xec\x17\x5d\x2f\x07\xba\x27\x7b\xa7\x10\x42\xde\x3d\x9c\x31\x90\xbf\x66\xd9\xdd\x99\x61\x3e\x37\x4e\x5e\x23\xb2\xa3\xef\xb8\x61\x0d\xce\xcb\x9e\xa9\xf5\x92\x19\x53\x55\x15\xce\x1c\x67\x95\x80\x78\x61\x2c\x9b\xee\x67\xe9\x48\x1d\x07\x4c\x64\x19\xbd\xd7\x55\xb6\x6e\x61\x79\xbe\x48\x3a\x4c\xac\x27\xb2\x5c\x1a\x6a\x5b\x0e\x21\xa7\x61\x28\xd0\xcf\x82\x91\x9c\xe4\xc9\x56\xe3\x20\x71\xf7\x32\xae\x57\x51\xe3\x87\xa4\x6c\x3e\x7a\xaf\xc9\x8c\x9b\x01\x00\x5d\xe9\xfe\x44\x2c\xc7\xe6\x9b\x36\xe5\xb6\xde\x34\xdf\x8a\xb7\xa5\x30\xf7\x47\x00\x00\x00\xff\xff\x33\x17\xc8\x43\x0f\x01\x00\x00"

func nodeversionbeaconScriptsGet_version_boundariesCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_version_boundariesCdc,
		"nodeVersionBeacon/scripts/get_version_boundaries.cdc",
	)
}

func nodeversionbeaconScriptsGet_version_boundariesCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_version_boundariesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_version_boundaries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x8d, 0xd0, 0xb5, 0xc4, 0x6e, 0xf1, 0xc6, 0x86, 0x65, 0x5, 0xdf, 0x96, 0x2d, 0xdf, 0xe2, 0xe6, 0x52, 0x83, 0xd8, 0x3e, 0xc5, 0xca, 0x9c, 0x84, 0x2, 0xa1, 0x61, 0xb7, 0x3c, 0x63, 0xe8}}
	return a, nil
}

var _nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xb1\x4e\xc4\x30\x0c\xc6\xf1\x3d\x4f\xf1\xe9\xa6\x76\xa1\x0b\x62\x60\x64\x40\x62\x41\x08\x89\xdb\xdd\xc4\x6d\x2c\x1a\xa7\x4a\x1c\x4e\x80\x78\x77\xa4\xb6\x4c\xe8\x66\x5b\x3f\xfb\x2f\x69\xcd\xc5\x70\x7a\xce\x81\xcf\x5c\xaa\x64\x7d\x60\xf2\x59\x4f\xce\x0d\xc3\x80\x57\xb6\x56\xb4\xc2\x22\xe3\xe3\x98\xe7\xa6\x81\xca\xe7\x63\x61\xfe\xe2\x17\x2e\x92\x03\x2e\x51\x7c\x44\xe0\x49\x94\xf7\xed\x24\x2a\xa9\x25\x68\x4b\x23\x17\xe4\x09\xe3\x92\xfd\x7b\xdd\x58\x8b\x64\x48\xad\x1a\x56\xaa\x15\x23\xdb\x85\x59\xd1\xd6\x40\x26\x3a\x83\xfe\x8e\x81\x34\x40\xac\x1e\x74\xd8\x11\x44\x96\x39\xda\x46\x8d\xc7\x3b\x8e\xbc\xe7\x5a\x3b\x5a\x96\x1e\x53\x53\x24\x12\xed\xfa\x7b\xbc\x3d\xa9\xdd\xdd\xe2\xdb\x01\x40\xd9\x7a\xf0\x2f\xf7\x66\x66\x3b\x5f\xef\xeb\x7a\xf7\xf3\x1b\x00\x00\xff\xff\x57\x3e\x50\x77\x2b\x01\x00\x00"

func nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdcBytes() ([]byte, error) {
	return bindataRead(
		_nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc,
		"nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc",
	)
}

func nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc() (*asset, error) {
	bytes, err := nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0xc4, 0x48, 0x8, 0x69, 0xed, 0xce, 0x27, 0x66, 0x89, 0x8f, 0x2a, 0x1a, 0xa4, 0x47, 0x5e, 0xb1, 0xdc, 0x24, 0x44, 0xe4, 0x36, 0x5, 0x96, 0x3d, 0xd6, 0x16, 0x21, 0x3b, 0xce, 0x55, 0x16}}
	return a, nil
}

var _quorumcertificateAdminPublish_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x21\x87\xe0\x40\xb1\xef\xa1\x2d\x04\x41\xcf\x0d\xed\x0f\x6c\xd4\x8d\x2d\x50\x24\xb1\xbb\x4e\x0e\x21\xff\x5e\x6c\xb7\x25\x85\xe8\x38\xe8\xbd\x19\x29\x9e\x6a\x11\xc3\xea\x2d\x95\x8b\x4f\xa3\x1a\xcb\xde\xaf\x9c\xeb\x3a\x7c\xb2\x1a\x4c\x28\x2b\x05\x8b\x25\xe3\x58\x04\x36\x30\xf6\x1e\xf4\x75\x8a\x19\x56\x50\xc7\x43\x8a\x3a\x80\x20\x7c\x64\xe1\x1c\x78\x62\x6d\x20\x03\xa5\x54\x2e\x0a\x0a\xa1\x8c\xd9\x74\xba\x2e\xdc\xc7\xa9\x63\x76\xed\x3d\xce\xc5\x62\xee\x9d\xbb\xaf\xb9\x3a\x07\x00\x55\xb8\x92\x70\xa3\xb1\xcf\x2c\x5b\xd0\x68\x43\xe3\xa9\xd2\x21\xa6\x68\x91\x75\x83\xf5\x6e\x51\x6f\x70\x9d\x91\xe9\x24\xb6\x65\x9d\xa7\x8a\x17\x2c\x74\x1b\xee\xb8\x56\xad\x08\xf5\xdc\x46\xd5\x91\x9f\xd7\xff\x9e\xde\xee\x26\xf6\xb5\x79\x10\x7e\x2c\xd8\x3b\xd9\xb0\xf9\xab\x7b\xe4\xff\xf9\x93\xe6\x77\xc6\x13\xc8\xb6\xe8\xe6\x38\x74\xe7\x62\x2c\x5e\x98\xac\xc8\xe2\xb9\xb9\x9b\xfb\x0e\x00\x00\xff\xff\x7f\x08\xd4\x33\x88\x01\x00\x00"

func quorumcertificateAdminPublish_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminPublish_voterCdc,
		"quorumCertificate/admin/publish_voter.cdc",
	)
}

func quorumcertificateAdminPublish_voterCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminPublish_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/publish_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0x9c, 0x63, 0xb8, 0x43, 0xb6, 0x30, 0x73, 0xd6, 0x98, 0x35, 0xac, 0x2c, 0xe6, 0x7, 0xe8, 0xdc, 0x92, 0x97, 0x3, 0xcd, 0xc4, 0xa4, 0xe9, 0x36, 0x5b, 0x8f, 0x3e, 0x60, 0xab, 0x5d, 0xba}}
	return a, nil
}

var _quorumcertificateAdminStart_votingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x1e\x7c\xc8\xca\xd8\xc0\xde\x00\x8b\x1c\x84\xf5\x06\xae\x8d\x02\xbe\x14\x4d\xdd\xa6\x07\x41\x07\x86\xa2\x25\x16\x32\xa9\x92\xa3\xb8\x81\xe1\x7f\x2f\x48\x4a\x8e\x18\xbb\x02\x0c\xc8\xe2\x7b\x33\x6f\x66\xde\x50\xee\x5b\x6d\x08\x93\x8f\x8d\x3e\xac\x9a\xce\x92\x30\x8f\xab\x49\x92\xcc\xe7\xf8\x2a\x2c\x81\x0c\x53\x96\x71\x92\x5a\x61\xa7\x0d\xa8\x16\x78\x5c\x81\x95\x7b\xa9\x40\x1a\x96\x98\xa1\xe1\xeb\x8b\x26\xa9\x2a\xb4\xc2\x48\x5d\xba\x10\x07\x49\x35\x18\x98\x31\xec\x15\x7a\x07\xae\x9b\x46\x70\xd2\x06\x4a\x97\x02\x3c\x24\xb4\x3e\xdd\xd2\x54\xdd\x5e\x28\xb2\x99\xfb\xe7\x7e\x52\x95\x92\x0b\x9b\x61\xa9\x46\x21\x02\x67\x38\x74\xb8\xfe\xd3\x27\x5d\x8a\xcd\xda\xc1\x07\xac\x27\x59\xff\xd6\x34\x5e\xa4\x4f\xbb\x59\x5b\x48\x05\xc1\x78\x3d\x70\x5d\x18\x77\xf6\x5d\xc8\xaa\xa6\xeb\x31\x3c\xf7\x10\x00\x17\xfc\x64\xd4\xa8\xf4\x2c\x3c\xff\xb6\x51\x74\x77\x5f\xdc\x5e\x68\xcc\xf3\x2d\x19\xa9\xaa\xa2\xb8\x8d\x13\xe7\x9e\x73\xff\x6f\x51\x4c\x71\x4c\x12\x00\x68\x8d\x68\x99\x11\xa9\x95\x95\x12\x26\x03\xeb\xa8\x4e\x3f\x68\x63\xf4\xe1\x89\x35\x9d\x98\xe2\x66\xc9\xb9\xee\x14\x9d\x29\xee\x99\xcf\x11\x40\x60\x30\x62\x27\x8c\x50\x5c\xb8\x99\x45\x33\xd4\xcf\x3f\x04\xa7\x33\xa9\x11\x14\x0e\xbe\x88\x1d\x16\x08\x29\x67\x96\xb4\x61\x95\x98\x3d\xfb\x78\xff\xdd\x44\x6e\x99\x2d\x1d\xfe\xff\x74\x67\xf4\x3e\xc3\x95\xa3\x6d\x60\x7f\x66\x54\x4f\xcf\x89\xdc\xf3\xf0\x80\x96\x29\xc9\xd3\xc9\x4a\x77\x4d\x09\xa5\x09\x21\x45\x2c\xf8\x27\x0f\x9a\x26\xd3\x24\x12\x3a\xf8\x27\x43\x1e\xa7\xed\xdf\x0a\x2c\x90\x17\x67\xca\xb8\x33\x1b\x12\x86\x91\x00\xd5\x46\x77\x55\x1d\x0d\x13\x4c\x95\xe0\x5a\x59\x32\x1d\x27\x30\xf4\xe1\xde\xf7\xca\xed\x83\x54\xa5\xf8\xe5\xdc\xd0\xcf\x7c\x3c\x80\x41\xe6\x68\xbe\x6b\xe9\x1d\xc2\xcc\x6b\x86\x63\x70\x40\x86\x30\xf0\x13\x16\x38\x9e\x22\xf2\x0b\x33\x90\x58\xe0\x9f\x38\xe6\x7c\x8e\xad\xa0\x20\xd9\xc5\xfe\xcb\x42\x96\x5e\x74\x70\xe7\x7b\xf0\x8a\x35\xbc\x6b\x42\xb5\xae\x9f\xc4\x9a\x1e\xe9\x4b\x88\x7c\x3c\xa6\xee\xfa\x3d\xdd\xac\x5d\x81\xb1\x83\x73\x5f\x78\x81\x63\xc4\x18\x57\x6c\xb1\x18\x57\xde\x13\xfe\x08\x0f\xb0\x9e\x63\x73\x59\x24\x17\xd0\xab\x7d\xcc\x83\xc2\x22\xca\x76\xc9\x75\x6d\x94\xf8\x1b\x77\xd1\xc9\x29\x06\x0e\x7e\x9a\xb1\xb6\x15\xaa\x4c\xaf\x9a\x2a\xf5\x85\x64\x61\xf2\xef\x96\xf7\xaa\xc2\xe9\x9b\xe9\x4f\xd1\x76\x6e\xfd\xdd\xf9\xb8\xc2\x53\xb8\x37\xfd\x6d\xe9\x46\x64\xbb\xb6\x6d\xa4\x28\xdf\x2e\xc8\x81\x35\xac\xe6\xcc\xdf\xbb\x81\x97\xbe\xad\xc1\xf0\x16\x32\x9e\x92\xd3\xef\x00\x00\x00\xff\xff\xbb\xbe\xb0\x04\xdf\x05\x00\x00"

func quorumcertificateAdminStart_votingCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminStart_votingCdc,
		"quorumCertificate/admin/start_voting.cdc",
	)
}

func quorumcertificateAdminStart_votingCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminStart_votingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/start_voting.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x74, 0xd6, 0x76, 0xa6, 0xaf, 0xc4, 0xa4, 0x4e, 0x1a, 0xb5, 0xaf, 0xf0, 0xc2, 0xb1, 0x18, 0x8d, 0xae, 0xb2, 0x66, 0x96, 0x92, 0x7, 0xf0, 0xf3, 0xa, 0xfc, 0xc3, 0xd3, 0x32, 0x12, 0x6c}}
	return a, nil
}

var _quorumcertificateAdminStop_votingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\xa7\x0c\x55\xb2\xa4\x7b\x05\x54\x25\x12\x33\x05\xd4\xdd\x38\x97\xc4\x52\xe2\x33\xe7\x0b\x1d\xaa\xfe\x77\x94\x58\x54\x20\xf5\x8d\xf6\x7d\xf7\xde\x3b\x3f\x45\x16\x45\xf1\x32\xf2\xb9\x19\xe7\xa4\x24\xc7\xa6\x30\x66\xbb\xc5\x07\x25\x85\x8a\x0d\xc9\x3a\xf5\x1c\xd0\xb1\x40\x07\xc2\xb1\x81\xe3\xa0\x62\x9d\x42\x19\x49\x39\xae\xef\xdf\xac\x3e\xf4\x88\x24\x9e\x5b\x63\xfe\xa2\x17\x63\x00\x20\x0a\x45\x2b\x54\x26\xdf\x07\x92\x1d\xec\xac\x43\xf9\xcc\x22\x7c\x3e\xd9\x71\xa6\x0a\x9b\x83\x73\x3c\x07\xad\x70\x59\x89\x45\x23\x29\x6c\x3b\xf9\xf0\x46\x1d\x1e\x91\xe1\x3a\x29\x8b\xed\xa9\xfe\x5c\xf1\x87\xcd\xbf\x06\xf5\x61\x99\x7f\x2a\x3b\xe1\x69\x87\x3b\x5f\xef\x99\x7e\xb5\x3a\x54\x37\xa3\x45\xfb\x3d\xa2\x0d\xde\x95\x45\xc3\xf3\xd8\x22\xb0\x22\x5b\x40\xa8\x23\xa1\xe0\x68\x69\xfd\xe5\x72\xa6\xa2\x32\x37\xfe\x37\xe4\x92\x2d\x9e\xd6\x6b\x94\x79\xfb\xd5\x5c\x7f\x02\x00\x00\xff\xff\xda\x4c\xc2\x61\x6a\x01\x00\x00"

func quorumcertificateAdminStop_votingCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateAdminStop_votingCdc,
		"quorumCertificate/admin/stop_voting.cdc",
	)
}

func quorumcertificateAdminStop_votingCdc() (*asset, error) {
	bytes, err := quorumcertificateAdminStop_votingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/admin/stop_voting.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x80, 0x2d, 0x33, 0x50, 0xe7, 0x19, 0xd6, 0xa, 0xe4, 0xee, 0x48, 0x1, 0x74, 0xfe, 0x82, 0x6, 0xe0, 0xa5, 0x3d, 0x92, 0x59, 0x54, 0x35, 0x8f, 0xeb, 0x5c, 0x59, 0x8e, 0x77, 0x51, 0xb5}}
	return a, nil
}

var _quorumcertificateCreate_voterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\xc1\x6e\x1a\x41\x0c\xbd\xf3\x15\x16\x87\x68\x91\x12\xb8\xa3\xa4\x51\x44\xd5\xaa\xea\xa1\x49\x13\xa5\x67\x33\x63\xd8\x69\x86\xf1\xd6\xe3\x05\xa1\x2a\xff\x5e\x79\x66\x03\xac\xba\x12\x62\x3c\x6b\x3f\xfb\x3d\xbf\x0d\xbb\x8e\x45\x61\xfa\x25\xf2\x61\x15\xfb\xac\x24\x4f\xab\xe9\x64\xb2\x58\xc0\x0b\x65\x85\x17\xc1\x94\xd1\x69\xe0\x04\x1b\x16\x40\x48\xec\x09\x94\x41\xe8\x4f\x6f\x19\x08\x4f\x2b\x78\x65\x25\x81\x1f\xeb\xdf\xe4\x14\x36\xc2\x3b\xd0\x96\xc0\x71\x52\x41\xa7\x86\xf6\x2b\xc4\x08\x6b\x82\xbe\xf3\xa8\xe4\x0d\xa1\xcf\x54\xd2\xa8\x63\xd7\x9e\x92\xe1\xd0\x52\x02\x6d\x51\x21\x64\x70\xbc\xeb\x22\x29\xf9\x32\x51\x4b\xb0\x2f\x9d\xb8\x76\xe2\x14\x8f\x90\x88\x7c\x36\xbc\x35\x81\x13\x2a\xe8\x9c\x1c\x01\x26\x6f\x10\x7b\x8c\xc1\x97\xe1\x69\x4f\x72\x84\x4d\xaf\xbd\x0c\x5d\x0d\xf5\xd0\x92\xd4\x41\x0a\xb5\x90\x01\x87\x9a\xac\xf8\x46\xbe\x5c\x17\x45\x1e\x51\x70\x47\x4a\x92\x97\x16\xda\x0f\xfd\x2e\xa4\x07\xef\x85\x72\x5e\x16\x10\xac\x01\xf0\xa6\x84\x4f\xab\x9a\x73\x29\x99\xdd\x57\xc5\x4c\x2a\x83\xb1\x16\xdf\x3e\x57\x80\xe0\x3f\x6a\xab\xd4\xa6\x44\x01\x76\x8e\xfb\x54\x54\xe1\x8e\x04\x35\xa4\xad\xd5\xda\x94\x21\x6d\xbf\xd3\x71\x59\x14\x1a\x62\x78\xa3\x63\x61\x5d\x37\x11\x23\x39\x65\x19\xc8\xe8\x79\xad\xcd\x98\xc2\x70\xb8\x3e\x8d\xf4\xac\x12\xd2\xf6\x7a\xd4\xa6\xde\xcd\xe0\xef\x64\x02\x00\xd0\x09\x75\x28\xd4\xe4\xb0\x4d\x24\x4b\xc0\x5e\xdb\xe6\x19\xf7\xf4\x8a\xb1\xa7\x19\x5c\x3d\xd4\xd1\x4f\x05\xf6\x2c\x16\xf0\x95\x06\x66\x45\x20\xa1\x0d\x09\xd9\xe2\x4e\x06\xaa\x2f\x06\xe2\xa7\xca\x48\x3a\xbc\xb9\x83\x2d\xe9\x00\x3e\xe2\x31\xfb\x3f\xf9\x27\x6d\xe0\xae\x1e\xe7\x0e\x3b\x5c\x87\x18\x34\x50\x9e\xaf\x59\x84\x0f\xb7\x57\xa3\x4f\x60\xfe\x60\x89\x9f\x9a\x45\xd7\xaf\x63\x70\x8b\x62\xbb\x95\xb9\x8b\xe5\x0c\x6e\xcf\xfd\x3d\x74\x98\x82\x6b\xa6\x2b\xee\xa3\xb9\x45\xa1\x42\x02\x5e\x70\x52\x3e\x33\x9a\xce\x46\x32\x14\x58\x32\xd7\x5d\x7a\xdb\xdc\x9b\x71\x4f\x10\xd4\x8a\xb3\xb2\xe0\x96\x46\xbc\x6a\xfe\xed\xcd\x89\xe0\xbc\xfa\xbf\x78\xab\xf9\x58\x60\xfd\x1f\x2f\xf0\x7c\xbe\x18\xa5\xae\x6f\x3e\x74\x9a\x5b\xf3\xe6\xf6\xa6\x34\xb9\x06\xe5\x25\x8c\x15\x2a\x5d\x9e\x6b\xf2\x23\x6a\x5b\x65\x79\x9f\xbc\xff\x0b\x00\x00\xff\xff\x71\xc8\x40\xf3\x54\x04\x00\x00"

func quorumcertificateCreate_voterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateCreate_voterCdc,
		"quorumCertificate/create_voter.cdc",
	)
}

func quorumcertificateCreate_voterCdc() (*asset, error) {
	bytes, err := quorumcertificateCreate_voterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/create_voter.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x70, 0xb, 0x90, 0x54, 0x6, 0xdc, 0xe5, 0x13, 0x4d, 0x2a, 0xd8, 0x68, 0x8d, 0x34, 0x30, 0x98, 0x54, 0x45, 0x2d, 0xd8, 0xc6, 0x39, 0x5a, 0x7f, 0xe1, 0x25, 0xd3, 0xdf, 0x81, 0x54, 0xa}}
	return a, nil
}

var _quorumcertificateScriptsGenerate_quorum_certificateCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x4b\x43\x31\x10\x87\xf7\xfc\x15\x3f\xb2\x98\x2c\x2d\x2e\x0e\x05\xe9\x10\x50\x3a\xbe\xc1\x49\x1c\x42\x7a\xaf\x06\xf2\x2e\x35\x77\x41\x41\xfc\xdf\xc5\xf6\xf5\xa9\xcd\x94\x83\xef\xe3\xbb\xcb\xd3\xb1\x36\x85\x7d\x28\xf5\x3d\x94\x2e\x4a\x6d\x08\xd6\x98\xf5\x1a\x8f\xa4\x02\x7d\x25\x88\x46\xed\x82\x3a\x22\x22\x9d\x99\x1b\xc1\x10\x70\x20\xa6\x16\x35\x57\x36\x26\xa6\x44\x22\x2e\x96\xe2\x31\x76\xc6\x14\x33\xbb\x99\xde\xf1\x9e\x3e\x36\x78\xda\xb1\xde\xde\xf9\x0d\xfe\xc5\x56\xcb\x0f\x9f\xc6\x00\x40\x21\xbd\x74\x04\xf7\x57\xf4\x81\x74\x1e\xc4\xf9\x33\xdf\x48\x7b\xe3\x45\x79\xfe\x5b\x7d\x59\xcd\x4b\xd2\xd0\x6b\xeb\x53\xa0\xa6\x79\xcc\x29\x2a\x39\x7f\xb2\x7f\xde\x76\x8b\x63\xe4\x9c\x9c\x0d\xb5\x97\x3d\xb8\xea\xe5\x38\xc2\xdb\x49\x44\xfa\x35\xad\x37\xe6\xeb\x3b\x00\x00\xff\xff\xde\xb3\x32\xb1\x3a\x01\x00\x00"

func quorumcertificateScriptsGenerate_quorum_certificateCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGenerate_quorum_certificateCdc,
		"quorumCertificate/scripts/generate_quorum_certificate.cdc",
	)
}

func quorumcertificateScriptsGenerate_quorum_certificateCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGenerate_quorum_certificateCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/generate_quorum_certificate.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x88, 0xb3, 0x82, 0xce, 0x2b, 0x5d, 0x7, 0x93, 0x1c, 0xf9, 0x97, 0x38, 0x4c, 0x47, 0x51, 0xbc, 0x89, 0xb4, 0xf5, 0x3a, 0xec, 0x18, 0x9e, 0x1e, 0x91, 0xbc, 0xa1, 0xb7, 0x25, 0x9b, 0x25}}
	return a, nil
}

var _quorumcertificateScriptsGet_clusterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xce\x29\x2d\x2e\x49\x2d\x0a\x74\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x86\x28\xf0\xcc\x4b\x49\xad\xb0\x52\x08\xf5\xcc\x2b\x31\x34\xd3\xb4\x52\x40\xd1\xab\x07\x65\x29\x54\x73\x71\x29\x28\x28\x28\xe4\xa4\x96\x28\x40\xf5\x15\x2b\xd8\xa2\xa9\x4d\x4f\x2d\x81\x72\x8a\x35\x34\x21\xea\x8b\x52\x4b\x4a\x8b\xf2\xe0\x5a\xa2\x91\xed\x8c\xe5\xe2\xaa\x05\x04\x00\x00\xff\xff\x9b\xc2\x7d\xd5\xb1\x00\x00\x00"

func quorumcertificateScriptsGet_clusterCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_clusterCdc,
		"quorumCertificate/scripts/get_cluster.cdc",
	)
}

func quorumcertificateScriptsGet_clusterCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_clusterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x57, 0xbc, 0x53, 0xe, 0xa8, 0x2f, 0x69, 0x7b, 0x9, 0xb, 0x85, 0x0, 0x22, 0x11, 0xd3, 0xf3, 0x32, 0x72, 0x63, 0xc1, 0x87, 0x4a, 0xbb, 0x81, 0xc7, 0xdf, 0x99, 0xbb, 0xd3, 0xb5, 0xe7}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_completeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\x4b\x03\x41\x10\x05\xe0\x7e\x7e\xc5\x33\x8d\xbb\x4d\x82\x8d\x45\x20\x8d\x0b\x4a\xca\x14\x56\x62\xb1\x9c\x73\xe7\xc2\xdc\xec\xb1\x33\x8b\x82\xf8\xdf\x2d\xee\x14\x53\x0e\x7c\xf3\xde\x2b\xf3\x52\x9b\x63\xf7\x28\xf5\x23\x49\x37\xe7\x76\x49\x3b\xa2\xc3\x01\x4f\xec\x06\x7f\x67\x98\x67\xef\x86\x3a\x22\x63\x58\xcd\xad\xe1\x92\x30\xb1\x72\xcb\x5e\xaa\x12\xe5\x61\x60\xb3\x90\x45\x22\xc6\xae\x98\x73\xd1\xb0\xe9\xb3\xbe\xf1\xe7\x11\xcf\x67\xf5\xbb\xfb\x78\xc4\x43\xad\x82\x2f\x22\x00\x10\xf6\xdf\x50\xc3\x09\x57\x3b\xf6\x13\xfb\x76\x58\x88\xab\x6f\xec\xbd\xe9\xdf\xcb\xcb\xff\x8a\xd7\x7d\xb1\x54\xe7\x45\xd8\x39\x44\xdc\x9c\xa0\x45\x88\xbe\x7f\x02\x00\x00\xff\xff\xd1\xd0\xab\xa9\xe5\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_completeCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_completeCdc,
		"quorumCertificate/scripts/get_cluster_complete.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_completeCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_completeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_complete.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x3e, 0x9c, 0x1, 0xa4, 0xe7, 0x9, 0x5e, 0xcf, 0x9e, 0x69, 0x98, 0x6d, 0x6d, 0x93, 0x60, 0x35, 0x18, 0xc4, 0x60, 0xe0, 0xa4, 0x27, 0xc7, 0xf9, 0xe6, 0x2f, 0x58, 0xa8, 0x62, 0x50, 0xa5}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_node_weightsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xb1\xaa\xc2\x40\x10\x45\xfb\xf9\x8a\x4b\xaa\xa4\x09\x3c\x78\xa4\x08\x58\x05\x84\x94\x22\x62\x21\x16\x21\x19\xe3\xc2\x66\x22\x3b\xb3\x28\x84\xfc\xbb\xc5\x06\xd1\xf2\x5e\xce\xe1\xb8\xe9\x31\x07\x43\xb6\xf7\xf3\xb3\xf1\x51\x8d\xc3\xa1\xc9\x88\xba\xbe\x67\xd5\xbc\xf3\xbe\xc0\x2d\x0a\xa6\xce\x49\xde\x27\xa0\x95\x81\x5f\x35\x4e\xad\xd8\x5f\x55\xd4\x58\x8e\x16\x9c\x8c\xe9\xa9\xfe\x57\x2c\x44\x00\xe0\xd9\xb0\x29\x8a\x1d\x7e\x12\xe5\xc8\xb6\x0d\xcd\x8b\xc4\x07\xb6\x18\xe4\xa3\x5c\xbe\x73\xd7\x52\xe6\x81\xcf\xec\xc6\xbb\x29\xd1\xfa\x0e\x00\x00\xff\xff\xd4\x86\x2e\x74\xb8\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_node_weightsCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_node_weightsCdc,
		"quorumCertificate/scripts/get_cluster_node_weights.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_node_weightsCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_node_weightsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_node_weights.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0xcb, 0xf6, 0xa3, 0x97, 0x10, 0x84, 0xe1, 0xe2, 0xf7, 0x8f, 0xbf, 0xb, 0xe3, 0xa9, 0xa6, 0x2, 0x9d, 0xcc, 0x50, 0x62, 0xc4, 0x14, 0xaf, 0xc5, 0x11, 0x15, 0xad, 0x23, 0x8, 0xfc, 0x26}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_vote_thresholdCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xce\x29\x2d\x2e\x49\x2d\x0a\x74\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x86\x28\xf0\xcc\x4b\x49\xad\xb0\x52\x08\xf5\xcc\x2b\x31\x34\xd3\x84\x30\xcc\x4c\x14\xaa\xb9\xb8\x14\x14\x14\x14\x72\x52\x4b\x14\xa0\x0a\x8b\x15\x6c\x15\x50\x0c\xd6\x4b\x4f\x2d\x81\x72\x8a\x35\x34\x21\xea\x8b\x52\x4b\x4a\x8b\xf2\xe0\x5a\xa2\x91\x2d\x89\xd5\x2b\xcb\x2f\x49\x0d\xc9\x28\x4a\x2d\xce\xc8\xcf\x49\x01\x69\xa9\x05\x04\x00\x00\xff\xff\xe2\x66\x0f\x1b\xb2\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_vote_thresholdCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_vote_thresholdCdc,
		"quorumCertificate/scripts/get_cluster_vote_threshold.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_vote_thresholdCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_vote_thresholdCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_vote_threshold.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x52, 0x2a, 0x78, 0xdc, 0x6d, 0x54, 0xbc, 0x1a, 0x59, 0xe, 0x19, 0xd7, 0xe, 0xac, 0x74, 0x11, 0x7a, 0x76, 0x10, 0xc7, 0xfa, 0xf5, 0xea, 0xd9, 0x55, 0xf3, 0xf1, 0x96, 0x6e, 0xff, 0x9b}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_votesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbd\x6a\x85\x40\x10\x85\xfb\x79\x8a\x83\x95\x36\x4a\x9a\x14\x42\x2a\x21\x60\x99\x40\xd2\x88\xc5\xb2\xce\x26\x0b\xeb\xae\xec\x8c\xf9\x21\xe4\xdd\x83\xd1\x7b\xb9\x96\xc3\x9c\x73\xbe\xcf\xcf\x4b\xca\x8a\xe2\x31\xa4\xcf\x2e\xac\xa2\x9c\x9f\xba\x82\xa8\x69\xf0\xcc\xba\xe6\x28\x30\x11\x26\x67\xf3\x8d\xe4\xf0\x9a\x94\x05\x2e\x65\xe8\x3b\x43\x16\xb6\xde\x79\x9e\x60\xf7\x2a\x91\xb1\x96\x45\x4a\x13\x42\x05\xb7\x46\xcc\xc6\xc7\xf2\xf8\xf6\x71\xe2\xaf\x16\x2f\x7d\xd4\xbb\xfb\xaa\xc5\x70\x82\xd6\xdb\xf6\x88\x1f\x22\x00\x08\xac\x97\x51\xc1\x03\xce\xc9\x37\xd6\xe3\x90\xb2\xda\xf3\xf9\x5f\xf6\x5a\x19\x6e\x91\x63\xfd\xb1\x69\x13\xfd\xfe\x05\x00\x00\xff\xff\xbb\xac\x7d\x15\xee\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_votesCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_votesCdc,
		"quorumCertificate/scripts/get_cluster_votes.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_votesCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_votesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_votes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x48, 0xac, 0x1c, 0xe7, 0xe7, 0x8f, 0x5b, 0x8, 0x4a, 0xbb, 0x96, 0x53, 0x88, 0xbc, 0x37, 0xcd, 0xac, 0x25, 0x5a, 0xbe, 0xa5, 0x47, 0xa0, 0x26, 0x71, 0xd, 0xf8, 0xa9, 0x8b, 0x7d, 0x20}}
	return a, nil
}

var _quorumcertificateScriptsGet_cluster_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xce\x29\x2d\x2e\x49\x2d\x0a\x74\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\x48\x86\x28\xf0\xcc\x4b\x49\xad\xb0\x52\x08\xf5\xcc\x2b\x31\x34\xd3\x84\x30\xcc\x4c\x14\xaa\xb9\xb8\x14\x14\x14\x14\x72\x52\x4b\x14\xa0\x0a\x8b\x15\x6c\x15\x50\x0c\xd6\x4b\x4f\x2d\x81\x72\x8a\x35\x34\x21\xea\x8b\x52\x4b\x4a\x8b\xf2\xe0\x5a\xa2\x91\x2d\x89\xd5\x2b\xc9\x2f\x49\xcc\x09\x4f\xcd\x4c\xcf\x28\xe1\xe2\xaa\x05\x04\x00\x00\xff\xff\x64\x5c\x44\x55\xae\x00\x00\x00"

func quorumcertificateScriptsGet_cluster_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_cluster_weightCdc,
		"quorumCertificate/scripts/get_cluster_weight.cdc",
	)
}

func quorumcertificateScriptsGet_cluster_weightCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_cluster_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_cluster_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x9b, 0x18, 0xfe, 0x77, 0xec, 0xd4, 0xfd, 0xc4, 0x2, 0x62, 0xa0, 0x73, 0x97, 0x9a, 0xd1, 0xfb, 0x31, 0x4c, 0x8a, 0xe8, 0x6, 0xbb, 0xc2, 0x3, 0x6b, 0x40, 0xc1, 0x82, 0x94, 0x54, 0xc2}}
	return a, nil
}

var _quorumcertificateScriptsGet_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x4b\xc4\x40\x10\x46\xfb\xf9\x15\x1f\x57\x25\x8d\x87\x8d\xc5\x81\x55\x40\xb8\x52\xc4\x2a\xa4\x18\x36\x13\xb3\x30\xd9\x0d\xb3\x13\xa2\x88\xff\x5d\x24\x09\x98\x6e\x60\xbe\xc7\x7b\x71\x9a\xb3\x39\x2e\x2f\x9a\xd7\x46\x97\xe2\x62\xaf\xcd\x85\xe8\x7a\xc5\x5b\xb0\x38\x3b\x3c\xc3\xc4\x17\x4b\xe0\x04\x36\xe3\x2f\xe4\x01\x4d\x56\x95\xe0\xd9\xb0\x53\x05\x6b\xf4\x11\xac\xfa\xf7\xf6\x51\xa2\x61\x12\xe7\x9e\x9d\x89\x38\x04\x29\xa5\x62\xd5\x1a\xc3\x92\x30\x71\x4c\x55\xd8\xc8\x7b\xea\xe5\xf3\x86\xf7\x7b\xf2\xc7\xa7\xfa\x86\xf6\xd4\xf2\xb0\x5f\x1d\xbe\x89\x00\x40\xc5\x11\x0e\xe7\x33\xce\xe3\x0f\xf1\xa3\xa7\xaa\xb7\xfd\x1e\x7f\x20\xed\x7f\x6b\x47\xf4\xf3\x1b\x00\x00\xff\xff\x58\x3c\x4c\x02\x02\x01\x00\x00"

func quorumcertificateScriptsGet_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_clustersCdc,
		"quorumCertificate/scripts/get_clusters.cdc",
	)
}

func quorumcertificateScriptsGet_clustersCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x71, 0x27, 0x25, 0xfe, 0x9b, 0xc1, 0x91, 0xc2, 0x1f, 0xdc, 0xed, 0xb7, 0x6a, 0xf9, 0x15, 0x4b, 0xb4, 0xfc, 0x66, 0x31, 0xe5, 0x9c, 0xfc, 0x93, 0x7a, 0xc8, 0xac, 0x28, 0xa8, 0xd, 0x93}}
	return a, nil
}

var _quorumcertificateScriptsGet_node_has_votedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x6f\xd3\x40\x10\x85\xef\xfb\x2b\x9e\x7a\xa8\x62\xa9\x8a\xef\x3d\x12\x40\xf4\x82\x20\x2d\xdc\x27\xf6\x38\xbb\xca\x7a\xc6\xda\x19\xc7\x42\x88\xff\x8e\xd6\x4e\x24\xe8\xd9\x9e\xf7\xbe\xf7\x6d\x1a\x27\x2d\x8e\x87\xcf\x59\x97\x43\x9e\xcd\xb9\x7c\x3f\x3c\x84\xd0\xb6\x38\xb2\xcf\x45\x0c\x84\x93\x6a\x66\x12\x24\xe9\x53\x47\x9e\xe4\x8c\x34\x80\x20\xda\x33\x22\x19\x6c\x3e\x8d\xc9\x9d\x7b\x10\xae\xea\x8c\x41\x0b\x3c\x26\x03\x4f\xda\xc5\x10\xa8\xeb\xd8\x6c\x47\x39\x37\x18\x66\xc1\x48\x49\x76\xf5\xfc\xe5\xe3\x33\x5e\xbd\x24\x39\x37\xcf\xf8\xa0\x9a\xf1\x3b\x04\x00\x68\x5b\xbc\x0c\x58\x18\x54\x18\x49\xe0\x91\x61\x4e\x97\x5a\x4e\x73\xe7\x49\x05\x53\x24\x63\xec\xae\xba\x22\x89\x7a\xfd\x71\x2a\x7a\x2e\x6c\xd6\x3c\xad\x37\x15\xc7\xee\x89\x43\xd1\x11\x99\xcc\x37\xae\x35\xdb\x3c\xe5\x0c\x73\x2d\x15\x5f\xfa\x75\xd5\x17\xb2\x9f\x5a\xf7\x14\xae\x7e\x0c\x6f\x65\xe6\x3d\x5e\x93\x74\x8c\x85\xef\x79\x2a\xf9\x17\x16\x12\x87\x2b\x2e\xa2\x0b\x96\xc8\x1e\xb9\x54\xf0\x48\xd7\xad\xbe\xbf\xe9\x60\x1c\x7e\x1c\x8f\x9f\xbe\xbe\x6d\xed\x4f\xd0\x31\xf9\xa6\xa9\x23\xe3\xfd\x9a\x5a\x56\xeb\xf8\xef\x3d\xf6\x49\xbe\xdd\x56\xe1\xf1\xf1\xdd\xb7\x7f\x71\x6f\x4a\x9b\x10\xfe\xfc\x0d\x00\x00\xff\xff\x17\x9a\xbc\x28\xd9\x01\x00\x00"

func quorumcertificateScriptsGet_node_has_votedCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_node_has_votedCdc,
		"quorumCertificate/scripts/get_node_has_voted.cdc",
	)
}

func quorumcertificateScriptsGet_node_has_votedCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_node_has_votedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_node_has_voted.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x41, 0xec, 0xc8, 0x0, 0xd6, 0x4f, 0x34, 0x97, 0xb6, 0x86, 0xc5, 0x47, 0x1c, 0x9f, 0x5b, 0x5d, 0xb8, 0xa3, 0x69, 0xd8, 0x22, 0x87, 0x57, 0x15, 0x7c, 0xd5, 0xae, 0x6f, 0x8b, 0x17, 0xce}}
	return a, nil
}

var _quorumcertificateScriptsGet_node_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4b\x86\x40\x10\x86\xef\xfb\x2b\xde\xef\x3b\x29\x84\x14\x84\x07\xc1\x93\x11\x78\x8c\x88\x0e\xe2\x61\xd1\xd1\x16\xd6\x31\x76\x46\x0a\xc4\xff\x1e\xba\x12\x45\xa7\xe6\x36\xcc\xf3\xbe\x0f\xe3\xa6\xf7\x39\x28\xae\x8f\x7e\xfe\xa8\xfc\x22\x4a\xe1\xa9\xba\x1a\x63\xbb\x8e\x44\x12\xeb\x7d\x8a\x61\x61\x4c\xd6\x71\xd2\x45\xa0\xe6\x9e\x3e\x0b\xbc\xd4\xac\x77\xf9\x0d\x78\xee\xa9\x7e\x28\xf0\xac\xc1\xf1\x98\xc6\x43\x7e\x8f\xd5\x18\x00\xf0\xa4\x38\x83\x82\x12\xbf\x44\xd9\x48\x7a\x2e\x92\xa4\x91\x77\xc3\x37\xde\xfc\x14\xb6\xd9\x2e\x7a\x25\x37\xbe\xa9\x34\x51\xda\xe2\x52\x82\x9d\xc7\x7a\x44\xf7\x09\xa4\x4b\xe0\x7f\x54\x5c\x8e\xe8\x06\xf2\x42\x7f\x7b\x6e\x61\xe5\x7c\x28\x72\xc6\x6c\x5f\x01\x00\x00\xff\xff\xb8\x0f\x7f\xe9\x34\x01\x00\x00"

func quorumcertificateScriptsGet_node_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_node_weightCdc,
		"quorumCertificate/scripts/get_node_weight.cdc",
	)
}

func quorumcertificateScriptsGet_node_weightCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_node_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_node_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x7d, 0xb5, 0x80, 0x29, 0x79, 0x70, 0x5b, 0xb1, 0xc3, 0x63, 0x6d, 0xe1, 0x74, 0x6a, 0x78, 0x22, 0x88, 0x94, 0xf2, 0x96, 0xd1, 0x77, 0x21, 0x21, 0x82, 0x5e, 0xfa, 0xcc, 0x8b, 0x99, 0x22}}
	return a, nil
}

var _quorumcertificateScriptsGet_qc_enabledCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x77\xce\x29\x2d\x2e\x49\x2d\x0a\x74\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x70\xca\xcf\xcf\x51\xa8\xe6\xe2\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x40\xd1\xaa\x97\x99\x17\x50\x94\x9f\x5e\x94\x5a\x5c\xcc\xc5\x55\x0b\x08\x00\x00\xff\xff\x7a\x63\x3a\xd3\x5e\x00\x00\x00"

func quorumcertificateScriptsGet_qc_enabledCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_qc_enabledCdc,
		"quorumCertificate/scripts/get_qc_enabled.cdc",
	)
}

func quorumcertificateScriptsGet_qc_enabledCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_qc_enabledCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_qc_enabled.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x52, 0xa4, 0x1b, 0xc1, 0x1, 0x36, 0x1e, 0x4d, 0xbc, 0x7a, 0x9, 0x16, 0x60, 0x9f, 0x96, 0x9, 0xaa, 0x47, 0x57, 0xd7, 0x3f, 0x9e, 0xfa, 0xb8, 0x20, 0x95, 0xdb, 0x40, 0x1e, 0x33, 0x36}}
	return a, nil
}

var _quorumcertificateScriptsGet_voter_is_registeredCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x0e\x82\x40\x10\x45\xfb\x39\xc5\x0f\x15\x34\xd2\x53\x8a\x31\xa1\x14\x4f\xb0\xc2\x40\x26\x59\x66\xcc\xec\x82\x85\xf1\xee\x06\x63\x4c\xec\xff\xfb\xef\xc9\x72\x37\xcf\x28\xce\xd1\x1e\x6d\x5c\x53\x66\xbf\xb4\x05\x51\x5d\xa3\xe7\xbc\xba\x26\x04\xdc\xcc\x22\x07\x85\xe8\x28\x43\xc8\xa2\x33\x64\x42\x80\xda\xc8\x90\x04\xe7\x59\x76\x92\x47\x4c\xe6\xd8\x6c\x9f\x10\x85\x61\xe0\x94\xca\x10\x63\x85\x69\x55\x2c\x41\xb4\xdc\x99\xee\xd4\xe0\x9a\x5d\x74\xae\x1a\x1c\xcd\x22\x9e\x44\x00\xe0\x1f\x25\xfe\x62\x0e\x9b\x65\xf6\x2e\xf5\x3f\xc9\xf7\xa3\x22\x7a\xbd\x03\x00\x00\xff\xff\xd9\x05\xfd\xf0\xbf\x00\x00\x00"

func quorumcertificateScriptsGet_voter_is_registeredCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_voter_is_registeredCdc,
		"quorumCertificate/scripts/get_voter_is_registered.cdc",
	)
}

func quorumcertificateScriptsGet_voter_is_registeredCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_voter_is_registeredCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_voter_is_registered.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0xfc, 0x66, 0x97, 0xda, 0x96, 0x44, 0x51, 0x28, 0x81, 0xbe, 0x85, 0x8a, 0xd0, 0x6d, 0x6c, 0x42, 0x87, 0xc, 0x79, 0x40, 0x31, 0x93, 0x23, 0x86, 0x69, 0xdc, 0x40, 0x2d, 0x2d, 0xd6, 0x75}}
	return a, nil
}

var _quorumcertificateScriptsGet_voting_completedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\x8e\xc2\x30\x10\x05\xd0\x7e\x4e\xf1\x95\x2a\x69\x36\xfd\x96\x1b\x69\x7b\xb8\xc1\xc4\x9e\x90\x91\x6c\x4f\x64\x8f\x43\x81\xb8\x3b\x82\x8e\x13\xbc\xa7\xf9\xb0\xea\x18\xfe\x93\xdd\x97\xd4\x9b\x4b\xbd\x2c\x03\xd1\x3c\xe3\x2a\xde\x6b\x69\x60\xac\x66\x49\xb8\x40\x4b\xd4\xc0\xae\xe5\x06\xdd\xc0\x28\x16\x05\x3b\x37\xb4\xbe\x66\x75\x97\x08\xc6\x69\x2e\xd8\xac\xc2\x77\x6d\x90\xc3\xc2\x4e\xc4\x21\x48\x6b\x23\xa7\x34\x61\xeb\x05\x99\xb5\x8c\xd3\x2f\xfe\xcc\x12\x1e\x44\x00\x50\x3f\x1e\xbe\x26\x3f\xa7\xbd\xb9\xc5\xf2\x91\xc4\x25\x8e\x13\xd1\xf3\x15\x00\x00\xff\xff\x06\xf8\xc3\xd6\xb4\x00\x00\x00"

func quorumcertificateScriptsGet_voting_completedCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateScriptsGet_voting_completedCdc,
		"quorumCertificate/scripts/get_voting_completed.cdc",
	)
}

func quorumcertificateScriptsGet_voting_completedCdc() (*asset, error) {
	bytes, err := quorumcertificateScriptsGet_voting_completedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/scripts/get_voting_completed.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0x5c, 0xab, 0x2a, 0xde, 0x14, 0x21, 0x5c, 0x32, 0xf1, 0x87, 0x5b, 0xab, 0x6d, 0x9c, 0x37, 0xf7, 0x8, 0x48, 0x66, 0x3f, 0x33, 0xc7, 0xf8, 0xd3, 0xc6, 0xc1, 0xff, 0xc3, 0xb, 0xfd, 0xea}}
	return a, nil
}

var _quorumcertificateSubmit_voteCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x51\xcb\x9b\x40\x10\x7c\xbf\x5f\x31\xf8\xf0\x55\xa1\xd5\x77\x69\xfb\x91\x0a\x7d\x2b\x24\x4d\xc9\xfb\x45\x57\x3d\xa2\x77\x76\x6f\xaf\x69\x29\xf9\xef\xe5\xbc\x26\x24\xe1\x5b\x10\xdc\xdd\x99\xd9\x71\x34\xf3\xe2\x58\x90\x7d\x9d\xdc\xb9\x99\x82\x17\xe2\x5d\x93\x29\x55\x55\xd8\xc0\xba\x8e\xf0\xcb\x09\x31\x82\x27\x0f\x19\x8d\x87\xb0\xb6\x5e\xb7\x62\x9c\x85\x38\xf8\x70\x9c\x8d\x40\x63\xd7\xac\x50\x55\x55\x91\xbc\xd5\xac\x67\x12\x62\x5f\xc7\x36\x3e\x71\xbb\x37\x83\xd5\x12\x98\x6a\xfc\x18\x09\xde\x0c\x96\x3a\xcc\xe4\xbd\x1e\x08\xc1\x1b\x3b\x40\x46\x5a\x2f\xbf\xf3\xf0\xa2\x4f\x71\x74\xa2\x3f\x57\x85\x6f\x09\x9b\xf8\x23\xfd\xfe\x40\xb6\x75\x1d\x75\xf0\xc2\x11\xea\xfa\x55\x80\xf5\xf9\x2a\xab\xd4\x9d\xe5\xfc\xc9\xc5\x7e\x65\xbd\x7f\x94\x4e\xc3\x02\x7f\x95\x02\x80\x85\x69\xd1\x4c\xf9\xea\x96\x6b\xe8\x20\x63\xfe\xc5\x31\xbb\xf3\x41\x4f\x81\x0a\xbc\x6c\xda\xd6\x05\x2b\x91\x82\xff\x35\x91\xa4\xec\xbe\x53\x8f\x4f\xe9\x53\xb9\xf4\xe2\x58\x0f\x54\x1e\x57\xfa\xc7\x97\x87\xdc\xcb\x43\xc4\x7f\xce\x7b\x76\x73\x8d\x37\x56\xfb\xc4\xde\x6a\x19\x8b\xdb\xa1\x58\xaf\xaf\x58\xb4\x35\x6d\x9e\x35\x2e\x4c\x1d\xac\x13\xa4\x13\x60\xea\x89\xc9\xb6\x14\xff\xd6\xcf\x36\x79\xca\x0a\x75\xe3\x5f\x4d\x96\xf1\xe5\x39\x9f\x87\xf6\x29\xa6\xbb\x26\xb9\xb9\xa8\xcb\xbf\x00\x00\x00\xff\xff\xae\x45\x26\xab\x50\x02\x00\x00"

func quorumcertificateSubmit_voteCdcBytes() ([]byte, error) {
	return bindataRead(
		_quorumcertificateSubmit_voteCdc,
		"quorumCertificate/submit_vote.cdc",
	)
}

func quorumcertificateSubmit_voteCdc() (*asset, error) {
	bytes, err := quorumcertificateSubmit_voteCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quorumCertificate/submit_vote.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0x88, 0x4, 0x4c, 0x2a, 0x83, 0x35, 0x78, 0x6e, 0x87, 0xd1, 0x43, 0xfb, 0x4c, 0x1, 0x57, 0x90, 0xf0, 0xe4, 0x1, 0xcd, 0x2b, 0xca, 0xac, 0x13, 0x16, 0xa2, 0x53, 0x18, 0x7f, 0xf3, 0x8d}}
	return a, nil
}

var _randombeaconhistoryScriptsGet_backfiller_max_entriesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\xc3\x40\x10\x46\xef\xf9\x15\x43\x0f\x65\xf7\x92\x5e\xc4\x43\xa8\x0d\x89\x08\x7a\x10\x44\xd0\xfb\x74\x33\x49\x17\x27\xb3\x32\x3b\x8b\x8a\xf8\xdf\xc5\x12\xac\x50\x6f\x03\xf3\x1e\xdf\x8b\xf3\x6b\x52\x83\xd5\x23\xca\x90\xe6\x9e\x30\x24\xb9\x8d\xd9\x92\x7e\xac\xaa\x0a\x43\xa0\x9c\x1d\x32\x7b\x18\x8b\xc0\x8c\x51\xdc\x1e\xc3\xcb\x18\x99\x49\xbb\x61\x50\xca\xb9\x81\xe5\xf0\x0d\x3c\xdd\x89\x5d\x5e\xb4\xf0\x59\x01\x00\x30\x19\x9c\x70\xb8\x82\x89\xac\x2b\x76\xe8\x42\x48\x45\x6c\x8b\xc5\x0e\xae\x4f\xaa\xe9\xed\x19\xb9\x90\x87\xf5\xf2\xda\x9d\xcf\xf8\xfa\x27\x0b\x27\xaa\xf7\x47\x63\xbb\xfe\x27\xba\xee\x7f\xb5\x9d\x1b\x35\xcd\x0d\x6c\x16\x6d\xa3\xe7\xf8\x89\xf6\xc7\x60\x25\x2b\x2a\x7f\x9a\xdb\x7a\x22\xbb\xc7\xf7\x1b\x31\x8d\x94\x1f\x48\xaf\x91\xd9\x79\x68\x5b\x90\xc8\xd5\xd7\x77\x00\x00\x00\xff\xff\xf1\x75\x4f\x97\x41\x01\x00\x00"

func randombeaconhistoryScriptsGet_backfiller_max_entriesCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryScriptsGet_backfiller_max_entriesCdc,
		"randomBeaconHistory/scripts/get_backfiller_max_entries.cdc",
	)
}

func randombeaconhistoryScriptsGet_backfiller_max_entriesCdc() (*asset, error) {
	bytes, err := randombeaconhistoryScriptsGet_backfiller_max_entriesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "randomBeaconHistory/scripts/get_backfiller_max_entries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xc, 0x4a, 0x24, 0x16, 0x69, 0xb, 0xe5, 0x5b, 0x48, 0x19, 0x67, 0xd9, 0xd9, 0x37, 0x26, 0xe4, 0x9f, 0xfe, 0xb1, 0x10, 0x4e, 0x1c, 0xb4, 0xaa, 0x81, 0x6b, 0x3d, 0x7d, 0xc3, 0x94, 0x59}}
	return a, nil
}

var _randombeaconhistoryScriptsGet_latest_source_of_randomnessCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xb1\xae\x83\x30\x0c\x45\xf7\x7c\xc5\x15\x13\x19\x1e\xd2\x5b\x19\xe9\xc2\x56\xa9\xfd\x82\x28\x35\x10\x15\xec\xca\x71\x86\xaa\xea\xbf\x57\x84\x15\x8f\xf7\x9c\x23\xa7\xed\x25\x6a\x68\x6e\x81\x1f\xb2\x0d\x14\xa2\xf0\x98\xb2\x89\xbe\x1b\xe7\x42\x8c\x94\x73\x1b\xd6\xd5\x63\x2a\x8c\x2d\x24\x6e\x7d\x8f\x13\xbb\x3b\xb6\xbb\x14\x8d\x84\x8f\x03\x00\x25\x2b\xca\xa7\x76\xae\xde\x75\x3a\x18\xef\x5f\x6a\xb2\x5f\xb0\x61\x95\xf8\x1c\x29\xcd\x8b\xf5\x98\xc9\x2e\x45\x95\xf8\x98\x5b\xdf\x2d\x95\xe0\x0f\xff\xb5\xf1\xee\xeb\x7e\x01\x00\x00\xff\xff\xf0\x98\xc8\x29\xc8\x00\x00\x00"

func randombeaconhistoryScriptsGet_latest_source_of_randomnessCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryScriptsGet_latest_source_of_randomnessCdc,
		"randomBeaconHistory/scripts/get_latest_source_of_randomness.cdc",
	)
}

func randombeaconhistoryScriptsGet_latest_source_of_randomnessCdc() (*asset, error) {
	bytes, err := randombeaconhistoryScriptsGet_latest_source_of_randomnessCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "randomBeaconHistory/scripts/get_latest_source_of_randomness.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xa4, 0x75, 0x4f, 0xef, 0x7f, 0xaa, 0x32, 0x42, 0x97, 0x99, 0x27, 0x7f, 0xe5, 0x88, 0xed, 0x26, 0x42, 0xef, 0xc0, 0xfc, 0x6, 0xb9, 0xfe, 0x81, 0xc, 0x3, 0x7e, 0x1a, 0xdd, 0xca, 0x78}}
	return a, nil
}

var _randombeaconhistoryScriptsGet_source_of_randomnessCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\xc5\xaf\x4e\xbd\xa5\xb7\x20\x86\x8e\x9d\xca\x84\x74\x88\x07\x08\xa9\xc3\x45\x5c\x6c\xb0\x1d\x24\x84\x78\x77\xd4\x9c\x84\x44\x75\x63\xf2\xdb\xdf\xe7\xbf\xd4\x77\x51\xc7\x6e\x8a\x7c\x91\x7a\xa2\x98\x84\xcf\xc5\x5c\xf4\x6b\x17\xc2\x38\x8e\x98\xc8\xb5\xd0\x27\x19\x7c\x26\x98\x34\x4d\x04\xc9\xd0\xbe\xc1\x64\x86\x2c\xda\x43\xa5\x8f\x46\xe6\x74\xc1\xcb\x22\xe9\x0d\x33\x95\xd7\xd9\x91\x55\x6a\xcf\x37\x24\x48\xc2\xae\x31\xf9\xe1\x2a\x0b\x31\x25\x32\xdb\xc7\x65\x19\x90\x1b\xa3\xc6\xc2\xfb\xe8\xa7\x2b\xee\xdc\x69\x47\x3c\x3f\xb0\xdf\xdf\x0d\xc7\x2d\xdc\x61\xfd\x7b\x5a\xaf\xfc\x0e\x00\xa0\xe4\x4d\x79\x73\x7a\x6d\xf3\x98\xa7\xbf\x2e\xb7\xb2\x7f\xcf\x21\xfc\x84\xdf\x00\x00\x00\xff\xff\x5d\x21\x51\x1c\x31\x01\x00\x00"

func randombeaconhistoryScriptsGet_source_of_randomnessCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryScriptsGet_source_of_randomnessCdc,
		"randomBeaconHistory/scripts/get_source_of_randomness.cdc",
	)
}

func randombeaconhistoryScriptsGet_source_of_randomnessCdc() (*asset, error) {
	bytes, err := randombeaconhistoryScriptsGet_source_of_randomnessCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "randomBeaconHistory/scripts/get_source_of_randomness.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xa6, 0x99, 0x82, 0xb8, 0xdc, 0x36, 0x48, 0xb8, 0x9f, 0xd3, 0xec, 0xc3, 0x76, 0x62, 0xbd, 0xbc, 0x45, 0xc2, 0x80, 0x8d, 0xaf, 0x6f, 0x37, 0xc6, 0x4a, 0xf1, 0x85, 0x7e, 0x56, 0xab, 0x12}}
	return a, nil
}

var _randombeaconhistoryScriptsGet_source_of_randomness_pageCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xb1\x4e\xc3\x40\x10\x44\xfb\xfb\x8a\x51\xaa\x58\x42\x71\x83\x28\x52\x52\x41\x87\x82\xf8\x80\xe3\x32\xb6\x4f\xd8\xb7\x66\x77\x8d\x84\x10\xff\x8e\x72\xa4\x70\xe1\x74\xab\x19\xbd\x7d\x93\xa7\x59\xd4\xb1\x3b\xc5\x72\x96\xe9\x91\x31\x49\x79\xca\xe6\xa2\xdf\xbb\x10\xda\xb6\xc5\x89\xae\x99\x5f\x34\xf8\x40\x98\x2c\x9a\x08\xe9\xa0\x95\x28\x34\x43\x27\x5a\x4b\xe5\xe7\x42\x73\x9e\xf1\x3e\x4a\xfa\xc0\xc0\xdc\x0f\x8e\x4e\x65\xaa\xfd\x86\x04\x49\x8a\x6b\x4c\x7e\xb8\xc8\x42\x4c\x89\x66\xfb\x38\x8e\x0d\xba\xa5\x60\x8a\xb9\xec\xe7\xd8\xf3\x88\xb7\xe7\xe2\x0f\xf7\x77\x98\xa9\x2f\xab\xa0\x39\x6e\xbd\x3d\xfc\x67\xaf\x75\xed\x35\xbb\x50\xf8\x09\x00\xa0\xf4\x45\xcb\x26\xd8\xd3\x6f\xb0\x75\xc7\xca\x7f\x3d\x9a\xf0\x1b\xfe\x02\x00\x00\xff\xff\xf6\xbd\xa5\x21\x46\x01\x00\x00"

func randombeaconhistoryScriptsGet_source_of_randomness_pageCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryScriptsGet_source_of_randomness_pageCdc,
		"randomBeaconHistory/scripts/get_source_of_randomness_page.cdc",
	)
}

func randombeaconhistoryScriptsGet_source_of_randomness_pageCdc() (*asset, error) {
	bytes, err := randombeaconhistoryScriptsGet_source_of_randomness_pageCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "randomBeaconHistory/scripts/get_source_of_randomness_page.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xbb, 0xca, 0xd1, 0xca, 0xd5, 0xe, 0xe7, 0x65, 0x55, 0x6f, 0xbe, 0x6a, 0xc9, 0xb8, 0xc5, 0x74, 0x73, 0x5c, 0x48, 0xf8, 0xbe, 0xf8, 0x38, 0xf2, 0xa7, 0xc4, 0x61, 0x34, 0x67, 0xc0, 0x61}}
	return a, nil
}

var _randombeaconhistoryTransactionsSet_backfiller_max_entriesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\xc1\x4a\x03\x31\x10\x06\xe0\xfb\x3e\xc5\xb0\x87\x92\x5c\xb6\x17\xf1\xb0\xa8\xc5\x2d\x82\x1e\x04\x11\xf4\x3e\x4d\xa7\x1a\xcc\x66\x96\xc9\x04\x15\xe9\xbb\x4b\x5a\xcd\x0a\x76\xce\xf3\xcd\xfc\xfc\x7e\x9c\x58\x14\xda\x47\x8c\x5b\x1e\x07\x42\xc7\xf1\xd6\x27\x65\xf9\x6c\x9b\x46\x05\x63\x42\xa7\x9e\xa3\x19\xf1\xe3\x26\xaa\x78\x4a\x3d\x3c\xdd\x45\x3d\x3f\xb3\xf0\xd5\x00\x00\x4c\x42\x13\x0a\x19\x74\x4e\x7b\xc0\xac\xaf\x66\x60\x11\x7e\x7f\xc6\x90\xc9\xc2\xe2\xda\x39\xce\x51\x7f\xf7\xcb\x04\x52\xd8\xa0\x7b\xdb\xf9\x10\x48\xe0\x12\x0a\xee\xca\x5f\x7c\xa1\x6e\x73\xe0\x17\x8b\x13\xa9\xba\xa1\xaa\x2b\x53\xcf\x95\xd9\x09\x8f\x3d\x2c\x7f\x6e\x2c\xe5\xbf\x9d\x69\x85\x16\x56\x2b\x98\x30\x7a\x67\xda\x35\xe7\xb0\x85\xc8\x0a\xc7\xff\x7f\x03\x0a\x25\xce\xe2\xa8\xb5\x07\x5a\xfd\xbc\xd2\x25\xd2\xfb\xda\xd1\x03\xc9\x1a\x43\x28\xad\xf5\x30\x57\x67\x8f\x72\x0f\xcd\xbe\xf9\x0e\x00\x00\xff\xff\x2c\xdc\xe0\x9a\x7b\x01\x00\x00"

func randombeaconhistoryTransactionsSet_backfiller_max_entriesCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryTransactionsSet_backfiller_max_entriesCdc,
		"randomBeaconHistory/transactions/set_backfiller_max_entries.cdc",
	)
}

func randombeaconhistoryTransactionsSet_backfiller_max_entriesCdc() (*asset, error) {
	bytes, err := randombeaconhistoryTransactionsSet_backfiller_max_entriesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "randomBeaconHistory/transactions/set_backfiller_max_entries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0x39, 0x6d, 0x10, 0xb9, 0x62, 0xc2, 0xb3, 0xc3, 0xcd, 0xc, 0xe1, 0xff, 0xf9, 0x65, 0x33, 0xed, 0x40, 0xf6, 0x65, 0xf0, 0x29, 0xba, 0x14, 0x19, 0x39, 0x84, 0x83, 0xe8, 0xbd, 0x53, 0x5c}}
	return a, nil
}

var _stakingcollectionClose_stakeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xc1\x6e\xd4\x40\x0c\xbd\xe7\x2b\xac\x1e\xaa\x44\xaa\x52\x09\x6e\x2b\x60\x05\x05\xa4\x1e\x10\x88\x05\xee\xde\x89\x37\x19\x98\xd8\x91\xc7\xe9\x82\x50\xff\x1d\xcd\x4c\x93\x45\xb0\x48\xbd\x30\x87\xdd\xf8\xe5\x79\xde\xf3\x8b\xfd\x38\x89\x1a\x5c\xbc\x0d\x72\xdc\x19\x7e\xf3\xdc\xdf\x48\x08\xe4\xcc\x0b\x5f\x54\xd5\xf5\x35\xdc\x04\x89\x14\x41\x66\x03\x84\x58\x38\x20\xfb\xaf\xe4\x0c\x3c\x83\x0d\xb4\xa2\x6e\x6d\x4d\x8d\x9f\x06\x1f\xa1\x13\x8a\xc0\x62\xa0\x34\xca\x1d\x65\xba\x92\x13\xed\xe0\xa0\x32\xe6\xda\x77\xc4\xe6\xed\x07\x18\xee\x03\x5d\xa5\xde\xfd\x6c\xe0\xad\x74\x8f\x84\x49\x06\x2d\x93\xd1\x39\x99\xd9\x0a\xe0\x8a\x37\x6f\xe0\x90\x93\x0a\xdd\x91\x26\x0a\xc5\x8c\x62\x8f\x9e\xab\xca\x14\x39\x62\x36\x56\xb3\x74\x74\xfb\x7a\x03\x3b\x53\xcf\xfd\x15\x74\x14\xa8\x47\x13\x4d\xe0\xe7\x5b\xb6\xa7\x4f\xb6\x0d\xfc\xac\x00\x00\xf2\x4f\x20\x5b\x06\x3c\x45\xf3\x91\x0e\x1b\xc0\xd9\x86\xfa\x6c\x72\xed\xe9\xf1\xfd\x91\x49\x1b\xb8\x3c\xcf\xfb\x0b\xa9\xb2\xe6\xa4\x34\xa1\x52\xfd\x30\xec\x83\xd4\x2b\x51\x95\xe3\x17\x0c\x33\x35\x70\xf9\xb2\xbc\x5b\xbc\xa6\x13\x29\x1c\xda\x73\x5e\xe1\xf9\x92\x5b\x1b\x4d\x14\x7b\x6a\xf7\xf9\xb2\x67\xff\x63\x86\x17\x75\xfa\xb4\x1b\x78\x24\x7d\x57\x1c\x7d\x40\x1b\x9a\x75\x94\x74\xb6\x5b\x98\x90\xbd\xfb\x87\xbf\x9e\xec\x54\xbd\xf3\x31\x7a\xee\xdf\xa8\x8a\xd6\xec\x43\x53\xae\xba\x2f\x79\xd2\x77\x72\xb3\xd1\x63\xa2\x6a\xf3\x4e\x25\x35\x5a\x77\xa5\xfc\xff\xb1\x2b\xbf\x15\x8b\xd6\x7d\xf5\x2b\x00\x00\xff\xff\xcb\xae\x43\x98\x50\x03\x00\x00"

func stakingcollectionClose_stakeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionClose_stakeCdc,
		"stakingCollection/close_stake.cdc",
	)
}

func stakingcollectionClose_stakeCdc() (*asset, error) {
	bytes, err := stakingcollectionClose_stakeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/close_stake.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x29, 0x11, 0xcf, 0x71, 0x95, 0x77, 0x3e, 0xd4, 0xf5, 0x6b, 0x7d, 0xc2, 0xed, 0xf7, 0x74, 0x13, 0x74, 0x8f, 0x8d, 0xa6, 0x19, 0xa8, 0xd4, 0x56, 0x5f, 0xde, 0x24, 0xcf, 0x14, 0xb5, 0x3c}}
	return a, nil
}

var _stakingcollectionCreate_machine_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x61\x6f\x9b\x48\x10\xfd\x1c\x7e\xc5\x2b\x1f\x2a\x90\x2c\x92\x38\x6a\x75\x42\xe7\xab\x7c\x6e\xaa\x54\x55\xee\xa2\xb3\xee\xa4\xfb\x54\x8d\x61\x0c\xab\xe0\x5d\xb4\xbb\xc4\xb5\x5a\xff\xf7\x13\x0b\xd8\x26\xc6\x39\x4b\x6d\xf9\x80\x59\x3c\xf3\x66\x78\xef\x31\x8b\x58\x95\x4a\x5b\xcc\xf4\xa6\xb4\xca\x6b\x57\xfe\x87\x42\xad\xe7\x96\x1e\x85\xcc\x66\xaa\x28\x38\xb1\x42\x49\xdf\xf3\x2e\x2f\x2f\x31\xd3\x4c\x96\x0d\x08\x2b\x4a\x72\x21\x19\x94\x24\xaa\x92\x16\x4b\xa5\x41\x90\x2a\x65\xd8\x9c\x2c\x84\x01\x15\x9a\x29\xdd\x40\x48\xd8\x9c\x61\x1a\x4c\x24\x3b\x50\x07\x49\x32\x05\xa5\xa9\x41\x59\x2d\x0a\x91\xe0\x91\x37\x06\x56\xb9\x14\xc9\xeb\xae\x80\xe7\x59\x4d\xd2\x90\x4b\x0c\xea\x3a\x1f\xdf\xc7\x98\x5b\x2d\x64\x36\x82\x87\x83\xa3\x6d\x6d\xda\x24\x7e\xe2\xcd\xb9\x71\x73\x91\x49\xb2\x95\xe6\x69\x91\x29\x2d\x6c\xbe\x8a\xf1\xf7\x47\x69\x7f\xf9\xbf\xc4\x3b\x32\xf9\xf3\x9c\x10\x5f\x5d\x92\x3b\x15\x6c\xbb\xe7\xdf\x73\xfa\x17\x2f\x63\x50\x65\xf3\x60\x90\xf2\x68\x7f\xf9\xe7\x5a\xb2\x0e\xf1\x7a\x38\xee\xe8\x8e\xe7\x6a\x96\x9a\x4b\xd2\x1c\xb4\x04\xb6\xa5\x7e\x57\x5a\xab\xf5\x3f\x54\x54\x1c\xe2\x75\xfb\x08\x5d\xaf\x6d\x1a\xbe\x7a\x17\x17\x17\x67\xd0\x83\xc9\x04\xd7\xf8\xf6\xed\x1c\x2a\xeb\xd8\x71\xdc\xe3\xb1\x3e\xfc\x19\x49\xa9\x2c\x12\xe7\xac\xe7\xb6\x8a\x71\x5f\x19\x8b\x52\xab\x27\x91\x32\x08\xa6\xc3\x05\xed\x80\x35\xad\xf1\x54\x3f\x50\xe3\xbc\x44\x69\xcd\xa6\x54\x32\x75\x3e\xf2\x8f\x4a\x46\x89\x92\x09\xd9\xc0\x57\x92\xa1\x96\xce\x69\xf4\x44\xa2\xa0\x45\xc1\x43\x15\x8c\x73\x77\x4d\xbe\x73\x67\xe4\x87\xa7\x31\xff\x55\x55\xd7\x6e\x0a\x3f\xec\xee\x9f\x41\x50\x64\x55\x63\xd3\x20\x7c\x01\x1f\x8b\xca\xba\x8e\x55\x59\x4b\x6d\x40\x9a\xc1\xc2\xe6\xac\x71\x8d\xe0\x76\xf6\x7e\x3e\xfd\xfc\x30\x7e\xf3\x36\x84\xd2\x18\x77\x77\x0c\x27\xe5\xf8\xcd\xdb\xc7\xeb\xb0\xee\x7e\x48\xdd\x9e\x87\x4f\x0b\x7b\x14\x76\xf3\xdd\x9a\xe6\x64\xf2\x1f\x28\xe7\x91\xa2\x7d\xfc\x9f\x21\x66\x8f\x94\x1f\xa2\xe3\xfc\x6e\x3a\xfe\xdc\xa9\x78\xe3\xd6\x37\x6e\xdd\xc8\xb7\xf5\x76\xc8\x86\x8b\x65\x34\x34\x5b\x30\xe9\x18\x8f\x8c\x55\x9a\x32\x8e\x16\xee\xe5\xff\xf5\x67\xcc\x9c\xdf\x82\xa5\x56\xab\x18\x67\x86\xcf\x9b\x8e\x1e\xc8\xe6\x7d\x92\xde\xbd\x43\x49\x52\x24\x27\xfa\xcb\xd8\xee\x57\xf7\xc2\x18\x21\xb3\x5b\xad\x95\x0e\xa4\x28\xc2\x70\x4f\x8b\x58\xba\xa1\xdb\x97\x0a\x93\xd3\x74\x45\x8d\x5b\xef\x7b\x09\x1f\x94\xbe\xfd\x22\x8c\x15\x32\xfb\x43\xa5\xbc\xdb\x77\x9a\xdf\x11\x4a\xda\xb0\x8e\x3b\x9e\x0f\xc7\x28\xba\xa9\x2f\xb2\xda\x19\x98\xe0\xf8\x8d\x0f\x34\x35\x93\x38\x3e\x67\x80\x86\xaf\xbc\x23\xf4\xbc\x35\x1e\x26\xe8\x79\xf0\x25\xe4\x5e\x60\xf8\xaa\x87\x79\x54\xa0\xd9\x94\x3f\xf1\x06\x13\x3c\x74\xd7\x41\x3d\x40\xea\x88\xdd\xbf\x03\x65\xa2\x94\x13\x95\xf2\x1d\x7f\x09\xc2\x51\x97\x60\x06\x76\xd8\x96\x21\xaf\x89\x08\x5f\xd8\x69\x23\xf7\xc2\x52\x9a\x06\x07\x85\x77\x97\xa3\x1d\x1b\x2d\x70\xb7\x1c\x61\xcd\x22\xcb\x6d\x8c\xeb\xab\xab\xab\xe8\x6a\x5f\x62\x0b\x2e\x0c\x3f\x53\xad\xb1\x9f\x3f\x53\x55\x91\xe2\x60\x8c\x0d\x7f\xf3\xb8\xcf\x14\x95\xf2\xc1\x18\xd9\x7a\xcd\x79\xeb\xfd\x17\x00\x00\xff\xff\x16\x91\x3f\x95\x61\x09\x00\x00"

func stakingcollectionCreate_machine_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionCreate_machine_accountCdc,
		"stakingCollection/create_machine_account.cdc",
	)
}

func stakingcollectionCreate_machine_accountCdc() (*asset, error) {
	bytes, err := stakingcollectionCreate_machine_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/create_machine_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xf9, 0xef, 0x20, 0xd6, 0x77, 0xc6, 0x19, 0xa0, 0xa8, 0x6d, 0xa6, 0x88, 0xa0, 0x6, 0xe6, 0xef, 0xa5, 0x5e, 0xb3, 0xbd, 0xc7, 0x8a, 0x32, 0x6c, 0x44, 0xe3, 0xd, 0xa6, 0x95, 0x64, 0xd7}}
	return a, nil
}

var _stakingcollectionCreate_new_tokenholder_acctCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\xcc\xe6\x10\x48\x80\x57\x06\x7a\x34\x92\x00\xa9\xd1\x17\xb2\x45\x03\x24\xbb\x3d\x2c\x72\x60\xc4\xb1\xc4\x9a\x26\x05\x92\xb2\x2b\x14\xf9\xef\x05\x1f\x92\x48\x59\x46\xdc\x07\x0a\xd4\x17\x8b\x14\x67\xe6\x9b\x6f\x66\x3e\x91\xed\x1b\xa9\x0c\x6c\x54\xd7\x18\xb9\x08\xab\xab\xef\xb9\x3c\x3e\xcb\x1d\x8a\xab\x71\xab\x15\x15\x7b\xe5\x38\xd9\xfe\x24\xcb\x1d\x52\xb7\xa9\xaf\x12\xfb\x27\x43\x76\x4c\x54\x1b\xc9\x39\x96\x86\x49\x71\xb5\x58\xac\x56\xf0\x5c\x33\x0d\x46\x11\xa1\x89\xdb\x05\xc2\xb9\x3c\x6a\x30\x35\x42\x29\x85\x51\xf6\xbc\x02\xb9\x75\x3b\xdc\xb9\x07\x52\x96\xb2\x15\xc6\xda\x1b\x09\xa5\x42\x62\x10\x08\x08\x3c\x42\x0c\xa0\x70\x7f\x3f\x4a\x4e\xad\x87\xd7\xdf\xb0\x34\x40\x04\x05\x6d\xa4\x42\x60\x06\x98\x08\x56\x91\x43\xc2\xb5\x04\x42\x29\x13\x15\x10\xd0\x1e\x35\x94\x03\xec\xde\x91\x91\x0e\x51\x6c\x6d\xcd\x1f\x10\x1b\xeb\x77\xcf\x04\x05\x53\x13\x03\xc6\x66\x48\x25\x6a\x10\xd2\x86\x3c\x10\xce\xa8\x05\x6c\xcd\xf1\x77\xa6\x8d\x0d\x10\x43\x8d\xd0\x3c\xcb\xd4\x82\x98\xfe\xed\x12\x3a\xd9\x82\x40\xa4\x16\x0a\x32\x53\xa3\x02\x8a\x1c\x83\xe7\xd8\xa1\x42\x2d\x5b\x55\xa2\xf5\x28\xed\xf2\x20\x77\x68\x99\x86\x1d\x76\x1a\xb6\x4a\xee\x13\xdf\x8b\x45\x54\x91\xac\x69\x5f\x39\x2b\x1f\xb0\xd3\x6b\xf8\xea\x3b\xa3\x78\xc0\xee\x13\xd3\xe6\x3b\x61\x54\xf7\x92\xc3\x1f\x0b\x00\x80\x46\x61\x43\x14\x66\x9a\x55\x02\xd5\x1a\x48\x6b\xea\xec\x5b\xa9\x94\x3c\x7e\x21\xbc\xc5\x25\x3c\x19\xa9\x48\x85\x4b\xd8\x90\x86\xbc\x32\xce\x0c\x43\x9d\xc3\xf5\xbd\x8f\x6b\x1d\x39\x4f\xf6\xb7\x5a\xc1\xc6\x57\x76\xc2\xb3\xab\x21\xa1\x14\x3c\x30\x97\x43\x31\x98\x71\x34\xf6\x70\xf0\x08\xb7\x10\x9e\xb2\x86\x74\x16\x94\x07\x97\x0f\xe7\xb7\x52\x59\x0f\xb6\x66\x63\xa2\x21\xa1\xfe\x37\xfa\x2b\x5c\x30\x42\xe9\xc8\xca\xda\x9a\x17\xc3\x72\x09\x35\xd1\xf5\x3d\xaf\xa4\x62\xa6\xde\xfb\xb7\xc9\xd6\x12\x8e\xc8\xaa\xda\xf8\x57\xfe\x79\xc4\xf3\x96\x30\xf0\x03\x9a\xb1\x9a\x3f\x13\x41\x2a\x54\x23\x79\x5d\x5f\xba\xe9\x64\xa4\x74\x98\xc8\x78\xb4\xdd\x8c\xd3\x75\x1b\x58\x29\xca\xa8\x2c\x85\xf6\xc5\x2a\x2a\x34\xe3\x59\x9d\x6d\xa5\x7a\x24\xa6\x5e\xa7\xa3\x16\x2d\x42\xa4\x50\x6b\x7b\x36\xff\xfa\xcd\xcb\x87\x0b\x20\xc1\xed\xbb\x58\x47\x88\x1d\x10\xfd\x21\xe2\xe2\xc6\xb5\x5b\xa2\x4b\xc5\xaf\xcc\xd4\x54\x91\xe3\x32\x05\xfb\x59\x58\xba\xfc\x22\x87\xeb\x77\x12\xb9\x4b\x2a\xf2\x59\xfb\x86\xdc\x87\x62\x44\x78\xa6\x5a\x14\x8d\xe0\x4c\x41\xc2\x6c\xde\x7c\x4c\xb1\x79\x0f\x91\x69\x96\xb4\xa2\xaf\xf3\x3d\xa5\x0a\xb5\xee\xbb\xd9\x36\xa4\x5d\x2f\x93\xa3\x31\x95\xeb\x33\xc4\x0e\x06\x79\x92\xe4\x13\x39\x9c\x57\x91\x19\xe9\x73\x23\x39\xe4\x1e\xe6\x72\x64\x66\xcc\x3e\x9a\xa4\xbe\xbd\x34\x39\x60\x9a\xe3\xcd\xc7\x88\xa0\x69\x4e\xeb\xb3\x12\x1f\x35\xdc\x5c\x5a\x13\xe2\x37\xa4\x81\xdb\x18\xcf\x5c\xef\x27\xb1\x0b\xa6\x75\x8b\x37\xd7\xe7\xe2\xdf\x65\x17\x20\xcb\xe7\xa8\x48\x42\x3b\xf6\x74\x9d\x9d\xd6\x72\x00\x9e\x72\x42\xcc\xec\x2c\x06\xe7\x3f\x89\xad\x7c\x74\x05\x99\x12\x33\xa3\xb4\x31\x10\xa7\x8c\xb6\xce\x2e\x36\xd4\xe1\xdb\x24\x28\xb4\x22\xa8\xcd\x81\xb4\x7c\xa2\x35\xfe\x4d\xe8\x98\x77\xf9\x0d\x94\x5e\x3e\xb9\xee\xef\x97\x06\x15\xb1\x9f\xa6\x93\xe1\xfd\xfb\xd5\xb0\xd8\xb7\xfd\x35\xe7\xdf\x00\x9e\xc3\xf5\x70\x6d\x2a\xbe\x58\xa2\xee\xb2\x55\xb0\x5e\x0d\x91\xdc\x8b\x11\xc5\x4c\x49\xbc\x94\x84\xdb\x13\x8c\xd7\x27\x57\x89\xa6\x35\xe1\x1e\xd3\xe3\x1a\x3c\xb0\x6d\x52\x8b\xa2\xac\xb1\xdc\x65\xf9\xf9\x2f\xdb\xf9\x79\xf4\x33\x09\xb3\xb7\xb8\xa0\x57\x27\xfb\xa7\x1e\xec\xaf\xef\x1c\x97\xf6\x7a\x24\x7c\x39\x7b\x3a\x6a\xfa\x75\x92\xcc\xc9\xe9\xfc\xd4\x81\x55\x8a\x79\xc4\x27\x3b\x73\xc2\xe1\x67\xa4\x7f\x7a\x03\xe4\x1a\xff\xb7\xdc\x09\xc6\xff\x7b\xca\x12\x7d\x79\xf4\xa2\x06\x64\xf2\xbd\x74\xd7\x7c\xc7\x02\x9d\xb9\x6b\xa7\xd2\xa2\xa7\x20\x2e\x92\xf0\x5e\xb5\x2f\x4c\xec\x2e\x25\xff\x1f\xd0\x11\x7d\x7a\xfe\x92\xd4\xcf\xa5\x79\x2a\xf8\x17\x02\x9b\x55\x7e\x5f\x9e\xb7\x3f\x03\x00\x00\xff\xff\x3d\xf6\xd9\x8c\xec\x0d\x00\x00"

func stakingcollectionCreate_new_tokenholder_acctCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionCreate_new_tokenholder_acctCdc,
		"stakingCollection/create_new_tokenholder_acct.cdc",
	)
}

func stakingcollectionCreate_new_tokenholder_acctCdc() (*asset, error) {
	bytes, err := stakingcollectionCreate_new_tokenholder_acctCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/create_new_tokenholder_acct.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x9a, 0x7, 0x20, 0xba, 0xc8, 0x63, 0x8c, 0xe7, 0x1, 0x5d, 0xc8, 0x10, 0x71, 0xe8, 0xe6, 0xff, 0xc6, 0xbc, 0x1c, 0x13, 0x9c, 0x15, 0x4f, 0x29, 0xdd, 0x5b, 0x7d, 0xe, 0x6a, 0xf9, 0x12}}
	return a, nil
}

var _stakingcollectionDeploy_collection_contractCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6a\xc4\x30\x10\x44\x7b\x7d\xc5\x54\x41\x86\x60\xf7\xd7\x1d\x49\x91\x2a\x4d\xc8\x07\x2c\xda\xe5\xce\xd8\x5e\x19\x69\x0f\x12\xc2\xfd\x7b\xd0\x26\x32\xa7\x62\x85\x46\x33\xf3\x76\x9a\xf0\x2a\xfb\x9a\xbf\x2b\x08\x29\xab\x15\x4a\x06\xcb\x20\x05\xa5\x94\x6f\x6a\x61\x9a\xf0\x59\x85\x9b\xca\xee\x85\x5d\x05\xd5\x68\x99\xf5\x82\x94\xd7\x55\x92\xcd\x59\x9b\xc1\x7f\x68\x93\x1e\x06\x55\xd7\xd6\x9c\x16\xaf\x58\x44\xeb\x01\x0a\xc1\x0a\x69\x25\x8f\xc7\xae\xbe\xd3\x26\x27\x7c\x58\x99\xf5\xf2\x8c\x94\xf9\x78\x0d\xf8\x09\x00\xe0\x63\x2f\xb2\x53\x91\x48\xbc\xcd\x7a\x02\xdd\xec\x1a\xcf\xcc\x2f\xff\x2d\x03\x9e\xce\x7f\x3b\xf4\x54\x3b\x6e\x1e\x3b\xa9\x8e\xc4\x1c\xd5\x79\x8f\xf4\x4e\x6d\x73\x64\x69\xd7\x9b\x7c\xc5\x61\xf0\x9e\x7b\xb8\x87\xdf\x00\x00\x00\xff\xff\x97\xdc\x67\x42\x38\x01\x00\x00"

func stakingcollectionDeploy_collection_contractCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionDeploy_collection_contractCdc,
		"stakingCollection/deploy_collection_contract.cdc",
	)
}

func stakingcollectionDeploy_collection_contractCdc() (*asset, error) {
	bytes, err := stakingcollectionDeploy_collection_contractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/deploy_collection_contract.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x65, 0xef, 0x78, 0xd5, 0x3e, 0x89, 0x71, 0xda, 0x8b, 0xc, 0x78, 0x34, 0x3c, 0x6e, 0xb9, 0x9, 0xa0, 0x2b, 0x75, 0x35, 0xbf, 0x9f, 0x65, 0xdd, 0xa, 0x3e, 0x8b, 0x30, 0xd, 0x4b, 0x10}}
	return a, nil
}

var _stakingcollectionRegister_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x6b\xeb\x40\x0c\xbc\xfb\x57\x88\x1c\x82\x0d\x0f\xe7\xf2\x78\x07\xf3\xda\xd0\x36\x0d\xf4\x50\x5a\x12\xda\xfb\x76\x2d\x3b\x22\xeb\x95\xd1\xca\x24\x50\xf2\xdf\x4b\xbc\x4e\x7c\x68\x0a\xb9\x74\x0f\xfe\x58\x69\x46\x33\x62\xa8\x69\x59\x14\x26\x4b\xc7\xbb\xb5\x9a\x2d\xf9\xfa\x81\x9d\x43\xab\xc4\x7e\x92\x24\xb3\xd9\x0c\x56\x58\x53\x50\x94\x00\x06\x4a\x74\x58\x1b\x65\x01\xf2\xa0\x1b\x84\x10\x41\x60\xcf\x28\x10\x0c\xdc\x89\xc5\x1e\x5c\xb1\xc4\xbe\x16\x2d\x55\x84\x25\x78\x2e\xf1\x69\x01\xc6\x97\x7d\xc1\x34\xdc\x79\x05\xae\x40\x79\x8b\x3e\x80\x32\x58\x6e\x1a\xd2\x24\x51\x31\x3e\x98\x9e\x35\xa5\xb2\x80\xb5\x0a\xf9\xfa\xcf\x80\x29\xe0\x6d\x49\xfb\x7f\x7f\x33\xf8\x4c\x00\x00\xfa\x87\x43\x3d\x69\x1a\x8d\xac\xb0\x2a\xc0\x74\xba\x49\x2f\xfa\xcc\xc7\xcf\x97\x9d\x47\xc9\x60\x7a\xb9\xef\xdb\x4d\xd2\xcf\x6c\x05\x5b\x23\x98\x1a\x6b\xa3\xae\x7e\xd4\x3d\x8b\xf0\xee\xdd\xb8\x0e\x33\x98\xde\xc5\xda\x49\xeb\xf1\x04\x74\x55\x7e\x49\x2b\xdc\xc0\x40\x95\x07\x65\x31\x35\xe6\x1f\x3d\xd9\xff\xdf\xf0\x70\x9b\x56\xc2\x4d\x01\x57\xb6\xaf\xa3\xa2\x57\xa3\x9b\xec\x6c\xe5\x78\xe6\x73\x68\x8d\x27\xfb\x83\xbe\x1a\x75\xfc\x7b\xa6\x10\xc8\xd7\x8f\x22\x2c\xa9\x27\x97\x45\xaa\x43\xdc\x27\xee\xd1\x76\x8a\xd7\xac\x2a\x97\x21\x9c\x8b\x53\x30\xd3\x98\xaf\x02\xa8\x1c\x83\x12\xdf\x59\x24\x1b\x46\x1d\x92\xaf\x00\x00\x00\xff\xff\x7c\xa4\x34\x6c\xfd\x02\x00\x00"

func stakingcollectionRegister_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_delegatorCdc,
		"stakingCollection/register_delegator.cdc",
	)
}

func stakingcollectionRegister_delegatorCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xae, 0xe0, 0xd6, 0x42, 0x2c, 0xa4, 0xd0, 0x55, 0xb0, 0x3c, 0xf, 0xbf, 0x38, 0xb9, 0x48, 0x0, 0x53, 0x5c, 0x93, 0x3f, 0xcf, 0x5c, 0xc2, 0x9d, 0x3a, 0x49, 0x6d, 0x4a, 0x49, 0x48, 0xa4}}
	return a, nil
}

var _stakingcollectionRegister_multiple_delegatorsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x8b\xd4\x40\x10\xc5\xef\xf9\x14\x8f\x3d\x2c\x09\x4a\x46\x41\x3c\x04\xd7\x45\x5d\x17\x3c\x88\xb2\x83\x5e\x96\x39\xb4\x49\x25\x53\x6c\xa7\x2b\x54\x57\x9c\x05\x99\xef\x2e\xf9\x37\x33\xe2\x28\x5e\xec\x43\x48\x2a\x55\xaf\xdf\x2b\x7e\xdc\x76\xa2\x86\x8b\x5b\x2f\xbb\xb5\xb9\x07\x0e\xcd\x3b\xf1\x9e\x4a\x63\x09\x17\x49\xb2\x5a\xad\x70\x47\x0d\x47\x23\x8d\x68\x7b\x6f\xdc\x79\x42\x45\x9e\x1a\x67\xa2\x11\x1c\x60\x5b\x42\x9c\x86\x51\x1e\xa6\xa1\x14\xa5\xd7\x92\x46\x91\x5a\x74\xea\xeb\xa8\xe4\x9a\xa9\x42\x90\x8a\x3e\xdc\x44\xb8\x50\xc1\xb5\xd2\x07\x83\xd4\x30\x79\xa0\x10\x61\x82\x52\xda\x96\x2d\x49\x4c\x5d\x88\x6e\x94\x4c\xb9\x8a\x05\xee\xd7\xa6\x1c\x9a\xcd\xd3\x79\x6c\x28\x7d\xb9\xe5\xc7\x97\x2f\x36\x19\x7e\x24\x00\x30\x3e\x3c\xd9\x62\xeb\x98\xe9\x8e\xea\x02\xae\xb7\x6d\x7a\x36\x72\x7e\x7c\xfd\xb4\x0b\xa4\x19\x2e\xcf\xf7\xfd\x56\x49\xc6\x3b\x3b\xa5\xce\x29\xa5\xae\x2c\x07\x6b\xf3\x55\x6f\x45\x55\x76\x5f\x9d\xef\x29\xc3\xe5\x9b\xe9\xdf\xe2\x75\x38\x91\x7c\x9d\x9f\xf3\x8a\x2b\xcc\x52\x79\x34\x51\xd7\x50\xfe\x6d\x14\x7b\xf5\x3f\x32\xbc\x4e\x6b\x95\xb6\xc0\x3f\xb6\xaf\x27\x47\x9f\x9d\x6d\xb3\x43\x94\xe1\x5c\x5f\xa3\x73\x81\xcb\x3f\xf8\x6b\xc8\x8e\x5f\x1f\x39\x46\x0e\xcd\x7b\x55\xd1\x34\xb0\xcf\x26\xa9\xfd\xb4\x4f\x7a\xa4\xb2\x37\x3a\x59\xd5\x77\xa7\x60\x5c\xe1\xd9\xa1\x32\xa0\xc5\xd5\x00\x22\x57\xf1\xa4\xf3\xaf\x8b\xcd\x75\xa6\xfa\x66\x41\x39\x9d\x80\x2c\xc0\xd5\x42\x56\xb1\x10\x76\xcf\x9b\x6c\xe4\xea\x17\xf1\xc1\x06\xe3\x09\x9e\x1f\xaa\xfb\xd9\xfb\x3e\xf9\x19\x00\x00\xff\xff\x33\xb8\x88\xbd\x59\x03\x00\x00"

func stakingcollectionRegister_multiple_delegatorsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_multiple_delegatorsCdc,
		"stakingCollection/register_multiple_delegators.cdc",
	)
}

func stakingcollectionRegister_multiple_delegatorsCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_multiple_delegatorsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_multiple_delegators.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x18, 0xe2, 0xb9, 0x47, 0x53, 0x8a, 0x80, 0x1d, 0x6a, 0x37, 0x45, 0x63, 0x7, 0xd0, 0xd4, 0xdf, 0xd2, 0xb9, 0xc5, 0xa7, 0x4f, 0x1c, 0x9f, 0xf9, 0xac, 0xfa, 0xdb, 0x26, 0x7e, 0x1b, 0x1e}}
	return a, nil
}

var _stakingcollectionRegister_multiple_nodesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5d\x6b\xdb\x4a\x10\x7d\xd7\xaf\x98\xeb\x87\x20\x71\x8d\x92\x0b\x97\x52\x44\xdd\x90\x86\x04\x4a\xfa\x61\x12\xda\x17\xe3\x87\x8d\x76\x24\x0d\x59\xed\x8a\xd9\x75\x5c\x35\xc9\x7f\x2f\x2b\xc9\x1f\xb2\x64\x92\x97\xea\xc1\x68\x67\xce\x99\x39\xda\x99\x63\x2a\x2b\xc3\x0e\x2e\xb9\xae\x9c\x09\xba\xd3\xe4\x5a\x99\xf5\x9d\x13\x0f\xa4\xf3\x4b\xa3\x14\xa6\x8e\x8c\x9e\x04\xc1\xe9\xe9\x29\xdc\x62\x4e\xd6\x21\x5b\x28\x57\xca\x51\xa5\x10\xb4\x91\x68\x81\x34\xb8\x02\xc1\xb6\x3c\x48\xb7\x44\x60\xb4\x66\xc5\x29\x36\xfc\xcc\x70\x8b\xab\x30\xa5\x8c\x50\x36\x74\x20\x9d\x19\x2e\x85\xc7\x07\x81\x63\xa1\xad\x68\xc8\x21\x49\x9b\xc0\xe2\xce\x31\xe9\x7c\x39\x0d\x60\xef\x61\xa3\xd0\x27\x7f\x7c\xd6\xee\xfd\x41\x4e\xa3\x5b\x1b\xf6\x4a\x2e\xa4\x64\xb4\x16\x8f\x96\xd9\x41\x6f\xb0\x3e\x8a\xea\xbe\xeb\x6d\x90\xb9\x99\x1f\x45\x89\xd2\xac\xb4\x6b\x74\x5f\xd3\xaf\x77\xff\x1f\xa4\xab\xd5\xbd\xa2\xb4\x6b\xb3\x68\x07\x13\xdf\x60\xfd\x85\xac\xbb\xd2\x8e\xeb\xe5\xf9\x32\x82\xa7\x86\xd3\xfc\x28\x74\x9b\xce\xbb\x61\xdd\x62\x96\x80\x58\xb9\x22\x1c\x9d\x65\xbc\x7b\xfd\xbe\xd6\xc8\x11\x9c\x8c\xe3\x06\x91\xa0\xe9\x59\x31\x56\x82\x31\x14\x69\xea\x3f\xa6\x6b\xf5\xc9\x30\x9b\xf5\x4f\xa1\x56\x18\xc1\xc9\x45\x9b\xdb\x68\x6d\x2e\x08\x55\x16\x8f\x69\x85\x19\x74\xa5\x62\xeb\x0c\x8b\x1c\xe3\xfb\xa6\xd8\x87\xbf\xf1\x0d\x1f\xc3\x8c\x4d\x99\xc0\x1b\xe1\x77\xad\xa2\xb9\x70\x45\xd4\x1b\xd5\xf9\x39\x54\x42\x53\x7a\x44\x5f\x8e\x6e\x77\xfa\x4a\xd6\x92\xce\xaf\x98\x0d\x87\x9a\x54\x14\x05\xdb\x5a\x8f\x82\x81\x60\x06\x67\xbb\x90\x77\x09\x49\xef\x29\x92\x76\xef\x06\xfd\x43\x59\x33\xf3\x52\xa4\x05\x69\xec\xae\x19\x66\xc7\x6f\x37\xe6\xce\xb3\xdf\x8c\xc4\xb0\x57\xab\xa9\x27\x13\x20\x39\x1d\xc4\xbd\xbd\x92\xd6\x64\x0b\x5a\x0e\xf3\x03\x8b\x25\x63\xae\x7b\x85\x7a\x83\x75\x72\xe0\xc0\x51\xc6\xce\x5b\xc9\xbe\x15\x5f\xc1\xce\xcd\x3c\x39\xb0\xe5\x28\xa3\xf5\x64\xb2\xf1\xe6\x28\xa6\x12\x35\x72\xb2\xd9\xd3\x08\x7a\x80\xa7\xe1\xad\x66\x7b\x56\x5e\xd0\x12\x66\x33\xd0\xa4\xe0\xf9\xb9\x1f\xff\x27\x56\xa8\x73\x57\xf8\xfc\xd9\x48\x9d\xb6\xb5\xdf\xb2\xc9\xa5\xd0\xda\x38\xa8\xd8\x3c\x92\x44\xf8\x8d\x6c\xe0\x01\x6b\xbb\xfd\x4f\xed\x56\x62\xa3\x71\x12\x0d\xaa\xbd\x0c\x22\x9e\xfb\x80\xb5\x5f\xb5\xbe\xae\x23\x5a\xfa\x6b\x17\xfb\xfe\xb1\x90\x32\xdc\x92\x13\x5f\x2e\xde\x1e\xa7\x50\x08\x5b\x5c\xa8\xdc\x30\xb9\xa2\x6c\xb3\xbd\xd0\x14\xd6\x48\x79\xe1\xda\x54\xfb\xfe\x9a\xf2\xfe\xc9\x9b\x87\xe0\x5f\xf8\x2f\xe8\xe7\x5f\x82\x97\xe0\x4f\x00\x00\x00\xff\xff\xa2\x19\x15\xea\xe2\x06\x00\x00"

func stakingcollectionRegister_multiple_nodesCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_multiple_nodesCdc,
		"stakingCollection/register_multiple_nodes.cdc",
	)
}

func stakingcollectionRegister_multiple_nodesCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_multiple_nodesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_multiple_nodes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xd, 0xb8, 0x7e, 0xad, 0xeb, 0xf1, 0xb, 0xc9, 0xce, 0xa4, 0xb9, 0x2d, 0xa9, 0xce, 0x8, 0xed, 0xc6, 0x9c, 0xe0, 0xcd, 0x9e, 0x2b, 0xf8, 0xdd, 0xcd, 0x62, 0xb3, 0xaa, 0x60, 0xb1, 0x77}}
	return a, nil
}

var _stakingcollectionRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x6e\xdb\x46\x10\x3e\x9b\x4f\x31\xd1\x21\x20\x01\x83\xb6\xe5\xc6\x28\x88\xaa\x81\xea\x26\x70\x11\xa4\x15\x22\xa4\x40\x4f\xc1\x9a\x1c\x91\x0b\x53\x3b\xc4\xec\xd0\x8a\x91\xf8\xdd\x8b\x25\xb9\x92\x19\x52\x8a\x0e\xb6\x0e\xd2\xce\xee\x37\xff\x7f\xd2\xeb\x8a\x58\xe0\x9a\x1f\x2a\xa1\xa0\xa3\x26\xef\x4b\xda\x2c\x45\xdd\x69\x93\x5f\x53\x59\x62\x2a\x9a\xcc\x24\x08\xce\xce\xce\xe0\x13\xe6\xda\x0a\xb2\x05\x05\x19\x96\x98\x2b\x21\x06\x6d\x40\x0a\x04\xdb\x32\x41\xba\xe5\x02\x46\x4b\x35\xa7\xd8\x30\xaf\x88\x5b\x5c\x85\xa9\x5e\x69\xcc\xc0\x50\x86\xa0\xcd\x8a\x78\xad\x1a\xbc\x32\x59\x03\x51\x6b\xaa\x8d\x00\xad\x40\xe8\x0e\x8d\x05\x21\x48\x69\xbd\xd6\x12\x04\xc2\xca\x58\xd5\xc8\x0f\x75\x96\xc0\x52\x58\x9b\xfc\x34\x80\x27\x1f\xa6\x12\x13\xf8\xfc\x97\x91\x5f\xfb\x0f\x06\x65\x43\xec\xcc\x9c\x67\x19\xa3\xb5\xe3\xfc\x3b\xd8\x07\x7c\x18\x87\x74\xde\x1e\xf1\xbe\xa0\xc5\x38\xa4\xf5\x32\x81\xcf\xef\xf5\xd7\xab\x5f\xfa\x6f\x6b\x95\x16\xda\xe0\x3c\x4d\x1d\xe6\xa9\x16\x38\x8c\x5b\xea\xdc\x28\xa9\x19\xe7\x65\x4e\xac\xa5\x58\xfb\x40\xfc\x84\xf1\x46\xd9\xe2\x47\x9e\x08\xbe\x05\x0d\x57\x89\xe2\x3d\xda\x15\xc5\x27\x5c\x25\xa0\x6a\x29\xc2\xd1\x9a\x89\x77\xc7\x7f\x36\x06\x39\x82\xd7\xe3\xb8\xc1\x4d\xab\xb3\x62\xac\x14\x63\xa8\x5a\x13\x3b\x55\x7f\x10\x33\x6d\xfe\x55\x65\x8d\x11\xbc\xee\xcc\x77\x76\x7a\xc7\x2a\x46\xf8\x16\x9c\x9c\x9c\x1c\x11\x1a\x98\xcd\xe0\x02\xbe\x7f\x3f\x26\x8c\x0e\x3b\x4d\x7a\x31\x74\x9f\xc9\xb5\x32\x86\x04\xb8\x6b\x8d\xb6\xa8\x37\x5a\x0a\xa8\x98\xee\x75\x86\x99\x97\x0e\x9d\x27\x70\xe7\xd2\xf9\xb1\xb6\xe2\x21\xa0\xc0\x7a\x85\xa0\xb6\x1a\x59\x6d\xe0\xde\x79\x0a\x52\x28\x81\x94\x98\xd1\x56\x64\xb2\xa6\x21\x26\x03\x5b\xe2\x94\x4c\xaa\x24\x9c\x90\xc1\xa6\x79\x5c\x2b\xdd\x2b\x5d\xaa\xdb\x12\xc7\x34\xd8\xa6\x29\x5d\x56\x9c\x4d\x36\x9e\x44\xfb\x65\xfe\x47\xf5\xce\xa3\x49\xe4\xef\x8f\x88\x5c\x2c\xd4\xd6\x6e\x18\x1d\x90\x0f\xb7\xb5\x34\x16\x53\xe5\x6a\xc0\x82\x62\x04\xd4\x52\x20\xc3\x05\x84\xef\xae\xff\x5c\xce\xbf\x2c\xa6\x6f\xae\x22\x20\x86\xa9\xbf\xb1\x98\x56\xd3\x37\x57\x77\x17\x91\xb3\x7e\x2c\xed\xbd\xc2\xde\x9f\xf1\x01\xec\xf2\xe5\x92\x5d\x28\x5b\x3c\x63\x9e\x07\xa9\xee\xcb\x7f\x89\x2c\xf7\xa2\xf5\x2c\x09\x5e\xde\xcc\xa7\x5f\x7c\x7a\x2f\x1b\xfa\xb2\xa1\xdb\xbc\x3e\x06\x5b\xc9\x16\xcb\x55\x3c\x36\x8d\x60\xe6\xa3\x1e\x5b\x21\x56\x39\xc6\xb7\xcd\xb8\xf8\xed\x25\xa6\xd4\xef\xe1\x8a\x69\x9d\xc0\x91\xf0\x65\x6b\xd1\x42\x49\xd1\x0f\xd2\xdb\xb7\x50\x29\xa3\xd3\x3d\xf6\xe5\x28\x3b\xea\xa3\xb6\x56\x9b\xfc\x1d\x33\x71\x68\x74\x19\x45\xbb\xb0\xe8\x55\x33\xa6\xfb\xa9\x82\xd9\xfe\x70\xc5\xbe\x8c\xff\xa6\x0c\xc3\x9e\x4d\x6e\xb1\xea\x6c\x6c\xa9\xba\xef\x9f\xee\xd4\xc1\xd5\xc1\xf5\xda\x23\xf7\x6f\xd9\xdd\xf9\xe0\xa6\xed\x91\xe3\x0b\xb7\xfd\xed\xbf\x55\xea\x01\x39\xf1\xf5\xb3\x7d\x7a\xba\x59\xc0\x2f\x42\x9d\xbb\xd2\x87\x19\x0c\x67\x5d\xc8\xaa\x5d\x4e\xc9\x31\x3b\x25\x7a\x15\x0c\xa4\x17\x5d\x67\xc1\x0c\x7a\x4d\x76\x48\x72\x0f\x18\xbd\xea\xc9\x1c\x28\xa8\xea\xdb\x52\xa7\x1f\xf0\x01\x66\xb0\xf0\xe7\xd0\x8d\xce\x26\x0e\xfe\x66\x44\x4d\x9c\x61\x4a\x19\xde\xe0\xd7\x30\x3a\xf5\x0c\x76\xe4\x0f\x47\x17\xa1\xa0\x45\x44\x07\xfe\x78\xc4\xcd\x44\x52\x59\x16\x3e\x51\xbc\x3d\x9e\x6e\xa3\xd1\x09\xf6\xe4\x29\x6c\x50\xe7\x85\x24\x70\x71\x7e\x7e\x1e\x9f\xef\x54\x3c\x06\xed\xf7\x63\xf0\x7f\x00\x00\x00\xff\xff\x64\x34\x94\x37\xdf\x0a\x00\x00"

func stakingcollectionRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_nodeCdc,
		"stakingCollection/register_node.cdc",
	)
}

func stakingcollectionRegister_nodeCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xe7, 0x91, 0xd4, 0x86, 0x2f, 0xea, 0x18, 0x72, 0x4a, 0xc9, 0x6e, 0x21, 0xd8, 0x41, 0x3b, 0x8a, 0xe2, 0x42, 0xda, 0x17, 0x21, 0xe0, 0xa3, 0x15, 0xfe, 0x41, 0x37, 0x3c, 0xa1, 0x4f, 0x2e}}
	return a, nil
}

var _stakingcollectionRegister_node_oldCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdb\x6e\xdb\x46\x10\x7d\x36\xbf\x62\xa0\x87\x60\x09\x08\xb4\x25\x5f\x60\x08\x55\x03\x59\x75\xe0\x42\x71\x6b\x84\x48\x81\x3e\x09\x6b\x72\x44\x2e\x4c\xed\x10\xb3\x4b\x2b\x46\x91\x7f\x2f\x96\x37\x89\x25\xad\xa4\x6d\xec\x07\x99\xcb\xb9\x9d\xd9\x39\x67\x40\xb5\xcd\x89\x2d\x2c\xf9\x25\xb7\xe4\xd5\xa7\x0f\x19\xed\x42\x2b\x9f\x94\x4e\x96\x94\x65\x18\x59\x45\x1a\x36\x4c\x5b\x18\x0d\xda\x46\x9e\x77\x7a\x7a\x0a\x9f\x30\x51\xc6\x22\x1b\x90\x10\x63\x86\x89\xb4\xc4\xa0\x34\xd8\x14\xc1\x54\x41\x10\xed\x33\x32\x1a\x2a\x38\xc2\x32\x78\x43\x5c\xf9\xe5\x18\xa9\x8d\xc2\x18\x34\xc5\x08\x4a\x6f\x88\xb7\xb2\xf4\x97\x3a\x2e\x5d\xe4\x96\x0a\x6d\x81\x36\x60\xe9\x09\xb5\x01\x4b\x10\xd1\x76\xab\xac\xe7\x59\x96\xda\xc8\x32\xbf\x50\xf1\x0c\x42\xcb\x4a\x27\x63\x0f\x0e\xfe\x98\x32\x9c\xc1\xe7\x5f\xb5\xbd\xee\x1a\x34\xda\x1d\xb1\x83\xb9\x88\x63\x46\x63\x86\xe3\xf7\x6e\x2b\x7c\x19\x76\xa9\xbb\x7d\xd5\x5e\xb5\x30\x83\xcf\x1f\xd4\x97\xab\x8b\xae\x6d\x2b\xa3\x54\x69\x5c\x44\x91\xf3\x39\x4c\x01\xc7\xfd\x42\x95\x68\x69\x0b\xc6\x45\x96\x10\x2b\x9b\x6e\x9b\x2e\xbf\x11\x78\x27\x4d\xfa\xcf\x18\x1f\xfe\xf2\xca\xa8\x0c\x6d\xd3\xce\x7e\xe2\x9f\x70\x33\x03\x59\xd8\x54\x0c\x12\x22\xd8\x3f\xfe\xbe\xd3\xc8\x3e\xbc\x1b\xf6\xeb\xbd\xa9\x6a\xe6\x8c\xb9\x64\x14\xb2\x82\x58\x97\xba\x21\x66\xda\xfd\x21\xb3\x02\x7d\x78\x57\xc3\x77\x38\xdb\x5b\xc7\x6c\x13\x0c\x61\x85\x39\xd4\xa9\x02\x63\x89\x65\x82\xc1\x63\x99\xec\xa7\xb7\xe8\xe1\x67\xe1\xb4\x32\x1b\xd6\x51\xdf\x3d\xac\x10\x3d\x48\x9b\xfa\x9d\x39\xbd\x7f\x0f\xb9\xd4\x2a\x7a\x05\x5f\x82\x76\x7f\xba\x57\xc6\x28\x9d\xdc\x32\x13\x0b\xad\x32\xdf\xf7\xda\x5c\x6a\x53\x0e\xb1\x3b\x76\x98\xbf\x7e\x5d\x01\xd7\x4a\xfe\x8d\x62\x14\x1d\x4c\x4e\x53\x2a\x1e\xd2\x93\xfb\xfd\xa6\x9c\x7a\xaf\x8e\x2a\xab\x73\x7c\x5d\x60\xfb\xe7\x61\x91\x55\xff\xbb\xb6\x5c\xbe\x20\xcf\x1a\x56\xb4\xa6\x43\x36\xb5\xe4\x57\x89\x13\x07\xcc\xa1\x2f\x30\xc1\xb2\x22\xe4\xec\x7b\xe4\xd8\x1d\x6f\x67\xc4\xa3\xa5\xd4\x9a\x2c\x34\x37\x5f\x6d\xbf\x9d\xb2\x29\xe4\x4c\xcf\x2a\xc6\xb8\xa9\xd0\x80\x86\x27\xd7\xfc\x7d\x61\x6c\xe3\x02\xd2\x81\xad\x8a\x82\x6c\xaa\x02\xcb\x1d\x3c\x3b\x90\x60\x53\x69\x21\x22\x66\x34\x39\xe9\xb8\xdc\x9c\xa3\x1e\xa8\x20\x22\x1d\x49\x2b\x46\xa4\xb1\xdc\xb2\x6e\xe7\x3e\x4b\x95\xc9\xc7\x0c\x87\x2a\x98\x72\x7b\x3b\x96\x3a\x4c\x26\x18\xf5\x1b\x6d\x73\xfe\x49\xc5\xbe\xa3\x91\xdf\xbc\xff\x8e\xdb\x0b\x2c\x55\x7b\x50\xf8\x47\xf2\xc3\x63\x61\x4b\xc4\x94\x3b\x36\x1b\x90\x8c\x80\xca\xa6\xc8\x30\x01\x71\xbb\xfc\x25\x5c\xac\x1f\xa6\x97\x57\xfe\x18\xa6\xcd\xd9\x60\x94\x4f\x2f\xaf\x9e\x26\xfe\x18\x88\xe1\x1c\xc4\xcd\xc7\x70\x7d\xf3\x31\x9c\x4c\xd7\xe7\xd7\x13\x3f\x18\x1d\xea\xa9\x21\x46\x5a\xaf\x4d\x98\x43\x67\x83\x1e\x23\x45\xc7\xf1\xbf\xf1\xc1\x35\xf7\xaf\x38\xe1\x70\xfe\x40\x3a\xf4\x18\xd1\xcd\xff\x16\x64\xe8\xdc\xda\xff\xe0\xc1\x04\x44\x78\xb7\x98\xae\xdb\xf1\x97\xa7\xf3\xeb\x0b\x7f\xec\x86\x1e\xde\x2d\xce\x6b\xdb\x31\xd4\x17\xb5\x67\x15\x77\x09\x62\x75\xbf\x58\x4e\xa6\xd7\xeb\x2e\x69\x4a\x2a\x5d\x81\x58\xdd\x2e\x97\x8b\x55\x99\xb7\xe4\xd1\x61\xce\x1e\xa7\xf2\xe2\x31\x53\xd1\x0a\x5f\x60\x0e\x0f\xcd\xb3\xf0\x4e\x4e\x4e\x9c\x47\x6b\x1d\x60\x56\x10\x63\x44\x31\xde\xe1\x17\xe1\x8f\x9b\x00\x33\xf0\x49\x50\xef\x33\xaf\xf2\xf0\x8f\x7c\x1a\x04\xe5\x00\x65\x1c\x8b\x83\xc2\xed\xe3\xb8\x15\x40\x9d\xb8\x39\x8e\x61\x87\x2a\x49\xed\x0c\x26\x67\x67\x67\xc1\xd9\xbe\xc4\x57\xaf\xfa\xfd\xfa\x77\x00\x00\x00\xff\xff\xf3\xe2\x30\x34\x78\x0a\x00\x00"

func stakingcollectionRegister_node_oldCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRegister_node_oldCdc,
		"stakingCollection/register_node_old.cdc",
	)
}

func stakingcollectionRegister_node_oldCdc() (*asset, error) {
	bytes, err := stakingcollectionRegister_node_oldCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/register_node_old.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x5a, 0xa8, 0x7c, 0x95, 0x91, 0x59, 0x3e, 0x85, 0x59, 0x9b, 0x1d, 0xaf, 0xdf, 0xb7, 0x58, 0x8c, 0x8, 0x99, 0x7f, 0xef, 0xf6, 0x3e, 0x19, 0xa6, 0x7f, 0x9f, 0xb6, 0xf, 0xee, 0xd0, 0x9e}}
	return a, nil
}

var _stakingcollectionRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcf\x6b\xeb\x30\x0c\xbe\xfb\xaf\x10\x3d\x94\x04\x4a\x0a\xef\x3d\xde\x21\x6c\x2b\xfb\x55\xe8\x61\x6c\xb4\x74\x77\xcf\x55\x52\x33\xd7\xca\x64\x85\x16\x46\xff\xf7\x91\xb8\x69\xc6\xd6\x41\x2f\xf3\x21\x8e\xe4\x4f\x9f\x3e\x89\xcf\x6e\x2a\x62\x81\xc1\xd4\xd1\x76\x21\xfa\xd5\xfa\xf2\x96\x9c\x43\x23\x96\xfc\x40\xa9\xf1\x78\x0c\x73\x7c\xab\x31\x48\x80\xda\x87\x08\x81\x82\x18\x64\x8d\x10\x2a\x34\xb6\xb0\xb8\x02\x4f\x2b\x04\x62\x58\xa1\xc3\x52\x0b\x31\x58\x1f\x21\x87\x12\x73\xa4\x55\x4a\x58\xfb\xa0\xdb\x20\x69\x0a\x67\x77\x39\x2c\x84\xad\x2f\x47\x3d\x41\x93\x5c\xce\xbc\xfc\xfd\x33\x19\x81\xde\x50\xed\x25\x87\xe5\xd4\xee\xfe\xff\x4b\xe1\x5d\x01\x00\xb4\x1f\x87\xd2\x35\xe9\xa5\xcf\xb1\xc8\x41\xd7\xb2\x4e\x4e\x4e\x96\xf5\xbf\x8f\x5b\x8f\x9c\xc2\xf0\x34\xee\x5b\x46\xb5\x3d\x2b\xc6\x4a\x33\x26\xda\x98\xa8\xab\x6d\x75\x43\xcc\xb4\x7d\xd6\xae\xc6\x14\x86\xd7\xf1\xad\xd3\xda\x9c\x80\xae\xc8\x4e\x69\x85\x4b\x38\x50\x65\x41\x88\x75\x89\xd9\x4b\x4b\x76\xf1\x1b\x33\x5c\x25\x05\xd3\x26\x87\x33\xe1\x8b\xa8\xe8\x49\xcb\x3a\x3d\x8e\xd2\x9c\xc9\x04\x2a\xed\xad\xf9\x41\x5f\x89\xd2\x47\x0f\x36\x04\xeb\xcb\x7b\x66\xe2\xc4\x5b\x97\x46\xaa\x7d\xdc\x27\xee\xd0\xd4\x82\xe7\xac\x2a\xe3\x68\xc7\x65\x67\xc6\xa3\x83\xe2\xfd\xc5\x41\x9f\x82\xde\x45\xf1\xee\x14\xec\xd5\x47\x00\x00\x00\xff\xff\xa5\x1b\x2c\x64\x06\x03\x00\x00"

func stakingcollectionRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRequest_unstakingCdc,
		"stakingCollection/request_unstaking.cdc",
	)
}

func stakingcollectionRequest_unstakingCdc() (*asset, error) {
	bytes, err := stakingcollectionRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x80, 0x37, 0xe5, 0x3b, 0x8a, 0x58, 0xca, 0x55, 0xee, 0xda, 0xdf, 0xfc, 0x6f, 0x13, 0x9d, 0x9c, 0xc3, 0x80, 0x3f, 0xb7, 0x55, 0xf8, 0xda, 0x79, 0xe3, 0xdf, 0xbf, 0xf8, 0xc3, 0x76, 0xc5}}
	return a, nil
}

var _stakingcollectionRestake_all_stakersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x8b\xdb\x30\x10\xbd\xeb\x57\x0c\x39\x2c\x36\x2c\xce\x3d\x34\x5d\xda\x4d\x0b\x7b\x68\x5a\x76\x97\xde\x67\xed\xb1\x57\x44\xd6\x04\x69\x42\x0a\x4b\xfe\x7b\xb1\xe5\xc8\x76\x62\xb7\x85\xb6\x3e\x18\x7d\x8c\xde\x7b\x7a\xf3\xa4\xeb\x3d\x3b\x81\xc5\x67\xc3\xc7\x27\xc1\x9d\xb6\xd5\x3d\x1b\x43\xb9\x68\xb6\x0b\x35\xdc\x7e\xd8\x3c\xe3\x8b\xa1\xae\x6a\xa1\xd4\x72\xb9\x84\x7b\xae\x6b\x2d\x1e\x1c\x1d\xd1\x15\x54\x80\xf0\x8e\xac\x07\x61\xf0\x82\x3b\x82\x92\x1d\xa0\x31\x60\xb9\x20\x0f\x68\x0b\x28\xc8\x50\x85\xc2\xce\x83\xb6\x80\x90\x47\x3e\xa5\xc4\xa1\xf5\xd8\x4e\xe0\x4d\x01\x00\xb4\x3f\x43\xd2\xc2\x8d\xd4\x3d\x52\xb9\x02\x3c\xc8\x6b\x32\x29\x3e\xeb\x87\x5f\x8f\x96\x5c\x0a\x37\xd3\x75\x57\x2b\xaa\xe5\xdc\x3b\xda\xa3\xa3\x04\xf3\x9c\x0f\x56\x3a\xaa\x8f\xec\x1c\x1f\xbf\xa3\x39\x50\x0a\x37\x1f\xc2\x5e\xda\x69\x6d\x3e\x4f\xa6\xcc\xa6\xb4\xc2\x1a\x3a\xa8\xcc\x0b\x3b\xac\x28\x7b\x69\xc1\xde\xfd\x8f\x3b\xbc\x4f\x4a\xc7\xf5\x0a\xfe\xb0\xfc\x29\x28\xfa\x86\xf2\x9a\xc6\xab\x34\xdf\xdd\x1d\xec\xd1\xea\x7c\x46\x5f\x45\xd2\xcf\xbe\x68\xef\xb5\xad\x3e\x39\xc7\x2e\xb1\xda\xa4\x01\xea\x14\xfc\xa4\x1f\x94\x1f\x84\x06\x56\x35\x5d\x6d\x62\xf1\xb0\xf1\xb0\x9e\x37\xae\x21\xd9\x86\xb2\x24\x55\xf1\x74\x13\xac\x70\xba\x89\xd1\x19\xe7\x6d\xa4\x3e\x32\xd8\x92\x61\x0d\xd7\x29\xce\xb6\xdd\x6e\x12\x00\x56\x1d\xd0\xd8\x84\x79\x69\x6d\xc6\x1f\xbb\xec\x3f\xb7\xd1\xbf\x40\xba\xed\xf3\xde\x2e\x6a\x73\x0b\x58\x87\x44\x9d\xa5\x65\xe1\xd1\x9c\x71\x7a\xf2\x93\x1a\x99\x35\x78\x39\xbf\xf1\x6b\xd3\x73\x5e\x99\x16\x51\x1a\xdf\x06\x90\xd7\xd6\xf5\xca\x67\xfd\xdb\x0c\x4b\xe2\xd5\xe3\xc1\x2c\x8e\xb6\x53\x6e\x4c\xd4\x5d\x7a\xff\x0f\x1a\xf1\x57\x6a\xfa\x6e\x8d\xdc\xf8\x45\xcb\xc2\xff\xa4\x7e\x06\x00\x00\xff\xff\x33\x95\x76\xb5\x5b\x05\x00\x00"

func stakingcollectionRestake_all_stakersCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionRestake_all_stakersCdc,
		"stakingCollection/restake_all_stakers.cdc",
	)
}

func stakingcollectionRestake_all_stakersCdc() (*asset, error) {
	bytes, err := stakingcollectionRestake_all_stakersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/restake_all_stakers.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x2b, 0x40, 0xf1, 0x3, 0xe4, 0x77, 0x8a, 0x69, 0x25, 0xee, 0xd9, 0x18, 0x68, 0x6f, 0xd5, 0xea, 0x26, 0x5a, 0xf5, 0x34, 0xbb, 0x48, 0x76, 0x9c, 0xcb, 0x43, 0x4e, 0x5d, 0x31, 0x2b, 0x7d}}
	return a, nil
}

var _stakingcollectionScriptsDoes_account_have_staking_collectionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x4e\x80\x40\x10\x85\xe1\x7e\x4f\xf1\x42\x05\x8d\xf4\x74\xa8\x31\xf6\x9e\x60\xb2\x0c\x3a\x71\x99\x21\x3b\xb3\x52\x18\xef\x6e\x01\x09\x85\x76\xaf\x78\xf9\xf2\xcb\xb6\x5b\x0d\x74\x2f\xc5\x8e\xb7\xa0\x4f\xd1\xf7\x27\x2b\x85\x73\x88\x69\x97\xd2\x38\x8e\x78\xe6\xe0\xba\x89\xb2\x43\x56\x90\x82\x72\xb6\xa6\x01\x71\x38\x07\xda\x8e\x43\xe2\x03\x84\x4b\xc0\x4d\xa4\x44\x39\xb3\x7b\x4f\xa5\x0c\x58\x9b\x62\x23\xd1\x9e\x96\xa5\xb2\xfb\x84\xf9\x1c\xc3\x84\x47\xb3\x82\xef\x04\x00\x95\xa3\x55\xc5\xbf\x4d\x0f\x8b\xb1\xcf\x67\xc0\x2b\x7d\xf1\x9f\xc3\x6d\x5f\x63\x48\x3f\xbf\x01\x00\x00\xff\xff\x73\x04\xde\xe9\xe6\x00\x00\x00"

func stakingcollectionScriptsDoes_account_have_staking_collectionCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsDoes_account_have_staking_collectionCdc,
		"stakingCollection/scripts/does_account_have_staking_collection.cdc",
	)
}

func stakingcollectionScriptsDoes_account_have_staking_collectionCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsDoes_account_have_staking_collectionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/does_account_have_staking_collection.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x73, 0x69, 0x2b, 0xde, 0xd7, 0xdf, 0xa5, 0x73, 0x4, 0x26, 0x8a, 0x59, 0x50, 0x66, 0x5e, 0x80, 0xf2, 0x70, 0xf7, 0xfd, 0x40, 0x27, 0x88, 0xd8, 0x3, 0x7, 0xe9, 0xe0, 0x93, 0xc, 0xa}}
	return a, nil
}

var _stakingcollectionScriptsGet_all_delegator_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc3\x50\x0c\x45\xf7\xf7\x15\x57\x99\x9a\xa5\xd9\xbb\x55\x54\xa0\xce\xb0\x21\x06\x93\xe7\x84\x27\x1c\x1b\xd9\xae\x10\x42\xfc\x3b\x12\x2d\x14\x44\xb7\x2b\xfb\xd8\xc7\x6e\xcb\x8b\x79\xa2\xbb\x16\x7b\xbd\x4d\x7a\x6e\x3a\x5f\x99\x08\x8f\xd9\x4c\xbb\xf2\xbb\xbd\xdf\xdd\xd1\xa3\xf0\x89\xea\x4a\x19\x86\x01\x37\x9c\x01\x52\x90\x3b\xbd\xc1\x26\x90\x08\xf2\x89\x51\x59\x78\xa6\x34\xc7\xc2\x49\x95\x92\x30\x99\x9f\xcb\x81\x48\x73\xae\x68\xfa\xc5\xc7\x71\x2d\xc6\x1f\x7b\x29\x34\x8e\x1c\xb1\x22\x91\x1e\xd3\x41\xb1\x50\xd3\x15\xd5\xea\x1c\xb1\xc1\xf6\x18\xfa\x0d\xee\xff\x9f\xb7\xde\x7d\x8b\xf6\x3a\xd9\x03\xde\x0b\x00\x38\xe7\xc1\x15\x17\x9f\x5d\xcf\x9c\x5b\x91\x3f\x73\x67\xd9\x29\xf4\xe5\xe3\x33\x00\x00\xff\xff\x09\x41\xfe\xdd\x32\x01\x00\x00"

func stakingcollectionScriptsGet_all_delegator_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_all_delegator_infoCdc,
		"stakingCollection/scripts/get_all_delegator_info.cdc",
	)
}

func stakingcollectionScriptsGet_all_delegator_infoCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_all_delegator_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_all_delegator_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xeb, 0xfc, 0x27, 0x47, 0x1c, 0x8, 0xe3, 0x67, 0x7b, 0xa8, 0x85, 0x38, 0x15, 0xce, 0xf8, 0xba, 0x4b, 0xe9, 0xf9, 0x39, 0xd9, 0x5d, 0x12, 0x23, 0x93, 0x7c, 0xf5, 0x8a, 0x8e, 0x6c, 0xf3}}
	return a, nil
}

var _stakingcollectionScriptsGet_all_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x3d\x4b\x43\x51\x0c\x86\xf7\xf3\x2b\x5e\xee\xd4\xbb\xf4\xee\xdd\x8a\xa2\x74\x71\xd1\x4d\x1c\xe2\x3d\x39\xf5\x60\x6e\x22\x49\x8a\x88\xf8\xdf\x85\xb6\x7e\x80\x6e\x2f\xc9\x93\x3c\x49\x5f\x5e\xcc\x13\xc3\x95\xd8\xeb\x6d\xd2\x73\xd7\xfd\x85\x89\xf0\x9c\xdd\x74\x28\xbf\xdb\xbb\xcb\x3b\x7a\x14\x3e\x53\x43\x29\xd3\x34\xe1\x9a\x33\x40\x0a\x72\xa7\x37\x58\x03\x89\x20\x9f\x18\x6a\x95\xb1\x70\x52\xa5\x24\x34\xf3\x63\x25\x10\x69\xce\x15\x5d\x8f\x54\x9c\x96\x61\xfe\x76\x96\x42\xf3\xcc\x11\x2b\x12\x19\xd1\x0e\x8a\x85\xba\xae\xa8\x56\xe7\x88\x0d\xb6\xa7\x30\x6e\x70\xff\xf7\xa8\xf5\x8d\x55\xde\x69\xb3\x07\xbc\x17\x00\x70\xce\x83\x2b\xfe\xfd\x6e\xbd\xe7\xdc\x8a\x7c\x8d\xfc\x28\xce\x61\x2c\x1f\x9f\x01\x00\x00\xff\xff\x9a\x44\x49\x66\x1e\x01\x00\x00"

func stakingcollectionScriptsGet_all_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_all_node_infoCdc,
		"stakingCollection/scripts/get_all_node_info.cdc",
	)
}

func stakingcollectionScriptsGet_all_node_infoCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_all_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_all_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xd9, 0xa7, 0x68, 0x2b, 0x9, 0x20, 0x50, 0x45, 0xa4, 0xe2, 0x2, 0xca, 0x36, 0x86, 0xb0, 0x2f, 0x10, 0xf2, 0x46, 0xc, 0x38, 0x98, 0x50, 0xa7, 0xaf, 0xce, 0x75, 0x52, 0x87, 0x2a, 0xe4}}
	return a, nil
}

var _stakingcollectionScriptsGet_delegator_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4b\xc5\x40\x10\x84\xfb\xfb\x15\x43\xaa\xa4\x31\x7d\x3a\x31\x08\x69\xb5\x14\x8b\xe5\x6e\x13\x0f\x37\x77\xb2\xbb\x41\x44\xfc\xef\x42\xa2\xef\xbd\x22\xdd\xc0\x30\xf3\x7d\x79\xfd\xa8\xea\x68\x1e\xa5\x7e\x3e\x3b\xbd\xe7\xb2\x3c\x54\x11\x8e\x9e\x6b\x69\x42\xe8\xfb\x1e\x4f\xec\x9b\x16\x03\x15\x90\x2a\x7d\xa1\xce\x20\x11\xf8\x1b\x23\xb1\xf0\x42\x5e\x15\xd3\x68\x30\xaf\xca\x09\xb9\xec\x9d\x1d\x7f\x88\x97\xc3\x10\x28\x46\x36\x6b\x49\xa4\xc3\xbc\x15\xac\x94\x4b\x4b\x29\x29\x9b\x0d\xb8\x3f\x42\x37\xe0\xe5\x54\xe8\x6e\xfc\xc7\x4d\xa3\xbd\xe2\x3b\x00\x80\xee\x7a\x38\x1f\x2c\xec\xb7\x9b\x2b\xea\x2f\x74\xe1\xe7\x37\x00\x00\xff\xff\x05\xd1\xd6\xde\x03\x01\x00\x00"

func stakingcollectionScriptsGet_delegator_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_delegator_idsCdc,
		"stakingCollection/scripts/get_delegator_ids.cdc",
	)
}

func stakingcollectionScriptsGet_delegator_idsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_delegator_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_delegator_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xc3, 0xca, 0x19, 0xb1, 0x61, 0x81, 0x6d, 0x13, 0x79, 0x34, 0xba, 0x60, 0x37, 0x18, 0xcf, 0x8d, 0xdd, 0x13, 0xe6, 0x80, 0x6, 0xcc, 0x82, 0xb7, 0xf6, 0xba, 0x67, 0x38, 0x3c, 0x43, 0xe0}}
	return a, nil
}

var _stakingcollectionScriptsGet_does_stake_existCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x1e\x39\x35\x50\x0c\xe8\x2d\x17\x51\xab\x90\x73\xeb\x0f\x58\xb3\x93\x38\x38\xdd\x29\x3b\x53\x14\xc4\xff\x2e\x69\x8a\x2d\xc1\xd3\xee\xbe\xf7\x78\xdf\x63\x79\x7f\xd0\xe2\xa8\x5e\x44\x3f\xb7\x1e\x3f\x38\x8f\x4f\x2a\x42\xbd\xb3\xe6\x2a\x5c\xdb\xdd\x66\x17\xdf\x84\xce\xa9\x2a\x84\xa6\x69\xb0\x23\x11\x03\x0f\xf0\x77\x82\x1d\xa8\xe7\x81\x29\x21\x6b\x22\x68\x41\x22\xa1\x31\xba\x16\xd0\x17\x9b\x1b\x38\xcf\xc9\xb9\x04\xfd\x1f\x0b\xa7\xba\x41\xcb\xa2\x29\xa6\x54\xc8\x2c\x84\xd8\xf7\x64\xb6\x8a\x22\x35\x86\x63\xc6\x3e\x72\x5e\x9d\xdd\x16\x0f\xf3\x65\x7d\x22\x77\x9b\x16\x5b\x2f\x9c\xc7\xf5\x65\xc1\x24\xbe\x76\xd9\xef\x6e\xef\xeb\x16\x8f\xaa\x82\xef\x00\x00\x85\xfc\x58\x32\xfe\xfd\x81\x9b\xa4\x64\x93\x4a\xcf\xd3\xfe\x0b\x2f\x2e\x79\xf3\xb9\xe0\x5d\x3d\xea\xf0\xf3\x1b\x00\x00\xff\xff\x4f\x57\x50\x7b\x6c\x01\x00\x00"

func stakingcollectionScriptsGet_does_stake_existCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_does_stake_existCdc,
		"stakingCollection/scripts/get_does_stake_exist.cdc",
	)
}

func stakingcollectionScriptsGet_does_stake_existCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_does_stake_existCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_does_stake_exist.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xc4, 0x71, 0x6f, 0xd, 0xe4, 0x19, 0x18, 0x76, 0xfc, 0x44, 0x9f, 0x86, 0x77, 0x12, 0xb2, 0xb0, 0xc3, 0xde, 0x22, 0x7f, 0x6, 0xc7, 0xa0, 0xba, 0x72, 0xbe, 0x38, 0x3, 0xae, 0xc8, 0xbc}}
	return a, nil
}

var _stakingcollectionScriptsGet_locked_tokens_usedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x53\xa7\x64\x21\x0b\x62\xc8\x86\x90\x32\xb1\xd1\x3e\x80\x75\x67\xd2\x53\x1c\x1b\x9d\x1d\x15\x84\x78\x77\x44\x0a\x4c\x9d\x2d\xff\xf4\xff\xea\xfa\x66\x2d\x70\x98\xc4\x2e\x2f\x41\x4b\xd5\xf9\xc9\x44\x38\x47\x35\x3d\xa4\x34\x0c\x03\x8e\x2c\xe2\x38\xdb\x05\x2b\xe9\x07\xc4\xf2\xc2\x05\x61\x0b\xab\x23\xce\x0c\xca\xd9\x36\x0d\x54\xc7\xe6\x55\xe7\xfd\x6b\xb2\xf6\x73\x6c\x0c\xbf\xba\xc8\xff\x30\xd4\x0a\x3b\x48\x0b\x0a\x0b\xcf\x14\xd6\x3c\x25\xca\x99\xdd\x3b\x12\xe9\xf1\xba\x29\x56\xaa\xda\xfd\xe2\x23\x1e\x4b\x69\xec\xde\x8f\x38\x4d\xf5\xfd\xe1\x1e\x9f\x09\x00\x1a\xc7\xd6\x14\x37\x07\xdc\xcd\x1c\xcf\x7b\xee\x71\xaf\x3d\x39\x97\x8e\xae\xce\xf8\x97\xdd\xa7\xaf\xef\x00\x00\x00\xff\xff\x8c\xfb\xa6\xdc\x06\x01\x00\x00"

func stakingcollectionScriptsGet_locked_tokens_usedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_locked_tokens_usedCdc,
		"stakingCollection/scripts/get_locked_tokens_used.cdc",
	)
}

func stakingcollectionScriptsGet_locked_tokens_usedCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_locked_tokens_usedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_locked_tokens_used.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0x63, 0xe1, 0xaa, 0x1a, 0xe9, 0x5a, 0x4d, 0xa9, 0x73, 0xa5, 0x44, 0x10, 0x76, 0x47, 0xef, 0x1d, 0xef, 0x38, 0x6a, 0x82, 0x1a, 0xea, 0x22, 0xb2, 0x4, 0xca, 0x23, 0x43, 0x8, 0x19, 0x1e}}
	return a, nil
}

var _stakingcollectionScriptsGet_machine_account_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\x47\x96\xda\x50\xea\xdd\x10\x4a\x68\x69\xc9\xd0\x29\x63\xe9\x20\xe4\xb3\x73\x54\x3e\x05\xdd\x99\x0e\x25\xdf\xbd\xc4\x96\x43\xff\x69\xd4\xdd\x7b\xbf\xdf\xf1\x78\x4a\xd9\xb0\x79\x8a\xe9\xe3\x60\xfe\x9d\x65\x78\x48\x31\x52\x30\x4e\xb2\x71\xae\x69\x1a\x3c\x93\x29\xec\x48\x18\x7d\x38\xb2\x10\x7c\x08\x69\x12\x83\xef\xba\x4c\xaa\xe8\x53\x86\x87\x9e\x28\x70\xcf\x01\x92\x3a\x9a\x83\x2c\xf0\xb2\x6e\xdf\x28\x74\x01\x20\x5c\x09\xce\xf9\x10\x48\xb5\xf2\x31\xd6\xe8\x27\xc1\xe8\x59\xaa\x12\x69\xb1\x5b\x08\xb7\x73\xe7\xfe\xb1\xc5\xc1\x32\xcb\x50\x5f\x27\xf7\xf8\x74\x00\x10\xc9\x56\xbd\xdd\x12\x56\x6c\xf1\xef\x55\x77\x03\xd9\xcb\xcf\xd5\xaa\x5c\xd2\xae\xb2\xb5\x9b\x5b\xb9\x9f\x8b\xcb\xe7\x5e\xfa\x84\xed\x6f\xcc\xeb\xa2\xf6\x56\x44\x2e\x2f\x93\x4d\x59\xbe\xc7\x2e\xcc\x62\x5c\xd5\xf3\xde\x19\x14\x95\xfe\x86\x84\xe3\x32\x77\x67\xf7\x15\x00\x00\xff\xff\x9a\xa7\x11\xf1\x9d\x01\x00\x00"

func stakingcollectionScriptsGet_machine_account_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_machine_account_addressCdc,
		"stakingCollection/scripts/get_machine_account_address.cdc",
	)
}

func stakingcollectionScriptsGet_machine_account_addressCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_machine_account_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_machine_account_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x2d, 0x25, 0x24, 0x4e, 0xad, 0x58, 0x32, 0xfc, 0x68, 0x4a, 0x5e, 0x67, 0x64, 0x25, 0xe1, 0x32, 0xbb, 0x19, 0xb6, 0x8c, 0xbc, 0xcb, 0x53, 0x72, 0x8, 0x8d, 0xd, 0xc0, 0xa0, 0x99, 0xbd}}
	return a, nil
}

var _stakingcollectionScriptsGet_machine_accountsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x4a\xc5\x40\x10\x45\xfb\xfd\x8a\xcb\x6b\x4c\x1a\xd3\x6f\xf7\x10\x14\x0b\xab\xf7\x05\xc3\x66\x92\xb7\xb8\x99\x91\x9d\x09\x16\x21\xff\x2e\x64\xa3\x20\x68\x7f\xcf\xe1\xdc\xbc\x7c\x68\x75\x5c\x9e\x8b\x7e\xde\x9c\xde\xb3\xcc\x4f\x5a\x0a\x27\xcf\x2a\x97\x10\x86\x61\xc0\x0b\xbb\x81\x4a\x81\xdf\x19\x0b\xa5\x7b\x16\x06\xa5\xa4\xab\x38\x68\x1c\x2b\x9b\xb1\x61\xd2\x0a\xd1\x91\xed\x80\xb2\x1c\xf3\x73\xf6\x60\xb0\x66\x47\xfa\xd1\x87\x40\x29\xb1\x59\x47\xa5\xf4\x98\x56\xc1\x42\x59\xba\x13\x89\xb8\x36\x75\x1f\xb1\xdd\xbc\x66\x99\x23\xfe\xcc\x7c\x7c\x6b\x4d\xd7\x06\xbe\xca\xa4\x3b\xb6\x00\x00\x95\x7d\xad\xf2\x0f\x36\xb3\xff\x26\xad\x3b\xdf\xc4\xef\xee\x3e\xec\xe1\x2b\x00\x00\xff\xff\x49\x1b\x2f\x12\x23\x01\x00\x00"

func stakingcollectionScriptsGet_machine_accountsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_machine_accountsCdc,
		"stakingCollection/scripts/get_machine_accounts.cdc",
	)
}

func stakingcollectionScriptsGet_machine_accountsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_machine_accountsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_machine_accounts.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xba, 0xc4, 0x81, 0xa2, 0xb4, 0x6c, 0x62, 0x83, 0xc6, 0x17, 0x97, 0xba, 0x55, 0xb8, 0xff, 0xfc, 0x25, 0x25, 0x43, 0x1b, 0x7e, 0x58, 0xfc, 0x59, 0xd6, 0x44, 0x59, 0x3d, 0xa3, 0x75, 0x60}}
	return a, nil
}

var _stakingcollectionScriptsGet_node_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x4b\xc6\x40\x0c\xc6\xf1\xfd\x3e\xc5\xc3\x3b\xbd\x5d\xec\xde\x4d\x2c\x42\x17\x07\x3b\x8a\x43\xb8\x4b\xeb\xe1\x35\x91\x24\x45\x44\xfc\xee\x42\x2b\xba\xb8\xfd\xc9\xf0\xcb\x53\xb7\x37\xb5\xc0\xe5\xbe\xe9\xfb\x1c\xf4\x5a\x65\xbd\xd3\xd6\x38\x47\x55\xb9\xa4\xd4\xf7\x3d\x1e\x39\x76\x13\x07\x09\xc8\x8c\x3e\xa0\x0b\xa8\x35\xc4\x0b\x43\xb4\x30\xa6\xd1\xe1\xa1\xc6\x05\x55\x8e\xb3\x9f\x14\xf2\xaf\x95\x12\xe5\xcc\xee\x57\x6a\xad\xc3\xb2\x0b\x36\xaa\x72\xa5\x52\x8c\xdd\x07\xdc\x9e\xd1\x0d\x78\x9a\xc3\xaa\xac\xcf\xf8\x4c\x00\x60\xc7\x77\xfc\x3b\xf0\x66\xe5\x78\xd0\xc2\xd3\xe8\x7f\xd2\x4f\x74\xe9\xeb\x3b\x00\x00\xff\xff\xb7\x92\xf1\xef\xdd\x00\x00\x00"

func stakingcollectionScriptsGet_node_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_node_idsCdc,
		"stakingCollection/scripts/get_node_ids.cdc",
	)
}

func stakingcollectionScriptsGet_node_idsCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_node_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_node_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x3f, 0x15, 0x64, 0x20, 0x3, 0xee, 0xa5, 0xd2, 0xf8, 0xd4, 0x32, 0xb7, 0x4, 0x30, 0x5d, 0x71, 0xa8, 0x6b, 0xf2, 0xdd, 0x70, 0xa4, 0x67, 0x94, 0xdb, 0xbb, 0xb9, 0x1a, 0x4d, 0x7d, 0x2d}}
	return a, nil
}

var _stakingcollectionScriptsGet_unlocked_tokens_usedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x53\xa7\x64\x21\x0b\x62\xc8\x86\x90\xf2\x02\x34\x0f\x60\xdd\x99\xf4\x14\xc7\x46\x67\x47\x05\x21\xde\x1d\xd1\x16\xa6\xce\x96\x7f\xfa\x7f\x75\x7b\xb7\x16\x38\x4c\x62\xe7\xd7\xa0\xb5\xea\xf2\x62\x22\x9c\xa3\x9a\x1e\x52\x1a\x86\x01\x47\x16\x71\x9c\xec\x8c\x8d\xf4\x13\xbb\x8a\xe5\x95\x0b\xc2\x56\x56\x47\x9c\x18\x94\xb3\xed\x1a\xa8\x8e\xdd\xab\x2e\x97\xbf\xc9\xda\xef\xb1\x31\xfc\x2a\x23\xff\xd3\x50\x2b\xec\x20\x2d\x28\x2c\xbc\x50\x58\xf3\x94\x28\x67\x76\xef\x48\xa4\xc7\xdb\xae\xd8\xa8\x6a\x77\xc3\x47\x3c\x97\xd2\xd8\xbd\x1f\x31\x4f\xf5\xe3\xe9\x11\x5f\x09\x00\x1a\xc7\xde\x14\x77\x27\x3c\x2c\x1c\xf3\x2d\xf8\x78\xe9\x9d\x9d\x4b\x47\x57\x69\xfc\x0b\xef\xd3\x77\xfa\x09\x00\x00\xff\xff\x58\xe5\x04\xce\x0b\x01\x00\x00"

func stakingcollectionScriptsGet_unlocked_tokens_usedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionScriptsGet_unlocked_tokens_usedCdc,
		"stakingCollection/scripts/get_unlocked_tokens_used.cdc",
	)
}

func stakingcollectionScriptsGet_unlocked_tokens_usedCdc() (*asset, error) {
	bytes, err := stakingcollectionScriptsGet_unlocked_tokens_usedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/scripts/get_unlocked_tokens_used.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0x19, 0x97, 0x5b, 0x31, 0x92, 0xc0, 0x15, 0xd4, 0xc9, 0x2d, 0x81, 0xd1, 0xd3, 0xf6, 0x86, 0x3c, 0x86, 0x80, 0xf, 0xb6, 0xab, 0x1a, 0xac, 0x87, 0x3e, 0x90, 0xcf, 0x81, 0x67, 0xf1, 0x8e}}
	return a, nil
}

var _stakingcollectionSetup_staking_collectionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x5d\x4f\xe3\x3a\x10\x7d\xcf\xaf\x18\xfa\xc0\x4d\xa4\x36\x7d\xaf\x0a\xdc\x7b\x8b\x56\x8b\xb4\x5a\xd0\x82\xd8\xe7\x69\x32\x69\xbc\x35\x76\x64\x3b\x8d\x10\xe2\xbf\xaf\xec\x7c\x37\x29\x74\x61\xb5\x48\xeb\x87\xa6\xb2\x3d\x1f\xe7\x1c\x8f\x3d\xec\x21\x93\xca\xc0\xe4\x53\x2e\x36\x6c\xcd\xe9\x4e\x6e\x49\x4c\xbc\x66\x9a\xcb\x62\x64\xea\xea\xf2\x0e\xd7\x9c\x6e\x0d\x6e\x99\xd8\xb4\x6b\x5f\x64\xb4\xa5\xd8\x19\xe8\xbe\x45\xb5\x75\x25\x39\xa7\xc8\x30\x29\x26\x9e\x37\x9f\xcf\xe1\x2e\x65\x1a\x8c\x42\xa1\xd1\x4d\x83\x26\xa3\x21\xcf\x00\x05\x60\x14\xc9\x5c\x18\x30\x12\x72\x4d\x80\xa0\x4b\x27\x10\x35\x5e\x9c\x8f\x2b\x03\x05\xe3\x1c\x0a\xa9\xb6\xa0\x68\x83\x2a\xe6\xa4\x35\xc8\x04\x8a\x94\x4c\x4a\x0a\x4c\x4a\x8f\x90\xe2\xce\x7a\x51\xb4\xc9\x39\xaa\xda\xfd\x14\x10\x4c\x21\x67\x75\x34\xee\x30\x80\x71\x20\x6c\x3a\x79\x36\x75\x61\xa4\x6a\x12\x90\xeb\x1f\x14\x19\x0d\xda\x48\x45\x31\x30\x61\x03\x40\x2e\x2a\xdb\xca\x95\xe7\x75\x81\x3d\x79\x00\x00\x99\xa2\x0c\x15\xf9\x9a\x6d\x04\xa9\x05\x60\x6e\x52\xff\x7f\xa9\x94\x2c\xee\x91\xe7\x34\x85\x5b\x23\x15\x6e\x68\x0a\x2b\xcc\x70\xcd\x38\x33\x8c\x74\x00\xa7\xff\x95\x4e\x03\x78\xf2\x9c\x27\x3b\x2c\xf8\xc4\xc6\x56\x04\x4c\x8b\x7f\x0c\x20\x57\x84\xf1\xe3\x38\x59\xb5\x19\x4b\xa0\x8c\x1f\xea\x32\x58\xb8\x76\x19\x2c\x4f\x47\xa5\x0a\x07\x33\xe7\x7e\xa2\xe4\xc3\x02\x8e\xdc\x5e\x41\xba\x41\x93\x06\x70\x76\x06\x82\xf1\x2e\x8a\x0a\xc9\x4a\x11\x1a\x82\x4c\xb1\x9d\xfd\x46\x1d\xf8\x90\x48\xa7\x61\xa9\x0a\xa4\x92\xc7\xa4\x00\x45\xdc\x72\xbe\xc3\x9c\x9b\x9e\x4b\x4e\xb5\x98\x9f\xcb\xfd\x67\x35\xea\xae\xeb\x86\x02\xa6\x75\x4e\x4b\xa7\x47\xaf\x18\xc2\xef\xcc\xa4\xb1\xc2\x62\x0a\xdd\xe3\x1d\xba\xcf\x75\x46\x0a\x2d\x44\xab\xd0\x70\xb9\x0c\x7c\xee\x1f\x5a\xe9\x12\x73\x32\x48\x3e\xa9\x8b\xef\xbd\x99\x07\x70\xda\x14\x72\x78\x6f\x89\x3a\xf7\xe7\x95\xf5\xbc\x89\xe2\x16\x82\x93\x43\xba\x20\x08\x2a\xa0\xd2\x16\x5a\x71\x9d\x0c\x59\x6e\x80\x19\x5b\x08\x95\xdb\x9e\x13\x96\xf4\x84\x08\xa3\x94\xa2\xad\x1f\x54\x25\xd1\x1d\x7b\xc7\x52\xe3\x8e\xfc\xc1\x26\x3b\x96\xb3\x03\x87\x2f\x72\xd9\x0e\xe6\xc7\xbd\xd8\x51\x9f\x20\x07\x7f\xd1\x92\x3e\x3d\x68\x61\x5a\x01\x17\x3d\x60\xa3\x16\xc1\xb8\x23\x23\xdf\x52\x3e\x03\x57\x41\x6f\xe6\x19\x88\x6b\xfa\x2b\x78\x15\x8c\x7f\x3c\x9d\x83\x5a\xb8\xc9\xd7\x9c\xe9\x14\xb0\xbd\x9e\x1e\xed\xfb\x64\xef\xa6\x92\xa1\x78\xe4\xe2\x0d\x07\xa5\xad\xf7\x93\x5a\x61\x76\x54\x95\x1f\x7f\x43\x0f\xb0\xbd\x93\x9e\xa0\x4f\xc6\x58\xaa\x59\xc9\xce\x30\xf4\x18\xdc\xa1\x8e\x68\x8e\xd6\xd0\xe9\x10\x8d\xe4\x38\x22\xdd\x7c\x0e\xe5\xf3\xe6\xde\xfe\x84\x14\x89\x88\x6a\xd1\x5e\x78\x25\xad\x4e\xed\xf4\x37\x4a\x5a\x81\xfe\xfc\xb3\xd9\x83\x79\x71\x01\x19\x0a\x16\xf9\x93\x95\xcc\x79\x0c\x42\x9a\x1a\xe2\x10\x4f\x8b\x79\x12\x1c\xea\x1c\xec\xe5\x2e\xe3\x92\x0d\x52\x55\x7b\x53\xb7\x35\x4d\x9f\xd4\x5e\xf2\xaf\x30\xf7\x72\x7f\xd1\x6f\x1e\xc3\xaf\x32\x76\xff\xed\x3b\xd9\xd2\x73\x70\x53\xaf\x97\x38\xa9\x7b\x89\xfd\xfa\x72\x68\x96\xb3\xfd\x34\xb8\xc4\x78\xf9\xef\xef\x4d\xa2\xff\x6e\xf7\x0e\x4c\x88\x71\x6c\x8d\xae\x1d\x9f\xfe\x72\x66\xd3\x9a\xc2\x03\x46\x29\x13\x54\x35\x74\x57\x22\x91\xee\xba\x3b\x74\x78\xfb\x3a\xc5\xc4\x69\x83\x46\x7e\x80\x4a\x97\x75\xe8\x17\x38\x6a\xf6\x1c\xa7\x53\x8b\xe6\x17\xc5\x7a\x73\x2e\xaf\xc8\xd5\xd8\x34\x9a\x35\x29\x76\xf5\x29\x7f\x9f\xbd\x9f\x01\x00\x00\xff\xff\x55\xca\xc8\x92\x3f\x0d\x00\x00"

func stakingcollectionSetup_staking_collectionCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionSetup_staking_collectionCdc,
		"stakingCollection/setup_staking_collection.cdc",
	)
}

func stakingcollectionSetup_staking_collectionCdc() (*asset, error) {
	bytes, err := stakingcollectionSetup_staking_collectionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/setup_staking_collection.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x91, 0xa6, 0x84, 0xcf, 0xd2, 0xf2, 0x9f, 0x32, 0xd6, 0x3a, 0xfa, 0xa9, 0x6f, 0xa4, 0xe, 0xd3, 0x54, 0x15, 0xc6, 0x5b, 0x81, 0x3c, 0x8, 0x3, 0xd, 0xb7, 0x56, 0xbc, 0x2b, 0x58, 0x22}}
	return a, nil
}

var _stakingcollectionStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\x4f\x3d\x54\xb6\x14\x25\x12\x20\x0e\x11\x10\x41\xa1\x52\x0f\xfc\x11\x69\xb9\x6f\xed\xb1\xb3\xca\x7a\xc7\x9a\x1d\xe3\x20\xd4\xef\x8e\xbc\x8b\xe3\xaa\x04\x29\x97\xee\xc1\xeb\x1d\x8f\x7f\xf3\x66\xf6\xd9\xb6\x63\x51\x5c\x5c\x3b\x1e\xb6\x6a\xf6\xd6\x37\x57\xec\x1c\x95\x6a\xd9\x5f\x64\xd9\x6a\xb5\xc2\x15\xb7\xad\xd5\x00\x4f\x03\x94\xf7\xe4\x03\x94\x11\xd4\xec\x09\x35\x0b\x74\x47\x08\x1d\x95\xb6\xb6\x54\xc1\x73\x45\x60\x41\x45\x8e\x1a\xa3\x2c\xb0\x3e\xa5\x24\x3c\xca\x23\x3f\xd2\x6f\x77\x34\x51\x6b\xe1\x36\xa6\x3a\x2e\xf7\x54\xe1\xa7\xe9\x9d\xc2\x08\xa1\x0f\x54\xa1\xb6\x12\x74\x01\x5b\xc3\x2a\xe8\x60\x83\x86\x48\xa8\xd9\x39\x1e\xa8\xc2\xfd\xaf\xf8\xf7\x53\x5a\xef\x1f\xf3\xb2\x4c\xc5\xf8\x60\xa2\x82\x7c\x54\x7b\xf3\x71\x8d\xad\x8a\xf5\xcd\x62\x56\x3d\x06\xef\x6e\xbc\xbe\x7c\xb1\x59\xc0\xb4\xdc\x7b\x5d\xe3\xee\xda\x1e\x5e\xbf\x2a\xf0\x3b\x03\x80\xf8\x70\xa4\x53\x67\xf3\xe0\xbe\x53\xbd\x86\xe9\x75\x97\x9f\x9c\xeb\x72\x7e\xfd\x3a\x78\x92\x02\x97\xa7\xf3\xfe\x89\x64\xb1\x66\x27\xd4\x19\xa1\xdc\x94\x65\xd2\x15\x4b\x7d\x60\x11\x1e\x7e\x18\xd7\x53\x81\xcb\xf7\xe9\xdb\xa4\x75\x5c\x81\x5c\xbd\x3c\xa5\x15\x6f\xf1\x17\xb5\x0c\xca\x62\x1a\x5a\xde\x47\xd8\x9b\xe7\xe8\xe1\x5d\x3e\xde\xcc\x1a\x67\xa6\x6f\x93\xa2\x6f\x46\x77\xc5\xb1\x95\x71\x6d\x36\xe8\x8c\xb7\xe5\x7f\xf4\x35\xa4\xf3\xe9\xb3\x0d\xc1\xfa\xe6\x93\x08\x4b\xee\xad\x2b\x12\xea\x21\xcd\x93\x0e\x54\xf6\x4a\xe7\x8c\x2a\x06\xe9\x0b\x0d\xb7\xd1\x64\x47\xff\xa4\xfd\x89\x7f\x1e\x1d\x66\x0f\xa5\x7d\xaa\xff\x90\xfd\x09\x00\x00\xff\xff\x65\x22\x1e\xa8\x82\x03\x00\x00"

func stakingcollectionStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_new_tokensCdc,
		"stakingCollection/stake_new_tokens.cdc",
	)
}

func stakingcollectionStake_new_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0x9e, 0x40, 0xa6, 0x24, 0x8e, 0x1b, 0xbd, 0xee, 0x8e, 0xe5, 0x27, 0x23, 0x7a, 0x14, 0x2b, 0x7d, 0x94, 0xce, 0x15, 0x69, 0xcf, 0xf4, 0xe, 0x9, 0x46, 0xa7, 0xcc, 0x1e, 0x92, 0x42, 0xc4}}
	return a, nil
}

var _stakingcollectionStake_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcd\x4a\xc3\x40\x10\xbe\xe7\x29\x86\x1e\x4a\x02\x25\x05\x15\x0f\x41\x2d\x5a\x2d\xf4\x20\x4a\x6b\xbd\xaf\xc9\x24\x5d\xba\xd9\x09\xb3\x13\x52\x90\xbe\xbb\x24\xdb\x36\xa2\x15\x7a\x71\x0f\xd9\xcc\x64\xf2\xfd\x0c\x9f\x2e\x2b\x62\x81\xc1\xcc\x50\xb3\x14\xb5\xd1\xb6\x98\x92\x31\x98\x8a\x26\x3b\x08\x82\xf1\x78\x0c\x53\x2a\x4b\x2d\x0e\x18\x1b\xc5\x19\x66\x20\xb4\x41\xeb\x40\x08\x9c\xa8\x0d\x42\x4e\x0c\xb2\x46\x70\x15\xa6\x3a\xd7\x98\x81\xa5\x0c\x81\x18\x32\x34\x58\x28\x21\x06\x6d\xfd\x88\xe7\x80\xf4\x48\x12\x04\xc2\xca\x3a\xd5\x15\x61\xfb\xe3\xfc\x31\x81\xa5\xb0\xb6\xc5\xa8\x07\x68\x9b\xab\xb9\x95\xcb\x8b\xc9\x08\x54\x49\xb5\x95\x04\x56\x33\xbd\xbd\xbe\x8a\xe0\x33\x00\x00\xe8\x1e\x06\xe5\x40\xd2\x1b\x59\x60\x9e\x80\xaa\x65\x1d\x9e\xf4\x19\xf7\xaf\x2f\x8d\x45\x8e\x60\x78\x7a\xee\x57\x27\xe8\x38\x2b\xc6\x4a\x31\x86\x2a\x4d\xbd\xae\x8e\xea\x81\x98\xa9\x79\x57\xa6\xc6\x08\x86\xf7\xfe\xdb\x41\x6b\x7b\x1c\x9a\x3c\x3e\xa5\x15\x6e\x61\x0f\x15\x3b\x21\x56\x05\xc6\x1f\x1d\xd8\xcd\x7f\x78\xb8\x0b\x73\xa6\x32\x81\x33\xc7\x97\x5e\xd1\xab\x92\x75\x74\xb4\xd2\x9e\xc9\x04\x2a\x65\x75\xfa\x87\xbe\x02\xa5\xaf\x9e\xb5\x73\xda\x16\x4f\xcc\xc4\xa1\xd5\x26\xf2\x50\x3b\xbf\x4f\xdc\x62\x5a\x0b\x9e\xb3\xaa\xae\x89\x8b\x7d\x32\xdf\xba\x60\x1e\x43\xe4\xef\x1f\x21\xfa\x56\xf4\x41\xf2\xf7\x41\xc4\x2e\xf8\x0a\x00\x00\xff\xff\xfd\x22\x2b\xf2\x17\x03\x00\x00"

func stakingcollectionStake_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_rewarded_tokensCdc,
		"stakingCollection/stake_rewarded_tokens.cdc",
	)
}

func stakingcollectionStake_rewarded_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xcb, 0xa6, 0xd6, 0x8b, 0x1b, 0x13, 0xf7, 0x1b, 0x68, 0xbc, 0xff, 0x62, 0xce, 0xba, 0x43, 0xef, 0xbd, 0xf2, 0xa0, 0x69, 0x9c, 0xe9, 0x98, 0xb4, 0xb3, 0x10, 0xdd, 0x21, 0x59, 0x8b, 0x99}}
	return a, nil
}

var _stakingcollectionStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\x4d\x4b\xf3\x40\x10\xbe\xe7\x57\x0c\x3d\x94\x04\x4a\x0a\xef\x2b\x1e\x82\x5a\xb4\x5a\xe8\x41\x14\x6b\xbd\xaf\xc9\x24\x5d\xba\xd9\x09\xb3\x13\x5a\x90\xfe\x77\xc9\x6e\xdb\x88\x56\xe8\xc5\x3d\x64\x33\x93\xc9\xf3\x31\x3c\xba\x6e\x88\x05\x06\x33\x43\x9b\x85\xa8\xb5\xb6\xd5\x94\x8c\xc1\x5c\x34\xd9\x41\x14\x8d\xc7\x63\x98\x52\x5d\x6b\x71\xd0\x5a\x27\x6a\x8d\x05\x08\xad\xd1\x3a\x10\x02\xdf\x80\x92\x18\x64\x85\xe0\x1a\xcc\x75\xa9\xb1\x00\x4b\x05\x02\x31\x14\x68\xb0\x52\x42\x0c\xda\x86\x91\xc0\x01\xf9\x91\x24\x8a\x84\x95\x75\xca\x17\x71\xf7\xe3\xfc\x3e\x83\x85\xb0\xb6\xd5\xa8\x07\xe8\x9a\xcb\xb9\x95\xff\xff\x26\x23\x50\x35\xb5\x56\x32\x58\xce\xf4\xf6\xf2\x22\x81\x8f\x08\x00\xc0\x3f\x0c\xca\x81\xa4\x37\xf2\x82\x65\x06\xaa\x95\x55\x7c\xd2\x67\xda\xbf\x3e\x6d\x2c\x72\x02\xc3\xd3\x73\x3f\x3a\x91\xe7\x6c\x18\x1b\xc5\x18\xab\x3c\x0f\xba\x3c\xd5\x1d\x31\xd3\xe6\x4d\x99\x16\x13\x18\xde\x86\x6f\x07\xad\xdd\x71\x68\xca\xf4\x94\x56\xb8\x86\x3d\x54\xea\x84\x58\x55\x98\xbe\x7b\xb0\xab\xbf\xf0\x70\x13\x97\x4c\x75\x06\x67\x8e\x2f\x82\xa2\x67\x25\xab\xe4\x68\xa5\x3b\x93\x09\x34\xca\xea\xfc\x17\x7d\x15\x4a\x5f\x3d\x6a\xe7\xb4\xad\x1e\x98\x89\x63\xab\x4d\x12\xa0\x76\x61\x9f\xb8\xc5\xbc\x15\x3c\x67\x55\xbe\x89\xcb\x7d\x32\x5f\x7d\x30\x8f\x21\x0a\xf7\xb7\x10\x7d\x29\xfa\x20\x85\xfb\x20\x62\x17\x7d\x06\x00\x00\xff\xff\xff\x7e\x0e\x23\x17\x03\x00\x00"

func stakingcollectionStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionStake_unstaked_tokensCdc,
		"stakingCollection/stake_unstaked_tokens.cdc",
	)
}

func stakingcollectionStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xc, 0xd3, 0x7f, 0x53, 0x9a, 0x80, 0xa5, 0xcc, 0xc3, 0x99, 0x46, 0x41, 0xbb, 0xb, 0xf3, 0x18, 0xd0, 0xf2, 0xe4, 0x57, 0x4, 0x4a, 0xb6, 0x2b, 0xae, 0x26, 0xa3, 0x40, 0x60, 0xe4, 0xa0}}
	return a, nil
}

var _stakingcollectionTestDeposit_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xe2\x30\x10\xbd\xfb\x57\x8c\x72\x40\xc9\x81\xe4\xb2\xda\x03\x62\x17\xed\x22\x71\x42\x6a\x55\x0a\x3d\x9b\x64\x12\x2c\x8c\x27\xb2\xc7\xa2\x55\xc5\x7f\xaf\x62\x43\x44\x28\x52\xc9\x25\xf2\x9b\x79\x6f\xde\x7c\xa8\x43\x4b\x96\x21\x59\x68\x3a\xae\x58\xee\x95\x69\xe6\xa4\x35\x96\xac\xc8\x24\xe2\x3a\xfc\x4a\x7b\xbc\x86\xbc\x69\xd4\x56\xe3\x0d\xbc\xa4\x72\x8f\x55\x00\x5d\x22\x44\x51\xc0\xda\x61\x05\x64\xf4\x07\xd4\x64\x81\xd1\x31\xb4\xde\xb6\xe4\xd0\x01\x53\x04\x78\x87\x50\x61\x4b\x4e\x31\x70\xc7\x85\xda\x9b\xe0\x01\x94\x09\x51\x17\xcd\x41\xd9\xbb\x13\x82\xad\x34\x4e\x86\x47\x2a\x0f\xe4\x0d\x4f\x60\xbd\x50\xef\xbf\x7f\x65\xf0\x29\x04\x00\x40\x6b\xb1\x95\x16\x53\xa7\x1a\x83\x76\x02\xd2\xf3\x2e\xfd\x4f\xd6\xd2\x71\x23\xb5\xc7\x0c\x46\xff\xca\xb2\xa3\xf6\x94\xee\xd3\xc8\x57\x95\x5e\xb0\x86\x3f\x10\x25\x72\xc7\x64\x65\x83\xf9\x36\x88\x4c\x47\x77\x27\x97\x7f\x43\xfe\xa6\xb5\xa5\xc3\x04\x1e\x4c\x5f\xc5\x2a\xcf\x92\x77\x59\xef\xaa\xfb\x66\x33\x68\xa5\x51\x65\x9a\xcc\xc9\xeb\x0a\x0c\x31\x44\x2b\x20\xc1\x62\x8d\x16\x4d\x89\x61\xb0\x77\xa7\x96\x64\xc3\x2e\xeb\xcb\x66\x7f\x6c\x32\x64\xe5\x1b\xe9\x35\x5f\x9a\x29\xce\x79\x45\xaf\x12\xc2\x0f\x3b\x1e\xf8\x5d\x2c\x9f\xde\x20\xf0\x6f\x3d\x86\x8b\x70\x30\x1d\x0f\x77\x92\x37\xc8\xf1\xd0\xfa\xed\xc7\xff\xb0\x7e\xff\x18\x92\xcf\xe7\x76\x16\x88\xfd\x4c\xc7\xb1\x54\x14\x38\x89\xd3\x57\x00\x00\x00\xff\xff\xfc\x90\x8a\x39\x1f\x03\x00\x00"

func stakingcollectionTestDeposit_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTestDeposit_tokensCdc,
		"stakingCollection/test/deposit_tokens.cdc",
	)
}

func stakingcollectionTestDeposit_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionTestDeposit_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/test/deposit_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x4e, 0x29, 0x2e, 0xd1, 0xb3, 0x78, 0xec, 0xcb, 0x2b, 0xd2, 0x5, 0x4e, 0x73, 0x75, 0x9a, 0x58, 0x91, 0xf0, 0xb1, 0x2c, 0x6e, 0x98, 0x3e, 0xe6, 0xd3, 0xf, 0x92, 0x72, 0x19, 0x73, 0x6f}}
	return a, nil
}

var _stakingcollectionTestGet_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x31\x6f\xf2\x30\x10\xdd\xfd\x2b\x9e\x32\xa0\x64\xf8\xc2\xf2\xa9\x03\xa2\x45\x2d\x12\x53\x87\xaa\x94\xee\x26\xb9\x04\x0b\xe3\x8b\xec\x8b\x28\xaa\xf8\xef\x15\x36\x4a\xa1\x65\xe8\x2d\x96\xdf\xf9\xbd\x7b\xf7\x6c\x76\x1d\x7b\x41\xb6\xb0\xbc\x5f\x8a\xde\x1a\xd7\xce\xd9\x5a\xaa\xc4\xb0\xcb\xd4\x65\xfb\x8d\xb7\x74\x09\xf5\xae\x35\x6b\x4b\x3f\xe0\x67\xae\xb6\x54\x47\x30\x64\x4a\x8d\xc7\x58\x05\xaa\xc1\xce\x1e\xd0\xb0\x87\x50\x10\x74\xbd\xef\x38\x50\x80\x70\x02\x64\x43\x68\x49\x20\x91\x87\xa6\x77\xd1\x00\x8c\x8b\xad\x90\x9c\xa1\x1a\xac\x29\x25\x5e\xbb\xa0\xe3\x25\xd7\x3b\xee\x9d\x4c\xb0\x5a\x98\x8f\xbb\xff\x05\x3e\x95\x02\x80\xce\x53\xa7\x3d\xe5\xc1\xb4\x8e\xfc\x04\xba\x97\x4d\xfe\xc4\xde\xf3\xfe\x5d\xdb\x9e\x0a\x8c\x1e\xab\xea\x44\x1d\x28\xa7\xb2\x24\x17\x93\x5e\xa9\xc1\x3d\x92\x44\x19\x84\xbd\x6e\xa9\x5c\x47\x91\xe9\xe8\x66\x6c\xe5\x2f\xe4\x21\x6f\x3c\xef\x26\xf8\xe3\xf3\x65\x9a\xf2\xa2\x65\x53\x0c\xae\x4e\x35\x9b\xa1\xd3\xce\x54\x79\x36\xe7\xde\xd6\x70\x2c\x48\x56\xa0\xe1\xa9\x21\x4f\xae\xa2\x98\xea\xcd\xd4\xb2\x6b\xb9\xab\x8d\xcf\xd1\x4f\xff\x5d\xef\x5e\xb6\x24\xe9\x37\x87\x94\xd3\x59\x7c\x07\x56\x53\x10\xcf\x87\xb3\x44\x84\x8f\xea\xa8\xf0\x15\x00\x00\xff\xff\x44\x58\xf3\x8b\x5d\x02\x00\x00"

func stakingcollectionTestGet_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTestGet_tokensCdc,
		"stakingCollection/test/get_tokens.cdc",
	)
}

func stakingcollectionTestGet_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionTestGet_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/test/get_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0xcf, 0x24, 0x75, 0x19, 0xcf, 0x7b, 0xbc, 0xd0, 0xb6, 0x4a, 0xcd, 0x69, 0x53, 0x33, 0x89, 0xf6, 0x4f, 0x51, 0x64, 0xa5, 0x2e, 0xaf, 0x14, 0xee, 0x5a, 0x6c, 0x5c, 0xc0, 0xb3, 0xef, 0xbb}}
	return a, nil
}

var _stakingcollectionTransfer_delegatorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x4f\xdc\x3e\x10\xbd\xef\xa7\x18\x38\xa0\x44\x82\x20\xfd\x7e\xb7\x15\x14\x51\xe8\x1f\x0e\x2d\x08\xda\xde\x67\xe3\x49\xe2\xd6\xeb\x89\xec\xd9\xa5\xb4\xe2\xbb\x57\x76\xfe\xec\x86\x84\x76\x55\xd1\x5c\x76\x13\x8f\xdf\xbc\x79\x6f\xc6\xd6\xcb\x9a\x9d\xc0\xfe\x5b\xc3\xf7\x77\x82\xdf\xb4\x2d\x2f\xd8\x18\xca\x45\xb3\xdd\x9f\xcd\x8e\x8f\xe1\x93\x43\xeb\x0b\x72\x1e\x10\x3e\xb2\xa2\x4b\x32\x54\xa2\xb0\x03\x5e\x7c\xa5\x5c\xa0\x70\xbc\x04\xb4\x80\x2b\xa9\xd8\xe9\x1f\x31\x34\xcf\x79\x65\x25\xec\x47\xab\x00\x95\xf2\x20\x15\x3d\x01\x10\x06\xb4\x2c\x15\xb9\x6e\x83\x87\x96\x05\x6c\x68\x04\x10\xad\xc8\x8a\x2e\x34\x29\x58\x3c\x44\x24\x61\x38\x57\xca\x91\xf7\xd9\x6c\x26\x81\x23\xc6\xe8\xc4\xb2\xa2\xab\xcb\x39\xdc\x89\xd3\xb6\x3c\x04\xd5\xa5\x0b\x1f\x3f\x5f\x59\xf9\xff\xbf\x43\x10\x9e\x77\xdb\x53\xf8\x39\x03\x00\x30\xd4\x94\x32\x92\xe1\x96\x8a\x79\x2c\x2e\x99\x54\x29\xdb\xfc\xbd\xbe\xb7\xe4\x52\x38\x98\x8e\x1b\x7d\xe9\xd3\x0a\x8f\xd6\x2e\xb0\x9e\xef\x0e\x14\x91\x6a\x47\x35\x3a\x4a\x5a\x29\x5b\xce\xaf\xd9\x39\xbe\xff\x82\x66\x45\x29\x1c\x9c\x37\x6b\x5d\xcd\xe1\x09\x16\x57\xd4\x19\x10\x74\x95\xd6\xf1\x09\xc7\x5a\xcb\x85\x61\xb9\xf2\x02\x15\xae\x09\x10\xd6\x68\xb4\x9a\x70\x0e\xb4\x05\x76\x8a\xa2\xd3\x8e\x72\xd2\x6b\x1a\x83\x66\x3d\x15\x5d\x40\xb2\x37\x5d\xb3\x62\xf2\x2d\xf9\xf7\xb8\xa6\x51\x40\x82\x8d\x9b\x73\x10\x4e\xb7\xcb\x8b\xca\xa0\xd5\xf9\x33\xee\x95\x24\x9b\xb7\x0f\xda\x7b\x6d\xcb\x37\xce\xb1\x4b\x02\x50\x0f\xf3\x38\xdb\x16\xec\x1d\x09\x20\x38\x2a\xc8\x91\xcd\x63\x33\x86\xb2\xb6\x27\x60\xda\xed\xf0\x78\x32\x45\xf6\x5c\xa7\xc1\x69\xe7\x44\xe6\x85\x1d\x96\x94\x2d\xa2\x83\x27\xff\xa2\x03\x5f\x25\x81\xc7\x1c\x76\x0c\xbf\x6b\x18\xdd\xa0\x54\xe9\x40\xe0\xb3\xb3\xbf\xd4\xd8\x6a\x93\xa6\x23\x69\x83\x96\x37\xab\x85\xd1\x79\x6b\x39\x70\xd1\x08\xbc\x53\x93\x0a\x67\xd0\x43\x36\xf3\xd5\xe1\x9c\x42\x49\xd2\xbe\x04\x83\x07\xa9\x9b\x51\x01\x84\x1c\x6b\x5c\x68\xa3\xe5\xa1\x73\xb6\x8e\x6c\x60\x49\x52\xb1\xf2\x80\x6b\xd4\x06\x17\x86\x80\x6d\x5c\x6f\x9b\x7b\xca\xf7\x6c\x68\xfc\xf4\xac\xc3\xe9\x86\x64\xd6\xa7\xd7\xe4\x07\x32\x77\xad\xb0\xbb\xbd\x3b\x06\x36\x62\xbf\xa0\xaf\xfd\xec\xb4\x73\x43\xdf\x29\x5f\x09\x0d\x8f\x9d\x5b\x5a\xf2\xd4\x81\xd0\xdc\x28\x7f\x1c\xa8\x6c\xe0\xb1\x1d\x20\x9c\x1c\xfd\x7e\xcc\x32\x17\x73\xf7\x1b\xfa\x5b\xa3\xf9\x7d\x72\x6b\x6c\xbd\x0c\x3b\xe6\x92\x6a\xf6\x5a\xa6\xaf\xb6\x97\xe8\x8b\x0c\x95\xea\x41\xaf\xe3\xe1\x9b\x9c\x1c\x0d\x8b\xdd\xeb\x94\x7e\xfc\x15\x00\x00\xff\xff\xbb\xe4\xb4\xeb\xce\x07\x00\x00"

func stakingcollectionTransfer_delegatorCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTransfer_delegatorCdc,
		"stakingCollection/transfer_delegator.cdc",
	)
}

func stakingcollectionTransfer_delegatorCdc() (*asset, error) {
	bytes, err := stakingcollectionTransfer_delegatorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/transfer_delegator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x1, 0xd0, 0xca, 0x5f, 0xe9, 0xf5, 0x2f, 0xe7, 0x99, 0xc1, 0xe3, 0xdd, 0x76, 0x2f, 0xf7, 0xc4, 0xf0, 0x44, 0x76, 0xbf, 0xeb, 0x1a, 0x6b, 0xed, 0x59, 0xca, 0x6, 0x27, 0xb3, 0x3c, 0xac}}
	return a, nil
}

var _stakingcollectionTransfer_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x4f\xdb\x40\x10\xbd\xe7\x57\x0c\x3e\x50\x5b\x02\x73\x8f\x48\x11\x85\x7e\x70\xa0\x20\xa8\x7a\xa9\x7a\x98\x78\xc7\xf6\x16\x67\x27\xda\x1d\x07\xd1\x8a\xff\x5e\xad\x3f\x63\x6c\x20\xaa\x68\x4e\xb1\x3d\xfb\xe6\xcd\x7b\x33\x3b\x7a\xb5\x66\x2b\x10\x7c\x2a\xf8\xfe\x56\xf0\x4e\x9b\xec\x8c\x8b\x82\x12\xd1\x6c\x82\xd9\xec\xe8\x08\xbe\x59\x34\x2e\x25\xeb\x00\xe1\x2b\x2b\xf2\x61\x64\x81\x97\xbf\x28\x11\x48\x2d\xaf\x00\x0d\x60\x29\x39\x5b\xfd\xbb\x8a\x4b\x12\x2e\x8d\xf8\xc3\x68\x14\xa0\x52\x0e\x24\xa7\xed\xd3\xc2\x80\x86\x25\x27\xdb\x46\x3b\x68\xf2\x43\x4f\xc0\x23\x68\x45\x46\x74\xaa\x49\xc1\xf2\xa1\x82\x11\x86\x53\xa5\x2c\x39\x17\xcf\x66\xe2\xd9\x61\x15\x1d\x1a\x56\x74\x71\x3e\x87\x5b\xb1\xda\x64\x07\x20\x3c\x6f\x23\x23\xf8\x33\x03\x00\x28\xa8\xa6\x3c\xaa\xf5\x86\xd2\x79\x55\x44\x38\x29\x45\xdc\xff\xbd\xba\x37\x64\x23\xd8\x9f\x8e\x1b\xbd\xe9\xd2\x0a\x8f\xbe\x9d\xe1\x7a\xbe\x3b\x50\x85\xb4\xb6\xb4\x46\x4b\x61\xa3\x5a\xc3\xf9\x03\x5b\xcb\xf7\xdf\xb1\x28\x29\x82\xfd\xd3\xfa\x5b\x5b\xb3\xff\x79\x1f\x73\x6a\xb5\xf6\x12\x4a\x63\xeb\x53\x67\x1a\x5f\x85\x61\x55\x3a\x81\x1c\x37\x04\x08\x1b\x2c\xb4\x9a\x70\x08\xb4\x01\xb6\xaa\x76\xd4\x52\x42\x7a\x43\x4f\x10\xe3\x8e\x84\x4e\x21\xdc\x9b\xae\x56\x31\xb9\x86\xf6\x17\xdc\xd0\x28\x20\xc4\xda\xc7\x39\x08\x47\xdb\x85\x55\x9a\xa0\xd1\xc9\x33\xbe\x65\x24\xfd\xd3\xa5\x76\x4e\x9b\xec\xa3\xb5\x6c\x43\x0f\xd4\xc1\x3c\xce\xb6\xa5\xfa\x4c\x02\x08\x96\x52\xb2\x64\x92\xaa\xe3\x7c\x4d\xdb\x3d\x3e\xed\xb3\xff\x39\x2a\xd2\xf8\xb9\x1e\x83\x45\xeb\x41\xec\x84\x2d\x66\x14\x2f\x2b\xef\x8e\xff\x47\xef\xbd\x0f\x3d\x8f\x39\xec\x18\x7e\x5b\x33\xba\x46\xc9\xa3\x81\xc0\x27\x27\xff\xa8\xb1\xd1\x45\x14\x8d\xa4\xf5\x5a\x5e\x97\xcb\x42\x27\x8d\xe5\xc0\x69\x2d\xf0\xeb\xed\x29\x1c\x43\x87\x57\x8f\x55\x0b\xb2\x80\x8c\xa4\x79\xf0\xee\x0e\xf2\xd6\x13\x02\x08\x09\xae\x71\xa9\x0b\x2d\x0f\xad\xad\xeb\x8a\x0a\xac\x48\x72\x56\x0e\x70\x83\xba\xc0\x65\x41\xc0\xa6\xfa\xde\xb4\xf5\x94\xe9\xf1\xd0\xf5\xe9\x11\x87\x45\x4f\x32\xee\xd2\x6b\x72\x03\x8d\xdb\x3e\xd8\xdd\xdb\x1d\x03\x6b\xa5\xdf\xd0\xd4\x6a\x70\x06\x1e\xac\x30\xc9\xb5\xa1\xa6\xc6\x0b\x93\x32\x2c\x5e\x9e\x03\x0f\x7f\x39\x38\xe5\xc2\xe8\x47\x7d\x81\xff\x9c\xa6\x19\x9c\x71\x59\x28\x30\x2c\xde\xe7\x36\x67\xd7\x33\xda\x67\xad\xb6\x91\xf7\xcc\xe9\xcc\x90\x7d\xd7\xed\x22\x48\xb9\x6e\x25\x9f\x02\x2e\xce\x21\x18\x24\xe9\x4c\x48\xd8\x24\x28\xcd\x26\x89\xda\xc7\x20\x86\x4b\xbc\x23\x70\xa5\xf5\xb7\x1b\x4a\x0f\x95\xa3\x83\x84\x4d\xaa\xb3\xd2\x92\x02\x1c\xf1\x0a\xa2\x17\x33\x05\x7e\x43\x7a\x10\x2d\x60\x29\xd3\x4e\xc8\xe3\xe8\xba\xf5\x5c\x73\xe1\x26\xbd\x2f\xc1\x93\x81\xba\xa1\x15\x8f\xee\xdc\x5e\x88\x17\xef\xac\x78\xe0\xa2\xe9\x8f\x1f\x1f\xbe\x62\x9f\xad\xb2\xfa\x84\xdd\xd6\x6d\x34\x1b\x90\x3b\xa7\x35\x3b\x2d\x13\xdb\xff\x2d\x06\x2b\x46\xa5\x3c\xea\x55\xb5\xb2\xc2\xe3\xc3\xad\x12\xf6\x0e\x26\xba\x72\x3e\xf1\xae\xb6\xe7\x71\xf6\xf8\x37\x00\x00\xff\xff\x75\x5e\x42\x70\x0b\x09\x00\x00"

func stakingcollectionTransfer_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionTransfer_nodeCdc,
		"stakingCollection/transfer_node.cdc",
	)
}

func stakingcollectionTransfer_nodeCdc() (*asset, error) {
	bytes, err := stakingcollectionTransfer_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/transfer_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x77, 0xc3, 0xbd, 0x7, 0x48, 0x38, 0x45, 0x3b, 0xf5, 0xd2, 0xce, 0xe4, 0xfa, 0x8d, 0xe3, 0xf8, 0xe, 0x94, 0xd0, 0xb7, 0xad, 0xd7, 0x35, 0xf, 0x80, 0xfc, 0xe0, 0x24, 0x47, 0x51, 0x55}}
	return a, nil
}

var _stakingcollectionUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcd\x6a\xf3\x30\x10\xbc\xeb\x29\x86\x1c\x82\x7d\x71\xee\xe1\xfb\x1a\xd2\x3f\x28\xa4\xb4\x24\xd0\xbb\xaa\xac\x1d\x11\x45\xeb\xae\xd6\xa4\x50\xf2\xee\x25\x56\x7e\x0e\x4d\x21\x97\xee\xc1\xd6\x4a\xb3\x33\xb3\xcb\xfa\x4d\xcb\xa2\x18\x3c\x06\xde\x2e\xd4\xae\x7d\x6c\xee\x38\x04\x72\xea\x39\x0e\x8c\x19\x8d\x46\x98\xd3\x47\x47\x49\x13\x94\xd1\xc5\xa4\x76\x4d\x98\xce\x66\x50\x5e\x53\x4c\xa8\x59\xa0\x2b\x42\x6a\xc9\xf9\xda\xd3\x12\x91\x97\x04\x16\x2c\x29\x50\x63\x95\x05\x3e\x66\x48\x56\x80\x3b\x49\x18\xa3\x62\x63\xb2\x7d\x52\xec\x0b\x9f\xee\xc7\x58\xa8\xf8\xd8\x94\xf8\x32\x00\xd0\x7f\x02\xe9\xb1\xfc\x6c\x70\x4e\xf5\x18\xb6\xd3\x55\x71\xd1\x7f\x75\x3e\xbe\x6c\x23\x49\x89\xe1\x65\xdc\x8f\x1b\xd3\x6b\xb6\x42\xad\x15\x2a\xac\x73\xdc\x45\x3d\x48\xdd\xb2\x08\x6f\xdf\x6c\xe8\xa8\xc4\x70\x9a\xdf\x8e\x5e\xf7\x91\x28\xd4\xd5\x25\xaf\xf8\x8f\x03\x55\x95\x94\xc5\x36\x54\xbd\xf7\x64\xff\xfe\xa2\x87\x9b\xa2\x16\xde\x8c\x71\x25\x7c\x91\x1d\xbd\x5a\x5d\x95\xa7\x56\xf6\x31\x99\xa0\xb5\xd1\xbb\x5f\xfc\x35\xa4\xe7\xec\xd9\xa7\xe4\x63\xf3\x20\xc2\x52\x44\x1f\xca\x4c\xb5\xcb\xf3\xa4\x4f\x72\x9d\xd2\x35\xa3\xaa\x0e\x8b\x36\x0d\xe1\xb4\x15\xf9\x7f\x64\xdc\x99\xef\x00\x00\x00\xff\xff\x1f\xd4\x15\x89\xbc\x02\x00\x00"

func stakingcollectionUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionUnstake_allCdc,
		"stakingCollection/unstake_all.cdc",
	)
}

func stakingcollectionUnstake_allCdc() (*asset, error) {
	bytes, err := stakingcollectionUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0xcf, 0x4f, 0x34, 0xb1, 0xfc, 0xf3, 0x4d, 0x72, 0x9b, 0x1c, 0xe4, 0x76, 0x2d, 0x6f, 0x24, 0x2a, 0x3, 0x1b, 0x60, 0xca, 0xcf, 0x63, 0x72, 0x91, 0xcc, 0x20, 0xc7, 0xc6, 0x9, 0x47, 0x59}}
	return a, nil
}

var _stakingcollectionUpdate_networking_addressCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcb\x6a\xeb\x40\x0c\xdd\xcf\x57\x88\x2c\x82\x0d\x17\x67\x1f\x6e\x1b\xd2\xb4\x85\x2e\xfa\xa0\x81\xee\x55\x5b\xb6\x87\x4e\x24\xa3\x91\x71\xa1\xe4\xdf\x8b\xed\x3c\x68\x9b\x42\x36\xd5\x62\x46\x23\x69\x8e\x8e\xc4\xf1\x9b\x46\xd4\x60\x72\x1b\xa4\x5b\x1b\xbe\x79\xae\x56\x12\x02\xe5\xe6\x85\x27\xce\xcd\x66\x33\x58\xd5\xc8\x15\x45\xb0\x9a\x80\xc9\x3a\xd1\xbe\x0c\xb0\x28\x94\x62\x84\x52\x74\x48\xc5\x86\x72\x5f\x7a\x2a\x80\xa5\x20\xe7\x4c\x91\x23\x0e\x40\x49\x1f\xb9\xbb\x9e\xc3\xda\xd4\x73\xf5\x0f\x98\xba\xe5\xf8\x7d\x1f\x4b\xe1\xc3\x01\x00\x0c\x47\x20\x83\xf8\x9d\xcd\x33\x95\x73\xc0\xd6\xea\xe4\x24\xd9\xec\xe8\x3e\x76\x4c\x9a\xc2\xf4\x74\xdd\x8f\x88\x1b\x7a\x36\x4a\x0d\x2a\x25\x98\xe7\xd2\xb2\xed\x5a\x5d\x89\xaa\x74\x2f\x18\x5a\x4a\x61\xba\x1c\x73\x7b\xae\xbd\x45\x0a\x65\x76\x8a\x2b\x5c\xc0\x0e\x2a\x8b\x26\x8a\x15\x65\xaf\x03\xd8\xff\xbf\x98\xe1\x32\x29\x55\x36\x73\x38\xb3\x7c\x3d\x32\x7a\x42\xab\xd3\xc3\x28\xbd\x2d\x16\xd0\x20\xfb\xfc\x17\x7e\x15\xd9\xf1\x75\xef\x63\xf4\x5c\xdd\xa8\x8a\x26\xec\x43\x3a\x42\x6d\xc7\x7d\xd2\x3b\xe5\xad\xd1\x39\xab\xca\xda\xa6\x40\xa3\x87\x83\xb6\x76\xda\x38\xc8\x66\xbc\xbf\xca\xe6\xe8\xef\xdb\x6e\xdd\x67\x00\x00\x00\xff\xff\x1b\x15\x77\x23\xce\x02\x00\x00"

func stakingcollectionUpdate_networking_addressCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionUpdate_networking_addressCdc,
		"stakingCollection/update_networking_address.cdc",
	)
}

func stakingcollectionUpdate_networking_addressCdc() (*asset, error) {
	bytes, err := stakingcollectionUpdate_networking_addressCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/update_networking_address.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x6b, 0x65, 0xf3, 0xd0, 0x3c, 0xac, 0x51, 0xf2, 0x0, 0x52, 0x16, 0x3e, 0xdc, 0x80, 0xe, 0xc8, 0xd7, 0xc3, 0x1f, 0x71, 0x38, 0xae, 0x5a, 0x4c, 0xb5, 0xac, 0xb0, 0x9f, 0xda, 0xe6, 0xd5}}
	return a, nil
}

var _stakingcollectionWithdraw_from_machine_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xcb\x6a\xe3\x40\x10\xbc\xeb\x2b\x1a\x1f\x8c\x04\x8b\x7c\x59\xf6\x20\x76\xd7\xec\x23\x86\x1c\x4c\x82\x9d\xe4\xde\x19\xb5\xa5\xc1\xa3\x69\xa5\xa7\x15\x39\x04\xff\x7b\x90\x64\xd9\x90\x38\xe0\x4b\xe6\xa0\xd1\xa3\x54\x5d\x55\x53\xb6\xaa\x59\x14\x26\x0b\xc7\xed\x5a\x71\x6b\x7d\xf1\x8f\x9d\x23\xa3\x96\xfd\x24\x8a\x66\xb3\x19\xac\xe8\xa9\xa1\xa0\xa0\x0c\xad\xd5\x32\x17\x6c\x41\x79\x4b\x3e\xc0\x46\xb8\x02\x2d\x09\x2a\x34\xa5\xf5\x04\x68\x0c\x37\x5e\xfb\xff\xee\x4a\x1a\x71\x28\x04\xd8\x28\x57\xa8\xd6\xa0\x73\x2f\x90\x53\xcd\xc1\x2a\xe5\x1d\x6d\xc7\xd0\x78\xc7\x66\x4b\xf9\x48\x01\xcf\xd8\x38\x8d\x22\x15\xf4\x01\x7b\x3d\xb1\xe7\x9c\xae\xff\x67\xb0\x56\xb1\xbe\xf8\x06\x58\x75\xc8\x0c\xee\x17\x76\xf7\xe3\x7b\x02\xaf\x11\x00\x40\x7f\x71\xa4\x10\xde\x1b\x5a\xd1\x26\xeb\x74\x94\xf1\x59\xbf\xe9\xe9\xf6\xa6\xf5\x24\x09\x4c\xcf\xe3\x3e\xbc\x89\xfa\x99\xb5\x50\x8d\x42\xf1\xc1\xc1\x61\xd4\x5f\x16\xe1\xf6\x01\x5d\x43\x09\x4c\xff\x0c\xdf\x46\xad\xdd\x0a\xe4\x36\xe9\x39\xad\xf0\x6b\x0c\x23\x0d\xca\x82\x05\xa5\x8f\x3d\xd9\xcf\xaf\xf0\xf0\x3b\xee\x4e\x33\x83\x0b\xe1\xeb\x41\xd1\x2d\x6a\x99\x1c\xad\x74\x6b\x3e\x87\x1a\xbd\x35\x9f\xe8\x2b\x48\x4f\x4f\x4b\x1b\x82\xf5\xc5\x95\x08\x4b\xec\xad\x4b\x06\xaa\xfd\x90\x27\xed\xc8\x34\x4a\x97\x44\x95\x8e\xcd\x5c\x08\x57\xcb\xa1\x8c\x87\xa8\x8f\xad\x19\xf6\x53\x6b\x86\x7d\x9c\xb8\x8f\xde\x02\x00\x00\xff\xff\xf7\x22\x8e\xb6\x0c\x03\x00\x00"

func stakingcollectionWithdraw_from_machine_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_from_machine_accountCdc,
		"stakingCollection/withdraw_from_machine_account.cdc",
	)
}

func stakingcollectionWithdraw_from_machine_accountCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_from_machine_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_from_machine_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x60, 0xfa, 0xcf, 0x51, 0xab, 0x70, 0x1c, 0x8, 0x99, 0xd8, 0xbb, 0xf5, 0xb8, 0x9f, 0xf8, 0x38, 0x2f, 0x71, 0xb1, 0x30, 0x0, 0x3, 0x17, 0x8, 0x3d, 0x30, 0x28, 0xe8, 0x53, 0x3a, 0x4c}}
	return a, nil
}

var _stakingcollectionWithdraw_rewarded_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcd\x6e\xd3\x40\x10\xbe\xfb\x29\x46\x3d\x54\xb6\x14\x39\x12\x20\x0e\x11\x10\x95\x9f\x4a\x3d\x20\x50\xd2\x72\x1f\xec\xb1\xbd\xca\x66\xc6\xcc\x8e\x71\x2b\xd4\x77\x47\x5e\xdb\x71\x05\x41\xea\x85\x3d\x78\xbd\xeb\xcf\xdf\xcf\xec\xac\x3b\xb6\xa2\x06\x17\xd7\x5e\xfa\xbd\xe1\xc1\x71\xfd\x41\xbc\xa7\xc2\x9c\xf0\x45\x92\xac\xd7\x6b\xd8\xd1\x8f\x8e\x82\x81\x09\xf4\xce\x9a\x52\xb1\x07\xa5\x1e\xb5\xa4\x12\x4c\x0e\xc4\x01\x2a\x51\xb0\x86\x20\xb4\x54\xb8\xca\x51\x09\x2c\x25\x81\x28\x94\xe4\xa9\x46\x13\x05\xc7\x23\x64\x94\x81\xe2\xa4\x13\x55\x6e\x1b\x9a\xc9\x50\x09\xb0\x33\x39\xa2\xb9\x02\xbd\x7f\x80\x92\x5a\x09\xce\xa2\x5e\x24\xe9\xd8\x4b\x71\xa0\x12\xb0\x28\xa4\x63\x83\x9f\xd8\x79\x83\xca\x69\xb0\x55\xe4\xbb\xe2\x72\x40\x32\x20\x3f\xc0\x04\x7e\xc2\xbf\x30\x3a\x9e\x38\xcf\x31\x26\x89\x29\x72\xc0\xe8\x33\x1d\x32\xdd\x7c\xdc\xc0\xde\xd4\x71\xbd\x5a\xb2\x0d\x9b\x77\x37\x6c\x2f\x5f\x6c\x57\x80\xc7\xe1\xff\x0d\xdc\x5d\xbb\xfb\xd7\xaf\x32\xf8\x95\x00\x00\xc4\x87\x27\x9b\xf3\x2f\x65\xde\x51\xb5\x19\xf2\x36\xe9\xd9\x53\xc8\x97\xd7\x2f\x3d\x93\x66\x70\x79\x1e\xf7\xd7\x4e\x12\x35\x5b\xa5\x16\x95\xd2\x29\xd7\x24\xf5\x5e\x54\xa5\xff\x86\xbe\xa3\x0c\x2e\xaf\xc6\x6f\xb3\xd7\x61\x04\xf2\x55\x7e\xce\x2b\xbc\x9d\x4b\x94\x07\x13\xc5\x9a\xf2\xef\x91\xec\xcd\xff\xc8\xf0\x2e\xad\x54\x8e\x1b\x78\x26\x7c\x3f\x3a\xfa\x8a\xd6\x64\xa7\x28\xc3\xd8\x6e\xa1\x45\x76\xc5\x3f\xfc\xd5\x64\xcb\xea\xb3\x0b\xc1\x71\xfd\x49\x55\x34\x65\xe7\xb3\x91\xea\x71\xac\x27\xdd\x53\xd1\x19\x3d\xa7\x54\xf9\x7c\x5f\x76\xd3\x75\xb9\x8d\x0d\x78\xea\xa3\x71\xfe\xa3\x8f\x9e\x2c\x96\x5e\x1a\xe7\xd9\xc7\x63\xf2\x3b\x00\x00\xff\xff\x99\x17\xf2\x4f\xb8\x03\x00\x00"

func stakingcollectionWithdraw_rewarded_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_rewarded_tokensCdc,
		"stakingCollection/withdraw_rewarded_tokens.cdc",
	)
}

func stakingcollectionWithdraw_rewarded_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_rewarded_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_rewarded_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x8f, 0x89, 0x1b, 0xbb, 0xe2, 0x63, 0xfb, 0x74, 0xb5, 0xe3, 0x6a, 0x52, 0x0, 0x79, 0x2c, 0xf7, 0xdd, 0xea, 0xb8, 0x6a, 0x4e, 0xb7, 0x7a, 0x5b, 0x33, 0xba, 0xc1, 0xb5, 0xba, 0x9f, 0x66}}
	return a, nil
}

var _stakingcollectionWithdraw_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4b\x6b\xdb\x40\x10\xbe\xeb\x57\x0c\x39\x04\x1b\x8c\x0c\x6d\xe9\xc1\xb4\x35\xe9\x23\x90\x43\x69\x89\xe3\xde\xa7\xd2\x48\x1a\xbc\x9e\x51\x67\x47\x55\x42\xc9\x7f\x2f\x7a\x59\xa1\x75\x21\x97\xee\x41\xab\x5d\x7d\x7c\x8f\xd1\x0c\x1f\x6b\x35\x87\x8b\xeb\xa0\xed\xce\xf1\xc0\x52\x7e\xd0\x10\x28\x73\x56\xb9\x48\x92\xf5\x7a\x0d\xb7\xf4\xa3\xa1\xe8\xe0\x0a\x2d\x7b\x95\x1b\xb6\xd0\x48\x74\x3c\x50\x0e\xae\x07\x92\x08\x85\x1a\x78\x45\x10\x6b\xca\xb8\x60\xca\x41\x34\x27\x50\x83\x9c\x02\x95\xe8\x6a\xc0\x32\x40\x06\x19\xc8\x4e\x3a\xbd\xca\x5d\x45\x13\x19\x1a\x01\x36\xae\x47\x74\xce\x30\x84\x07\xc8\xa9\xd6\xc8\xde\xeb\xf5\x24\x8d\x04\xcd\x3a\x7d\xcc\x32\x6d\xc4\xe1\x27\x36\xc1\xa1\x60\x8b\xbe\xea\xf9\xae\x24\xef\x90\x02\x28\x0f\x30\x82\x9f\xf0\xcf\x8c\x2c\x23\xe7\x59\x46\x2e\x80\x1d\x38\x76\x08\xa3\x24\x71\x43\x89\xd8\xdb\x5e\x74\x11\x6f\x3e\x6e\x60\xe7\xc6\x52\xae\xe6\xa8\xdd\xe5\xfe\x46\xfc\xe5\x8b\xed\x0a\xf0\xd8\xd1\x6d\x60\x7f\xcd\xf7\xaf\x5f\x2d\xe1\x57\x02\x00\xd0\x3f\x02\xf9\x54\x8e\xb9\xea\xb7\x54\x6c\xba\xf8\xd5\xe2\xec\x4f\x49\xe7\xd7\x2f\xad\x90\x2d\xe1\xf2\x3c\xee\xaf\x9b\xa4\xd7\xac\x8d\x6a\x34\x5a\x8c\x31\x47\xa9\xf7\x6a\xa6\xed\x37\x0c\x0d\x2d\xe1\xf2\x6a\xf8\x36\x79\xed\x56\xa4\x50\xa4\xe7\xbc\xc2\xdb\xa9\x62\x69\x74\x35\x2c\x29\xfd\xde\x93\xbd\xf9\x1f\x19\xde\x2d\x0a\xd3\xe3\x06\x9e\x09\xdf\x0d\x8e\xbe\xa2\x57\xcb\x53\x94\x6e\x6d\xb7\x50\xa3\x70\xf6\x0f\x7f\x25\xf9\x7c\xfa\xcc\x31\xb2\x94\x9f\xcc\xd4\x16\xc2\x61\x39\x50\x3d\x0e\xf5\xa4\x7b\xca\x1a\xa7\xe7\x94\x2a\x9d\xc6\x67\x3f\x4e\xcf\x5d\xdf\x8f\xa7\x3e\x1a\xf6\x3f\xfa\xe8\xc9\x61\xee\xa5\x61\x9f\x7c\x3c\x26\xbf\x03\x00\x00\xff\xff\xc1\xba\xde\xca\xc7\x03\x00\x00"

func stakingcollectionWithdraw_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingcollectionWithdraw_unstaked_tokensCdc,
		"stakingCollection/withdraw_unstaked_tokens.cdc",
	)
}

func stakingcollectionWithdraw_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingcollectionWithdraw_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingCollection/withdraw_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0xb5, 0xce, 0x6e, 0xf2, 0x4c, 0x8d, 0x91, 0x62, 0x27, 0xf2, 0x59, 0x75, 0x6f, 0x6d, 0x91, 0xcc, 0x38, 0x23, 0x4b, 0x58, 0xb2, 0x9d, 0xfd, 0xcf, 0x75, 0x2a, 0x4e, 0x68, 0x77, 0xce, 0x1d}}
	return a, nil
}

var _stakingproxyAdd_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcf\x8a\xe2\x40\x10\xc6\xef\xfd\x14\x45\x0e\x92\x80\xe4\xbc\x84\x75\xc5\x75\x0f\x2b\x03\x33\x82\xcc\xdc\xcb\x74\x45\x9b\x89\x5d\x4d\xa5\x82\x23\x83\xef\x3e\xb4\x51\x93\x8c\xd3\x87\x90\xfe\xba\xfe\xfc\xaa\x3e\x77\x08\x2c\x0a\xc9\x46\xf1\xdd\xf9\xdd\x5a\xf8\xe3\x94\x18\xa3\x82\xbe\xc1\x52\x1d\xfb\xd4\xd9\x02\x36\x2a\xce\xef\xa6\x20\x5c\x53\x01\xaf\x2b\xaf\xbf\xa6\xe0\x49\x8f\x2c\x31\x6d\x61\xad\x50\xd3\xf4\x71\xfd\xd3\x13\x9d\x7a\xb9\xe9\xba\x0c\xb4\x0c\x3e\x8d\x01\x00\x08\x42\x01\x85\x52\x2c\x4b\x6e\xbd\x16\x80\xad\xee\xd3\xbf\x2c\xc2\xc7\x37\xac\x5b\xca\x60\xb2\xe8\xde\x62\x0e\x5c\x4f\x4d\x0a\x21\x42\xff\xe7\xda\x92\xc0\x0c\xae\x05\xf2\x46\x59\x70\x47\xf9\xf6\x52\xe2\xf7\x64\x38\x61\xfe\xcc\x96\xa2\x40\xb2\xee\x93\xff\xa4\x95\xf0\x21\x92\x7d\x8b\x7c\x09\x24\xa8\x2c\x4b\x0c\xb8\x75\xb5\xd3\xd3\xa6\x2b\xbe\x46\xdd\x67\x77\x96\x78\xe6\x73\x08\xe8\x5d\x99\x26\x4b\x6e\x6b\x0b\x9e\x15\x3a\x02\x10\xaa\x48\xc8\x97\x04\xca\xb7\x4d\x74\xec\xb0\xbf\xf4\x4f\x32\x33\x9a\xcb\xb3\xa5\x95\xaf\x18\x66\x8f\x48\x51\x4f\x2f\x01\xff\x0a\x70\xf6\xe6\x4c\xfc\xfe\x68\xcc\x83\xf4\xe0\xd1\xe8\x3a\xb6\xaa\xff\x1f\x10\x0e\xb6\x9e\xa3\xb5\x63\x28\x5f\x71\x71\xe7\xef\x36\x74\x36\x67\xf3\x15\x00\x00\xff\xff\xa3\x07\x0d\xbf\x6e\x02\x00\x00"

func stakingproxyAdd_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyAdd_node_infoCdc,
		"stakingProxy/add_node_info.cdc",
	)
}

func stakingproxyAdd_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyAdd_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/add_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x92, 0x11, 0xe0, 0x89, 0xa, 0xf9, 0x27, 0x8b, 0xc0, 0xa4, 0xe4, 0x31, 0x1a, 0x2d, 0x42, 0x2c, 0x96, 0x24, 0x30, 0xa, 0xda, 0x94, 0x9e, 0x69, 0x14, 0xb7, 0x61, 0x66, 0x1c, 0x7b, 0xac}}
	return a, nil
}

var _stakingproxyGet_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4e\xc3\x30\x0c\xc6\xef\x79\x0a\xd3\x03\x6a\x25\xd4\x07\x98\x80\x69\x1a\x07\xb8\xc0\xc4\x9e\x20\x4b\xdd\x12\x91\xd9\x91\xe3\x0a\xa6\x69\xef\x8e\xd2\xa8\xdd\x61\x07\x7c\xc9\x1f\xfb\xfb\xfc\xe9\xe7\x8f\x91\x45\xa1\xda\xab\xfd\xf6\x34\xec\x84\x7f\x4f\x95\x31\xd6\x39\x4c\xa9\xb6\x21\x34\xd0\x8f\x04\x47\xeb\xa9\xb6\xce\xf1\x48\xba\x82\x4d\xd7\x09\xa6\xf4\x00\xc4\x1d\xbe\xbd\xac\x60\xaf\xe2\x69\x68\xf2\xe5\x6a\xd3\xbe\xe7\x2e\xf5\x0c\x67\x63\x00\x00\x02\x2a\xc4\xdc\xf9\xc4\x1e\x9e\x60\x40\xdd\x14\xc7\xd9\xb9\x99\xc6\x72\xb5\xce\x46\x7b\xf0\xc1\xab\xc7\xd4\x1e\x58\x84\x7f\x1e\xef\x6f\xdc\xf3\x07\xca\xf4\x7e\xe5\xd0\xa1\x9c\xff\x1f\xd9\x8d\x87\xe0\xdd\xe5\xb9\x5e\x96\xe5\xba\xd1\x7d\x44\x14\xab\x2c\xdb\x39\xc8\xa9\x08\x77\x56\xbf\x16\xe5\x35\xf0\x7a\x0d\xd1\x92\x77\x75\xb5\xe5\x31\x74\x40\xac\x50\x62\x43\x9c\x74\x20\xd8\xa3\x20\x39\x04\x65\x48\x65\x5d\xc1\x51\x35\x85\x8f\xa0\x8e\x42\x0b\xa2\x76\x40\x9d\x11\xd6\x33\xe9\x72\x36\x77\xe6\x62\xfe\x02\x00\x00\xff\xff\x75\xe3\xfa\x9a\xbb\x01\x00\x00"

func stakingproxyGet_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyGet_node_infoCdc,
		"stakingProxy/get_node_info.cdc",
	)
}

func stakingproxyGet_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyGet_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/get_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xfb, 0xba, 0x54, 0xe8, 0xb2, 0x3a, 0xb1, 0x3f, 0x95, 0x1b, 0x79, 0x10, 0xc9, 0x83, 0xad, 0x94, 0x84, 0xc6, 0xb, 0xfc, 0x4f, 0x3e, 0x3d, 0x20, 0x78, 0xb5, 0x7c, 0x4a, 0x40, 0x2a, 0x63}}
	return a, nil
}

var _stakingproxyRegister_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8e\xd3\x30\x10\x86\xef\x79\x8a\x51\x0e\x25\x91\x2a\x9f\x10\x87\x88\xb2\x5a\x76\x85\x40\xa0\x25\xa2\xc0\xdd\xb5\x27\xa9\xd5\xd4\x13\x39\x13\xd1\x0a\xed\xbb\x23\xc7\x71\x9a\xb4\x80\x90\xf0\xc5\xb1\x27\xf3\xcf\x37\xbf\x6d\x73\x6c\xc9\x31\xa4\x9f\x48\x1d\x50\x7f\xa5\x03\xda\x2e\x4d\xe2\xee\x96\xe5\xc1\xd8\xba\x74\x74\x3a\xa7\x49\xc2\x4e\xda\x4e\x2a\x36\x64\x33\xa9\xb5\xc3\xae\x2b\xe0\x3e\x7c\xac\xc1\xe8\x02\xb6\xec\x8c\xad\xd7\xd0\x85\xc4\x8f\x78\x2e\xa9\xbc\x6c\xcb\x23\xf5\x96\x0b\xf8\xf6\xce\x9c\x5e\xbd\xcc\xe1\x67\x92\x00\x00\x34\xc8\xb0\xa7\x46\xa3\xfb\x82\x55\x01\xb2\xe7\x7d\x36\x07\x12\xc3\xf4\xb9\x45\x27\x7d\xed\x2e\x87\xd5\x6d\xf8\xfd\x20\x10\x04\x5b\x87\xad\x74\x98\x49\xa5\x42\xc1\x41\xf2\x2d\x39\x47\x3f\xbe\xcb\xa6\xc7\x1c\x56\xf7\x21\xe6\x21\x60\x1c\x1d\x36\x95\x98\x40\x60\x03\x63\xbe\xe8\x98\x9c\xac\x51\xec\x06\x85\xd7\xff\x03\xf8\x26\xab\x1c\x1d\x0b\xf8\x53\x7c\x1b\x4a\x95\x92\xf7\xf9\x04\xe6\xc7\xdd\x1d\xb4\xd2\x1a\x95\xa5\x0f\xd4\x37\x1a\x2c\x31\x04\x1e\x70\x58\xa1\x43\xab\x10\x98\x60\xa6\x95\x06\x85\xe7\x60\x0a\x9e\x50\xf5\x8c\xb3\x7e\xbd\xef\x96\x34\x06\x70\x1a\x9b\xae\x91\x47\x6f\xe2\x21\xe7\x42\xc9\x56\xee\x4c\x63\xd8\x60\xb7\xa0\x8a\x96\xac\xe6\x57\x45\x3c\x91\x46\xbf\x81\x6e\x58\xc7\xce\x17\x99\x7e\xdc\x24\x45\x92\x87\x58\xef\x5c\xf6\xbb\xc6\x28\x6f\xc7\x22\xfb\x9f\xbd\xf1\xfd\x01\x8d\xb2\xd0\x0e\x6a\x30\xb5\x73\x4e\xf3\xe4\xc6\x8e\x0f\xb6\x22\xd8\x5c\x3b\x23\x6a\xe4\xa7\x31\x9a\x0d\xbf\x3d\x16\x60\xf4\x5f\x41\xec\x0b\xf6\x76\x82\xf1\x8a\x15\xb9\x20\xff\xb8\x49\x85\x22\xab\x24\x67\x46\xe7\x33\x80\xe5\xfd\x13\xca\xa1\x64\xbc\x78\x99\x45\xb8\x62\xc2\xbc\x79\x69\x8b\xe5\xe5\xc1\x85\xf9\x37\xbd\xce\x4e\x09\x36\xd7\x00\xc1\xc2\xb1\xf8\x2c\xf9\xda\x19\xa9\xf5\xfc\x24\x27\x77\x22\xa5\x30\x7a\x0d\xad\x0f\x15\xd7\x45\xe3\x0d\x7d\x4e\x7e\x05\x00\x00\xff\xff\x04\xcf\xe3\x60\x8a\x04\x00\x00"

func stakingproxyRegister_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRegister_nodeCdc,
		"stakingProxy/register_node.cdc",
	)
}

func stakingproxyRegister_nodeCdc() (*asset, error) {
	bytes, err := stakingproxyRegister_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/register_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x9e, 0x6b, 0xf0, 0x72, 0x7f, 0xb0, 0x34, 0x33, 0x1, 0x7f, 0x3a, 0x31, 0x23, 0x74, 0x6f, 0xe4, 0x85, 0xbd, 0xb7, 0x6c, 0xa7, 0x4b, 0x5d, 0xe9, 0x94, 0x2, 0x35, 0xde, 0xa3, 0x68, 0xf0}}
	return a, nil
}

var _stakingproxyRemove_node_infoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xcf\x6a\xc3\x30\x0c\x87\xef\x7e\x0a\xd1\x43\xb1\x2f\x7e\x80\xb2\x0d\xf6\xe7\xb0\x5e\xb6\x40\x60\x77\x35\x51\x53\x33\xc7\x32\xaa\xb2\xad\x8c\xbe\xfb\x70\x12\xb2\x50\x5f\x0c\x92\xbe\x9f\x3e\x85\x3e\xb3\x28\x6c\x6a\xc5\xcf\x90\xba\x4a\xf8\xe7\xb2\x31\x46\x05\xd3\x19\x1b\x0d\x9c\x6c\xe2\x96\xf6\x2f\x3b\xa8\x55\x42\xea\x1c\xfc\x1a\x03\x00\x90\x85\x32\x0a\x59\x6c\x1a\x1e\x92\xee\x00\x07\x3d\xd9\x27\x16\xe1\xef\x0f\x8c\x03\x39\xd8\x3e\x4e\xbd\xc2\xc0\xfc\x22\x29\xe4\xb2\xe5\x95\x63\x4b\x02\xf7\x30\x07\xf8\xb3\xb2\x60\x47\xfe\x30\x46\xdc\x6d\xd7\x4a\xfe\x8d\x5b\x2a\x05\x92\xea\x1f\x7e\xb0\x47\xe1\xbe\x98\xdd\x4c\xbe\x67\x12\x54\x96\x67\xcc\x78\x08\x31\xe8\xa5\x9e\xc2\x2b\xd4\x93\x33\x8b\xcc\x4a\xc4\x0b\xf5\xfc\x45\x85\xde\xa7\x23\x2f\x57\x4f\xbf\x1b\x91\xab\xb9\x9a\xbf\x00\x00\x00\xff\xff\x4a\x04\xc2\xe5\x31\x01\x00\x00"

func stakingproxyRemove_node_infoCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRemove_node_infoCdc,
		"stakingProxy/remove_node_info.cdc",
	)
}

func stakingproxyRemove_node_infoCdc() (*asset, error) {
	bytes, err := stakingproxyRemove_node_infoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/remove_node_info.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x4f, 0x6b, 0x71, 0xdb, 0xc3, 0x6c, 0xc9, 0x11, 0x68, 0x8d, 0xf0, 0x96, 0xa3, 0xb6, 0xe0, 0xf2, 0xcb, 0xda, 0xc1, 0xa5, 0x40, 0xc8, 0x91, 0xf0, 0xae, 0x8d, 0x97, 0x82, 0xb7, 0xd4, 0x94}}
	return a, nil
}

var _stakingproxyRemove_staking_proxyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4b\x6a\xc4\x30\x0c\x86\xf7\x3e\x85\x98\xc5\x60\x6f\x7c\x80\xd0\x16\xfa\x58\xb4\x9b\x36\x10\xe8\x5e\x93\xa8\x89\xa9\x63\x19\x8d\xd2\x76\x28\xb9\x7b\xc9\x83\x34\x30\xde\x18\x24\xfd\x9f\x3e\x85\x3e\xb3\x28\x1c\x2a\xc5\xcf\x90\xda\x52\xf8\xe7\x72\x30\x46\x05\xd3\x19\x6b\x0d\x9c\x6c\xe2\x86\x5e\x9e\x0a\xa8\x54\x42\x6a\x1d\xfc\x1a\x03\x00\x90\x85\x32\x0a\x59\xac\x6b\x1e\x92\x16\x80\x83\x76\xf6\x81\x45\xf8\xfb\x1d\xe3\x40\x0e\x8e\xf7\x4b\x6f\xca\xc0\xfa\x22\x29\xe4\x69\xcb\x33\xc7\x86\x04\x6e\x61\x05\xf8\xb3\xb2\x60\x4b\xfe\x34\x23\x6e\x8e\x7b\x25\xff\xca\x0d\x4d\x05\x92\xf2\x3f\x7c\x67\x3f\x84\xfb\x02\x32\x5e\xcd\xbe\x65\x12\x54\x96\x47\xcc\x78\x0a\x31\xe8\xa5\x5a\xf0\x25\x6a\xa7\x9d\x33\x9b\xd0\x4e\xc6\x0b\xf5\xfc\x45\x7b\xd8\x76\xfd\xf2\xbb\x39\x36\x9a\xd1\xfc\x05\x00\x00\xff\xff\x42\x32\x2c\x35\x39\x01\x00\x00"

func stakingproxyRemove_staking_proxyCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRemove_staking_proxyCdc,
		"stakingProxy/remove_staking_proxy.cdc",
	)
}

func stakingproxyRemove_staking_proxyCdc() (*asset, error) {
	bytes, err := stakingproxyRemove_staking_proxyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/remove_staking_proxy.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x2b, 0x85, 0xd3, 0xc7, 0x2a, 0x2b, 0x0, 0xc8, 0x56, 0x40, 0x31, 0x18, 0xeb, 0x4d, 0xbc, 0x7e, 0x28, 0xcd, 0xbb, 0x13, 0x23, 0x35, 0x7f, 0x70, 0x8c, 0x47, 0x17, 0x30, 0xe9, 0x17, 0xfc}}
	return a, nil
}

var _stakingproxyRequest_unstakingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x4b\xfb\x40\x10\xc5\xef\xfb\x29\xe6\x9f\x43\xd9\xc0\x9f\x9c\xc4\x43\xb1\x16\xad\x88\x5e\xb4\x10\xea\x7d\x9a\x4c\x93\xc5\x64\x67\x9d\x4c\xb0\x45\xfa\xdd\x25\xdd\xd8\x46\xe7\x32\x30\x93\x79\xef\xf7\xb2\xae\x0d\x2c\x0a\x49\xae\xf8\xee\x7c\xb5\x16\xde\x1f\x12\x63\x54\xd0\x77\x58\xa8\x63\x6f\x3d\x97\xf4\xfc\x30\x87\x5c\xc5\xf9\xea\x3f\x60\xcb\xbd\xd7\x39\x6c\x1e\xdd\xfe\xfa\x2a\x85\x2f\x63\x00\x00\x82\x50\x40\x21\x8b\x45\x11\xf7\xd8\x6b\x6d\xef\x59\x84\x3f\xdf\xb0\xe9\x29\x85\xd9\x5d\xdc\x0d\x37\x30\x56\x43\x0a\x61\x70\x7d\xe2\xa6\x24\x81\x05\x8c\x02\x59\xa7\x2c\x58\x51\xb6\x3d\x49\xdc\xcc\xa6\x88\xd9\x0b\x97\x34\x0c\x48\xd6\x97\xe3\x5b\xbb\x13\x6e\x07\xd2\x3f\x5f\xbe\x06\x12\x54\x96\x15\x06\xdc\xba\xc6\xe9\x21\x8f\xe2\x6b\xd4\x3a\x3d\xb3\x0c\xb5\x5c\x42\x40\xef\x0a\x9b\xac\xb8\x6f\x4a\xf0\xac\x10\x09\x40\x68\x47\x42\xbe\x20\x50\x86\x2e\x7a\x44\x76\xa8\x4f\xfe\x49\x6a\x7e\xe5\xea\x26\x1c\xb0\x98\xc6\x1c\x43\x4d\x41\xcf\xff\x39\xf6\xf4\xdf\x45\x6b\xaa\x93\x09\x7d\xf4\xd4\xe9\xc6\x8f\x53\xfb\xf3\x1e\xb1\xc7\x34\x47\x73\x34\xdf\x01\x00\x00\xff\xff\x54\x81\xf0\x26\xdb\x01\x00\x00"

func stakingproxyRequest_unstakingCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyRequest_unstakingCdc,
		"stakingProxy/request_unstaking.cdc",
	)
}

func stakingproxyRequest_unstakingCdc() (*asset, error) {
	bytes, err := stakingproxyRequest_unstakingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/request_unstaking.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x8a, 0x5, 0xae, 0xef, 0x7d, 0x2d, 0x10, 0x94, 0x6c, 0x12, 0xc0, 0xcb, 0x4f, 0x1c, 0xb0, 0x60, 0xdd, 0x52, 0x47, 0x61, 0x79, 0x68, 0xf0, 0x39, 0x6c, 0x19, 0xcc, 0x72, 0x4e, 0xc0, 0x92}}
	return a, nil
}

var _stakingproxySetup_node_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x4a\x03\x31\x10\x86\xef\x79\x8a\xa1\x87\x92\xc2\x76\x1f\xa0\xac\x82\x78\xf1\xa4\x0b\x0b\xde\xa7\xe9\xd0\x0d\xae\x49\x98\x4c\x8a\x45\xfa\xee\x12\x94\x98\x54\x04\x9d\xc3\x1e\x36\x33\xff\xf7\xcd\xd8\xd7\xe0\x59\x60\x35\x09\xbe\x58\x77\x1c\xd9\xbf\x9d\x57\x4a\x09\xa3\x8b\x68\xc4\x7a\xa7\x37\xf0\xae\x14\x00\x40\x60\x0a\xc8\xa4\x9d\x3f\xd0\x53\x20\x46\xf1\xbc\x03\x4c\x32\xeb\x09\x4f\xf4\x8c\x4b\xa2\x0e\xee\x31\xe0\xde\x2e\x56\x2c\xc5\x0d\xac\xef\x8c\xf1\xc9\x49\x0e\x81\xaf\x5a\x48\x20\x64\xd0\x83\x5f\x0e\xc4\x30\x6c\xa1\xc6\xf7\x86\x09\x85\xc6\xef\x0e\xbd\x51\x65\xb8\x86\xf7\x51\x3c\xe3\x91\xfa\x88\x27\xd2\xc3\xb6\x0a\xed\x40\xfc\xae\x8d\x7d\xac\x26\x8b\xe4\x79\xfa\x8c\x18\x51\xe6\x8a\x92\x15\x5d\xdb\x0f\x37\x2d\xdb\x54\x7b\x16\x11\x1b\x63\xa2\x61\xfd\x83\x9b\x7f\x10\x57\x2b\xdd\xea\xc2\xca\xf5\x3f\xd1\x32\xfa\xdb\x5d\x1a\xb7\x90\xf6\x8b\x8d\x73\x0b\xbc\x5a\xae\x6b\x1e\x51\xfe\x74\xba\x31\x07\x9b\x2b\xa1\xfc\xbd\xa8\x8b\xfa\x08\x00\x00\xff\xff\xc5\xf6\x0c\x86\x59\x02\x00\x00"

func stakingproxySetup_node_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxySetup_node_accountCdc,
		"stakingProxy/setup_node_account.cdc",
	)
}

func stakingproxySetup_node_accountCdc() (*asset, error) {
	bytes, err := stakingproxySetup_node_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/setup_node_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x44, 0x10, 0x7f, 0x2, 0x92, 0x10, 0x91, 0x19, 0xae, 0xaa, 0x9c, 0x7c, 0xd, 0x2a, 0xfd, 0xe0, 0x9a, 0x56, 0x10, 0x95, 0x2a, 0x3a, 0x45, 0x16, 0xd5, 0x43, 0xc6, 0x13, 0x88, 0xcc, 0x3e}}
	return a, nil
}

var _stakingproxyStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x6f\xfa\x30\x0c\xc5\xef\xf9\x14\xfe\xf7\x80\x52\xe9\xaf\x9e\xa6\x1d\xd0\x18\xda\x98\xa6\xed\xc2\x90\xd8\x76\x37\xad\x81\x88\x36\x8e\x5c\x57\x80\x26\xbe\xfb\x14\xd2\x41\x37\x5f\xac\xd6\xf1\x7b\xbf\x97\xb8\x26\xb0\x28\x64\x4b\xc5\x9d\xf3\x9b\x85\xf0\xe1\x98\x19\xa3\x82\xbe\xc5\x52\x1d\x7b\xeb\xb9\xa2\xd7\xa7\x31\x2c\x55\x9c\xdf\xfc\x07\x6c\xb8\xf3\x3a\x86\x8f\x67\x77\xb8\xbd\xc9\xe1\xcb\x18\x00\x80\x20\x14\x50\xc8\x62\x59\xa6\x39\x76\xba\xb5\x8f\x2c\xc2\xfb\x4f\xac\x3b\xca\x61\xf4\x90\x66\x71\x07\xfa\xaa\x49\x21\x44\xd7\x17\xae\x2b\x12\x98\x40\x2f\x50\xb4\xca\x82\x1b\x2a\x56\x67\x89\xbb\xd1\x10\xb1\x98\x73\x45\xf1\x07\xc9\xe2\xba\x7c\x6f\xd7\xc2\x4d\x24\xfd\x73\xf2\x2d\x90\xa0\xb2\xcc\x30\xe0\xca\xd5\x4e\x8f\xcb\x24\xbe\x40\xdd\xe6\x17\x96\x58\xd3\x29\x04\xf4\xae\xb4\xd9\x8c\xbb\xba\x02\xcf\x0a\x89\x00\x84\xd6\x24\xe4\x4b\x02\x65\x68\x93\x47\x62\x87\xed\xd9\x3f\xcb\xcd\xaf\x5c\xed\x80\x03\x26\xc3\x98\x7d\xa8\x21\xe8\xe5\x9e\x53\xcf\xff\x5d\xb5\x86\x3a\x45\xfc\xa0\x39\xed\xdf\x79\x47\xbe\xb5\x3f\xaf\x91\x7a\xca\x72\x32\x27\xf3\x1d\x00\x00\xff\xff\xe1\x21\x2f\x20\xd9\x01\x00\x00"

func stakingproxyStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyStake_new_tokensCdc,
		"stakingProxy/stake_new_tokens.cdc",
	)
}

func stakingproxyStake_new_tokensCdc() (*asset, error) {
	bytes, err := stakingproxyStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x3c, 0x5b, 0xce, 0x60, 0x9b, 0x98, 0xaf, 0x78, 0xf4, 0x3a, 0x99, 0xd8, 0xb, 0x87, 0x5a, 0xc8, 0x72, 0x39, 0xe, 0xdf, 0x15, 0xc5, 0xe8, 0x85, 0x56, 0x80, 0xb, 0xb3, 0xcf, 0x6, 0x54}}
	return a, nil
}

var _stakingproxyStake_unstaked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x4f\xc3\x30\x0c\x85\xef\xf9\x15\xa6\x87\x29\x95\x50\x4f\x88\xc3\xc4\x98\x60\x08\xc1\x05\x26\x8d\x71\xf7\x5a\x6f\x8b\xd6\xc5\x91\xeb\x8a\x4d\x68\xff\x1d\xa5\x29\x5b\xc1\x17\xab\x75\xfc\xde\xf7\x12\xb7\x0f\x2c\x0a\xd9\x42\x71\xe7\xfc\x66\x2e\x7c\x38\x66\xc6\xa8\xa0\x6f\xb0\x54\xc7\xde\x7a\xae\xe8\xf5\x69\x0c\x0b\x15\xe7\x37\xd7\x80\x7b\x6e\xbd\x8e\x61\xf9\xec\x0e\xb7\x37\x39\x7c\x1b\x03\x00\x10\x84\x02\x0a\x59\x2c\xcb\x34\xc7\x56\xb7\xf6\x91\x45\xf8\xeb\x13\xeb\x96\x72\x18\x3d\xa4\x59\xdc\x81\xbe\x6a\x52\x08\xd1\xf5\x85\xeb\x8a\x04\x26\xd0\x0b\x14\x8d\xb2\xe0\x86\x8a\x55\x27\x71\x37\x1a\x22\x16\x6f\x5c\x51\xfc\x41\x32\xbf\x2c\xdf\xdb\xb5\xf0\x3e\x92\xfe\x3b\xf9\x1e\x48\x50\x59\x66\x18\x70\xe5\x6a\xa7\xc7\x45\x12\x9f\xa3\x6e\xf3\x33\x4b\xac\xe9\x14\x02\x7a\x57\xda\x6c\xc6\x6d\x5d\x81\x67\x85\x44\x00\x42\x6b\x12\xf2\x25\x81\x32\x34\xc9\x23\xb1\xc3\xb6\xf3\xcf\x72\xf3\x27\x57\x33\xe0\x80\xc9\x30\x66\x1f\x6a\x08\x7a\xbe\xe7\xd4\xf3\xab\x8b\xd6\x50\xa7\x88\x1f\xb4\xf4\x5d\xab\x3e\x78\x47\xbe\xb1\xbf\x4f\x92\x7a\x0a\x74\x32\x27\xf3\x13\x00\x00\xff\xff\x5a\xda\x19\x54\xde\x01\x00\x00"

func stakingproxyStake_unstaked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyStake_unstaked_tokensCdc,
		"stakingProxy/stake_unstaked_tokens.cdc",
	)
}

func stakingproxyStake_unstaked_tokensCdc() (*asset, error) {
	bytes, err := stakingproxyStake_unstaked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/stake_unstaked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x14, 0x36, 0xad, 0x8a, 0xa1, 0x49, 0x2d, 0xf6, 0x80, 0xe8, 0x98, 0xc9, 0xe4, 0xd, 0x1d, 0xb6, 0xfe, 0xd7, 0xbd, 0x6c, 0x2e, 0x88, 0x7a, 0x28, 0x55, 0x87, 0xe5, 0x90, 0xb1, 0xe7, 0x42}}
	return a, nil
}

var _stakingproxyUnstake_allCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xbd\x6e\xeb\x30\x0c\x46\x77\x3d\x05\xaf\x87\x40\x5e\xfc\x00\xc1\x4d\x83\x34\x1d\xda\xa5\x35\x60\xa0\x3b\x63\x33\xb6\x50\x45\x14\x68\x1a\x6d\x50\xe4\xdd\x0b\x45\x46\xe2\x96\x8b\xa0\x1f\x1e\x9e\x4f\xee\x14\x59\x14\x8a\x46\xf1\xc3\x85\xbe\x16\xfe\x3a\x17\xc6\xa8\x60\x18\xb1\x55\xc7\xc1\x06\xee\xe8\xe5\x69\x0d\x8d\x8a\x0b\x7d\x09\xdf\xc6\x00\x00\x44\xa1\x88\x42\x16\xdb\x96\xa7\xa0\x6b\xc0\x49\x07\xfb\xc8\x22\xfc\xf9\x8e\x7e\xa2\x12\x56\xbb\x7c\x97\x7a\x60\x2e\x4f\x0a\x31\x4d\x79\x66\xdf\x91\xc0\x06\x66\x40\x35\x2a\x0b\xf6\x54\x1d\xae\x88\xff\xab\xa5\x52\xf5\xca\x1d\xa5\x03\x92\xfa\xde\xfc\x60\x8f\xc2\xa7\x64\xf6\xe7\xe5\x5b\x24\x41\x65\xd9\x63\xc4\x83\xf3\x4e\xcf\x4d\x86\xd7\xa8\x43\x79\x73\x49\xb5\xdd\x42\xc4\xe0\x5a\x5b\xec\x79\xf2\x1d\x04\x56\xc8\x06\x20\x74\x24\xa1\xd0\x12\x28\xc3\x98\x67\x64\x77\x18\xae\xf3\x8b\xd2\xfc\xca\x35\x2e\x3c\x60\xb3\x8c\x39\x87\x5a\x8a\xde\xfe\x35\xaf\xe5\xbf\x3b\x6b\xc9\xa9\xa6\x90\xb6\xb4\xf3\xde\x66\xf3\x8b\xb9\x98\x9f\x00\x00\x00\xff\xff\xfd\x3d\x93\x39\xb7\x01\x00\x00"

func stakingproxyUnstake_allCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyUnstake_allCdc,
		"stakingProxy/unstake_all.cdc",
	)
}

func stakingproxyUnstake_allCdc() (*asset, error) {
	bytes, err := stakingproxyUnstake_allCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/unstake_all.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x96, 0x30, 0xc6, 0xca, 0x90, 0x65, 0xb9, 0x3d, 0x5f, 0xe6, 0xd6, 0x29, 0x91, 0x24, 0x5e, 0x3c, 0xcc, 0x8a, 0xbd, 0x3, 0x7a, 0x92, 0x39, 0xe1, 0x4d, 0x7c, 0x9d, 0x46, 0xb8, 0x60, 0x69}}
	return a, nil
}

var _stakingproxyWithdraw_rewardsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x4f\xfb\x30\x0c\xc5\xef\xf9\x14\xfe\xf7\x30\xa5\xd2\x5f\x3d\x21\x0e\x13\x63\x82\x21\x04\x17\x98\x18\x70\xf7\x1a\x6f\x8d\xd6\xc5\x91\xeb\xaa\x9b\xd0\xbe\x3b\xea\x32\xb6\x82\x2f\x96\xe2\xf8\xbd\xdf\x4b\xfc\x36\xb2\x28\x64\x0b\xc5\x8d\x0f\xeb\xb9\xf0\x6e\x9f\x19\xa3\x82\xa1\xc1\x52\x3d\x07\x1b\xd8\xd1\xf3\xc3\x18\x16\x2a\x3e\xac\xff\x03\x6e\xb9\x0d\x3a\x86\x8f\x47\xbf\xbb\xbe\xca\xe1\xcb\x18\x00\x80\x28\x14\x51\xc8\x62\x59\xa6\x39\xb6\x5a\xd9\x7b\x16\xe1\xee\x13\xeb\x96\x72\x18\xdd\xa5\x59\xbf\x03\xa7\xaa\x49\x21\xf6\xae\x4f\x5c\x3b\x12\x98\xc0\x49\xa0\x68\x94\x05\xd7\x54\x2c\x8f\x12\x37\xa3\x21\x62\xf1\xc2\x8e\xfa\x03\x92\xf9\x65\xf9\xd6\xae\x84\xb7\x3d\xe9\x9f\x9b\xaf\x91\x04\x95\x65\x86\x11\x97\xbe\xf6\xba\x5f\x24\xf1\x39\x6a\x95\x9f\x59\xfa\x9a\x4e\x21\x62\xf0\xa5\xcd\x66\xdc\xd6\x0e\x02\x2b\x24\x02\x10\x5a\x91\x50\x28\x09\x94\xa1\x49\x1e\x89\x1d\xaa\xa3\x7f\x96\x9b\x5f\xb9\x9a\x01\x07\x4c\x86\x31\x4f\xa1\x86\xa0\xe7\x77\x4e\x3d\xff\x77\xd1\x1a\xea\x14\x9d\xd7\xca\x09\x76\x6f\xd4\xa1\x38\x72\xef\xbc\xa1\xd0\xd8\x9f\x5f\x49\x3d\x65\x3a\x98\x83\xf9\x0e\x00\x00\xff\xff\xda\x95\xca\xc6\xe1\x01\x00\x00"

func stakingproxyWithdraw_rewardsCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyWithdraw_rewardsCdc,
		"stakingProxy/withdraw_rewards.cdc",
	)
}

func stakingproxyWithdraw_rewardsCdc() (*asset, error) {
	bytes, err := stakingproxyWithdraw_rewardsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/withdraw_rewards.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xc2, 0x65, 0x4, 0x4b, 0x32, 0x89, 0xcb, 0x67, 0x7d, 0xb8, 0x23, 0x76, 0xfa, 0x20, 0xb4, 0xeb, 0xb2, 0x9d, 0x58, 0xa3, 0x1, 0xeb, 0x37, 0xf3, 0x4a, 0x35, 0xa3, 0xb7, 0xf, 0x97, 0x9a}}
	return a, nil
}

var _stakingproxyWithdraw_unstakedCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x4f\xfa\x40\x10\xc5\xef\xfb\x29\xe6\xdf\x03\x69\x93\x7f\x7a\x32\x1e\x88\x48\x14\x63\xf4\xa2\x24\x88\xf7\xa1\x3b\xd0\x0d\x65\x67\x33\x9d\x06\x88\xe1\xbb\x9b\x65\x2b\x54\xe7\x32\xc9\x4c\xe7\xbd\xdf\xeb\xba\x5d\x60\x51\xc8\x16\x8a\x5b\xe7\x37\x73\xe1\xc3\x31\x33\x46\x05\x7d\x8b\x95\x3a\xf6\xb9\x67\x4b\xaf\x4f\x63\x58\xa8\x38\xbf\xf9\x0f\xb8\xe3\xce\xeb\x18\x96\xcf\xee\x70\x7b\x53\xc0\x97\x31\x00\x00\x41\x28\xa0\x50\x8e\x55\x95\xf6\xd8\x69\x9d\x3f\xb2\x08\xef\x3f\xb1\xe9\xa8\x80\xd1\x43\xda\xc5\x1b\xe8\xab\x21\x85\x10\x5d\x5f\xb8\xb1\x24\x30\x81\x5e\xa0\x6c\x95\x05\x37\x54\xae\xce\x12\x77\xa3\x21\x62\xf9\xc6\x96\xe2\x80\x64\x7e\x3d\xbe\xcf\xd7\xc2\xbb\x48\xfa\xe7\xcb\xf7\x40\x82\xca\x32\xc3\x80\x2b\xd7\x38\x3d\x2e\x92\xf8\x1c\xb5\x2e\x2e\x2c\xb1\xa6\x53\x08\xe8\x5d\x95\x67\x33\xee\x1a\x0b\x9e\x15\x12\x01\x08\xad\x49\xc8\x57\x04\xca\xd0\x26\x8f\xc4\x0e\xf5\xd9\x3f\x2b\xcc\xaf\x5c\xed\x80\x03\x26\xc3\x98\x7d\xa8\x21\xe8\xe5\x3f\xa7\x5e\xfc\xbb\x6a\x0d\x75\xca\xbd\xd3\xda\x0a\xee\x97\x3e\x8e\xc9\x7e\xf0\x96\x7c\x9b\xff\xbc\x4a\xea\x29\xd3\xc9\x9c\xcc\x77\x00\x00\x00\xff\xff\xf5\xa1\x7a\xe8\xe1\x01\x00\x00"

func stakingproxyWithdraw_unstakedCdcBytes() ([]byte, error) {
	return bindataRead(
		_stakingproxyWithdraw_unstakedCdc,
		"stakingProxy/withdraw_unstaked.cdc",
	)
}

func stakingproxyWithdraw_unstakedCdc() (*asset, error) {
	bytes, err := stakingproxyWithdraw_unstakedCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stakingProxy/withdraw_unstaked.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x82, 0x41, 0xe4, 0xfe, 0x45, 0x4c, 0x73, 0x85, 0xcb, 0xc4, 0x27, 0x77, 0x7c, 0x74, 0x2b, 0xee, 0x45, 0x1e, 0x51, 0x47, 0xa7, 0x99, 0x9c, 0xd3, 0x2f, 0xba, 0xab, 0xf9, 0x8, 0xdf, 0x1}}
	return a, nil
}

var _storagefeesAdminSet_parametersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\xaf\x3e\x54\x8e\x84\xec\x0b\xe2\x60\x51\xa2\x16\xc9\x27\x2a\x50\xf9\x77\x9e\x6e\xc6\xf1\x22\x7b\xd7\x9a\x1d\x93\x22\xe4\xef\x8e\xfc\x2f\xb8\x84\x44\xdd\x83\x7d\xd8\xf7\x66\x7e\x6f\x76\x6c\xd3\x7a\x51\xc4\x45\xed\x0f\x9f\xd5\x0b\xed\xb9\x60\x0e\x71\x14\x65\x19\xbe\x54\x36\x40\x85\x5c\x20\xa3\xd6\x3b\x98\x8a\xdc\x9e\x03\xb4\x62\x94\xb5\x3f\x20\x4c\x16\x94\xcc\x01\x2d\x09\x35\xac\x2c\x21\x5a\x99\x92\x59\x73\xf7\x4b\x39\x7c\x62\x79\xe0\xc0\xf2\x93\x77\xc5\x87\x8f\xdf\x73\x7c\x2d\xec\xd3\x9b\xd7\xdb\x57\x68\xac\xb3\x4d\xd7\xcc\x0c\x93\x88\x06\xff\x51\xb3\xc1\xef\x08\x00\xc6\x4f\xcd\x0a\xda\x35\xd6\x3d\x70\x99\xe3\xfa\x1f\xfc\xf4\x76\xb8\xb2\x41\x85\xd4\x4b\x34\x3a\x5a\xe1\x96\x84\x13\x32\x46\x73\x50\xa7\x55\x72\xe7\x45\xfc\xe1\x1b\xd5\x1d\x6f\x70\x7d\x6b\x8c\xef\x9c\x2e\x6d\x86\x93\x65\x78\x1c\x35\x20\x08\x97\x2c\xec\x0c\x43\xfd\x38\x80\xb1\x3d\xfc\xe3\x0f\x36\x7a\x74\x04\xae\xcb\x74\x01\xc3\x0d\x86\x6e\xe9\x3c\x81\x74\xaa\xf5\xf6\x32\xed\xbb\xa4\x14\xdf\xe4\xc8\x66\xd7\xf2\x1f\x94\xa3\x70\x73\x6c\x36\x9c\xed\x16\x2d\x39\x6b\x92\xf8\xbd\xef\xea\x1d\x9c\xd7\x85\xf9\x19\xf1\xb3\x97\x1a\x01\xe3\xa9\x50\x3f\x8d\x87\x9f\xd8\x74\xca\xab\xf0\xb6\xc4\x85\xa7\xc3\xd5\x0d\x9c\xad\x57\xfa\x93\xf8\x69\x60\x9d\x63\xde\xf3\x9e\xfe\x57\xe5\xd2\x72\x5c\xfd\x0d\xda\xaf\xa1\xce\x6e\xca\x0b\x91\xee\xcf\xf9\x93\xb3\x95\x4f\x50\xfa\xa8\xff\x13\x00\x00\xff\xff\xe0\x7c\x71\xda\x3a\x03\x00\x00"

func storagefeesAdminSet_parametersCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesAdminSet_parametersCdc,
		"storageFees/admin/set_parameters.cdc",
	)
}

func storagefeesAdminSet_parametersCdc() (*asset, error) {
	bytes, err := storagefeesAdminSet_parametersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/admin/set_parameters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xe8, 0x1b, 0x9f, 0x89, 0x7a, 0x3b, 0xa6, 0xce, 0x9a, 0xd0, 0x63, 0x44, 0x1f, 0x35, 0xce, 0x77, 0xd4, 0xc7, 0x4c, 0x3d, 0xb7, 0xca, 0xa4, 0xfd, 0x90, 0x10, 0xee, 0x46, 0x2f, 0x73, 0x95}}
	return a, nil
}

var _storagefeesScriptsGet_account_available_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x3d\x0e\xc2\x30\x0c\x06\xd0\xdd\xa7\xf8\xd4\xa9\x59\x98\x10\x43\xb7\x32\xe4\x02\xc0\x01\x4c\xe2\xa2\x08\xd7\x41\xf9\x01\x24\xc4\xdd\x59\x98\xba\xbd\xe9\xa5\xf5\x91\x4b\xc3\xe0\x35\xbf\x4e\x2d\x17\xbe\x89\x17\xa9\x03\x11\x87\x20\xb5\x8e\xac\xea\xb0\x74\xc3\xca\xc9\x46\x0e\x21\x77\x6b\x73\x8c\x45\x6a\x9d\xf0\x87\x9b\x70\xf1\xe9\x7d\xd8\xe3\x43\x00\x50\xa4\xf5\x62\xd8\xa4\xbb\x28\x0b\x77\x6d\xe7\x7c\x17\x9b\x9f\x9c\x94\xaf\x2a\x47\x56\xb6\x20\x9b\xda\xd1\x97\xe8\x17\x00\x00\xff\xff\x5f\x98\x4c\x6d\x9d\x00\x00\x00"

func storagefeesScriptsGet_account_available_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_account_available_balanceCdc,
		"storageFees/scripts/get_account_available_balance.cdc",
	)
}

func storagefeesScriptsGet_account_available_balanceCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_account_available_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_account_available_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x7, 0x68, 0x22, 0xba, 0xcd, 0xd, 0x55, 0xab, 0x2b, 0x72, 0x36, 0x5, 0xe7, 0x2c, 0xf7, 0x7c, 0x5, 0xaa, 0xa3, 0x1e, 0xaf, 0x5b, 0xdc, 0x78, 0xe8, 0xb3, 0x9e, 0x7, 0x7d, 0x45, 0x3d}}
	return a, nil
}

var _storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x21\x27\x1b\x4c\x4f\xa5\x07\xdd\x42\x40\x3f\xd0\xf4\x14\x72\x58\x94\x6d\x2a\x6a\x4b\x66\x57\xa6\x0e\xa5\xff\x5e\x6c\x0b\x63\x9c\xbd\xec\x30\x0c\x33\x2f\x74\x7d\x92\x8c\x83\x6b\xd3\xcf\x7b\x4e\x42\x77\x76\xcc\x7a\x30\x86\xbc\x67\xd5\x8a\xda\xb6\xc6\xe7\x10\xd1\x51\x88\x15\x79\x9f\x86\x98\x8f\xb7\x9b\xb0\x2a\xab\xc5\xa5\xe8\x6b\x83\x9e\x1e\x2c\x16\xc5\x68\xd0\xd1\x78\x1e\xa7\x36\x8b\x0f\x17\xc6\xb7\xd7\xda\xe2\xb2\xa8\x2b\x7e\x0d\x00\x08\xe7\x41\x22\x76\xeb\x2f\x77\xce\xc7\x65\x49\x4f\xd4\x93\x0f\xf9\xe1\x92\x9c\x85\xa2\x92\xcf\x21\xc5\x12\x3e\x7d\xb1\xff\xae\xe6\xa6\xe9\x9e\xe9\xf6\x4e\x83\x35\x5c\x68\xe7\xb7\xb1\x37\xd0\xab\xac\xcd\xdf\x7f\x00\x00\x00\xff\xff\x7a\x7a\x50\xf5\x28\x01\x00\x00"

func storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc,
		"storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc",
	)
}

func storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x1a, 0x35, 0xa3, 0x3c, 0x53, 0x73, 0x21, 0x3a, 0x21, 0xec, 0xfd, 0x15, 0x7d, 0x7e, 0xf7, 0xc1, 0x1a, 0x4d, 0x5a, 0x7c, 0x7a, 0x8e, 0xae, 0x36, 0xfe, 0x89, 0x11, 0xc8, 0xc2, 0x35, 0x8e}}
	return a, nil
}

var _storagefeesScriptsGet_storage_capacityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\xfd\x9e\xe2\xa7\x53\xb3\x38\x89\x43\xb7\x22\xe4\x05\xc4\x07\x38\xae\xa7\x04\xd2\xa4\xe4\x2e\xa8\x88\xef\xee\xa0\x53\xb7\x6f\xfa\xd2\xba\xd5\xe6\x18\x62\xae\x8f\x8b\xd7\xc6\x77\x8d\xaa\x36\x10\xb1\x88\x9a\x8d\x9c\x73\xc0\xad\x17\xac\x9c\xca\xc8\x22\xb5\x17\x9f\x97\xa5\xa9\xd9\x84\x3f\xc2\x84\x6b\x4c\xcf\xd3\x11\x6f\x02\x80\xa6\xde\x5b\xc1\x2e\x3d\x08\x67\xe9\x99\x5d\xe7\x5f\x73\xe6\x8d\x25\xf9\x6b\xd7\x06\xfa\x10\x7d\x03\x00\x00\xff\xff\x03\x6e\x17\xfe\x99\x00\x00\x00"

func storagefeesScriptsGet_storage_capacityCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_capacityCdc,
		"storageFees/scripts/get_storage_capacity.cdc",
	)
}

func storagefeesScriptsGet_storage_capacityCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_capacityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_capacity.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xda, 0x37, 0x59, 0xf1, 0x65, 0x27, 0xf5, 0x2d, 0x9, 0x2a, 0xb, 0x40, 0xce, 0xb, 0xff, 0xef, 0xf3, 0x2a, 0x24, 0x58, 0x53, 0xdd, 0x98, 0x2d, 0xc3, 0xa3, 0x39, 0xee, 0xdf, 0xac, 0xba}}
	return a, nil
}

var _storagefeesScriptsGet_storage_fee_conversionCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x72\xcb\xc9\x2f\x0f\x2e\xc9\x2f\x4a\x4c\x4f\x75\x4b\x4d\x2d\x56\xe2\xe2\x4a\x4c\x4e\x4e\x2d\x2e\xd6\x48\xcc\xc9\xd1\x54\x48\x2b\xcd\x53\xc8\x4d\xcc\xcc\xd3\xd0\xb4\x52\x08\x75\xcb\xac\x30\x33\x51\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x40\xd3\xad\x57\x0c\x61\xfb\xa6\xa6\x27\x3a\x55\x96\xa4\x16\x07\xa4\x16\x05\xa5\x16\xa7\x16\x95\xa5\xa6\xb8\xf9\xf8\x87\x73\xd5\x72\x71\x01\x02\x00\x00\xff\xff\xa4\x12\x0d\xae\x79\x00\x00\x00"

func storagefeesScriptsGet_storage_fee_conversionCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_fee_conversionCdc,
		"storageFees/scripts/get_storage_fee_conversion.cdc",
	)
}

func storagefeesScriptsGet_storage_fee_conversionCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_fee_conversionCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_fee_conversion.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xf5, 0xd3, 0x0, 0x6b, 0x29, 0x6b, 0xbb, 0x48, 0x88, 0x6f, 0xb2, 0x5e, 0xa9, 0xbc, 0x55, 0x92, 0x2, 0x8e, 0xa1, 0x9f, 0xd5, 0xa4, 0x9b, 0x83, 0xf9, 0x95, 0xf8, 0xc6, 0x1a, 0x75, 0xa2}}
	return a, nil
}

var _storagefeesScriptsGet_storage_fee_minCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\x31\x0a\x42\x31\x0c\x06\xe0\x3d\xa7\xf8\x79\xd3\x7b\x8b\x93\x38\x78\x80\x1e\x40\xf1\x00\xa1\x44\x09\x34\xa9\xa4\xa9\x0a\xe2\xdd\x5d\x9c\x5c\x3f\xf8\xd4\xee\x3d\x12\x4b\x69\xfd\x79\xce\x1e\x7c\x93\x22\x32\x16\x22\xae\x55\xc6\x58\xb9\xb5\x0d\xd7\xe9\x30\x56\x5f\xb7\x23\x2e\x45\x5f\x87\x3d\xde\x04\x00\x21\x39\xc3\xf1\xb7\x77\xa6\xae\x36\xed\x47\x27\x19\x12\x0f\x4e\xed\x4e\x1f\xa2\x6f\x00\x00\x00\xff\xff\xe9\x30\xd0\xba\x73\x00\x00\x00"

func storagefeesScriptsGet_storage_fee_minCdcBytes() ([]byte, error) {
	return bindataRead(
		_storagefeesScriptsGet_storage_fee_minCdc,
		"storageFees/scripts/get_storage_fee_min.cdc",
	)
}

func storagefeesScriptsGet_storage_fee_minCdc() (*asset, error) {
	bytes, err := storagefeesScriptsGet_storage_fee_minCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storageFees/scripts/get_storage_fee_min.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x9e, 0x4, 0xfc, 0x6d, 0x2, 0x79, 0x83, 0x35, 0xcc, 0xc2, 0xc4, 0xa1, 0x62, 0x28, 0x1e, 0x32, 0xbc, 0xaf, 0x43, 0x31, 0x50, 0x3d, 0xef, 0xda, 0x6, 0xfa, 0x5f, 0xc8, 0x44, 0x9f, 0xb1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FlowServiceAccount/add_account_creator.cdc":                                  flowserviceaccountAdd_account_creatorCdc,
	"FlowServiceAccount/deposit_fees.cdc":                                         flowserviceaccountDeposit_feesCdc,
	"FlowServiceAccount/remove_account_creator.cdc":                               flowserviceaccountRemove_account_creatorCdc,
	"FlowServiceAccount/scripts/get_account_creators.cdc":                         flowserviceaccountScriptsGet_account_creatorsCdc,
	"FlowServiceAccount/scripts/get_account_fee.cdc":                              flowserviceaccountScriptsGet_account_feeCdc,
	"FlowServiceAccount/scripts/get_execution_effort_weights.cdc":                 flowserviceaccountScriptsGet_execution_effort_weightsCdc,
	"FlowServiceAccount/scripts/get_execution_memory_limit.cdc":                   flowserviceaccountScriptsGet_execution_memory_limitCdc,
	"FlowServiceAccount/scripts/get_execution_memory_weights.cdc":                 flowserviceaccountScriptsGet_execution_memory_weightsCdc,
	"FlowServiceAccount/scripts/get_fees_balance.cdc":                             flowserviceaccountScriptsGet_fees_balanceCdc,
	"FlowServiceAccount/scripts/get_is_account_creation_restricted.cdc":           flowserviceaccountScriptsGet_is_account_creation_restrictedCdc,
	"FlowServiceAccount/scripts/get_is_account_creator.cdc":                       flowserviceaccountScriptsGet_is_account_creatorCdc,
	"FlowServiceAccount/scripts/get_tx_fee_parameters.cdc":                        flowserviceaccountScriptsGet_tx_fee_parametersCdc,
	"FlowServiceAccount/scripts/verify_payer_balance_for_tx_execution.cdc":        flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdc,
	"FlowServiceAccount/set_execution_effort_weights.cdc":                         flowserviceaccountSet_execution_effort_weightsCdc,
	"FlowServiceAccount/set_execution_memory_limit.cdc":                           flowserviceaccountSet_execution_memory_limitCdc,
	"FlowServiceAccount/set_execution_memory_weights.cdc":                         flowserviceaccountSet_execution_memory_weightsCdc,
	"FlowServiceAccount/set_is_account_creation_restricted.cdc":                   flowserviceaccountSet_is_account_creation_restrictedCdc,
	"FlowServiceAccount/set_tx_fee_parameters.cdc":                                flowserviceaccountSet_tx_fee_parametersCdc,
	"FlowServiceAccount/set_tx_fee_surge_factor.cdc":                              flowserviceaccountSet_tx_fee_surge_factorCdc,
	"accounts/add_key.cdc":                                                        accountsAdd_keyCdc,
	"accounts/create_new_account.cdc":                                             accountsCreate_new_accountCdc,
	"accounts/revoke_key.cdc":                                                     accountsRevoke_keyCdc,
	"dkg/admin/force_stop_dkg.cdc":                                                dkgAdminForce_stop_dkgCdc,
	"dkg/admin/publish_admin.cdc":                                                 dkgAdminPublish_adminCdc,
	"dkg/admin/set_safe_threshold.cdc":                                            dkgAdminSet_safe_thresholdCdc,
	"dkg/admin/start_dkg.cdc":                                                     dkgAdminStart_dkgCdc,
	"dkg/admin/stop_dkg.cdc":                                                      dkgAdminStop_dkgCdc,
	"dkg/create_participant.cdc":                                                  dkgCreate_participantCdc,
	"dkg/scripts/get_consensus_nodes.cdc":                                         dkgScriptsGet_consensus_nodesCdc,
	"dkg/scripts/get_dkg_canonical_final_submission.cdc":                          dkgScriptsGet_dkg_canonical_final_submissionCdc,
	"dkg/scripts/get_dkg_completed.cdc":                                           dkgScriptsGet_dkg_completedCdc,
	"dkg/scripts/get_dkg_enabled.cdc":                                             dkgScriptsGet_dkg_enabledCdc,
	"dkg/scripts/get_final_submissions.cdc":                                       dkgScriptsGet_final_submissionsCdc,
	"dkg/scripts/get_latest_whiteboard_messages.cdc":                              dkgScriptsGet_latest_whiteboard_messagesCdc,
	"dkg/scripts/get_node_final_submission.cdc":                                   dkgScriptsGet_node_final_submissionCdc,
	"dkg/scripts/get_node_has_submitted.cdc":                                      dkgScriptsGet_node_has_submittedCdc,
	"dkg/scripts/get_node_is_claimed.cdc":                                         dkgScriptsGet_node_is_claimedCdc,
	"dkg/scripts/get_node_is_registered.cdc":                                      dkgScriptsGet_node_is_registeredCdc,
	"dkg/scripts/get_thresholds.cdc":                                              dkgScriptsGet_thresholdsCdc,
	"dkg/scripts/get_whiteboard_messages.cdc":                                     dkgScriptsGet_whiteboard_messagesCdc,
	"dkg/send_empty_final_submission.cdc":                                         dkgSend_empty_final_submissionCdc,
	"dkg/send_final_submission.cdc":                                               dkgSend_final_submissionCdc,
	"dkg/send_whiteboard_message.cdc":                                             dkgSend_whiteboard_messageCdc,
	"epoch/admin/advance_view.cdc":                                                epochAdminAdvance_viewCdc,
	"epoch/admin/calculate_rewards.cdc":                                           epochAdminCalculate_rewardsCdc,
	"epoch/admin/deploy_epoch.cdc":                                                epochAdminDeploy_epochCdc,
	"epoch/admin/deploy_qc_dkg.cdc":                                               epochAdminDeploy_qc_dkgCdc,
	"epoch/admin/pay_rewards.cdc":                                                 epochAdminPay_rewardsCdc,
	"epoch/admin/recover_epoch.cdc":                                               epochAdminRecover_epochCdc,
	"epoch/admin/reset_epoch.cdc":                                                 epochAdminReset_epochCdc,
	"epoch/admin/set_automatic_rewards.cdc":                                       epochAdminSet_automatic_rewardsCdc,
	"epoch/admin/set_bonus_tokens.cdc":                                            epochAdminSet_bonus_tokensCdc,
	"epoch/admin/update_clusters.cdc":                                             epochAdminUpdate_clustersCdc,
	"epoch/admin/update_dkg_phase_views.cdc":                                      epochAdminUpdate_dkg_phase_viewsCdc,
	"epoch/admin/update_epoch_config.cdc":                                         epochAdminUpdate_epoch_configCdc,
	"epoch/admin/update_epoch_timing_config.cdc":                                  epochAdminUpdate_epoch_timing_configCdc,
	"epoch/admin/update_epoch_views.cdc":                                          epochAdminUpdate_epoch_viewsCdc,
	"epoch/admin/update_reward.cdc":                                               epochAdminUpdate_rewardCdc,
	"epoch/admin/update_staking_views.cdc":                                        epochAdminUpdate_staking_viewsCdc,
	"epoch/node/register_dkg_participant.cdc":                                     epochNodeRegister_dkg_participantCdc,
	"epoch/node/register_node.cdc":                                                epochNodeRegister_nodeCdc,
	"epoch/node/register_qc_voter.cdc":                                            epochNodeRegister_qc_voterCdc,
	"epoch/scripts/get_bonus_tokens.cdc":                                          epochScriptsGet_bonus_tokensCdc,
	"epoch/scripts/get_config_metadata.cdc":                                       epochScriptsGet_config_metadataCdc,
	"epoch/scripts/get_create_clusters.cdc":                                       epochScriptsGet_create_clustersCdc,
	"epoch/scripts/get_current_view.cdc":                                          epochScriptsGet_current_viewCdc,
	"epoch/scripts/get_epoch_counter.cdc":                                         epochScriptsGet_epoch_counterCdc,
	"epoch/scripts/get_epoch_metadata.cdc":                                        epochScriptsGet_epoch_metadataCdc,
	"epoch/scripts/get_epoch_phase.cdc":                                           epochScriptsGet_epoch_phaseCdc,
	"epoch/scripts/get_epoch_timing_config.cdc":                                   epochScriptsGet_epoch_timing_configCdc,
	"epoch/scripts/get_proposed_counter.cdc":                                      epochScriptsGet_proposed_counterCdc,
	"epoch/scripts/get_randomize.cdc":                                             epochScriptsGet_randomizeCdc,
	"epoch/scripts/get_target_end_time_for_epoch.cdc":                             epochScriptsGet_target_end_time_for_epochCdc,
	"flowToken/burn_tokens.cdc":                                                   flowtokenBurn_tokensCdc,
	"flowToken/create_forwarder.cdc":                                              flowtokenCreate_forwarderCdc,
	"flowToken/mint_tokens.cdc":                                                   flowtokenMint_tokensCdc,
	"flowToken/scripts/get_balance.cdc":                                           flowtokenScriptsGet_balanceCdc,
	"flowToken/scripts/get_supply.cdc":                                            flowtokenScriptsGet_supplyCdc,
	"flowToken/setup_account.cdc":                                                 flowtokenSetup_accountCdc,
	"flowToken/transfer_tokens.cdc":                                               flowtokenTransfer_tokensCdc,
	"idTableStaking/admin/add_approved_and_limits.cdc":                            idtablestakingAdminAdd_approved_and_limitsCdc,
	"idTableStaking/admin/add_approved_nodes.cdc":                                 idtablestakingAdminAdd_approved_nodesCdc,
	"idTableStaking/admin/capability_end_epoch.cdc":                               idtablestakingAdminCapability_end_epochCdc,
	"idTableStaking/admin/change_candidate_limits.cdc":                            idtablestakingAdminChange_candidate_limitsCdc,
	"idTableStaking/admin/change_cut.cdc":                                         idtablestakingAdminChange_cutCdc,
	"idTableStaking/admin/change_del_minimums.cdc":                                idtablestakingAdminChange_del_minimumsCdc,
	"idTableStaking/admin/change_minimums.cdc":                                    idtablestakingAdminChange_minimumsCdc,
	"idTableStaking/admin/change_payout.cdc":                                      idtablestakingAdminChange_payoutCdc,
	"idTableStaking/admin/end_epoch.cdc":                                          idtablestakingAdminEnd_epochCdc,
	"idTableStaking/admin/end_epoch_change_payout.cdc":                            idtablestakingAdminEnd_epoch_change_payoutCdc,
	"idTableStaking/admin/end_staking.cdc":                                        idtablestakingAdminEnd_stakingCdc,
	"idTableStaking/admin/move_tokens.cdc":                                        idtablestakingAdminMove_tokensCdc,
	"idTableStaking/admin/pay_rewards.cdc":                                        idtablestakingAdminPay_rewardsCdc,
	"idTableStaking/admin/remove_approved_nodes.cdc":                              idtablestakingAdminRemove_approved_nodesCdc,
	"idTableStaking/admin/remove_invalid_nodes.cdc":                               idtablestakingAdminRemove_invalid_nodesCdc,
	"idTableStaking/admin/remove_node.cdc":                                        idtablestakingAdminRemove_nodeCdc,
	"idTableStaking/admin/scale_rewards_test.cdc":                                 idtablestakingAdminScale_rewards_testCdc,
	"idTableStaking/admin/set_approved_nodes.cdc":                                 idtablestakingAdminSet_approved_nodesCdc,
	"idTableStaking/admin/set_claimed.cdc":                                        idtablestakingAdminSet_claimedCdc,
	"idTableStaking/admin/set_node_weight.cdc":                                    idtablestakingAdminSet_node_weightCdc,
	"idTableStaking/admin/set_non_operational.cdc":                                idtablestakingAdminSet_non_operationalCdc,
	"idTableStaking/admin/set_open_access_node_slots.cdc":                         idtablestakingAdminSet_open_access_node_slotsCdc,
	"idTableStaking/admin/set_slot_limits.cdc":                                    idtablestakingAdminSet_slot_limitsCdc,
	"idTableStaking/admin/start_staking.cdc":                                      idtablestakingAdminStart_stakingCdc,
	"idTableStaking/admin/transfer_admin.cdc":                                     idtablestakingAdminTransfer_adminCdc,
	"idTableStaking/admin/transfer_fees_admin.cdc":                                idtablestakingAdminTransfer_fees_adminCdc,
	"idTableStaking/admin/transfer_minter_deploy.cdc":                             idtablestakingAdminTransfer_minter_deployCdc,
	"idTableStaking/admin/upgrade_set_claimed.cdc":                                idtablestakingAdminUpgrade_set_claimedCdc,
	"idTableStaking/admin/upgrade_staking.cdc":                                    idtablestakingAdminUpgrade_stakingCdc,
	"idTableStaking/delegation/del_request_unstaking.cdc":                         idtablestakingDelegationDel_request_unstakingCdc,
	"idTableStaking/delegation/del_stake_new_tokens.cdc":                          idtablestakingDelegationDel_stake_new_tokensCdc,
	"idTableStaking/delegation/del_stake_rewarded.cdc":                            idtablestakingDelegationDel_stake_rewardedCdc,
	"idTableStaking/delegation/del_stake_unstaked.cdc":                            idtablestakingDelegationDel_stake_unstakedCdc,
	"idTableStaking/delegation/del_withdraw_reward_tokens.cdc":                    idtablestakingDelegationDel_withdraw_reward_tokensCdc,
	"idTableStaking/delegation/del_withdraw_unstaked_tokens.cdc":                  idtablestakingDelegationDel_withdraw_unstaked_tokensCdc,
	"idTableStaking/delegation/get_delegator_committed.cdc":                       idtablestakingDelegationGet_delegator_committedCdc,
	"idTableStaking/delegation/get_delegator_info.cdc":                            idtablestakingDelegationGet_delegator_infoCdc,
	"idTableStaking/delegation/get_delegator_info_from_address.cdc":               idtablestakingDelegationGet_delegator_info_from_addressCdc,
	"idTableStaking/delegation/get_delegator_request.cdc":                         idtablestakingDelegationGet_delegator_requestCdc,
	"idTableStaking/delegation/get_delegator_rewarded.cdc":                        idtablestakingDelegationGet_delegator_rewardedCdc,
	"idTableStaking/delegation/get_delegator_staked.cdc":                          idtablestakingDelegationGet_delegator_stakedCdc,
	"idTableStaking/delegation/get_delegator_unstaked.cdc":                        idtablestakingDelegationGet_delegator_unstakedCdc,
	"idTableStaking/delegation/get_delegator_unstaking.cdc":                       idtablestakingDelegationGet_delegator_unstakingCdc,
	"idTableStaking/delegation/get_delegator_unstaking_request.cdc":               idtablestakingDelegationGet_delegator_unstaking_requestCdc,
	"idTableStaking/delegation/register_delegator.cdc":                            idtablestakingDelegationRegister_delegatorCdc,
	"idTableStaking/delegation/register_many_delegators.cdc":                      idtablestakingDelegationRegister_many_delegatorsCdc,
	"idTableStaking/node/register_many_nodes.cdc":                                 idtablestakingNodeRegister_many_nodesCdc,
	"idTableStaking/node/register_node.cdc":                                       idtablestakingNodeRegister_nodeCdc,
	"idTableStaking/node/request_unstake.cdc":                                     idtablestakingNodeRequest_unstakeCdc,
	"idTableStaking/node/stake_new_tokens.cdc":                                    idtablestakingNodeStake_new_tokensCdc,
	"idTableStaking/node/stake_rewarded_tokens.cdc":                               idtablestakingNodeStake_rewarded_tokensCdc,
	"idTableStaking/node/stake_unstaked_tokens.cdc":                               idtablestakingNodeStake_unstaked_tokensCdc,
	"idTableStaking/node/unstake_all.cdc":                                         idtablestakingNodeUnstake_allCdc,
	"idTableStaking/node/update_networking_address.cdc":                           idtablestakingNodeUpdate_networking_addressCdc,
	"idTableStaking/node/withdraw_reward_tokens.cdc":                              idtablestakingNodeWithdraw_reward_tokensCdc,
	"idTableStaking/node/withdraw_unstaked_tokens.cdc":                            idtablestakingNodeWithdraw_unstaked_tokensCdc,
	"idTableStaking/scripts/get_approved_but_not_staked_nodes.cdc":                idtablestakingScriptsGet_approved_but_not_staked_nodesCdc,
	"idTableStaking/scripts/get_approved_nodes.cdc":                               idtablestakingScriptsGet_approved_nodesCdc,
	"idTableStaking/scripts/get_candidate_limits.cdc":                             idtablestakingScriptsGet_candidate_limitsCdc,
	"idTableStaking/scripts/get_candidate_nodes.cdc":                              idtablestakingScriptsGet_candidate_nodesCdc,
	"idTableStaking/scripts/get_current_table.cdc":                                idtablestakingScriptsGet_current_tableCdc,
	"idTableStaking/scripts/get_cut_percentage.cdc":                               idtablestakingScriptsGet_cut_percentageCdc,
	"idTableStaking/scripts/get_del_stake_requirements.cdc":                       idtablestakingScriptsGet_del_stake_requirementsCdc,
	"idTableStaking/scripts/get_delegators_below_min.cdc":                         idtablestakingScriptsGet_delegators_below_minCdc,
	"idTableStaking/scripts/get_moves_pending.cdc":                                idtablestakingScriptsGet_moves_pendingCdc,
	"idTableStaking/scripts/get_node_committed_tokens.cdc":                        idtablestakingScriptsGet_node_committed_tokensCdc,
	"idTableStaking/scripts/get_node_info.cdc":                                    idtablestakingScriptsGet_node_infoCdc,
	"idTableStaking/scripts/get_node_info_from_address.cdc":                       idtablestakingScriptsGet_node_info_from_addressCdc,
	"idTableStaking/scripts/get_node_initial_weight.cdc":                          idtablestakingScriptsGet_node_initial_weightCdc,
	"idTableStaking/scripts/get_node_networking_addr.cdc":                         idtablestakingScriptsGet_node_networking_addrCdc,
	"idTableStaking/scripts/get_node_networking_key.cdc":                          idtablestakingScriptsGet_node_networking_keyCdc,
	"idTableStaking/scripts/get_node_rewarded_tokens.cdc":                         idtablestakingScriptsGet_node_rewarded_tokensCdc,
	"idTableStaking/scripts/get_node_role.cdc":                                    idtablestakingScriptsGet_node_roleCdc,
	"idTableStaking/scripts/get_node_staked_tokens.cdc":                           idtablestakingScriptsGet_node_staked_tokensCdc,
	"idTableStaking/scripts/get_node_staking_key.cdc":                             idtablestakingScriptsGet_node_staking_keyCdc,
	"idTableStaking/scripts/get_node_total_commitment.cdc":                        idtablestakingScriptsGet_node_total_commitmentCdc,
	"idTableStaking/scripts/get_node_total_commitment_without_delegators.cdc":     idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc,
	"idTableStaking/scripts/get_node_type_ratio.cdc":                              idtablestakingScriptsGet_node_type_ratioCdc,
	"idTableStaking/scripts/get_node_unstaked_tokens.cdc":                         idtablestakingScriptsGet_node_unstaked_tokensCdc,
	"idTableStaking/scripts/get_node_unstaking_request.cdc":                       idtablestakingScriptsGet_node_unstaking_requestCdc,
	"idTableStaking/scripts/get_node_unstaking_tokens.cdc":                        idtablestakingScriptsGet_node_unstaking_tokensCdc,
	"idTableStaking/scripts/get_non_operational.cdc":                              idtablestakingScriptsGet_non_operationalCdc,
	"idTableStaking/scripts/get_proposed_table.cdc":                               idtablestakingScriptsGet_proposed_tableCdc,
	"idTableStaking/scripts/get_role_counts.cdc":                                  idtablestakingScriptsGet_role_countsCdc,
	"idTableStaking/scripts/get_slot_limits.cdc":                                  idtablestakingScriptsGet_slot_limitsCdc,
	"idTableStaking/scripts/get_stake_requirements.cdc":                           idtablestakingScriptsGet_stake_requirementsCdc,
	"idTableStaking/scripts/get_table.cdc":                                        idtablestakingScriptsGet_tableCdc,
	"idTableStaking/scripts/get_total_staked.cdc":                                 idtablestakingScriptsGet_total_stakedCdc,
	"idTableStaking/scripts/get_total_staked_by_type.cdc":                         idtablestakingScriptsGet_total_staked_by_typeCdc,
	"idTableStaking/scripts/get_weekly_payout.cdc":                                idtablestakingScriptsGet_weekly_payoutCdc,
	"lockedTokens/admin/admin_create_shared_accounts.cdc":                         lockedtokensAdminAdmin_create_shared_accountsCdc,
	"lockedTokens/admin/admin_deploy_contract.cdc":                                lockedtokensAdminAdmin_deploy_contractCdc,
	"lockedTokens/admin/admin_deposit_account_creator.cdc":                        lockedtokensAdminAdmin_deposit_account_creatorCdc,
	"lockedTokens/admin/admin_remove_delegator.cdc":                               lockedtokensAdminAdmin_remove_delegatorCdc,
	"lockedTokens/admin/check_main_registration.cdc":                              lockedtokensAdminCheck_main_registrationCdc,
	"lockedTokens/admin/check_shared_registration.cdc":                            lockedtokensAdminCheck_shared_registrationCdc,
	"lockedTokens/admin/custody_create_account_with_lease_account.cdc":            lockedtokensAdminCustody_create_account_with_lease_accountCdc,
	"lockedTokens/admin/custody_create_only_lease_account.cdc":                    lockedtokensAdminCustody_create_only_lease_accountCdc,
	"lockedTokens/admin/custody_create_only_shared_account.cdc":                   lockedtokensAdminCustody_create_only_shared_accountCdc,
	"lockedTokens/admin/custody_create_shared_accounts.cdc":                       lockedtokensAdminCustody_create_shared_accountsCdc,
	"lockedTokens/admin/custody_setup_account_creator.cdc":                        lockedtokensAdminCustody_setup_account_creatorCdc,
	"lockedTokens/admin/deposit_locked_tokens.cdc":                                lockedtokensAdminDeposit_locked_tokensCdc,
	"lockedTokens/admin/recover_lease_tokens.cdc":                                 lockedtokensAdminRecover_lease_tokensCdc,
	"lockedTokens/admin/unlock_tokens.cdc":                                        lockedtokensAdminUnlock_tokensCdc,
	"lockedTokens/admin/unlock_tokens_for_multiple_accounts.cdc":                  lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc,
	"lockedTokens/delegator/delegate_new_tokens.cdc":                              lockedtokensDelegatorDelegate_new_tokensCdc,
	"lockedTokens/delegator/delegate_rewarded_tokens.cdc":                         lockedtokensDelegatorDelegate_rewarded_tokensCdc,
	"lockedTokens/delegator/delegate_unstaked_tokens.cdc":                         lockedtokensDelegatorDelegate_unstaked_tokensCdc,
	"lockedTokens/delegator/get_delegator_id.cdc":                                 lockedtokensDelegatorGet_delegator_idCdc,
	"lockedTokens/delegator/get_delegator_info.cdc":                               lockedtokensDelegatorGet_delegator_infoCdc,
	"lockedTokens/delegator/get_delegator_node_id.cdc":                            lockedtokensDelegatorGet_delegator_node_idCdc,
	"lockedTokens/delegator/register_delegator.cdc":                               lockedtokensDelegatorRegister_delegatorCdc,
	"lockedTokens/delegator/request_unstaking.cdc":                                lockedtokensDelegatorRequest_unstakingCdc,
	"lockedTokens/delegator/withdraw_rewarded_tokens.cdc":                         lockedtokensDelegatorWithdraw_rewarded_tokensCdc,
	"lockedTokens/delegator/withdraw_rewarded_tokens_locked.cdc":                  lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc,
	"lockedTokens/delegator/withdraw_unstaked_tokens.cdc":                         lockedtokensDelegatorWithdraw_unstaked_tokensCdc,
	"lockedTokens/staker/get_node_id.cdc":                                         lockedtokensStakerGet_node_idCdc,
	"lockedTokens/staker/get_staker_info.cdc":                                     lockedtokensStakerGet_staker_infoCdc,
	"lockedTokens/staker/register_node.cdc":                                       lockedtokensStakerRegister_nodeCdc,
	"lockedTokens/staker/request_unstaking.cdc":                                   lockedtokensStakerRequest_unstakingCdc,
	"lockedTokens/staker/stake_new_tokens.cdc":                                    lockedtokensStakerStake_new_tokensCdc,
	"lockedTokens/staker/stake_rewarded_tokens.cdc":                               lockedtokensStakerStake_rewarded_tokensCdc,
	"lockedTokens/staker/stake_unstaked_tokens.cdc":                               lockedtokensStakerStake_unstaked_tokensCdc,
	"lockedTokens/staker/unstake_all.cdc":                                         lockedtokensStakerUnstake_allCdc,
	"lockedTokens/staker/update_networking_address.cdc":                           lockedtokensStakerUpdate_networking_addressCdc,
	"lockedTokens/staker/withdraw_rewarded_tokens.cdc":                            lockedtokensStakerWithdraw_rewarded_tokensCdc,
	"lockedTokens/staker/withdraw_rewarded_tokens_locked.cdc":                     lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc,
	"lockedTokens/staker/withdraw_unstaked_tokens.cdc":                            lockedtokensStakerWithdraw_unstaked_tokensCdc,
	"lockedTokens/user/deposit_tokens.cdc":                                        lockedtokensUserDeposit_tokensCdc,
	"lockedTokens/user/get_locked_account_address.cdc":                            lockedtokensUserGet_locked_account_addressCdc,
	"lockedTokens/user/get_locked_account_balance.cdc":                            lockedtokensUserGet_locked_account_balanceCdc,
	"lockedTokens/user/get_multiple_unlock_limits.cdc":                            lockedtokensUserGet_multiple_unlock_limitsCdc,
	"lockedTokens/user/get_total_balance.cdc":                                     lockedtokensUserGet_total_balanceCdc,
	"lockedTokens/user/get_unlock_limit.cdc":                                      lockedtokensUserGet_unlock_limitCdc,
	"lockedTokens/user/withdraw_tokens.cdc":                                       lockedtokensUserWithdraw_tokensCdc,
	"nodeVersionBeacon/admin/change_version_freeze_period.cdc":                    nodeversionbeaconAdminChange_version_freeze_periodCdc,
	"nodeVersionBeacon/admin/delete_version_boundary.cdc":                         nodeversionbeaconAdminDelete_version_boundaryCdc,
	"nodeVersionBeacon/admin/heartbeat.cdc":                                       nodeversionbeaconAdminHeartbeatCdc,
	"nodeVersionBeacon/admin/set_protocol_state_version.cdc":                      nodeversionbeaconAdminSet_protocol_state_versionCdc,
	"nodeVersionBeacon/admin/set_version_boundary.cdc":                            nodeversionbeaconAdminSet_version_boundaryCdc,
	"nodeVersionBeacon/scripts/get_current_node_version.cdc":                      nodeversionbeaconScriptsGet_current_node_versionCdc,
	"nodeVersionBeacon/scripts/get_current_node_version_as_string.cdc":            nodeversionbeaconScriptsGet_current_node_version_as_stringCdc,
	"nodeVersionBeacon/scripts/get_next_version_boundary.cdc":                     nodeversionbeaconScriptsGet_next_version_boundaryCdc,
	"nodeVersionBeacon/scripts/get_next_version_update_sequence.cdc":              nodeversionbeaconScriptsGet_next_version_update_sequenceCdc,
	"nodeVersionBeacon/scripts/get_version_boundaries.cdc":                        nodeversionbeaconScriptsGet_version_boundariesCdc,
	"nodeVersionBeacon/scripts/get_version_boundary_freeze_period.cdc":            nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc,
	"quorumCertificate/admin/publish_voter.cdc":                                   quorumcertificateAdminPublish_voterCdc,
	"quorumCertificate/admin/start_voting.cdc":                                    quorumcertificateAdminStart_votingCdc,
	"quorumCertificate/admin/stop_voting.cdc":                                     quorumcertificateAdminStop_votingCdc,
	"quorumCertificate/create_voter.cdc":                                          quorumcertificateCreate_voterCdc,
	"quorumCertificate/scripts/generate_quorum_certificate.cdc":                   quorumcertificateScriptsGenerate_quorum_certificateCdc,
	"quorumCertificate/scripts/get_cluster.cdc":                                   quorumcertificateScriptsGet_clusterCdc,
	"quorumCertificate/scripts/get_cluster_complete.cdc":                          quorumcertificateScriptsGet_cluster_completeCdc,
	"quorumCertificate/scripts/get_cluster_node_weights.cdc":                      quorumcertificateScriptsGet_cluster_node_weightsCdc,
	"quorumCertificate/scripts/get_cluster_vote_threshold.cdc":                    quorumcertificateScriptsGet_cluster_vote_thresholdCdc,
	"quorumCertificate/scripts/get_cluster_votes.cdc":                             quorumcertificateScriptsGet_cluster_votesCdc,
	"quorumCertificate/scripts/get_cluster_weight.cdc":                            quorumcertificateScriptsGet_cluster_weightCdc,
	"quorumCertificate/scripts/get_clusters.cdc":                                  quorumcertificateScriptsGet_clustersCdc,
	"quorumCertificate/scripts/get_node_has_voted.cdc":                            quorumcertificateScriptsGet_node_has_votedCdc,
	"quorumCertificate/scripts/get_node_weight.cdc":                               quorumcertificateScriptsGet_node_weightCdc,
	"quorumCertificate/scripts/get_qc_enabled.cdc":                                quorumcertificateScriptsGet_qc_enabledCdc,
	"quorumCertificate/scripts/get_voter_is_registered.cdc":                       quorumcertificateScriptsGet_voter_is_registeredCdc,
	"quorumCertificate/scripts/get_voting_completed.cdc":                          quorumcertificateScriptsGet_voting_completedCdc,
	"quorumCertificate/submit_vote.cdc":                                           quorumcertificateSubmit_voteCdc,
	"randomBeaconHistory/scripts/get_backfiller_max_entries.cdc":                  randombeaconhistoryScriptsGet_backfiller_max_entriesCdc,
	"randomBeaconHistory/scripts/get_latest_source_of_randomness.cdc":             randombeaconhistoryScriptsGet_latest_source_of_randomnessCdc,
	"randomBeaconHistory/scripts/get_source_of_randomness.cdc":                    randombeaconhistoryScriptsGet_source_of_randomnessCdc,
	"randomBeaconHistory/scripts/get_source_of_randomness_page.cdc":               randombeaconhistoryScriptsGet_source_of_randomness_pageCdc,
	"randomBeaconHistory/transactions/set_backfiller_max_entries.cdc":             randombeaconhistoryTransactionsSet_backfiller_max_entriesCdc,
	"stakingCollection/close_stake.cdc":                                           stakingcollectionClose_stakeCdc,
	"stakingCollection/create_machine_account.cdc":                                stakingcollectionCreate_machine_accountCdc,
	"stakingCollection/create_new_tokenholder_acct.cdc":                           stakingcollectionCreate_new_tokenholder_acctCdc,
	"stakingCollection/deploy_collection_contract.cdc":                            stakingcollectionDeploy_collection_contractCdc,
	"stakingCollection/register_delegator.cdc":                                    stakingcollectionRegister_delegatorCdc,
	"stakingCollection/register_multiple_delegators.cdc":                          stakingcollectionRegister_multiple_delegatorsCdc,
	"stakingCollection/register_multiple_nodes.cdc":                               stakingcollectionRegister_multiple_nodesCdc,
	"stakingCollection/register_node.cdc":                                         stakingcollectionRegister_nodeCdc,
	"stakingCollection/register_node_old.cdc":                                     stakingcollectionRegister_node_oldCdc,
	"stakingCollection/request_unstaking.cdc":                                     stakingcollectionRequest_unstakingCdc,
	"stakingCollection/restake_all_stakers.cdc":                                   stakingcollectionRestake_all_stakersCdc,
	"stakingCollection/scripts/does_account_have_staking_collection.cdc":          stakingcollectionScriptsDoes_account_have_staking_collectionCdc,
	"stakingCollection/scripts/get_all_delegator_info.cdc":                        stakingcollectionScriptsGet_all_delegator_infoCdc,
	"stakingCollection/scripts/get_all_node_info.cdc":                             stakingcollectionScriptsGet_all_node_infoCdc,
	"stakingCollection/scripts/get_delegator_ids.cdc":                             stakingcollectionScriptsGet_delegator_idsCdc,
	"stakingCollection/scripts/get_does_stake_exist.cdc":                          stakingcollectionScriptsGet_does_stake_existCdc,
	"stakingCollection/scripts/get_locked_tokens_used.cdc":                        stakingcollectionScriptsGet_locked_tokens_usedCdc,
	"stakingCollection/scripts/get_machine_account_address.cdc":                   stakingcollectionScriptsGet_machine_account_addressCdc,
	"stakingCollection/scripts/get_machine_accounts.cdc":                          stakingcollectionScriptsGet_machine_accountsCdc,
	"stakingCollection/scripts/get_node_ids.cdc":                                  stakingcollectionScriptsGet_node_idsCdc,
	"stakingCollection/scripts/get_unlocked_tokens_used.cdc":                      stakingcollectionScriptsGet_unlocked_tokens_usedCdc,
	"stakingCollection/setup_staking_collection.cdc":                              stakingcollectionSetup_staking_collectionCdc,
	"stakingCollection/stake_new_tokens.cdc":                                      stakingcollectionStake_new_tokensCdc,
	"stakingCollection/stake_rewarded_tokens.cdc":                                 stakingcollectionStake_rewarded_tokensCdc,
	"stakingCollection/stake_unstaked_tokens.cdc":                                 stakingcollectionStake_unstaked_tokensCdc,
	"stakingCollection/test/deposit_tokens.cdc":                                   stakingcollectionTestDeposit_tokensCdc,
	"stakingCollection/test/get_tokens.cdc":                                       stakingcollectionTestGet_tokensCdc,
	"stakingCollection/transfer_delegator.cdc":                                    stakingcollectionTransfer_delegatorCdc,
	"stakingCollection/transfer_node.cdc":                                         stakingcollectionTransfer_nodeCdc,
	"stakingCollection/unstake_all.cdc":                                           stakingcollectionUnstake_allCdc,
	"stakingCollection/update_networking_address.cdc":                             stakingcollectionUpdate_networking_addressCdc,
	"stakingCollection/withdraw_from_machine_account.cdc":                         stakingcollectionWithdraw_from_machine_accountCdc,
	"stakingCollection/withdraw_rewarded_tokens.cdc":                              stakingcollectionWithdraw_rewarded_tokensCdc,
	"stakingCollection/withdraw_unstaked_tokens.cdc":                              stakingcollectionWithdraw_unstaked_tokensCdc,
	"stakingProxy/add_node_info.cdc":                                              stakingproxyAdd_node_infoCdc,
	"stakingProxy/get_node_info.cdc":                                              stakingproxyGet_node_infoCdc,
	"stakingProxy/register_node.cdc":                                              stakingproxyRegister_nodeCdc,
	"stakingProxy/remove_node_info.cdc":                                           stakingproxyRemove_node_infoCdc,
	"stakingProxy/remove_staking_proxy.cdc":                                       stakingproxyRemove_staking_proxyCdc,
	"stakingProxy/request_unstaking.cdc":                                          stakingproxyRequest_unstakingCdc,
	"stakingProxy/setup_node_account.cdc":                                         stakingproxySetup_node_accountCdc,
	"stakingProxy/stake_new_tokens.cdc":                                           stakingproxyStake_new_tokensCdc,
	"stakingProxy/stake_unstaked_tokens.cdc":                                      stakingproxyStake_unstaked_tokensCdc,
	"stakingProxy/unstake_all.cdc":                                                stakingproxyUnstake_allCdc,
	"stakingProxy/withdraw_rewards.cdc":                                           stakingproxyWithdraw_rewardsCdc,
	"stakingProxy/withdraw_unstaked.cdc":                                          stakingproxyWithdraw_unstakedCdc,
	"storageFees/admin/set_parameters.cdc":                                        storagefeesAdminSet_parametersCdc,
	"storageFees/scripts/get_account_available_balance.cdc":                       storagefeesScriptsGet_account_available_balanceCdc,
	"storageFees/scripts/get_accounts_capacity_for_transaction_storage_check.cdc": storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc,
	"storageFees/scripts/get_storage_capacity.cdc":                                storagefeesScriptsGet_storage_capacityCdc,
	"storageFees/scripts/get_storage_fee_conversion.cdc":                          storagefeesScriptsGet_storage_fee_conversionCdc,
	"storageFees/scripts/get_storage_fee_min.cdc":                                 storagefeesScriptsGet_storage_fee_minCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FlowServiceAccount": {nil, map[string]*bintree{
		"add_account_creator.cdc": {flowserviceaccountAdd_account_creatorCdc, map[string]*bintree{}},
		"deposit_fees.cdc": {flowserviceaccountDeposit_feesCdc, map[string]*bintree{}},
		"remove_account_creator.cdc": {flowserviceaccountRemove_account_creatorCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_account_creators.cdc": {flowserviceaccountScriptsGet_account_creatorsCdc, map[string]*bintree{}},
			"get_account_fee.cdc": {flowserviceaccountScriptsGet_account_feeCdc, map[string]*bintree{}},
			"get_execution_effort_weights.cdc": {flowserviceaccountScriptsGet_execution_effort_weightsCdc, map[string]*bintree{}},
			"get_execution_memory_limit.cdc": {flowserviceaccountScriptsGet_execution_memory_limitCdc, map[string]*bintree{}},
			"get_execution_memory_weights.cdc": {flowserviceaccountScriptsGet_execution_memory_weightsCdc, map[string]*bintree{}},
			"get_fees_balance.cdc": {flowserviceaccountScriptsGet_fees_balanceCdc, map[string]*bintree{}},
			"get_is_account_creation_restricted.cdc": {flowserviceaccountScriptsGet_is_account_creation_restrictedCdc, map[string]*bintree{}},
			"get_is_account_creator.cdc": {flowserviceaccountScriptsGet_is_account_creatorCdc, map[string]*bintree{}},
			"get_tx_fee_parameters.cdc": {flowserviceaccountScriptsGet_tx_fee_parametersCdc, map[string]*bintree{}},
			"verify_payer_balance_for_tx_execution.cdc": {flowserviceaccountScriptsVerify_payer_balance_for_tx_executionCdc, map[string]*bintree{}},
		}},
		"set_execution_effort_weights.cdc": {flowserviceaccountSet_execution_effort_weightsCdc, map[string]*bintree{}},
		"set_execution_memory_limit.cdc": {flowserviceaccountSet_execution_memory_limitCdc, map[string]*bintree{}},
		"set_execution_memory_weights.cdc": {flowserviceaccountSet_execution_memory_weightsCdc, map[string]*bintree{}},
		"set_is_account_creation_restricted.cdc": {flowserviceaccountSet_is_account_creation_restrictedCdc, map[string]*bintree{}},
		"set_tx_fee_parameters.cdc": {flowserviceaccountSet_tx_fee_parametersCdc, map[string]*bintree{}},
		"set_tx_fee_surge_factor.cdc": {flowserviceaccountSet_tx_fee_surge_factorCdc, map[string]*bintree{}},
	}},
	"accounts": {nil, map[string]*bintree{
		"add_key.cdc": {accountsAdd_keyCdc, map[string]*bintree{}},
		"create_new_account.cdc": {accountsCreate_new_accountCdc, map[string]*bintree{}},
		"revoke_key.cdc": {accountsRevoke_keyCdc, map[string]*bintree{}},
	}},
	"dkg": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"force_stop_dkg.cdc": {dkgAdminForce_stop_dkgCdc, map[string]*bintree{}},
			"publish_admin.cdc": {dkgAdminPublish_adminCdc, map[string]*bintree{}},
			"set_safe_threshold.cdc": {dkgAdminSet_safe_thresholdCdc, map[string]*bintree{}},
			"start_dkg.cdc": {dkgAdminStart_dkgCdc, map[string]*bintree{}},
			"stop_dkg.cdc": {dkgAdminStop_dkgCdc, map[string]*bintree{}},
		}},
		"create_participant.cdc": {dkgCreate_participantCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_consensus_nodes.cdc": {dkgScriptsGet_consensus_nodesCdc, map[string]*bintree{}},
			"get_dkg_canonical_final_submission.cdc": {dkgScriptsGet_dkg_canonical_final_submissionCdc, map[string]*bintree{}},
			"get_dkg_completed.cdc": {dkgScriptsGet_dkg_completedCdc, map[string]*bintree{}},
			"get_dkg_enabled.cdc": {dkgScriptsGet_dkg_enabledCdc, map[string]*bintree{}},
			"get_final_submissions.cdc": {dkgScriptsGet_final_submissionsCdc, map[string]*bintree{}},
			"get_latest_whiteboard_messages.cdc": {dkgScriptsGet_latest_whiteboard_messagesCdc, map[string]*bintree{}},
			"get_node_final_submission.cdc": {dkgScriptsGet_node_final_submissionCdc, map[string]*bintree{}},
			"get_node_has_submitted.cdc": {dkgScriptsGet_node_has_submittedCdc, map[string]*bintree{}},
			"get_node_is_claimed.cdc": {dkgScriptsGet_node_is_claimedCdc, map[string]*bintree{}},
			"get_node_is_registered.cdc": {dkgScriptsGet_node_is_registeredCdc, map[string]*bintree{}},
			"get_thresholds.cdc": {dkgScriptsGet_thresholdsCdc, map[string]*bintree{}},
			"get_whiteboard_messages.cdc": {dkgScriptsGet_whiteboard_messagesCdc, map[string]*bintree{}},
		}},
		"send_empty_final_submission.cdc": {dkgSend_empty_final_submissionCdc, map[string]*bintree{}},
		"send_final_submission.cdc": {dkgSend_final_submissionCdc, map[string]*bintree{}},
		"send_whiteboard_message.cdc": {dkgSend_whiteboard_messageCdc, map[string]*bintree{}},
	}},
	"epoch": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"advance_view.cdc": {epochAdminAdvance_viewCdc, map[string]*bintree{}},
			"calculate_rewards.cdc": {epochAdminCalculate_rewardsCdc, map[string]*bintree{}},
			"deploy_epoch.cdc": {epochAdminDeploy_epochCdc, map[string]*bintree{}},
			"deploy_qc_dkg.cdc": {epochAdminDeploy_qc_dkgCdc, map[string]*bintree{}},
			"pay_rewards.cdc": {epochAdminPay_rewardsCdc, map[string]*bintree{}},
			"recover_epoch.cdc": {epochAdminRecover_epochCdc, map[string]*bintree{}},
			"reset_epoch.cdc": {epochAdminReset_epochCdc, map[string]*bintree{}},
			"set_automatic_rewards.cdc": {epochAdminSet_automatic_rewardsCdc, map[string]*bintree{}},
			"set_bonus_tokens.cdc": {epochAdminSet_bonus_tokensCdc, map[string]*bintree{}},
			"update_clusters.cdc": {epochAdminUpdate_clustersCdc, map[string]*bintree{}},
			"update_dkg_phase_views.cdc": {epochAdminUpdate_dkg_phase_viewsCdc, map[string]*bintree{}},
			"update_epoch_config.cdc": {epochAdminUpdate_epoch_configCdc, map[string]*bintree{}},
			"update_epoch_timing_config.cdc": {epochAdminUpdate_epoch_timing_configCdc, map[string]*bintree{}},
			"update_epoch_views.cdc": {epochAdminUpdate_epoch_viewsCdc, map[string]*bintree{}},
			"update_reward.cdc": {epochAdminUpdate_rewardCdc, map[string]*bintree{}},
			"update_staking_views.cdc": {epochAdminUpdate_staking_viewsCdc, map[string]*bintree{}},
		}},
		"node": {nil, map[string]*bintree{
			"register_dkg_participant.cdc": {epochNodeRegister_dkg_participantCdc, map[string]*bintree{}},
			"register_node.cdc": {epochNodeRegister_nodeCdc, map[string]*bintree{}},
			"register_qc_voter.cdc": {epochNodeRegister_qc_voterCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_bonus_tokens.cdc": {epochScriptsGet_bonus_tokensCdc, map[string]*bintree{}},
			"get_config_metadata.cdc": {epochScriptsGet_config_metadataCdc, map[string]*bintree{}},
			"get_create_clusters.cdc": {epochScriptsGet_create_clustersCdc, map[string]*bintree{}},
			"get_current_view.cdc": {epochScriptsGet_current_viewCdc, map[string]*bintree{}},
			"get_epoch_counter.cdc": {epochScriptsGet_epoch_counterCdc, map[string]*bintree{}},
			"get_epoch_metadata.cdc": {epochScriptsGet_epoch_metadataCdc, map[string]*bintree{}},
			"get_epoch_phase.cdc": {epochScriptsGet_epoch_phaseCdc, map[string]*bintree{}},
			"get_epoch_timing_config.cdc": {epochScriptsGet_epoch_timing_configCdc, map[string]*bintree{}},
			"get_proposed_counter.cdc": {epochScriptsGet_proposed_counterCdc, map[string]*bintree{}},
			"get_randomize.cdc": {epochScriptsGet_randomizeCdc, map[string]*bintree{}},
			"get_target_end_time_for_epoch.cdc": {epochScriptsGet_target_end_time_for_epochCdc, map[string]*bintree{}},
		}},
	}},
	"flowToken": {nil, map[string]*bintree{
		"burn_tokens.cdc": {flowtokenBurn_tokensCdc, map[string]*bintree{}},
		"create_forwarder.cdc": {flowtokenCreate_forwarderCdc, map[string]*bintree{}},
		"mint_tokens.cdc": {flowtokenMint_tokensCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"get_balance.cdc": {flowtokenScriptsGet_balanceCdc, map[string]*bintree{}},
			"get_supply.cdc": {flowtokenScriptsGet_supplyCdc, map[string]*bintree{}},
		}},
		"setup_account.cdc": {flowtokenSetup_accountCdc, map[string]*bintree{}},
		"transfer_tokens.cdc": {flowtokenTransfer_tokensCdc, map[string]*bintree{}},
	}},
	"idTableStaking": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"add_approved_and_limits.cdc": {idtablestakingAdminAdd_approved_and_limitsCdc, map[string]*bintree{}},
			"add_approved_nodes.cdc": {idtablestakingAdminAdd_approved_nodesCdc, map[string]*bintree{}},
			"capability_end_epoch.cdc": {idtablestakingAdminCapability_end_epochCdc, map[string]*bintree{}},
			"change_candidate_limits.cdc": {idtablestakingAdminChange_candidate_limitsCdc, map[string]*bintree{}},
			"change_cut.cdc": {idtablestakingAdminChange_cutCdc, map[string]*bintree{}},
			"change_del_minimums.cdc": {idtablestakingAdminChange_del_minimumsCdc, map[string]*bintree{}},
			"change_minimums.cdc": {idtablestakingAdminChange_minimumsCdc, map[string]*bintree{}},
			"change_payout.cdc": {idtablestakingAdminChange_payoutCdc, map[string]*bintree{}},
			"end_epoch.cdc": {idtablestakingAdminEnd_epochCdc, map[string]*bintree{}},
			"end_epoch_change_payout.cdc": {idtablestakingAdminEnd_epoch_change_payoutCdc, map[string]*bintree{}},
			"end_staking.cdc": {idtablestakingAdminEnd_stakingCdc, map[string]*bintree{}},
			"move_tokens.cdc": {idtablestakingAdminMove_tokensCdc, map[string]*bintree{}},
			"pay_rewards.cdc": {idtablestakingAdminPay_rewardsCdc, map[string]*bintree{}},
			"remove_approved_nodes.cdc": {idtablestakingAdminRemove_approved_nodesCdc, map[string]*bintree{}},
			"remove_invalid_nodes.cdc": {idtablestakingAdminRemove_invalid_nodesCdc, map[string]*bintree{}},
			"remove_node.cdc": {idtablestakingAdminRemove_nodeCdc, map[string]*bintree{}},
			"scale_rewards_test.cdc": {idtablestakingAdminScale_rewards_testCdc, map[string]*bintree{}},
			"set_approved_nodes.cdc": {idtablestakingAdminSet_approved_nodesCdc, map[string]*bintree{}},
			"set_claimed.cdc": {idtablestakingAdminSet_claimedCdc, map[string]*bintree{}},
			"set_node_weight.cdc": {idtablestakingAdminSet_node_weightCdc, map[string]*bintree{}},
			"set_non_operational.cdc": {idtablestakingAdminSet_non_operationalCdc, map[string]*bintree{}},
			"set_open_access_node_slots.cdc": {idtablestakingAdminSet_open_access_node_slotsCdc, map[string]*bintree{}},
			"set_slot_limits.cdc": {idtablestakingAdminSet_slot_limitsCdc, map[string]*bintree{}},
			"start_staking.cdc": {idtablestakingAdminStart_stakingCdc, map[string]*bintree{}},
			"transfer_admin.cdc": {idtablestakingAdminTransfer_adminCdc, map[string]*bintree{}},
			"transfer_fees_admin.cdc": {idtablestakingAdminTransfer_fees_adminCdc, map[string]*bintree{}},
			"transfer_minter_deploy.cdc": {idtablestakingAdminTransfer_minter_deployCdc, map[string]*bintree{}},
			"upgrade_set_claimed.cdc": {idtablestakingAdminUpgrade_set_claimedCdc, map[string]*bintree{}},
			"upgrade_staking.cdc": {idtablestakingAdminUpgrade_stakingCdc, map[string]*bintree{}},
		}},
		"delegation": {nil, map[string]*bintree{
			"del_request_unstaking.cdc": {idtablestakingDelegationDel_request_unstakingCdc, map[string]*bintree{}},
			"del_stake_new_tokens.cdc": {idtablestakingDelegationDel_stake_new_tokensCdc, map[string]*bintree{}},
			"del_stake_rewarded.cdc": {idtablestakingDelegationDel_stake_rewardedCdc, map[string]*bintree{}},
			"del_stake_unstaked.cdc": {idtablestakingDelegationDel_stake_unstakedCdc, map[string]*bintree{}},
			"del_withdraw_reward_tokens.cdc": {idtablestakingDelegationDel_withdraw_reward_tokensCdc, map[string]*bintree{}},
			"del_withdraw_unstaked_tokens.cdc": {idtablestakingDelegationDel_withdraw_unstaked_tokensCdc, map[string]*bintree{}},
			"get_delegator_committed.cdc": {idtablestakingDelegationGet_delegator_committedCdc, map[string]*bintree{}},
			"get_delegator_info.cdc": {idtablestakingDelegationGet_delegator_infoCdc, map[string]*bintree{}},
			"get_delegator_info_from_address.cdc": {idtablestakingDelegationGet_delegator_info_from_addressCdc, map[string]*bintree{}},
			"get_delegator_request.cdc": {idtablestakingDelegationGet_delegator_requestCdc, map[string]*bintree{}},
			"get_delegator_rewarded.cdc": {idtablestakingDelegationGet_delegator_rewardedCdc, map[string]*bintree{}},
			"get_delegator_staked.cdc": {idtablestakingDelegationGet_delegator_stakedCdc, map[string]*bintree{}},
			"get_delegator_unstaked.cdc": {idtablestakingDelegationGet_delegator_unstakedCdc, map[string]*bintree{}},
			"get_delegator_unstaking.cdc": {idtablestakingDelegationGet_delegator_unstakingCdc, map[string]*bintree{}},
			"get_delegator_unstaking_request.cdc": {idtablestakingDelegationGet_delegator_unstaking_requestCdc, map[string]*bintree{}},
			"register_delegator.cdc": {idtablestakingDelegationRegister_delegatorCdc, map[string]*bintree{}},
			"register_many_delegators.cdc": {idtablestakingDelegationRegister_many_delegatorsCdc, map[string]*bintree{}},
		}},
		"node": {nil, map[string]*bintree{
			"register_many_nodes.cdc": {idtablestakingNodeRegister_many_nodesCdc, map[string]*bintree{}},
			"register_node.cdc": {idtablestakingNodeRegister_nodeCdc, map[string]*bintree{}},
			"request_unstake.cdc": {idtablestakingNodeRequest_unstakeCdc, map[string]*bintree{}},
			"stake_new_tokens.cdc": {idtablestakingNodeStake_new_tokensCdc, map[string]*bintree{}},
			"stake_rewarded_tokens.cdc": {idtablestakingNodeStake_rewarded_tokensCdc, map[string]*bintree{}},
			"stake_unstaked_tokens.cdc": {idtablestakingNodeStake_unstaked_tokensCdc, map[string]*bintree{}},
			"unstake_all.cdc": {idtablestakingNodeUnstake_allCdc, map[string]*bintree{}},
			"update_networking_address.cdc": {idtablestakingNodeUpdate_networking_addressCdc, map[string]*bintree{}},
			"withdraw_reward_tokens.cdc": {idtablestakingNodeWithdraw_reward_tokensCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {idtablestakingNodeWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_approved_but_not_staked_nodes.cdc": {idtablestakingScriptsGet_approved_but_not_staked_nodesCdc, map[string]*bintree{}},
			"get_approved_nodes.cdc": {idtablestakingScriptsGet_approved_nodesCdc, map[string]*bintree{}},
			"get_candidate_limits.cdc": {idtablestakingScriptsGet_candidate_limitsCdc, map[string]*bintree{}},
			"get_candidate_nodes.cdc": {idtablestakingScriptsGet_candidate_nodesCdc, map[string]*bintree{}},
			"get_current_table.cdc": {idtablestakingScriptsGet_current_tableCdc, map[string]*bintree{}},
			"get_cut_percentage.cdc": {idtablestakingScriptsGet_cut_percentageCdc, map[string]*bintree{}},
			"get_del_stake_requirements.cdc": {idtablestakingScriptsGet_del_stake_requirementsCdc, map[string]*bintree{}},
			"get_delegators_below_min.cdc": {idtablestakingScriptsGet_delegators_below_minCdc, map[string]*bintree{}},
			"get_moves_pending.cdc": {idtablestakingScriptsGet_moves_pendingCdc, map[string]*bintree{}},
			"get_node_committed_tokens.cdc": {idtablestakingScriptsGet_node_committed_tokensCdc, map[string]*bintree{}},
			"get_node_info.cdc": {idtablestakingScriptsGet_node_infoCdc, map[string]*bintree{}},
			"get_node_info_from_address.cdc": {idtablestakingScriptsGet_node_info_from_addressCdc, map[string]*bintree{}},
			"get_node_initial_weight.cdc": {idtablestakingScriptsGet_node_initial_weightCdc, map[string]*bintree{}},
			"get_node_networking_addr.cdc": {idtablestakingScriptsGet_node_networking_addrCdc, map[string]*bintree{}},
			"get_node_networking_key.cdc": {idtablestakingScriptsGet_node_networking_keyCdc, map[string]*bintree{}},
			"get_node_rewarded_tokens.cdc": {idtablestakingScriptsGet_node_rewarded_tokensCdc, map[string]*bintree{}},
			"get_node_role.cdc": {idtablestakingScriptsGet_node_roleCdc, map[string]*bintree{}},
			"get_node_staked_tokens.cdc": {idtablestakingScriptsGet_node_staked_tokensCdc, map[string]*bintree{}},
			"get_node_staking_key.cdc": {idtablestakingScriptsGet_node_staking_keyCdc, map[string]*bintree{}},
			"get_node_total_commitment.cdc": {idtablestakingScriptsGet_node_total_commitmentCdc, map[string]*bintree{}},
			"get_node_total_commitment_without_delegators.cdc": {idtablestakingScriptsGet_node_total_commitment_without_delegatorsCdc, map[string]*bintree{}},
			"get_node_type_ratio.cdc": {idtablestakingScriptsGet_node_type_ratioCdc, map[string]*bintree{}},
			"get_node_unstaked_tokens.cdc": {idtablestakingScriptsGet_node_unstaked_tokensCdc, map[string]*bintree{}},
			"get_node_unstaking_request.cdc": {idtablestakingScriptsGet_node_unstaking_requestCdc, map[string]*bintree{}},
			"get_node_unstaking_tokens.cdc": {idtablestakingScriptsGet_node_unstaking_tokensCdc, map[string]*bintree{}},
			"get_non_operational.cdc": {idtablestakingScriptsGet_non_operationalCdc, map[string]*bintree{}},
			"get_proposed_table.cdc": {idtablestakingScriptsGet_proposed_tableCdc, map[string]*bintree{}},
			"get_role_counts.cdc": {idtablestakingScriptsGet_role_countsCdc, map[string]*bintree{}},
			"get_slot_limits.cdc": {idtablestakingScriptsGet_slot_limitsCdc, map[string]*bintree{}},
			"get_stake_requirements.cdc": {idtablestakingScriptsGet_stake_requirementsCdc, map[string]*bintree{}},
			"get_table.cdc": {idtablestakingScriptsGet_tableCdc, map[string]*bintree{}},
			"get_total_staked.cdc": {idtablestakingScriptsGet_total_stakedCdc, map[string]*bintree{}},
			"get_total_staked_by_type.cdc": {idtablestakingScriptsGet_total_staked_by_typeCdc, map[string]*bintree{}},
			"get_weekly_payout.cdc": {idtablestakingScriptsGet_weekly_payoutCdc, map[string]*bintree{}},
		}},
	}},
	"lockedTokens": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"admin_create_shared_accounts.cdc": {lockedtokensAdminAdmin_create_shared_accountsCdc, map[string]*bintree{}},
			"admin_deploy_contract.cdc": {lockedtokensAdminAdmin_deploy_contractCdc, map[string]*bintree{}},
			"admin_deposit_account_creator.cdc": {lockedtokensAdminAdmin_deposit_account_creatorCdc, map[string]*bintree{}},
			"admin_remove_delegator.cdc": {lockedtokensAdminAdmin_remove_delegatorCdc, map[string]*bintree{}},
			"check_main_registration.cdc": {lockedtokensAdminCheck_main_registrationCdc, map[string]*bintree{}},
			"check_shared_registration.cdc": {lockedtokensAdminCheck_shared_registrationCdc, map[string]*bintree{}},
			"custody_create_account_with_lease_account.cdc": {lockedtokensAdminCustody_create_account_with_lease_accountCdc, map[string]*bintree{}},
			"custody_create_only_lease_account.cdc": {lockedtokensAdminCustody_create_only_lease_accountCdc, map[string]*bintree{}},
			"custody_create_only_shared_account.cdc": {lockedtokensAdminCustody_create_only_shared_accountCdc, map[string]*bintree{}},
			"custody_create_shared_accounts.cdc": {lockedtokensAdminCustody_create_shared_accountsCdc, map[string]*bintree{}},
			"custody_setup_account_creator.cdc": {lockedtokensAdminCustody_setup_account_creatorCdc, map[string]*bintree{}},
			"deposit_locked_tokens.cdc": {lockedtokensAdminDeposit_locked_tokensCdc, map[string]*bintree{}},
			"recover_lease_tokens.cdc": {lockedtokensAdminRecover_lease_tokensCdc, map[string]*bintree{}},
			"unlock_tokens.cdc": {lockedtokensAdminUnlock_tokensCdc, map[string]*bintree{}},
			"unlock_tokens_for_multiple_accounts.cdc": {lockedtokensAdminUnlock_tokens_for_multiple_accountsCdc, map[string]*bintree{}},
		}},
		"delegator": {nil, map[string]*bintree{
			"delegate_new_tokens.cdc": {lockedtokensDelegatorDelegate_new_tokensCdc, map[string]*bintree{}},
			"delegate_rewarded_tokens.cdc": {lockedtokensDelegatorDelegate_rewarded_tokensCdc, map[string]*bintree{}},
			"delegate_unstaked_tokens.cdc": {lockedtokensDelegatorDelegate_unstaked_tokensCdc, map[string]*bintree{}},
			"get_delegator_id.cdc": {lockedtokensDelegatorGet_delegator_idCdc, map[string]*bintree{}},
			"get_delegator_info.cdc": {lockedtokensDelegatorGet_delegator_infoCdc, map[string]*bintree{}},
			"get_delegator_node_id.cdc": {lockedtokensDelegatorGet_delegator_node_idCdc, map[string]*bintree{}},
			"register_delegator.cdc": {lockedtokensDelegatorRegister_delegatorCdc, map[string]*bintree{}},
			"request_unstaking.cdc": {lockedtokensDelegatorRequest_unstakingCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens.cdc": {lockedtokensDelegatorWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens_locked.cdc": {lockedtokensDelegatorWithdraw_rewarded_tokens_lockedCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {lockedtokensDelegatorWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"staker": {nil, map[string]*bintree{
			"get_node_id.cdc": {lockedtokensStakerGet_node_idCdc, map[string]*bintree{}},
			"get_staker_info.cdc": {lockedtokensStakerGet_staker_infoCdc, map[string]*bintree{}},
			"register_node.cdc": {lockedtokensStakerRegister_nodeCdc, map[string]*bintree{}},
			"request_unstaking.cdc": {lockedtokensStakerRequest_unstakingCdc, map[string]*bintree{}},
			"stake_new_tokens.cdc": {lockedtokensStakerStake_new_tokensCdc, map[string]*bintree{}},
			"stake_rewarded_tokens.cdc": {lockedtokensStakerStake_rewarded_tokensCdc, map[string]*bintree{}},
			"stake_unstaked_tokens.cdc": {lockedtokensStakerStake_unstaked_tokensCdc, map[string]*bintree{}},
			"unstake_all.cdc": {lockedtokensStakerUnstake_allCdc, map[string]*bintree{}},
			"update_networking_address.cdc": {lockedtokensStakerUpdate_networking_addressCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens.cdc": {lockedtokensStakerWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
			"withdraw_rewarded_tokens_locked.cdc": {lockedtokensStakerWithdraw_rewarded_tokens_lockedCdc, map[string]*bintree{}},
			"withdraw_unstaked_tokens.cdc": {lockedtokensStakerWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
		}},
		"user": {nil, map[string]*bintree{
			"deposit_tokens.cdc": {lockedtokensUserDeposit_tokensCdc, map[string]*bintree{}},
			"get_locked_account_address.cdc": {lockedtokensUserGet_locked_account_addressCdc, map[string]*bintree{}},
			"get_locked_account_balance.cdc": {lockedtokensUserGet_locked_account_balanceCdc, map[string]*bintree{}},
			"get_multiple_unlock_limits.cdc": {lockedtokensUserGet_multiple_unlock_limitsCdc, map[string]*bintree{}},
			"get_total_balance.cdc": {lockedtokensUserGet_total_balanceCdc, map[string]*bintree{}},
			"get_unlock_limit.cdc": {lockedtokensUserGet_unlock_limitCdc, map[string]*bintree{}},
			"withdraw_tokens.cdc": {lockedtokensUserWithdraw_tokensCdc, map[string]*bintree{}},
		}},
	}},
	"nodeVersionBeacon": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"change_version_freeze_period.cdc": {nodeversionbeaconAdminChange_version_freeze_periodCdc, map[string]*bintree{}},
			"delete_version_boundary.cdc": {nodeversionbeaconAdminDelete_version_boundaryCdc, map[string]*bintree{}},
			"heartbeat.cdc": {nodeversionbeaconAdminHeartbeatCdc, map[string]*bintree{}},
			"set_protocol_state_version.cdc": {nodeversionbeaconAdminSet_protocol_state_versionCdc, map[string]*bintree{}},
			"set_version_boundary.cdc": {nodeversionbeaconAdminSet_version_boundaryCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_current_node_version.cdc": {nodeversionbeaconScriptsGet_current_node_versionCdc, map[string]*bintree{}},
			"get_current_node_version_as_string.cdc": {nodeversionbeaconScriptsGet_current_node_version_as_stringCdc, map[string]*bintree{}},
			"get_next_version_boundary.cdc": {nodeversionbeaconScriptsGet_next_version_boundaryCdc, map[string]*bintree{}},
			"get_next_version_update_sequence.cdc": {nodeversionbeaconScriptsGet_next_version_update_sequenceCdc, map[string]*bintree{}},
			"get_version_boundaries.cdc": {nodeversionbeaconScriptsGet_version_boundariesCdc, map[string]*bintree{}},
			"get_version_boundary_freeze_period.cdc": {nodeversionbeaconScriptsGet_version_boundary_freeze_periodCdc, map[string]*bintree{}},
		}},
	}},
	"quorumCertificate": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"publish_voter.cdc": {quorumcertificateAdminPublish_voterCdc, map[string]*bintree{}},
			"start_voting.cdc": {quorumcertificateAdminStart_votingCdc, map[string]*bintree{}},
			"stop_voting.cdc": {quorumcertificateAdminStop_votingCdc, map[string]*bintree{}},
		}},
		"create_voter.cdc": {quorumcertificateCreate_voterCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"generate_quorum_certificate.cdc": {quorumcertificateScriptsGenerate_quorum_certificateCdc, map[string]*bintree{}},
			"get_cluster.cdc": {quorumcertificateScriptsGet_clusterCdc, map[string]*bintree{}},
			"get_cluster_complete.cdc": {quorumcertificateScriptsGet_cluster_completeCdc, map[string]*bintree{}},
			"get_cluster_node_weights.cdc": {quorumcertificateScriptsGet_cluster_node_weightsCdc, map[string]*bintree{}},
			"get_cluster_vote_threshold.cdc": {quorumcertificateScriptsGet_cluster_vote_thresholdCdc, map[string]*bintree{}},
			"get_cluster_votes.cdc": {quorumcertificateScriptsGet_cluster_votesCdc, map[string]*bintree{}},
			"get_cluster_weight.cdc": {quorumcertificateScriptsGet_cluster_weightCdc, map[string]*bintree{}},
			"get_clusters.cdc": {quorumcertificateScriptsGet_clustersCdc, map[string]*bintree{}},
			"get_node_has_voted.cdc": {quorumcertificateScriptsGet_node_has_votedCdc, map[string]*bintree{}},
			"get_node_weight.cdc": {quorumcertificateScriptsGet_node_weightCdc, map[string]*bintree{}},
			"get_qc_enabled.cdc": {quorumcertificateScriptsGet_qc_enabledCdc, map[string]*bintree{}},
			"get_voter_is_registered.cdc": {quorumcertificateScriptsGet_voter_is_registeredCdc, map[string]*bintree{}},
			"get_voting_completed.cdc": {quorumcertificateScriptsGet_voting_completedCdc, map[string]*bintree{}},
		}},
		"submit_vote.cdc": {quorumcertificateSubmit_voteCdc, map[string]*bintree{}},
	}},
	"randomBeaconHistory": {nil, map[string]*bintree{
		"scripts": {nil, map[string]*bintree{
			"get_backfiller_max_entries.cdc": {randombeaconhistoryScriptsGet_backfiller_max_entriesCdc, map[string]*bintree{}},
			"get_latest_source_of_randomness.cdc": {randombeaconhistoryScriptsGet_latest_source_of_randomnessCdc, map[string]*bintree{}},
			"get_source_of_randomness.cdc": {randombeaconhistoryScriptsGet_source_of_randomnessCdc, map[string]*bintree{}},
			"get_source_of_randomness_page.cdc": {randombeaconhistoryScriptsGet_source_of_randomness_pageCdc, map[string]*bintree{}},
		}},
		"transactions": {nil, map[string]*bintree{
			"set_backfiller_max_entries.cdc": {randombeaconhistoryTransactionsSet_backfiller_max_entriesCdc, map[string]*bintree{}},
		}},
	}},
	"stakingCollection": {nil, map[string]*bintree{
		"close_stake.cdc": {stakingcollectionClose_stakeCdc, map[string]*bintree{}},
		"create_machine_account.cdc": {stakingcollectionCreate_machine_accountCdc, map[string]*bintree{}},
		"create_new_tokenholder_acct.cdc": {stakingcollectionCreate_new_tokenholder_acctCdc, map[string]*bintree{}},
		"deploy_collection_contract.cdc": {stakingcollectionDeploy_collection_contractCdc, map[string]*bintree{}},
		"register_delegator.cdc": {stakingcollectionRegister_delegatorCdc, map[string]*bintree{}},
		"register_multiple_delegators.cdc": {stakingcollectionRegister_multiple_delegatorsCdc, map[string]*bintree{}},
		"register_multiple_nodes.cdc": {stakingcollectionRegister_multiple_nodesCdc, map[string]*bintree{}},
		"register_node.cdc": {stakingcollectionRegister_nodeCdc, map[string]*bintree{}},
		"register_node_old.cdc": {stakingcollectionRegister_node_oldCdc, map[string]*bintree{}},
		"request_unstaking.cdc": {stakingcollectionRequest_unstakingCdc, map[string]*bintree{}},
		"restake_all_stakers.cdc": {stakingcollectionRestake_all_stakersCdc, map[string]*bintree{}},
		"scripts": {nil, map[string]*bintree{
			"does_account_have_staking_collection.cdc": {stakingcollectionScriptsDoes_account_have_staking_collectionCdc, map[string]*bintree{}},
			"get_all_delegator_info.cdc": {stakingcollectionScriptsGet_all_delegator_infoCdc, map[string]*bintree{}},
			"get_all_node_info.cdc": {stakingcollectionScriptsGet_all_node_infoCdc, map[string]*bintree{}},
			"get_delegator_ids.cdc": {stakingcollectionScriptsGet_delegator_idsCdc, map[string]*bintree{}},
			"get_does_stake_exist.cdc": {stakingcollectionScriptsGet_does_stake_existCdc, map[string]*bintree{}},
			"get_locked_tokens_used.cdc": {stakingcollectionScriptsGet_locked_tokens_usedCdc, map[string]*bintree{}},
			"get_machine_account_address.cdc": {stakingcollectionScriptsGet_machine_account_addressCdc, map[string]*bintree{}},
			"get_machine_accounts.cdc": {stakingcollectionScriptsGet_machine_accountsCdc, map[string]*bintree{}},
			"get_node_ids.cdc": {stakingcollectionScriptsGet_node_idsCdc, map[string]*bintree{}},
			"get_unlocked_tokens_used.cdc": {stakingcollectionScriptsGet_unlocked_tokens_usedCdc, map[string]*bintree{}},
		}},
		"setup_staking_collection.cdc": {stakingcollectionSetup_staking_collectionCdc, map[string]*bintree{}},
		"stake_new_tokens.cdc": {stakingcollectionStake_new_tokensCdc, map[string]*bintree{}},
		"stake_rewarded_tokens.cdc": {stakingcollectionStake_rewarded_tokensCdc, map[string]*bintree{}},
		"stake_unstaked_tokens.cdc": {stakingcollectionStake_unstaked_tokensCdc, map[string]*bintree{}},
		"test": {nil, map[string]*bintree{
			"deposit_tokens.cdc": {stakingcollectionTestDeposit_tokensCdc, map[string]*bintree{}},
			"get_tokens.cdc": {stakingcollectionTestGet_tokensCdc, map[string]*bintree{}},
		}},
		"transfer_delegator.cdc": {stakingcollectionTransfer_delegatorCdc, map[string]*bintree{}},
		"transfer_node.cdc": {stakingcollectionTransfer_nodeCdc, map[string]*bintree{}},
		"unstake_all.cdc": {stakingcollectionUnstake_allCdc, map[string]*bintree{}},
		"update_networking_address.cdc": {stakingcollectionUpdate_networking_addressCdc, map[string]*bintree{}},
		"withdraw_from_machine_account.cdc": {stakingcollectionWithdraw_from_machine_accountCdc, map[string]*bintree{}},
		"withdraw_rewarded_tokens.cdc": {stakingcollectionWithdraw_rewarded_tokensCdc, map[string]*bintree{}},
		"withdraw_unstaked_tokens.cdc": {stakingcollectionWithdraw_unstaked_tokensCdc, map[string]*bintree{}},
	}},
	"stakingProxy": {nil, map[string]*bintree{
		"add_node_info.cdc": {stakingproxyAdd_node_infoCdc, map[string]*bintree{}},
		"get_node_info.cdc": {stakingproxyGet_node_infoCdc, map[string]*bintree{}},
		"register_node.cdc": {stakingproxyRegister_nodeCdc, map[string]*bintree{}},
		"remove_node_info.cdc": {stakingproxyRemove_node_infoCdc, map[string]*bintree{}},
		"remove_staking_proxy.cdc": {stakingproxyRemove_staking_proxyCdc, map[string]*bintree{}},
		"request_unstaking.cdc": {stakingproxyRequest_unstakingCdc, map[string]*bintree{}},
		"setup_node_account.cdc": {stakingproxySetup_node_accountCdc, map[string]*bintree{}},
		"stake_new_tokens.cdc": {stakingproxyStake_new_tokensCdc, map[string]*bintree{}},
		"stake_unstaked_tokens.cdc": {stakingproxyStake_unstaked_tokensCdc, map[string]*bintree{}},
		"unstake_all.cdc": {stakingproxyUnstake_allCdc, map[string]*bintree{}},
		"withdraw_rewards.cdc": {stakingproxyWithdraw_rewardsCdc, map[string]*bintree{}},
		"withdraw_unstaked.cdc": {stakingproxyWithdraw_unstakedCdc, map[string]*bintree{}},
	}},
	"storageFees": {nil, map[string]*bintree{
		"admin": {nil, map[string]*bintree{
			"set_parameters.cdc": {storagefeesAdminSet_parametersCdc, map[string]*bintree{}},
		}},
		"scripts": {nil, map[string]*bintree{
			"get_account_available_balance.cdc": {storagefeesScriptsGet_account_available_balanceCdc, map[string]*bintree{}},
			"get_accounts_capacity_for_transaction_storage_check.cdc": {storagefeesScriptsGet_accounts_capacity_for_transaction_storage_checkCdc, map[string]*bintree{}},
			"get_storage_capacity.cdc": {storagefeesScriptsGet_storage_capacityCdc, map[string]*bintree{}},
			"get_storage_fee_conversion.cdc": {storagefeesScriptsGet_storage_fee_conversionCdc, map[string]*bintree{}},
			"get_storage_fee_min.cdc": {storagefeesScriptsGet_storage_fee_minCdc, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
