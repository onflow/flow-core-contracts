// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/idTable/change_initial_weight.cdc (872B)
// ../../../transactions/idTable/create_node.cdc (1.254kB)
// ../../../transactions/idTable/get_current_table.cdc (229B)
// ../../../transactions/idTable/get_node_initial_weight.cdc (447B)
// ../../../transactions/idTable/get_node_networking_addr.cdc (463B)
// ../../../transactions/idTable/get_node_networking_key.cdc (455B)
// ../../../transactions/idTable/get_node_role.cdc (435B)
// ../../../transactions/idTable/get_node_staking_key.cdc (445B)
// ../../../transactions/idTable/get_previous_table.cdc (239B)
// ../../../transactions/idTable/get_proposed_table.cdc (243B)
// ../../../transactions/idTable/remove_node.cdc (637B)
// ../../../transactions/idTable/update_table.cdc (756B)
// ../../../transactions/inspect_field.cdc (122B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TransactionsIdtableChange_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x8f\x1c\x8a\x03\xc6\xea\xa1\xf4\x60\xda\x06\x37\x4e\x41\x10\x7a\x88\x1d\x4a\x8f\xeb\xd5\x48\xda\xb2\x9e\x11\xab\x51\x94\x50\xf2\xdd\x8b\x76\x2d\x37\x4a\xd3\x3d\x89\x99\xa7\x37\xbf\xf9\xe3\x8e\xad\x04\xc5\x37\x2f\x43\x51\x12\xab\xd3\xa7\xbd\x39\x78\x42\x15\xe4\x88\xf7\x8f\xc5\xf6\xe6\xfb\xbe\xd8\xff\xdc\x6f\xbe\xde\xde\x6c\xb6\xdb\xbb\x9b\xdd\x2e\xcb\xf2\x1c\xfb\xc6\x75\xd0\x60\xb8\x33\x56\x9d\x30\xac\xf1\xbe\x83\x36\x84\xaa\xe7\x14\xd2\xc6\x28\x4c\xd7\xb9\x9a\x53\xa6\x0d\xd2\x4a\x47\x25\xdc\xa9\x16\x74\x2c\x36\xfa\xa9\x44\x85\xed\x43\x20\xd6\x14\x5f\xc2\x70\x39\x33\x98\xa5\xa7\x7f\xda\x40\x0f\x4e\xfa\xee\xaf\x59\xa1\x18\x9c\xf7\x10\xf6\x4f\x38\x50\x64\xa3\x12\x46\xa3\xfe\x40\xb5\x63\x76\x5c\x43\x2a\x18\x30\x0d\xa0\x56\x6c\x93\x65\x2f\xfa\x59\xb8\x72\x8d\x9d\x06\xc7\xf5\x72\x94\xfc\x20\x57\x37\xba\xc6\x7d\xc1\xfa\xf1\xc3\x12\x56\x7a\x56\x0a\x53\xe0\x12\xbf\xb3\x0c\x00\xf2\x1c\xb7\x62\x8d\xc7\x83\x09\x2e\x4d\x52\x02\x0c\x02\x55\x14\x88\xed\x99\xba\xd8\x22\x4d\x7a\x53\x1e\x1d\x43\x0e\xbf\xc8\x6a\xb4\xf0\xa4\x30\x63\xf0\x8e\xaa\x35\xde\xfd\xb3\x9b\x55\xfc\x23\x95\x6b\x03\xb5\x26\xd0\xc2\x58\xab\x6b\x6c\x7a\x6d\x36\x36\xa2\x8d\x40\x38\xbd\x3c\xc7\x41\x42\x90\xe1\x2d\x0e\xf3\xba\xfc\xf8\x3a\xf2\xd5\x6a\x62\xc0\x67\x8c\xf6\xab\xe4\xf1\xe9\x7f\x40\x5f\x16\xe3\xcd\xac\x91\x77\x2a\xc1\xd4\x94\x57\xaf\x75\x51\x76\x79\x2e\x32\xbe\xab\x2b\xb4\x86\x9d\x5d\x5c\x5c\x4b\xef\x4b\xb0\xe8\xc4\x3a\x23\x3d\x4f\x2b\x42\x5d\x24\x93\xe7\x34\x03\x7a\x24\xdb\x2b\xcd\x1b\xbe\xef\xe8\x45\x7b\x33\xaf\xbe\x2d\x8d\xa6\xec\x10\xb7\xfa\x76\xdb\xab\xa4\x2b\xd8\xa9\x33\x3e\xed\x7f\x11\x0f\xe5\x7a\xda\xfd\xe9\x08\x96\x70\xe5\xec\x48\xce\x9f\x13\xe7\xf3\x9f\x00\x00\x00\xff\xff\x99\xc3\xf2\x12\x68\x03\x00\x00"

func TransactionsIdtableChange_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableChange_initial_weightCdc,
		"../../../transactions/idTable/change_initial_weight.cdc",
	)
}

func TransactionsIdtableChange_initial_weightCdc() (*asset, error) {
	bytes, err := TransactionsIdtableChange_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/change_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x9f, 0x11, 0x3e, 0x38, 0xbe, 0x2f, 0xbe, 0xe7, 0xc5, 0x19, 0xef, 0xd6, 0x73, 0x1e, 0xe3, 0xb, 0x73, 0x5e, 0x84, 0xc9, 0xd4, 0x9f, 0x55, 0xab, 0x79, 0xa0, 0x90, 0x57, 0xb5, 0xe1, 0x80}}
	return a, nil
}

var _TransactionsIdtableCreate_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6b\xdb\x4c\x10\xbd\xeb\x57\x0c\x39\x7c\xd8\x10\xa4\xef\x50\x4a\x11\x4d\x83\x1a\xbb\x20\x1a\x42\x89\x55\x4a\x8f\xeb\xdd\x91\xb5\xad\xbc\x23\x46\xa3\x2a\xa1\xe4\xbf\x97\x5d\x45\x8d\x2d\xdb\x2d\xee\x1e\x84\x76\x67\xf6\xcd\xd3\x9b\x37\xb2\xdb\x86\x58\xe0\x43\x4d\x7d\x6e\xd0\x89\x95\xc7\x42\xad\x6b\x84\x92\x69\x0b\xff\x3f\xe4\x8b\xe5\x5d\x91\x17\x5f\x8b\xec\xfd\xed\x32\x5b\x2c\xee\x97\xab\x55\x14\x25\x09\x14\x95\x6d\x41\x58\xb9\x56\x69\xb1\xe4\x40\x33\x2a\xc1\x16\x14\x38\xec\xc1\x91\x41\x68\x85\x3b\x2d\x40\xeb\x6f\xa8\xc5\x5f\x52\xce\x40\xd7\x98\x90\x27\x15\x42\xc3\xd4\x50\x8b\x06\xc6\xda\x10\x8a\x47\xd1\x0e\xf0\xcc\x9a\x14\x56\xc2\xd6\x6d\x2e\x21\x82\x9d\xc5\x54\x63\x0a\x9f\x73\x27\x6f\x26\x11\x87\xd2\x13\x7f\xb7\x6e\x93\x19\xc3\xd8\xb6\x27\x10\x5e\xf2\x3e\xe2\xe3\x89\x9c\x56\xd4\x9f\x13\xac\xb3\x62\x55\xfd\x05\xed\xa6\x92\x81\xcf\xeb\x57\x93\x1c\x4d\x9d\x13\xe4\x31\x3a\x87\x9f\x51\x88\x27\x09\xdc\x92\x56\x35\xfc\x50\x6c\x07\xdd\x89\x41\x01\x63\x89\x8c\x4e\x23\x08\x05\xa5\xf2\xc5\x20\x0d\x64\x66\x6b\xdd\x28\xa9\x87\xa8\x51\x40\xf9\xc3\x7b\x2c\x53\xf8\xef\xa0\x93\x71\xb8\x31\x94\x6b\x18\x1b\xc5\x38\x53\x5a\x4b\x0a\x59\x27\x55\xa6\x03\x35\x4f\x68\xe4\x9a\x24\xb0\x26\x66\xea\x8f\xf1\x50\xd3\xf2\x41\x22\xac\xcb\x78\xe4\x00\x57\xe0\xe1\xe3\x01\xe3\xed\x29\x42\xef\x66\xde\x61\x29\x24\xad\x10\xab\x0d\x26\xe5\x34\x2f\xa4\xcd\xf7\x64\xbc\xbe\x86\x46\x39\xab\x67\x17\x37\xd4\xd5\x06\x1c\xc9\xc8\x75\x8f\xe9\x6f\xb5\x02\xa9\x8b\x01\xe4\x69\xd0\x00\x1f\x50\x77\x82\x3b\x1f\xec\x15\x74\xd8\xdf\x79\xcb\x5e\x1d\x8e\x42\xec\x03\xc1\x85\xd6\x4c\xda\xfa\xb7\x35\x38\xd4\x3f\xcf\xbc\x78\xc4\xc0\x07\x47\xff\x0c\x19\xac\xbc\xb7\x3d\x13\x6a\x77\x24\x5e\xde\xcf\x04\x99\x8c\xcd\xde\x76\x1e\x1d\xf7\x56\xac\x8c\xf9\xf4\xfc\xcf\x08\x5d\xc1\x86\x74\x75\x33\x0e\xd7\xf3\x94\x5d\x8e\xdd\x1c\xfb\xfe\xf4\x2b\x00\x00\xff\xff\x16\x0c\xdb\xe3\xe6\x04\x00\x00"

func TransactionsIdtableCreate_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableCreate_nodeCdc,
		"../../../transactions/idTable/create_node.cdc",
	)
}

func TransactionsIdtableCreate_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtableCreate_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/create_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0xc5, 0xaf, 0xca, 0x11, 0x4c, 0x32, 0xd2, 0x8a, 0x74, 0x95, 0xa6, 0x99, 0xaf, 0x47, 0x63, 0xea, 0xc4, 0x98, 0x77, 0x86, 0x68, 0x8f, 0x12, 0xbb, 0xb9, 0xc2, 0x12, 0xd4, 0x98, 0xdb, 0xdf}}
	return a, nil
}

var _TransactionsIdtableGet_current_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3f\x4f\x86\x30\x10\xc7\xf1\xbd\xaf\xe2\x37\x3e\x2c\xe0\x6c\xe2\x80\x82\x49\x13\xc3\x20\x5d\x1c\xf9\x73\x40\x63\xb9\x92\xf6\x1a\x25\xc6\xf7\x6e\x02\xc4\xe5\xd9\xef\x3e\xbf\xaf\x5d\x37\x1f\x04\xaf\xce\x7f\xe9\x91\x58\xac\xec\xa6\xeb\x1d\x61\x0a\x7e\xc5\xc3\xb7\xae\xea\xc6\x68\xf3\x61\xca\xe7\xb7\xba\xac\xaa\xf7\xba\x6d\x95\x2a\x0a\x98\xc5\x46\xc4\x21\xd8\x4d\x10\x48\x52\xe0\x08\x59\x08\x43\x0a\x81\x58\x60\x2f\x0d\x72\x70\x8e\x78\x96\x45\xa9\x2d\xf5\x98\x12\x63\xed\x2c\xdf\xb2\x47\x68\x16\xfc\x28\x00\x70\x24\x60\x3f\x92\xe6\xc9\xe3\xe9\xbe\x28\x9f\x49\x4a\xe7\x5e\x4e\xbf\xb9\x2e\x6f\x99\x3a\xbe\xcf\x84\x7f\x20\xff\xa4\x3d\xe6\xd7\xe8\xef\x5f\x00\x00\x00\xff\xff\xd4\x94\xe6\xa5\xe5\x00\x00\x00"

func TransactionsIdtableGet_current_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_current_tableCdc,
		"../../../transactions/idTable/get_current_table.cdc",
	)
}

func TransactionsIdtableGet_current_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_current_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_current_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x1d, 0x51, 0x14, 0x14, 0x54, 0xb1, 0xec, 0x8d, 0xdf, 0x4f, 0x52, 0x45, 0xa6, 0x21, 0xbb, 0x14, 0xab, 0xff, 0xb4, 0x70, 0xe, 0xf1, 0xb8, 0x5a, 0xe2, 0x10, 0x5f, 0xf, 0x3b, 0x7b, 0x3d}}
	return a, nil
}

var _TransactionsIdtableGet_node_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6b\xea\x40\x14\x86\xf7\xf9\x15\x2f\xae\x14\x44\xef\xe2\x72\x17\x82\x48\xae\x49\x31\x50\xac\x34\x29\x45\x4a\x21\x31\x39\x31\x07\x26\x33\x61\xe6\xa4\x5a\xc4\xff\x5e\x12\x43\x3f\xe8\xec\x86\xf3\x7e\xf1\x70\xdd\x18\x2b\xb8\x53\xe6\x14\x15\xa4\x85\xe5\x3d\xc9\x0e\x8a\x50\x5a\x53\xe3\xcf\x39\x0a\xc2\x6d\x12\x25\xfb\xc4\xff\x7f\x1f\xfa\x41\xf0\x18\xc6\xb1\xe7\xcd\xe7\x48\x2a\x76\x70\xb9\xe5\x46\x60\x49\x5a\xab\x1d\xa4\x22\xb0\x66\xe1\x4c\xe1\x44\x7c\xac\x04\xa6\x44\x06\x6d\x0a\xea\x3c\x7b\xd3\xa2\x6e\x9d\xa0\x64\xa5\xc0\x1a\xe9\x25\xdc\x3d\xac\x37\xbb\x8d\x1f\x87\xd7\x14\x27\x96\x0a\x9d\x30\x5d\xb7\xd6\x92\x96\x74\x8a\x74\x67\xe9\x8d\x4d\xeb\xd2\x29\x8c\xed\xbe\xa6\x31\x8e\x8a\x41\xdd\x55\xe6\xc6\x5a\xca\x05\x4d\x95\x39\xf2\xbc\xa6\x3d\xa0\x6c\x35\xea\x8c\xf5\xb8\xab\x8e\x82\x05\x62\xb1\xac\x8f\x93\x05\x9e\x22\x2d\xff\xfe\xe2\xe2\x01\x80\x22\xe9\xc7\x45\xba\x34\x58\xfe\xa6\x30\x3b\x92\xf8\x4a\x7d\x5f\xb9\x1d\xe4\xe3\x89\xf7\x23\x02\xcb\xcf\xa4\x97\x5b\xe9\x6b\x7f\xef\xde\x6a\x85\x26\xd3\x9c\x8f\x47\x9d\xfb\x6b\xb8\x6b\x28\xe7\x92\xa9\xb8\x59\x03\x14\x86\x1c\xb4\x11\xd0\x99\x9d\x8c\x86\x8a\x1b\xde\x5e\x33\x1b\xf0\x3e\xf7\x74\xbd\xeb\x47\x00\x00\x00\xff\xff\x57\x5f\x36\xd3\xbf\x01\x00\x00"

func TransactionsIdtableGet_node_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_initial_weightCdc,
		"../../../transactions/idTable/get_node_initial_weight.cdc",
	)
}

func TransactionsIdtableGet_node_initial_weightCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xfa, 0xff, 0xfd, 0x23, 0xe8, 0x91, 0x89, 0x79, 0xd8, 0x2, 0x50, 0x6d, 0xef, 0x87, 0x9e, 0xb9, 0x18, 0x14, 0x9c, 0x22, 0x27, 0x46, 0xc6, 0x6d, 0xe8, 0xf4, 0xf2, 0xd2, 0x4e, 0x80, 0x14}}
	return a, nil
}

var _TransactionsIdtableGet_node_networking_addrCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x6b\xe2\x50\x14\xdd\xe7\x57\x1c\x5c\x29\x88\xce\x7a\x40\x24\x63\x32\x18\x18\x1c\x69\xb2\x91\x52\x48\x4c\x6e\xcc\xa5\xc9\xbb\xe1\xbd\x9b\x6a\x11\xff\x7b\x49\xb4\xda\xd2\xb7\x3a\x8f\x7b\xbe\x38\xdc\xb4\x62\x15\x7f\x6b\x39\x46\x05\x19\x65\x7d\x4f\xb2\x7d\x4d\x28\xad\x34\xf8\x75\x8a\x82\x70\x93\x44\xc9\x2e\xf1\xff\xfc\x0b\xfd\x20\x78\x0a\xe3\xd8\xf3\xe6\x73\x24\x15\x3b\xb8\xdc\x72\xab\xb0\xa4\x9d\x35\x0e\x5a\x11\x0c\xe9\x51\xec\x2b\x9b\x03\xfc\xa2\xb0\xe4\x1c\xa4\x44\x06\x23\x05\xf5\xba\x9d\x74\x68\x3a\xa7\x28\xb9\xae\xc1\x06\xe9\x39\xdc\xfe\x5f\xad\xb7\x6b\x3f\x0e\x2f\x29\x8e\xac\x15\x7a\x62\xba\xea\xac\x25\xa3\xe9\x14\xe9\xd6\xd2\x1b\x4b\xe7\xd2\x29\xc4\xf6\x5f\x69\xc5\x51\x71\x63\xf7\xb1\xb9\x58\x4b\xb9\xa2\xad\x32\x47\x9e\xd7\x76\x7b\x94\x9d\x41\x93\xb1\x19\xf7\xd1\x51\xf0\x1b\xb1\x5a\x36\x87\xc9\x27\xc0\xd9\x03\x80\x9a\x74\x28\x17\x99\x52\xb0\xf8\xb9\xc4\xec\x40\xea\xd7\xf5\xd7\x96\x9b\x1b\x7d\x3c\xf1\xbe\x59\x60\x71\x77\x7a\xbe\x86\xbe\x0c\xf7\xfe\x2d\x97\x68\x33\xc3\xf9\x78\xd4\xab\x1f\xc5\x5d\x4b\x39\x97\x4c\xc5\x55\x1a\xa0\x10\x72\x30\xa2\xa0\x13\x3b\x1d\x4d\xee\x0e\x03\xb8\x4e\x3d\x70\x67\x8f\xa9\x6f\x4b\x7b\x97\x8f\x00\x00\x00\xff\xff\xe8\xa9\x60\xe3\xcf\x01\x00\x00"

func TransactionsIdtableGet_node_networking_addrCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_networking_addrCdc,
		"../../../transactions/idTable/get_node_networking_addr.cdc",
	)
}

func TransactionsIdtableGet_node_networking_addrCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_networking_addrCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_networking_addr.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x1, 0x91, 0x8c, 0xea, 0x8, 0xd8, 0x22, 0x66, 0x36, 0xe1, 0x78, 0x57, 0x1b, 0xcc, 0x5d, 0xb3, 0xa1, 0x11, 0xf1, 0x54, 0x8c, 0xee, 0xa6, 0x3, 0x49, 0xdf, 0xf9, 0x11, 0xf7, 0x7b, 0x12}}
	return a, nil
}

var _TransactionsIdtableGet_node_networking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\xab\xda\x40\x14\xdd\xe7\x57\x1c\x5c\x29\x88\x76\x5d\x10\x49\x4d\x8a\xa1\xc5\x4a\x93\x8d\x94\x42\x62\x72\x63\x2e\x26\x73\xc3\xcc\x4d\x55\xc4\xff\x5e\x12\x7d\xfa\x1e\x6f\x56\x67\xb8\xe7\x8b\xc3\x4d\x2b\x56\xf1\xbd\x96\x53\x54\x90\x51\xd6\x4b\x92\xed\x6b\x42\x69\xa5\xc1\x97\x73\x14\x84\x9b\x24\x4a\x76\x89\xff\xed\x67\xe8\x07\xc1\xef\x30\x8e\x3d\x6f\x3e\x47\x52\xb1\x83\xcb\x2d\xb7\x0a\x4b\xda\x59\xe3\xa0\x15\xc1\x90\x9e\xc4\x1e\xd9\x1c\x70\xa4\x0b\xa4\x44\x06\x23\x05\xf5\x9a\x9d\x74\x68\x3a\xa7\x28\xb9\xae\xc1\x06\xe9\x35\xdc\xfe\x5a\xad\xb7\x6b\x3f\x0e\x6f\x29\x4e\xac\x15\x7a\x62\xba\xea\xac\x25\xa3\xe9\x14\xe9\xd6\xd2\x3f\x96\xce\xa5\x53\x88\xed\xbf\xd2\x8a\xa3\xe2\xc1\xee\x23\x73\xb1\x96\x72\x45\x5b\x65\x8e\x3c\xaf\xed\xf6\x28\x3b\x83\x26\x63\x33\xee\xa3\xa3\xe0\x2b\x62\xb5\x6c\x0e\x93\x37\x80\xab\x07\x00\x35\xe9\x50\x2e\x32\xa5\x60\xf1\x79\x85\xd9\x81\xd4\xaf\xeb\xf7\x2d\x37\x0f\xfa\x78\xe2\x7d\xb0\xc0\xe2\xe9\xf4\xe7\x1e\xfa\x77\xb8\xf7\x6f\xb9\x44\x9b\x19\xce\xc7\xa3\x5e\xfd\x2a\xee\x5a\xca\xb9\x64\x2a\xee\xd2\x00\x85\x90\x83\x11\x05\x9d\xd9\xe9\x68\xf2\x74\x18\xc0\x7d\xe6\x81\x3b\x7b\xcd\xfc\x83\x2e\xde\xed\x7f\x00\x00\x00\xff\xff\xdc\x85\x1b\x08\xc7\x01\x00\x00"

func TransactionsIdtableGet_node_networking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_networking_keyCdc,
		"../../../transactions/idTable/get_node_networking_key.cdc",
	)
}

func TransactionsIdtableGet_node_networking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_networking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_networking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x5d, 0x68, 0xb, 0x42, 0xff, 0x8a, 0x71, 0x80, 0xf1, 0xe1, 0x6, 0x3b, 0x6c, 0x27, 0xba, 0xd2, 0x94, 0xf2, 0xa3, 0x84, 0xbf, 0x34, 0x6c, 0x87, 0x9a, 0xe, 0x65, 0xe2, 0xc5, 0x45, 0xd2}}
	return a, nil
}

var _TransactionsIdtableGet_node_roleCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x51\x6b\xe2\x40\x14\x85\xdf\xf3\x2b\x0e\x3e\x29\x88\xee\xe3\x22\x88\x64\x4d\x16\x03\x8b\x2b\x4d\xfa\x20\xa5\x90\x98\xdc\x98\x81\xc9\xdc\x30\x73\x53\x2d\xe2\x7f\x2f\x13\xc5\xb6\x74\x9e\x66\x98\xef\x9e\x73\xee\x51\x6d\xc7\x56\xf0\x57\xf3\x29\xa9\xc8\x88\x92\xf7\xac\x38\x68\x42\x6d\xb9\xc5\xaf\x73\x12\xc5\xdb\x2c\xc9\xf6\x59\xf8\xe7\x5f\x1c\x46\xd1\x53\x9c\xa6\x41\x30\x9f\x23\x6b\x94\x83\x2b\xad\xea\x04\x96\xa4\xb7\xc6\x41\x1a\x82\x65\x4d\xe0\x1a\x05\x0c\x57\xe4\xc9\x3d\xf7\x68\x7b\x27\xa8\x95\xd6\x50\x06\xf9\x25\xde\xfd\x5f\x6f\x76\x9b\x30\x8d\xaf\x39\x4e\x4a\x1a\x78\x30\x5f\xf7\xd6\x92\x91\x7c\x8a\x7c\x67\xe9\x4d\x71\xef\xf2\x29\xd8\xfa\x27\x77\xec\xa8\xba\xd3\xde\xa8\x64\x6b\xa9\x14\x74\x4d\xe1\x28\x08\xba\xfe\x80\xba\x37\x68\x0b\x65\xc6\xde\x3a\x89\x16\x48\xc5\x2a\x73\x9c\x2c\xf0\x9c\x18\xf9\x8d\x4b\x00\x00\x9a\x64\xc8\x96\x98\x9a\xb1\xfc\xb9\xfa\xec\x48\x12\x6a\xfd\x35\xe4\xf6\x8e\x8f\x27\xc1\x37\x09\x2c\x1f\x4a\x2f\x37\xcf\xd7\xe1\xdf\x9f\xd5\x0a\x5d\x61\x54\x39\x1e\xf9\xe9\xcf\xdc\xae\xa3\x52\xd5\x8a\xaa\xdb\x68\x84\x8a\xc9\xc1\xb0\x80\xce\xca\xc9\x68\xf2\x50\x18\x2e\xb7\x6e\x07\x76\xe6\xbb\x0d\xae\x1f\x01\x00\x00\xff\xff\x88\x06\x1d\x02\xb3\x01\x00\x00"

func TransactionsIdtableGet_node_roleCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_roleCdc,
		"../../../transactions/idTable/get_node_role.cdc",
	)
}

func TransactionsIdtableGet_node_roleCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_roleCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_role.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0xff, 0xac, 0xcb, 0x6f, 0xd7, 0xf0, 0xc5, 0x72, 0x6d, 0xbb, 0xbb, 0x8b, 0xda, 0xf0, 0x12, 0xa7, 0x3e, 0x86, 0x8e, 0x42, 0xe1, 0x95, 0x7e, 0xac, 0x5f, 0x5c, 0x55, 0x4e, 0x22, 0xef, 0xd2}}
	return a, nil
}

var _TransactionsIdtableGet_node_staking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x6b\xc2\x40\x10\xbd\xe7\x57\x3c\x3c\x29\x88\xf6\x5c\x10\x49\x4d\x8a\xc1\x62\xa5\xc9\x45\x4a\x21\x31\x99\x98\xa1\xc9\x6e\xd8\x9d\x54\x45\xfc\xef\x65\xa3\xfd\xa2\x7b\x58\x66\x98\xf7\xc5\xe3\xa6\xd5\x46\xf0\x58\xeb\x43\x54\x90\x12\x96\x53\x92\xed\x6a\x42\x69\x74\x83\xbb\x63\x14\x84\xeb\x24\x4a\xb6\x89\xff\xf0\x14\xfa\x41\xf0\x12\xc6\xb1\xe7\x4d\xa7\x48\x2a\xb6\xb0\xb9\xe1\x56\x60\x48\x3a\xa3\x2c\xa4\x22\x58\xc9\xde\x59\xed\xb1\xa2\x13\x74\x89\x0c\x4a\x17\xe4\x08\x5b\xdd\xa1\xe9\xac\xa0\xe4\xba\x06\x2b\xa4\xe7\x70\xf3\xbc\x58\x6e\x96\x7e\x1c\x5e\x52\x1c\x58\x2a\x38\x60\xba\xe8\x8c\x21\x25\xe9\x18\xe9\xc6\xd0\x07\xeb\xce\xa6\x63\x68\xe3\x56\xdd\x6a\x4b\xc5\x0d\xed\xfc\x72\x6d\x0c\xe5\x82\xb6\xca\x2c\x79\x5e\xdb\xed\x50\x76\x0a\x4d\xc6\x6a\xe8\xac\xa3\xe0\x1e\xb1\x18\x56\xfb\xd1\xd7\x80\xb3\x07\x00\x35\x49\x1f\x2e\x52\xa5\xc6\xec\x7f\x05\x93\x3d\x89\x5f\xd7\xbf\x53\xae\x6f\xf0\xe1\xc8\xfb\x23\x81\xd9\xb7\xd2\xeb\xd5\xf4\xad\xbf\xbb\x37\x9f\xa3\xcd\x14\xe7\xc3\x81\x63\xff\x04\xb7\x2d\xe5\x5c\x32\x15\x57\x6a\x80\x42\x93\x85\xd2\x02\x3a\xb2\x95\xc1\xa8\x57\xe8\xbf\x6b\xbf\x3d\x6e\x72\xeb\x77\x45\x27\xef\xf2\x19\x00\x00\xff\xff\xd4\x4f\xa4\x6f\xbd\x01\x00\x00"

func TransactionsIdtableGet_node_staking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_node_staking_keyCdc,
		"../../../transactions/idTable/get_node_staking_key.cdc",
	)
}

func TransactionsIdtableGet_node_staking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_node_staking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_node_staking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xa4, 0xc0, 0xfb, 0x73, 0x2e, 0x1d, 0x77, 0xd4, 0x32, 0xe3, 0xf9, 0xaa, 0xc4, 0x2b, 0x8c, 0xb, 0x91, 0xc8, 0x3b, 0x2e, 0xf4, 0x3f, 0xe9, 0xff, 0x18, 0x8, 0x7e, 0x53, 0x6c, 0xa9, 0x90}}
	return a, nil
}

var _TransactionsIdtableGet_previous_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\x4b\xc5\x30\x14\xc6\xf1\x3d\x9f\xe2\x19\xef\x5d\x7a\x9d\x05\x87\x4a\x2b\x04\xa4\x88\xcd\xe2\xd8\x97\xd3\x26\x98\x9e\x84\xe4\x44\x2d\xe2\x77\x17\xb5\xe8\xe0\x7a\x38\xcf\x8f\xbf\xdb\x62\x48\x82\x3b\x1f\x5e\xf5\x4c\x2c\x4e\x76\x33\x8c\x9e\xb0\xa4\xb0\xe1\xea\x4d\x37\x6d\x67\xb4\x79\x32\xf5\xed\x7d\x5b\x37\xcd\x63\xdb\xf7\x4a\x5d\x2e\x30\xd6\x65\xe4\x29\xb9\x28\x48\x24\x25\x71\x86\x58\x82\x3b\x14\xc8\x1f\xf3\x75\x8f\x89\x5e\x5c\x28\x19\x14\xc3\x64\x95\x8a\x65\xc4\x52\x18\xdb\xe0\xf8\x74\xbe\x86\x66\xc1\xbb\x02\x00\x4f\x02\x0e\x33\x69\x5e\x02\x6e\xfe\xa7\x55\x2b\x49\xed\xfd\xc3\x01\x76\xc7\xeb\xe9\xac\xbe\xe7\x3f\x31\xbf\x42\xf5\x4c\x7b\xae\x3c\xf1\x2a\x56\x7d\x7c\x06\x00\x00\xff\xff\xa5\x51\xa0\x0c\xef\x00\x00\x00"

func TransactionsIdtableGet_previous_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_previous_tableCdc,
		"../../../transactions/idTable/get_previous_table.cdc",
	)
}

func TransactionsIdtableGet_previous_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_previous_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_previous_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xef, 0x18, 0xbc, 0x49, 0x5c, 0x75, 0xb8, 0xd0, 0x5e, 0x1d, 0x37, 0xe7, 0x96, 0x77, 0x13, 0x88, 0xd3, 0xcc, 0x27, 0x2c, 0x50, 0xb5, 0x38, 0xd3, 0xa8, 0xc4, 0x75, 0xfa, 0x99, 0xc5, 0x95}}
	return a, nil
}

var _TransactionsIdtableGet_proposed_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6b\xc3\x30\x14\x84\x77\xfd\x8a\x1b\x93\xc5\xe9\x5c\xe8\xe0\x62\x17\x04\x25\x94\x46\x4b\xc7\x24\x7e\xb6\x44\xe5\xf7\x84\xf4\x4c\x6d\x4a\xff\x7b\xc1\x36\x5d\x3a\xdf\xdd\x77\x5f\x18\x93\x64\xc5\x4b\x94\x2f\xdb\x11\x6b\xd0\xc5\x5d\x6f\x91\xd0\x67\x19\xf1\x30\xdb\xa6\x3d\x3b\xeb\x3e\x5c\xfd\xfc\xda\xd6\x4d\xf3\xde\x5e\x2e\xc6\x9c\x4e\x70\x3e\x14\x94\x7b\x0e\x49\x91\x49\xa7\xcc\x05\xea\x09\x29\x4b\x92\x42\x1d\xc2\x8e\x83\x6e\x3c\xc9\x6b\xce\x34\x2b\x28\xc9\xdd\x1b\x93\xa6\x1b\xfa\x89\x31\x5e\x03\x1f\x8e\x8f\xb0\xac\xf8\x36\x00\x10\x49\xc1\xd2\x91\xe5\x5e\xf0\xf4\x5f\xaf\x1a\x48\xeb\x18\xdf\xf6\xb3\xf3\x5e\x3d\x1c\xcd\x3a\xdf\x84\xfe\x08\xd5\x27\x2d\xa5\x8a\xc4\x83\x7a\xf3\xf3\x1b\x00\x00\xff\xff\xe9\x54\x95\x3b\xf3\x00\x00\x00"

func TransactionsIdtableGet_proposed_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableGet_proposed_tableCdc,
		"../../../transactions/idTable/get_proposed_table.cdc",
	)
}

func TransactionsIdtableGet_proposed_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableGet_proposed_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/get_proposed_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x1d, 0xca, 0x90, 0xd1, 0x6, 0x1b, 0xa2, 0xdc, 0x79, 0x60, 0x5, 0x6f, 0xc, 0x9b, 0xe7, 0x18, 0xc9, 0x4e, 0x6d, 0x31, 0x8c, 0x67, 0xf9, 0xe2, 0x2b, 0x9d, 0x58, 0xe, 0x31, 0xc9, 0x61}}
	return a, nil
}

var _TransactionsIdtableRemove_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x8f\x1c\x8a\x02\xc1\xdb\x43\xe9\x41\xb4\x0d\x6a\xec\x82\x20\x84\x12\xab\x87\x1e\xd7\xbb\x23\x6b\x8b\xb4\x23\x46\xa3\xc4\xa5\xe4\xbb\x17\xfd\x0b\x89\xdb\xcc\x51\xac\x7e\xef\x37\xf3\x42\xdb\xb1\x28\xbe\x35\xfc\x58\x78\x8a\x1a\xf4\x77\x69\x0f\x0d\xa1\x12\x6e\xf1\xfe\x54\x6c\x77\x77\x65\x51\xfe\x2c\xf3\xaf\xb7\xbb\x7c\xbb\xbd\xdf\xed\xf7\x49\x62\x0c\xca\x3a\xf4\x50\xb1\xb1\xb7\x4e\x03\x47\x08\xb5\xfc\x40\x3d\x6c\x04\x9d\x42\xaf\x21\x1e\x11\xd9\x2f\x24\xad\x09\x9d\x70\xc7\x3d\x79\x84\x25\x09\x3a\x46\x25\xc9\x0b\x4c\x1a\x7c\x86\xbd\x4a\x88\xc7\x2b\x38\x1e\xa2\x92\x64\xf8\x51\x44\xfd\xf8\xe1\x12\x7f\x92\x04\x00\x8c\xc1\x2d\x3b\xdb\xe0\xc1\x4a\x98\x6d\x59\x60\x21\x54\x91\x50\x74\x04\xe5\x29\xb1\xd8\x62\xde\x26\xf7\x6d\x88\xe0\xc3\x2f\x72\x3a\x21\x1a\x52\xd8\xf1\xe3\x3d\x55\x19\xde\xfd\xb3\xff\x66\xfa\x63\x8e\xeb\x84\x3a\x2b\x94\x5a\xe7\x34\x43\x3e\x68\x9d\xbb\x49\x6d\x14\xc2\x32\xc6\xe0\xc0\x22\xfc\xf8\x3f\x0f\x7b\x1e\x3f\x4e\x4f\x4d\xb5\x59\x1d\xf0\x19\x23\x7e\x33\x33\x3e\xbd\x25\xf4\x25\x1d\xaf\x99\xc1\xf4\xca\x62\x8f\x64\xaa\xf3\x77\xd3\xb3\xcb\xe7\x90\x71\xae\xaf\xd1\xd9\x18\x5c\x7a\x71\xc3\x43\xe3\x11\x59\x57\xd7\x57\xa6\xcf\xd7\x9a\xa4\x2e\x66\xc8\xd3\x7c\x03\x3a\x91\x1b\x94\x5e\x2c\xfc\x4a\x7f\x33\xb7\xff\x7d\x69\xf8\x8e\x3d\xa5\xd4\xb1\xab\x6f\xd6\x0a\x97\x2e\xaf\x10\xfc\x0a\x7e\xfa\x1b\x00\x00\xff\xff\xfc\xb7\xec\x05\x7d\x02\x00\x00"

func TransactionsIdtableRemove_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableRemove_nodeCdc,
		"../../../transactions/idTable/remove_node.cdc",
	)
}

func TransactionsIdtableRemove_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtableRemove_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/remove_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x8a, 0xe3, 0x72, 0x96, 0x1e, 0x84, 0x10, 0x87, 0x15, 0xe3, 0xf7, 0x62, 0x81, 0xd2, 0xad, 0x5, 0x4b, 0x65, 0xc, 0xc6, 0x6f, 0x7a, 0x6, 0x6b, 0xe, 0x83, 0x6d, 0x31, 0xa8, 0x6d, 0xd7}}
	return a, nil
}

var _TransactionsIdtableUpdate_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdb\x40\x10\x85\xef\xfa\x15\x8f\x1c\x8a\x03\xc5\xea\xa1\xf4\x60\xda\x06\x37\x76\x41\x10\x72\x48\xdc\x43\x8f\xa3\xd5\xc8\xda\xb2\x9e\x11\xbb\xa3\x28\xa1\xe4\xbf\x17\x49\x96\x1b\xa7\xcd\x9c\xc4\xec\xec\x7b\xdf\xbe\x91\x3f\xb4\x1a\x0d\xdf\x83\xf6\x45\xc5\x62\xde\x9e\x76\x54\x06\x46\x1d\xf5\x80\x0f\x8f\xc5\x66\x7b\xbb\x2b\x76\x3f\x77\xeb\x6f\x37\xdb\xf5\x66\x73\xb7\xbd\xbf\xcf\xb2\x3c\xc7\xae\xf1\x09\x16\x49\x12\x39\xf3\x2a\x70\x14\x42\x82\x35\x8c\xba\x93\xa9\x65\x0d\x19\x28\x25\xbf\x97\xe9\xa4\x8d\xda\x6a\xe2\x0a\xfe\xe8\x05\x1b\xcc\x06\x3d\xd3\x71\xc2\x75\x31\xb2\xd8\xd4\x7f\x0f\x92\xea\x4c\xe0\xec\x78\xbe\xd3\x46\x7e\xf0\xda\xa5\xbf\x62\x85\xa1\xf7\x21\x40\x25\x3c\xa1\xe4\x91\x8d\x2b\x90\x8d\xf3\x25\xef\xbd\x88\x97\x3d\xb4\x06\x41\xb8\x07\xb7\xea\x9a\x2c\x7b\xf1\x9e\x85\xd3\x4e\x8c\xe3\x0a\x3f\x0a\xb1\x4f\x1f\x2f\xf1\x3b\xcb\x00\x20\xcf\x71\xa3\x8e\x02\x1e\x28\xfa\x29\x2a\x8d\x20\x44\xae\x39\xb2\xb8\x13\x56\xb1\xc1\x14\xe5\xba\x3a\x78\x81\x96\xbf\xd8\xd9\x28\x11\xd8\x40\x43\xf3\x8e\xeb\x15\xde\xfd\x13\xfe\x72\xbc\x31\xd9\xb5\x91\x5b\x8a\xbc\x20\xe7\x6c\x85\x75\x67\xcd\xda\x8d\x68\x03\x10\x8e\x95\xe7\x28\x35\x46\xed\xff\xc7\x41\xaf\xed\x87\x4a\x1c\xea\xe5\xcc\x80\x2f\x18\xe4\x97\x93\xc6\xe7\xb7\x80\xbe\x2e\x86\x9f\x62\x85\x3c\x99\x46\xda\x73\x5e\xbf\x9e\x1b\xc7\x2e\x4f\x26\x43\x5d\x5d\xa1\x25\xf1\x6e\x71\x71\xad\x5d\xa8\x20\x6a\x33\xeb\x19\xe9\x29\xad\x11\xea\x62\x12\x79\x9e\x32\xe0\x47\x76\x9d\xf1\x8b\x07\x9f\xe1\x2f\x93\x51\xb4\x5b\xee\xb7\xc3\x16\x17\x72\xfc\xb8\x9e\x17\x78\xdc\xe4\x2c\xf9\xfc\x27\x00\x00\xff\xff\x89\x13\xf5\x33\xf4\x02\x00\x00"

func TransactionsIdtableUpdate_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtableUpdate_tableCdc,
		"../../../transactions/idTable/update_table.cdc",
	)
}

func TransactionsIdtableUpdate_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtableUpdate_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTable/update_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x1e, 0x29, 0x6e, 0xf9, 0x8a, 0xf8, 0x28, 0xe0, 0xde, 0x53, 0x57, 0x53, 0x73, 0xa1, 0x27, 0xaf, 0xdd, 0xb6, 0xe8, 0xba, 0x9, 0x5e, 0x3a, 0x1, 0xa3, 0x9b, 0x39, 0xed, 0xc3, 0xbb, 0x0}}
	return a, nil
}

var _TransactionsInspect_fieldCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x09\x42\x31\x0c\x06\xe0\x7b\xa7\xf8\x8f\x7a\x91\x22\x5a\x1f\xde\xbc\x74\x01\x71\x80\xbe\x9a\x42\xc0\x26\x8f\x98\xea\x03\x71\x77\x17\x70\x81\x8f\xfb\xa2\xe6\xc8\x0f\x7d\x5f\xc9\x5e\x5c\xe9\x52\xab\x0e\x71\x34\xd3\x8e\xb8\xb6\xe9\x9e\x28\x1e\xa7\x34\xc7\xb2\x8f\xf5\x14\xc2\x32\x66\xb4\x21\xe8\x85\x65\xb3\x3d\xe3\x96\x79\x4d\x07\x7c\x02\x00\x18\xf9\x30\xf9\xe3\xed\xdc\x8a\x3c\x4b\x75\x56\xc9\x44\xe1\xfb\x0b\x00\x00\xff\xff\x7c\xe1\x51\x3b\x7a\x00\x00\x00"

func TransactionsInspect_fieldCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsInspect_fieldCdc,
		"../../../transactions/inspect_field.cdc",
	)
}

func TransactionsInspect_fieldCdc() (*asset, error) {
	bytes, err := TransactionsInspect_fieldCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/inspect_field.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xeb, 0x82, 0x68, 0x87, 0xc8, 0xaf, 0x97, 0x60, 0xf6, 0x63, 0x18, 0x23, 0x85, 0x7b, 0xb6, 0xf6, 0xbb, 0x8c, 0x4d, 0x40, 0x9c, 0x25, 0xc, 0xc5, 0x56, 0xa, 0xdf, 0x63, 0xa8, 0x28, 0xea}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../transactions/idTable/change_initial_weight.cdc":    TransactionsIdtableChange_initial_weightCdc,
	"../../../transactions/idTable/create_node.cdc":              TransactionsIdtableCreate_nodeCdc,
	"../../../transactions/idTable/get_current_table.cdc":        TransactionsIdtableGet_current_tableCdc,
	"../../../transactions/idTable/get_node_initial_weight.cdc":  TransactionsIdtableGet_node_initial_weightCdc,
	"../../../transactions/idTable/get_node_networking_addr.cdc": TransactionsIdtableGet_node_networking_addrCdc,
	"../../../transactions/idTable/get_node_networking_key.cdc":  TransactionsIdtableGet_node_networking_keyCdc,
	"../../../transactions/idTable/get_node_role.cdc":            TransactionsIdtableGet_node_roleCdc,
	"../../../transactions/idTable/get_node_staking_key.cdc":     TransactionsIdtableGet_node_staking_keyCdc,
	"../../../transactions/idTable/get_previous_table.cdc":       TransactionsIdtableGet_previous_tableCdc,
	"../../../transactions/idTable/get_proposed_table.cdc":       TransactionsIdtableGet_proposed_tableCdc,
	"../../../transactions/idTable/remove_node.cdc":              TransactionsIdtableRemove_nodeCdc,
	"../../../transactions/idTable/update_table.cdc":             TransactionsIdtableUpdate_tableCdc,
	"../../../transactions/inspect_field.cdc":                    TransactionsInspect_fieldCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"transactions": &bintree{nil, map[string]*bintree{
					"idTable": &bintree{nil, map[string]*bintree{
						"change_initial_weight.cdc":    &bintree{TransactionsIdtableChange_initial_weightCdc, map[string]*bintree{}},
						"create_node.cdc":              &bintree{TransactionsIdtableCreate_nodeCdc, map[string]*bintree{}},
						"get_current_table.cdc":        &bintree{TransactionsIdtableGet_current_tableCdc, map[string]*bintree{}},
						"get_node_initial_weight.cdc":  &bintree{TransactionsIdtableGet_node_initial_weightCdc, map[string]*bintree{}},
						"get_node_networking_addr.cdc": &bintree{TransactionsIdtableGet_node_networking_addrCdc, map[string]*bintree{}},
						"get_node_networking_key.cdc":  &bintree{TransactionsIdtableGet_node_networking_keyCdc, map[string]*bintree{}},
						"get_node_role.cdc":            &bintree{TransactionsIdtableGet_node_roleCdc, map[string]*bintree{}},
						"get_node_staking_key.cdc":     &bintree{TransactionsIdtableGet_node_staking_keyCdc, map[string]*bintree{}},
						"get_previous_table.cdc":       &bintree{TransactionsIdtableGet_previous_tableCdc, map[string]*bintree{}},
						"get_proposed_table.cdc":       &bintree{TransactionsIdtableGet_proposed_tableCdc, map[string]*bintree{}},
						"remove_node.cdc":              &bintree{TransactionsIdtableRemove_nodeCdc, map[string]*bintree{}},
						"update_table.cdc":             &bintree{TransactionsIdtableUpdate_tableCdc, map[string]*bintree{}},
					}},
					"inspect_field.cdc": &bintree{TransactionsInspect_fieldCdc, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
