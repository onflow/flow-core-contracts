{
  "network": "mainnet",
  "templates": [
    {
      "id": "SCO.01",
      "name": "Setup Staking Collection",
      "source": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport FlowIDTableStaking from 0x8624b52f9ddcd04a\nimport LockedTokens from 0x8d0e87b65159ae63\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: AuthAccount) {\n\n        // If there isn't already a staking collection\n        if signer.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.link\u003c\u0026LockedTokens.TokenHolder\u003e(/private/flowTokenHolder, target: LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.link\u003c\u0026FlowToken.Vault\u003e(/private/flowTokenVault, target: /storage/flowTokenVault)!\n            \n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.save(\u003c-FlowStakingCollection.createStakingCollection(unlockedVault: flowToken, tokenHolder: lockedHolder), to: FlowStakingCollection.StakingCollectionStoragePath)\n            } else {\n                signer.save(\u003c-FlowStakingCollection.createStakingCollection(unlockedVault: flowToken, tokenHolder: nil), to: FlowStakingCollection.StakingCollectionStoragePath)\n            }\n\n            // Create a public link to the staking collection\n            signer.link\u003c\u0026FlowStakingCollection.StakingCollection{FlowStakingCollection.StakingCollectionPublic}\u003e(\n                FlowStakingCollection.StakingCollectionPublicPath,\n                target: FlowStakingCollection.StakingCollectionStoragePath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.borrow\u003c\u0026FlowIDTableStaking.NodeStaker\u003e(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node \u003c- signer.load\u003c@FlowIDTableStaking.NodeStaker\u003e(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(\u003c-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.borrow\u003c\u0026FlowIDTableStaking.NodeDelegator\u003e(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator \u003c- signer.load\u003c@FlowIDTableStaking.NodeDelegator\u003e(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(\u003c-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "network": "mainnet",
      "hash": "0e5c2445c0b1016eed4f60c429f233aa0bb223a0d9ff2aedffce00a58037a2bf"
    },
    {
      "id": "SCO.02",
      "name": "Register Delegator",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "id",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "c5636d510872a16eb06996dacb43d6a28f8f72ff1b05b2eb03416cc711d9bb1f"
    },
    {
      "id": "SCO.03",
      "name": "Register Node",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            publicKeys: [String]?) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account) \n        {\n            if publicKeys == nil || publicKeys!.length == 0 {\n                panic(\"Cannot provide zero keys for the machine account\")\n            }\n            for key in publicKeys! {\n                machineAccount.addPublicKey(key.decodeHex())\n            }\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "id",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt8",
          "name": "role",
          "label": "Node Role",
          "sampleValues": [
            {
              "type": "UInt8",
              "value": "1"
            }
          ]
        },
        {
          "type": "String",
          "name": "networkingAddress",
          "label": "Networking Address",
          "sampleValues": [
            {
              "type": "String",
              "value": "flow-node.test:3569"
            }
          ]
        },
        {
          "type": "String",
          "name": "networkingKey",
          "label": "Networking Key",
          "sampleValues": [
            {
              "type": "String",
              "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4"
            }
          ]
        },
        {
          "type": "String",
          "name": "stakingKey",
          "label": "Staking Key",
          "sampleValues": [
            {
              "type": "String",
              "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3"
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        },
        {
          "type": "[String]?",
          "name": "publicKeys",
          "label": "Public Keys",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "Array",
                "value": [
                  {
                    "type": "String",
                    "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
                  }
                ]
              }
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "99997236b6d76caa298331d5cef77cbdf83c1af64584ece537a780ba4ac46883"
    },
    {
      "id": "SCO.04",
      "name": "Create Machine Account",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, publicKeys: [String]) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            if publicKeys == nil || publicKeys!.length == 0 {\n                panic(\"Cannot provide zero keys for the machine account\")\n            }\n            for key in publicKeys! {\n                machineAccount.addPublicKey(key.decodeHex())\n            }\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "id",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "[String]?",
          "name": "publicKseys",
          "label": "Public Keys",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "Array",
                "value": [
                  {
                    "type": "String",
                    "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
                  }
                ]
              }
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "c2442b498eea025099815ea613d6407407192dc12ad70e1a4f47936db804a841"
    },
    {
      "id": "SCO.05",
      "name": "Request Unstaking",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "a552951c5e6300a118610fbf2d36b3073ee266e1d26787d04717c141976ef78c"
    },
    {
      "id": "SCO.06",
      "name": "Stake New Tokens",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "8e10ac56db8ec5d5e0051d3c9608fabc8edd6abed983f6d3a254e7668a54b32b"
    },
    {
      "id": "SCO.07",
      "name": "Stake Rewarded Tokens",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "907c4cfd67a98a8003393c64dc74eb7a957b229352a266139a542bb105ac4c40"
    },
    {
      "id": "SCO.08",
      "name": "Stake Unstaked Tokens",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "082e690b9647182cf6969db1a0fa8e0f1728da6db01fe0d462e9f0841c268cbb"
    },
    {
      "id": "SCO.09",
      "name": "Unstake All",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "df9c6486baa6f8f685368ea216659239cb81fa8ebd9062a9723edb54ca0d7525"
    },
    {
      "id": "SCO.10",
      "name": "Withdraw Rewarded Tokens",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "27a2b60d538b8bb883b602ea83d1697986a29dd69a44a9209dc75affb9e63299"
    },
    {
      "id": "SCO.11",
      "name": "Withdraw Unstaked Tokens",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "6d50ab1ef3d74203081c38306da74f5ad8fdd489e49fba732f8ba194d0c781c8"
    },
    {
      "id": "SCO.12",
      "name": "Close Stake",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "ecdffc1ae67479bc20c06eba6c776ff37b9523660ff1cd3129a3924d92484884"
    },
    {
      "id": "SCO.13",
      "name": "Transfer Node",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeStaker object from an authorizers accoount\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: \u0026FlowStakingCollection.StakingCollection{FlowStakingCollection.StakingCollectionPublic}\n\n    prepare(account: AuthAccount) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.getCapability\u003c\u0026FlowStakingCollection.StakingCollection{FlowStakingCollection.StakingCollectionPublic}\u003e(FlowStakingCollection.StakingCollectionPublicPath).borrow()\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info for the specified node ID\")\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker \u003c- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(\u003c- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "Address",
          "name": "address",
          "label": "Address",
          "sampleValues": [
            {
              "type": "Address",
              "value": "0xe467b9dd11fa00df"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "cdc3a63d0c75ea95b414becb6fbb8f5a8004236d48661cd3c3d4f540ee4d422e"
    },
    {
      "id": "SCO.14",
      "name": "Transfer Delegator",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeDelegator object from an authorizers accoount\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: \u0026FlowStakingCollection.StakingCollection{FlowStakingCollection.StakingCollectionPublic}\n\n    prepare(account: AuthAccount) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.getCapability\u003c\u0026FlowStakingCollection.StakingCollection{FlowStakingCollection.StakingCollectionPublic}\u003e(FlowStakingCollection.StakingCollectionPublicPath).borrow()\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator \u003c- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(\u003c- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UInt32?",
          "name": "delegatorID",
          "label": "Delegator ID",
          "sampleValues": [
            {
              "type": "Optional",
              "value": {
                "type": "UInt32",
                "value": "42"
              }
            }
          ]
        },
        {
          "type": "Address",
          "name": "address",
          "label": "Address",
          "sampleValues": [
            {
              "type": "Address",
              "value": "0xe467b9dd11fa00df"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "b34d6fafcc5a4d0ed9cf92e168a08d0674c93341e2393ee72dde6664918ec240"
    },
    {
      "id": "SCO.15",
      "name": "Withdraw From Machine Account",
      "source": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: \u0026FlowStakingCollection.StakingCollection\n\n    prepare(account: AuthAccount) {\n        self.stakingCollectionRef = account.borrow\u003c\u0026FlowStakingCollection.StakingCollection\u003e(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow ref to StakingCollection\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "name": "nodeID",
          "label": "Node ID",
          "sampleValues": [
            {
              "type": "String",
              "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
            }
          ]
        },
        {
          "type": "UFix64",
          "name": "amount",
          "label": "Amount",
          "sampleValues": [
            {
              "type": "UFix64",
              "value": "92233720368.54775808"
            }
          ]
        }
      ],
      "network": "mainnet",
      "hash": "f9c48e18bda7f113e82711a4c95dfd151c6600ed9fbf46ceb22566d6c5728c6f"
    }
  ]
}